
STM32Bulb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800ac70  0800ac70  0001ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af10  0800af10  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af18  0800af18  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800af20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000094  0800afb4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800afb4  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6b8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400d  00000000  00000000  0003f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00043790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00044e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e9c  00000000  00000000  00046320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caf2  00000000  00000000  0006b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4514  00000000  00000000  00087cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c1c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006770  00000000  00000000  0015c218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac54 	.word	0x0800ac54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800ac54 	.word	0x0800ac54

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	f5ad 5d7c 	sub.w	sp, sp, #16128	; 0x3f00
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e92:	f001 f897 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e96:	f000 f9e5 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9a:	f000 fb8f 	bl	80015bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e9e:	f000 fa63 	bl	8001368 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ea2:	f000 fa8f 	bl	80013c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ea6:	f000 fabd 	bl	8001424 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000eaa:	f007 fbbd 	bl	8008628 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000eae:	f000 faef 	bl	8001490 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char commandString[100] = "R S 2000";
 8000eb2:	4adf      	ldr	r2, [pc, #892]	; (8001230 <main+0x3a8>)
 8000eb4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eba:	c303      	stmia	r3!, {r0, r1}
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000ec2:	f103 0309 	add.w	r3, r3, #9
 8000ec6:	225b      	movs	r2, #91	; 0x5b
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f007 fe96 	bl	8008bfc <memset>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	48d8      	ldr	r0, [pc, #864]	; (8001234 <main+0x3ac>)
 8000ed4:	f004 fdde 	bl	8005a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ed8:	2104      	movs	r1, #4
 8000eda:	48d6      	ldr	r0, [pc, #856]	; (8001234 <main+0x3ac>)
 8000edc:	f004 fdda 	bl	8005a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	48d4      	ldr	r0, [pc, #848]	; (8001234 <main+0x3ac>)
 8000ee4:	f004 fdd6 	bl	8005a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ee8:	210c      	movs	r1, #12
 8000eea:	48d2      	ldr	r0, [pc, #840]	; (8001234 <main+0x3ac>)
 8000eec:	f004 fdd2 	bl	8005a94 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int globalCounter = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000ef6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000efa:	6013      	str	r3, [r2, #0]

  int yellowSamples = 1000;
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f04:	f102 0220 	add.w	r2, r2, #32
 8000f08:	6013      	str	r3, [r2, #0]
  int yellowDelay = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f10:	f102 021c 	add.w	r2, r2, #28
 8000f14:	6013      	str	r3, [r2, #0]
  int yellowMaximum = floor(65535/512);
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f1c:	f102 0218 	add.w	r2, r2, #24
 8000f20:	6013      	str	r3, [r2, #0]
  int yellowShape[1000] = {0};
 8000f22:	f507 533b 	add.w	r3, r7, #11968	; 0x2ec0
 8000f26:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f2a:	3b08      	subs	r3, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f007 fe61 	bl	8008bfc <memset>
  GenerateRamp(yellowShape, yellowSamples, yellowMaximum, yellowDelay);
 8000f3a:	f507 503b 	add.w	r0, r7, #11968	; 0x2ec0
 8000f3e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000f42:	3808      	subs	r0, #8
 8000f44:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8000f48:	f103 031c 	add.w	r3, r3, #28
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f52:	f102 0218 	add.w	r2, r2, #24
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 8000f5c:	f101 0120 	add.w	r1, r1, #32
 8000f60:	6809      	ldr	r1, [r1, #0]
 8000f62:	f000 fc97 	bl	8001894 <GenerateRamp>
  int yellowPhase = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f6c:	f102 0214 	add.w	r2, r2, #20
 8000f70:	6013      	str	r3, [r2, #0]

  int orangeSamples = 1000;
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f7a:	f102 0210 	add.w	r2, r2, #16
 8000f7e:	6013      	str	r3, [r2, #0]
  int orangeDelay = 250;
 8000f80:	23fa      	movs	r3, #250	; 0xfa
 8000f82:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f86:	f102 020c 	add.w	r2, r2, #12
 8000f8a:	6013      	str	r3, [r2, #0]
  int orangeMaximum = floor(65535/512);
 8000f8c:	237f      	movs	r3, #127	; 0x7f
 8000f8e:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000f92:	f102 0208 	add.w	r2, r2, #8
 8000f96:	6013      	str	r3, [r2, #0]
  int orangeShape[1000] = {0};
 8000f98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8000f9c:	f103 0308 	add.w	r3, r3, #8
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f007 fe26 	bl	8008bfc <memset>
  GenerateCossine(orangeShape, orangeSamples, orangeMaximum, orangeDelay);
 8000fb0:	f507 50fa 	add.w	r0, r7, #8000	; 0x1f40
 8000fb4:	f100 0008 	add.w	r0, r0, #8
 8000fb8:	3808      	subs	r0, #8
 8000fba:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8000fbe:	f103 030c 	add.w	r3, r3, #12
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000fc8:	f102 0208 	add.w	r2, r2, #8
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 8000fd2:	f101 0110 	add.w	r1, r1, #16
 8000fd6:	6809      	ldr	r1, [r1, #0]
 8000fd8:	f000 fbee 	bl	80017b8 <GenerateCossine>
  int orangePhase = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000fe2:	f102 0204 	add.w	r2, r2, #4
 8000fe6:	6013      	str	r3, [r2, #0]

  int redSamples = 1000;
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000ff0:	6013      	str	r3, [r2, #0]
  int redDelay = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8000ff8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000ffc:	6013      	str	r3, [r2, #0]
  int redMaximum = floor(65535/512);
 8000ffe:	237f      	movs	r3, #127	; 0x7f
 8001000:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001004:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001008:	6013      	str	r3, [r2, #0]
  int redShape[1000] = {0};
 800100a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 800100e:	3b08      	subs	r3, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f007 fdef 	bl	8008bfc <memset>
  GenerateParabola(redShape, redSamples, redMaximum, redDelay);
 800101e:	f607 70a8 	addw	r0, r7, #4008	; 0xfa8
 8001022:	3808      	subs	r0, #8
 8001024:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8001028:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001032:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 800103c:	6809      	ldr	r1, [r1, #0]
 800103e:	f000 fcbf 	bl	80019c0 <GenerateParabola>
  int redPhase = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001048:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800104c:	6013      	str	r3, [r2, #0]

  int blueSamples = 1000;
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001056:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800105a:	6013      	str	r3, [r2, #0]
  int blueDelay = 250;
 800105c:	23fa      	movs	r3, #250	; 0xfa
 800105e:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001062:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001066:	6013      	str	r3, [r2, #0]
  int blueMaximum = floor(65535/512);
 8001068:	237f      	movs	r3, #127	; 0x7f
 800106a:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 800106e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001072:	6013      	str	r3, [r2, #0]
  int blueShape[1000] = {0};
 8001074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001078:	3b28      	subs	r3, #40	; 0x28
 800107a:	4618      	mov	r0, r3
 800107c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001080:	461a      	mov	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f007 fdba 	bl	8008bfc <memset>
  GenerateSquare(blueShape, blueSamples, blueMaximum, blueDelay);
 8001088:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108c:	3828      	subs	r0, #40	; 0x28
 800108e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8001092:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 800109c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	f507 517b 	add.w	r1, r7, #16064	; 0x3ec0
 80010a6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80010aa:	6809      	ldr	r1, [r1, #0]
 80010ac:	f000 fc37 	bl	800191e <GenerateSquare>
  int bluePhase = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 80010b6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010ba:	6013      	str	r3, [r2, #0]

  while (1)
  {
	globalCounter++;
 80010bc:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 80010c0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 80010cc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010d0:	6013      	str	r3, [r2, #0]

	yellowPhase = floor(globalCounter%yellowSamples);
 80010d2:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 80010d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 80010e0:	f102 0220 	add.w	r2, r2, #32
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	fb93 f2f2 	sdiv	r2, r3, r2
 80010ea:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 80010ee:	f101 0120 	add.w	r1, r1, #32
 80010f2:	6809      	ldr	r1, [r1, #0]
 80010f4:	fb01 f202 	mul.w	r2, r1, r2
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9b6 	bl	800046c <__aeabi_i2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fcca 	bl	8000aa0 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8001112:	f102 0214 	add.w	r2, r2, #20
 8001116:	6013      	str	r3, [r2, #0]
	orangePhase = floor(globalCounter%orangeSamples);
 8001118:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 800111c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8001126:	f102 0210 	add.w	r2, r2, #16
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001130:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 8001134:	f101 0110 	add.w	r1, r1, #16
 8001138:	6809      	ldr	r1, [r1, #0]
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f993 	bl	800046c <__aeabi_i2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fca7 	bl	8000aa0 <__aeabi_d2iz>
 8001152:	4603      	mov	r3, r0
 8001154:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8001158:	f102 0204 	add.w	r2, r2, #4
 800115c:	6013      	str	r3, [r2, #0]
	redPhase = floor(globalCounter%redSamples);
 800115e:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8001162:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001172:	f507 517c 	add.w	r1, r7, #16128	; 0x3f00
 8001176:	6809      	ldr	r1, [r1, #0]
 8001178:	fb01 f202 	mul.w	r2, r1, r2
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f974 	bl	800046c <__aeabi_i2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fc88 	bl	8000aa0 <__aeabi_d2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001196:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800119a:	6013      	str	r3, [r2, #0]
	bluePhase = floor(globalCounter%blueSamples);
 800119c:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 80011a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 80011aa:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	fb93 f2f2 	sdiv	r2, r3, r2
 80011b4:	f507 517b 	add.w	r1, r7, #16064	; 0x3ec0
 80011b8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80011bc:	6809      	ldr	r1, [r1, #0]
 80011be:	fb01 f202 	mul.w	r2, r1, r2
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f951 	bl	800046c <__aeabi_i2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc65 	bl	8000aa0 <__aeabi_d2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 80011dc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80011e0:	6013      	str	r3, [r2, #0]

	TIM4->CCR1 = yellowShape[yellowPhase];
 80011e2:	f507 533b 	add.w	r3, r7, #11968	; 0x2ec0
 80011e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80011ea:	3b08      	subs	r3, #8
 80011ec:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 80011f0:	f102 0214 	add.w	r2, r2, #20
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <main+0x3b0>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = orangeShape[orangePhase];
 80011fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001202:	f103 0308 	add.w	r3, r3, #8
 8001206:	3b08      	subs	r3, #8
 8001208:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 800120c:	f102 0204 	add.w	r2, r2, #4
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <main+0x3b0>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = redShape[redPhase];
 800121a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 800121e:	3b08      	subs	r3, #8
 8001220:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001224:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800122e:	e005      	b.n	800123c <main+0x3b4>
 8001230:	0800ac70 	.word	0x0800ac70
 8001234:	200000c0 	.word	0x200000c0
 8001238:	40000800 	.word	0x40000800
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <main+0x3d8>)
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = blueShape[bluePhase];
 8001240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001244:	3b28      	subs	r3, #40	; 0x28
 8001246:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 800124a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <main+0x3d8>)
 8001256:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2);
 8001258:	2002      	movs	r0, #2
 800125a:	f000 ff25 	bl	80020a8 <HAL_Delay>
	globalCounter++;
 800125e:	e72d      	b.n	80010bc <main+0x234>
 8001260:	40000800 	.word	0x40000800

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b098      	sub	sp, #96	; 0x60
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126e:	2230      	movs	r2, #48	; 0x30
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fcc2 	bl	8008bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <SystemClock_Config+0xfc>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <SystemClock_Config+0xfc>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <SystemClock_Config+0xfc>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <SystemClock_Config+0x100>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2a      	ldr	r2, [pc, #168]	; (8001364 <SystemClock_Config+0x100>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <SystemClock_Config+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e2:	2308      	movs	r3, #8
 80012e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012f0:	2307      	movs	r3, #7
 80012f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fcf9 	bl	8004cf0 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001304:	f000 fc36 	bl	8001b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2105      	movs	r1, #5
 8001326:	4618      	mov	r0, r3
 8001328:	f003 ff5a 	bl	80051e0 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001332:	f000 fc1f 	bl	8001b74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f932 	bl	80055b0 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001352:	f000 fc0f 	bl	8001b74 <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	3760      	adds	r7, #96	; 0x60
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f002 febf 	bl	8004128 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 fbe0 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000108 	.word	0x20000108
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_I2S3_Init+0x54>)
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <MX_I2S3_Init+0x58>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2S3_Init+0x54>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_I2S3_Init+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2S3_Init+0x54>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_I2S3_Init+0x54>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_I2S3_Init+0x54>)
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <MX_I2S3_Init+0x5c>)
 80013ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2S3_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_I2S3_Init+0x54>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2S3_Init+0x54>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_I2S3_Init+0x54>)
 8001404:	f002 ffd4 	bl	80043b0 <HAL_I2S_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800140e:	f000 fbb1 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001b4 	.word	0x200001b4
 800141c:	40003c00 	.word	0x40003c00
 8001420:	00017700 	.word	0x00017700

08001424 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_SPI1_Init+0x64>)
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <MX_SPI1_Init+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_SPI1_Init+0x64>)
 8001430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_SPI1_Init+0x64>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_SPI1_Init+0x64>)
 8001470:	220a      	movs	r2, #10
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_SPI1_Init+0x64>)
 8001476:	f004 f9db 	bl	8005830 <HAL_SPI_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001480:	f000 fb78 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000015c 	.word	0x2000015c
 800148c:	40013000 	.word	0x40013000

08001490 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014c2:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <MX_TIM4_Init+0x128>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014d4:	2264      	movs	r2, #100	; 0x64
 80014d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014e4:	4833      	ldr	r0, [pc, #204]	; (80015b4 <MX_TIM4_Init+0x124>)
 80014e6:	f004 fa2c 	bl	8005942 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014f0:	f000 fb40 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	4619      	mov	r1, r3
 8001500:	482c      	ldr	r0, [pc, #176]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001502:	f004 fc51 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800150c:	f000 fb32 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001510:	4828      	ldr	r0, [pc, #160]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001512:	f004 fa65 	bl	80059e0 <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800151c:	f000 fb2a 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4619      	mov	r1, r3
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001530:	f005 f812 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800153a:	f000 fb1b 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800154a:	2304      	movs	r3, #4
 800154c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001556:	f004 fb65 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001560:	f000 fb08 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2204      	movs	r2, #4
 8001568:	4619      	mov	r1, r3
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <MX_TIM4_Init+0x124>)
 800156c:	f004 fb5a 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001576:	f000 fafd 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2208      	movs	r2, #8
 800157e:	4619      	mov	r1, r3
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001582:	f004 fb4f 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 800158c:	f000 faf2 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	220c      	movs	r2, #12
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM4_Init+0x124>)
 8001598:	f004 fb44 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80015a2:	f000 fae7 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM4_Init+0x124>)
 80015a8:	f000 fc2c 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000c0 	.word	0x200000c0
 80015b8:	40000800 	.word	0x40000800

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	4b71      	ldr	r3, [pc, #452]	; (800179c <MX_GPIO_Init+0x1e0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a70      	ldr	r2, [pc, #448]	; (800179c <MX_GPIO_Init+0x1e0>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b6e      	ldr	r3, [pc, #440]	; (800179c <MX_GPIO_Init+0x1e0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <MX_GPIO_Init+0x1e0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <MX_GPIO_Init+0x1e0>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b67      	ldr	r3, [pc, #412]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a62      	ldr	r2, [pc, #392]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b60      	ldr	r3, [pc, #384]	; (800179c <MX_GPIO_Init+0x1e0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <MX_GPIO_Init+0x1e0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b59      	ldr	r3, [pc, #356]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a54      	ldr	r2, [pc, #336]	; (800179c <MX_GPIO_Init+0x1e0>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b4e      	ldr	r3, [pc, #312]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a4d      	ldr	r2, [pc, #308]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4848      	ldr	r0, [pc, #288]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 8001680:	f000 ffe4 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2101      	movs	r1, #1
 8001688:	4846      	ldr	r0, [pc, #280]	; (80017a4 <MX_GPIO_Init+0x1e8>)
 800168a:	f000 ffdf 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	4845      	ldr	r0, [pc, #276]	; (80017a8 <MX_GPIO_Init+0x1ec>)
 8001694:	f000 ffda 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001698:	2308      	movs	r3, #8
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	483c      	ldr	r0, [pc, #240]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 80016b0:	f000 fe30 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4836      	ldr	r0, [pc, #216]	; (80017a4 <MX_GPIO_Init+0x1e8>)
 80016cc:	f000 fe22 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016d0:	2308      	movs	r3, #8
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e0:	2305      	movs	r3, #5
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	482e      	ldr	r0, [pc, #184]	; (80017a4 <MX_GPIO_Init+0x1e8>)
 80016ec:	f000 fe12 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	4829      	ldr	r0, [pc, #164]	; (80017ac <MX_GPIO_Init+0x1f0>)
 8001706:	f000 fe05 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800170a:	2304      	movs	r3, #4
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_GPIO_Init+0x1f4>)
 800171e:	f000 fdf9 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001734:	2305      	movs	r3, #5
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	481c      	ldr	r0, [pc, #112]	; (80017b0 <MX_GPIO_Init+0x1f4>)
 8001740:	f000 fde8 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001744:	2310      	movs	r3, #16
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4813      	ldr	r0, [pc, #76]	; (80017a8 <MX_GPIO_Init+0x1ec>)
 800175c:	f000 fdda 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001760:	2320      	movs	r3, #32
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_GPIO_Init+0x1ec>)
 8001774:	f000 fdce 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800177c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 800178e:	f000 fdc1 	bl	8002314 <HAL_GPIO_Init>

}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	00000000 	.word	0x00000000

080017b8 <GenerateCossine>:

/* USER CODE BEGIN 4 */

void GenerateCossine(int *cosinusoid, int samples, int maximum, int delay){
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	float theta;
	float phases = 6.28/samples;
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f7fe fe50 	bl	800046c <__aeabi_i2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	a12e      	add	r1, pc, #184	; (adr r1, 800188c <GenerateCossine+0xd4>)
 80017d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d6:	f7fe ffdd 	bl	8000794 <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f985 	bl	8000af0 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < samples; i++){
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e03c      	b.n	800186a <GenerateCossine+0xb2>
		theta = phases * i;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	edc7 7a05 	vstr	s15, [r7, #20]
		cosinusoid[i] = floor(maximum*(cos(theta)+1));
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fe30 	bl	800046c <__aeabi_i2d>
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7fe fe3d 	bl	8000490 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b10 	vmov	d0, r2, r3
 800181e:	f007 fabf 	bl	8008da0 <cos>
 8001822:	ec51 0b10 	vmov	r0, r1, d0
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <GenerateCossine+0xd0>)
 800182c:	f7fe fcd2 	bl	80001d4 <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fe82 	bl	8000540 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b17 	vmov	d7, r2, r3
 8001844:	eeb0 0a47 	vmov.f32	s0, s14
 8001848:	eef0 0a67 	vmov.f32	s1, s15
 800184c:	f007 faf8 	bl	8008e40 <floor>
 8001850:	ec51 0b10 	vmov	r0, r1, d0
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	18d4      	adds	r4, r2, r3
 800185c:	f7ff f920 	bl	8000aa0 <__aeabi_d2iz>
 8001860:	4603      	mov	r3, r0
 8001862:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbbe      	blt.n	80017f0 <GenerateCossine+0x38>
	}
	Rotate(cosinusoid, samples, delay);
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f94a 	bl	8001b10 <Rotate>
}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bdb0      	pop	{r4, r5, r7, pc}
 8001884:	f3af 8000 	nop.w
 8001888:	3ff00000 	.word	0x3ff00000
 800188c:	51eb851f 	.word	0x51eb851f
 8001890:	40191eb8 	.word	0x40191eb8

08001894 <GenerateRamp>:

void GenerateRamp(int *ramp, int samples, int maximum, int delay){
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
	float theta = maximum/(float)samples;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ba:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e01f      	b.n	8001904 <GenerateRamp+0x70>
		ramp[i] = floor(i*theta);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fdd9 	bl	8000490 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f007 faab 	bl	8008e40 <floor>
 80018ea:	ec51 0b10 	vmov	r0, r1, d0
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	18d4      	adds	r4, r2, r3
 80018f6:	f7ff f8d3 	bl	8000aa0 <__aeabi_d2iz>
 80018fa:	4603      	mov	r3, r0
 80018fc:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbdb      	blt.n	80018c4 <GenerateRamp+0x30>
	}
	Rotate(ramp, samples, delay);
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f8fd 	bl	8001b10 <Rotate>
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}

0800191e <GenerateSquare>:

void GenerateSquare(int *square, int samples, int maximum, int delay){
 800191e:	b5b0      	push	{r4, r5, r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < floor(samples/2); i++){
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e008      	b.n	8001944 <GenerateSquare+0x26>
		square[i] = maximum;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < floor(samples/2); i++){
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7fe fd91 	bl	800046c <__aeabi_i2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0fda      	lsrs	r2, r3, #31
 8001952:	4413      	add	r3, r2
 8001954:	105b      	asrs	r3, r3, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd88 	bl	800046c <__aeabi_i2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7ff f85e 	bl	8000a24 <__aeabi_dcmplt>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e1      	bne.n	8001932 <GenerateSquare+0x14>
	}
	for (int i = floor(samples/2); i < samples; i++){
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	0fda      	lsrs	r2, r3, #31
 8001972:	4413      	add	r3, r2
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd78 	bl	800046c <__aeabi_i2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f88c 	bl	8000aa0 <__aeabi_d2iz>
 8001988:	4603      	mov	r3, r0
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e008      	b.n	80019a0 <GenerateSquare+0x82>
		square[i] = 0;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
	for (int i = floor(samples/2); i < samples; i++){
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3301      	adds	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf2      	blt.n	800198e <GenerateSquare+0x70>
	}
	Rotate(square, samples, delay);
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f8af 	bl	8001b10 <Rotate>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ba:	0000      	movs	r0, r0
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <GenerateParabola>:

void GenerateParabola(int *parabola, int samples, int maximum, int delay){
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
	float a = (4*maximum)/(pow(samples,2));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd4a 	bl	800046c <__aeabi_i2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	f7fe fd45 	bl	800046c <__aeabi_i2d>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001b08 <GenerateParabola+0x148>
 80019ea:	ec43 2b10 	vmov	d0, r2, r3
 80019ee:	f007 faa7 	bl	8008f40 <pow>
 80019f2:	ec53 2b10 	vmov	r2, r3, d0
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fecb 	bl	8000794 <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f873 	bl	8000af0 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
	float b = -(4*maximum)/(float)samples;
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	079b      	lsls	r3, r3, #30
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2e:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = maximum;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e050      	b.n	8001ae8 <GenerateParabola+0x128>
		parabola[i] = floor(a*pow(i,2) + b*i + c);
 8001a46:	69b8      	ldr	r0, [r7, #24]
 8001a48:	f7fe fd22 	bl	8000490 <__aeabi_f2d>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	460d      	mov	r5, r1
 8001a50:	69f8      	ldr	r0, [r7, #28]
 8001a52:	f7fe fd0b 	bl	800046c <__aeabi_i2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001b08 <GenerateParabola+0x148>
 8001a5e:	ec43 2b10 	vmov	d0, r2, r3
 8001a62:	f007 fa6d 	bl	8008f40 <pow>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd67 	bl	8000540 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	ee17 0a90 	vmov	r0, s15
 8001a90:	f7fe fcfe 	bl	8000490 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fb9a 	bl	80001d4 <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	6938      	ldr	r0, [r7, #16]
 8001aaa:	f7fe fcf1 	bl	8000490 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fb8d 	bl	80001d4 <__adddf3>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b17 	vmov	d7, r2, r3
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f007 f9b9 	bl	8008e40 <floor>
 8001ace:	ec51 0b10 	vmov	r0, r1, d0
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	18d4      	adds	r4, r2, r3
 8001ada:	f7fe ffe1 	bl	8000aa0 <__aeabi_d2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbaa      	blt.n	8001a46 <GenerateParabola+0x86>
	}
	Rotate(parabola, samples, delay);
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f80b 	bl	8001b10 <Rotate>
}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40000000 	.word	0x40000000

08001b10 <Rotate>:

void Rotate(int *shape, int samples, int delay){
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	for (int index; index < delay; index++){
 8001b1c:	e01f      	b.n	8001b5e <Rotate+0x4e>
		int temp = shape[0];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]
		for (int allIndex; allIndex < samples - 1; allIndex++){
 8001b24:	e00d      	b.n	8001b42 <Rotate+0x32>
			shape[allIndex] = shape[allIndex + 1];
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	441a      	add	r2, r3
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	440b      	add	r3, r1
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	601a      	str	r2, [r3, #0]
		for (int allIndex; allIndex < samples - 1; allIndex++){
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbec      	blt.n	8001b26 <Rotate+0x16>
		}
		shape[samples] = temp;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
	for (int index; index < delay; index++){
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbdb      	blt.n	8001b1e <Rotate+0xe>
	}
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	; 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f000 fb66 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c20:	2304      	movs	r3, #4
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001c2c:	f000 fb72 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <HAL_I2S_MspInit+0xc0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d14a      	bne.n	8001d18 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_I2S_MspInit+0xc4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <HAL_I2S_MspInit+0xc8>)
 8001cf2:	f000 fb0f 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cf6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_I2S_MspInit+0xcc>)
 8001d14:	f000 fafe 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40003c00 	.word	0x40003c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020800 	.word	0x40020800

08001d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_SPI_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d8a:	23e0      	movs	r3, #224	; 0xe0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_SPI_MspInit+0x8c>)
 8001da6:	f000 fab5 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40013000 	.word	0x40013000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_TIM_Base_MspInit+0x3c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10d      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_Base_MspInit+0x40>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_TIM_Base_MspInit+0x40>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_TIM_Base_MspInit+0x40>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d11e      	bne.n	8001e64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e42:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_TIM_MspPostInit+0x70>)
 8001e60:	f000 fa58 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020c00 	.word	0x40020c00

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f8d0 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <OTG_FS_IRQHandler+0x10>)
 8001ed2:	f000 fe3f 	bl	8002b54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200005d8 	.word	0x200005d8

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f006 fe3a 	bl	8008b88 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20020000 	.word	0x20020000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	200000b0 	.word	0x200000b0
 8001f48:	200008f0 	.word	0x200008f0

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f76:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f8c:	4c0b      	ldr	r4, [pc, #44]	; (8001fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9a:	f7ff ffd7 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f006 fdf9 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7fe ff71 	bl	8000e88 <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001fb4:	0800af20 	.word	0x0800af20
  ldr r2, =_sbss
 8001fb8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001fbc:	200008ec 	.word	0x200008ec

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <HAL_Init+0x40>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_Init+0x40>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_Init+0x40>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 f94f 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fdc2 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f967 	bl	80022fa <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f000 f92f 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000000 	.word	0x20000000
 8002060:	20000008 	.word	0x20000008
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	200001fc 	.word	0x200001fc

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200001fc 	.word	0x200001fc

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff ffee 	bl	8002090 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_Delay+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffde 	bl	8002090 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff29 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff3e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff31 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e16b      	b.n	8002608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 815a 	bne.w	8002602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b4 	beq.w	8002602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b60      	ldr	r3, [pc, #384]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a5f      	ldr	r2, [pc, #380]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a5b      	ldr	r2, [pc, #364]	; (8002624 <HAL_GPIO_Init+0x310>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_GPIO_Init+0x314>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02b      	beq.n	800253a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_Init+0x318>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_Init+0x31c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_GPIO_Init+0x320>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_GPIO_Init+0x324>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_GPIO_Init+0x328>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4c      	ldr	r2, [pc, #304]	; (8002640 <HAL_GPIO_Init+0x32c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_GPIO_Init+0x330>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x20a>
 800251a:	2307      	movs	r3, #7
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x228>
 800251e:	2308      	movs	r3, #8
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x228>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x310>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_GPIO_Init+0x334>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257e:	4a32      	ldr	r2, [pc, #200]	; (8002648 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_GPIO_Init+0x334>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae90 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002680:	b08f      	sub	sp, #60	; 0x3c
 8002682:	af0a      	add	r7, sp, #40	; 0x28
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e054      	b.n	800273a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f006 f810 	bl	80086d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 f830 	bl	8006734 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	687e      	ldr	r6, [r7, #4]
 80026dc:	466d      	mov	r5, sp
 80026de:	f106 0410 	add.w	r4, r6, #16
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f2:	1d33      	adds	r3, r6, #4
 80026f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f003 ffaa 	bl	8006650 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f004 f827 	bl	8006756 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	687e      	ldr	r6, [r7, #4]
 8002710:	466d      	mov	r5, sp
 8002712:	f106 0410 	add.w	r4, r6, #16
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002722:	e885 0003 	stmia.w	r5, {r0, r1}
 8002726:	1d33      	adds	r3, r6, #4
 8002728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272a:	6838      	ldr	r0, [r7, #0]
 800272c:	f004 f98e 	bl	8006a4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002742 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002742:	b590      	push	{r4, r7, lr}
 8002744:	b089      	sub	sp, #36	; 0x24
 8002746:	af04      	add	r7, sp, #16
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	4608      	mov	r0, r1
 800274c:	4611      	mov	r1, r2
 800274e:	461a      	mov	r2, r3
 8002750:	4603      	mov	r3, r0
 8002752:	70fb      	strb	r3, [r7, #3]
 8002754:	460b      	mov	r3, r1
 8002756:	70bb      	strb	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_HCD_HC_Init+0x28>
 8002766:	2302      	movs	r3, #2
 8002768:	e076      	b.n	8002858 <HAL_HCD_HC_Init+0x116>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	333d      	adds	r3, #61	; 0x3d
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	3338      	adds	r3, #56	; 0x38
 8002792:	787a      	ldrb	r2, [r7, #1]
 8002794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3340      	adds	r3, #64	; 0x40
 80027a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3339      	adds	r3, #57	; 0x39
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	333f      	adds	r3, #63	; 0x3f
 80027c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80027cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	78ba      	ldrb	r2, [r7, #2]
 80027d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027d6:	b2d0      	uxtb	r0, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333a      	adds	r3, #58	; 0x3a
 80027e4:	4602      	mov	r2, r0
 80027e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80027e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da09      	bge.n	8002804 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	333b      	adds	r3, #59	; 0x3b
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e008      	b.n	8002816 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	333b      	adds	r3, #59	; 0x3b
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333c      	adds	r3, #60	; 0x3c
 8002824:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002828:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	787c      	ldrb	r4, [r7, #1]
 8002830:	78ba      	ldrb	r2, [r7, #2]
 8002832:	78f9      	ldrb	r1, [r7, #3]
 8002834:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4623      	mov	r3, r4
 8002846:	f004 fa51 	bl	8006cec <USB_HC_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_HCD_HC_Halt+0x1e>
 800287a:	2302      	movs	r3, #2
 800287c:	e00f      	b.n	800289e <HAL_HCD_HC_Halt+0x3e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fc8d 	bl	80071ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	70fb      	strb	r3, [r7, #3]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70bb      	strb	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333b      	adds	r3, #59	; 0x3b
 80028d0:	78ba      	ldrb	r2, [r7, #2]
 80028d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	333f      	adds	r3, #63	; 0x3f
 80028e2:	787a      	ldrb	r2, [r7, #1]
 80028e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80028e6:	7c3b      	ldrb	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3342      	adds	r3, #66	; 0x42
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333d      	adds	r3, #61	; 0x3d
 800290c:	7f3a      	ldrb	r2, [r7, #28]
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e008      	b.n	8002924 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3342      	adds	r3, #66	; 0x42
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b03      	cmp	r3, #3
 8002928:	f200 80c6 	bhi.w	8002ab8 <HAL_HCD_HC_SubmitRequest+0x210>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002aa5 	.word	0x08002aa5
 800293c:	080029a9 	.word	0x080029a9
 8002940:	08002a27 	.word	0x08002a27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002944:	7c3b      	ldrb	r3, [r7, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 80b8 	bne.w	8002abc <HAL_HCD_HC_SubmitRequest+0x214>
 800294c:	78bb      	ldrb	r3, [r7, #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 80b4 	bne.w	8002abc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002954:	8b3b      	ldrh	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3355      	adds	r3, #85	; 0x55
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3355      	adds	r3, #85	; 0x55
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3342      	adds	r3, #66	; 0x42
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002992:	e093      	b.n	8002abc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3342      	adds	r3, #66	; 0x42
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e089      	b.n	8002abc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80029a8:	78bb      	ldrb	r3, [r7, #2]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11d      	bne.n	80029ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3355      	adds	r3, #85	; 0x55
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3342      	adds	r3, #66	; 0x42
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80029d4:	e073      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3342      	adds	r3, #66	; 0x42
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e069      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3354      	adds	r3, #84	; 0x54
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3342      	adds	r3, #66	; 0x42
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
      break;
 8002a10:	e055      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3342      	adds	r3, #66	; 0x42
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
      break;
 8002a24:	e04b      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a26:	78bb      	ldrb	r3, [r7, #2]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d11d      	bne.n	8002a68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3355      	adds	r3, #85	; 0x55
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3342      	adds	r3, #66	; 0x42
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a52:	e034      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3342      	adds	r3, #66	; 0x42
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
      break;
 8002a66:	e02a      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3354      	adds	r3, #84	; 0x54
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e016      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3342      	adds	r3, #66	; 0x42
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
      break;
 8002aa2:	e00c      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3342      	adds	r3, #66	; 0x42
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
      break;
 8002ab6:	e002      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002abc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3344      	adds	r3, #68	; 0x44
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	8b3a      	ldrh	r2, [r7, #24]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	440b      	add	r3, r1
 8002ade:	334c      	adds	r3, #76	; 0x4c
 8002ae0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3350      	adds	r3, #80	; 0x50
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3339      	adds	r3, #57	; 0x39
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	222c      	movs	r2, #44	; 0x2c
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	18d1      	adds	r1, r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	f004 f9e0 	bl	8006f08 <USB_HC_StartXfer>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 ff2d 	bl	80069ca <USB_GetMode>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 80f6 	bne.w	8002d64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 ff11 	bl	80069a4 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80ec 	beq.w	8002d62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 ff08 	bl	80069a4 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fef8 	bl	80069a4 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fee8 	bl	80069a4 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bde:	d104      	bne.n	8002bea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fed8 	bl	80069a4 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d103      	bne.n	8002c06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 feca 	bl	80069a4 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1a:	d11c      	bne.n	8002c56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c36:	2110      	movs	r1, #16
 8002c38:	6938      	ldr	r0, [r7, #16]
 8002c3a:	f003 fdd9 	bl	80067f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c3e:	6938      	ldr	r0, [r7, #16]
 8002c40:	f003 fdfa 	bl	8006838 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 ffb2 	bl	8006bb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f005 fdbb 	bl	80087cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fea2 	bl	80069a4 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6a:	d102      	bne.n	8002c72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f001 f9e7 	bl	8004040 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fe94 	bl	80069a4 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d106      	bne.n	8002c94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f005 fd84 	bl	8008794 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fe83 	bl	80069a4 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d101      	bne.n	8002cac <HAL_HCD_IRQHandler+0x158>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_HCD_IRQHandler+0x15a>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0210 	bic.w	r2, r2, #16
 8002cc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f001 f8ea 	bl	8003e9c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0210 	orr.w	r2, r2, #16
 8002cd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fe61 	bl	80069a4 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cec:	d13a      	bne.n	8002d64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 fa4a 	bl	800718c <USB_HC_ReadInterrupt>
 8002cf8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e025      	b.n	8002d4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2a:	d106      	bne.n	8002d3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f88f 	bl	8002e56 <HCD_HC_IN_IRQHandler>
 8002d38:	e005      	b.n	8002d46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fcaa 	bl	800369a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3d4      	bcc.n	8002d00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5e:	615a      	str	r2, [r3, #20]
 8002d60:	e000      	b.n	8002d64 <HAL_HCD_IRQHandler+0x210>
      return;
 8002d62:	bf00      	nop
    }
  }
}
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_HCD_Start+0x16>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e013      	b.n	8002da8 <HAL_HCD_Start+0x3e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 ff4a 	bl	8006c28 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fcba 	bl	8006712 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_HCD_Stop+0x16>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e00d      	b.n	8002de2 <HAL_HCD_Stop+0x32>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fb44 	bl	8007460 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3360      	adds	r3, #96	; 0x60
 8002e04:	781b      	ldrb	r3, [r3, #0]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3350      	adds	r3, #80	; 0x50
 8002e2c:	681b      	ldr	r3, [r3, #0]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 ff3e 	bl	8006cc8 <USB_GetCurrentFrame>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d119      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	2304      	movs	r3, #4
 8002e96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	0151      	lsls	r1, r2, #5
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	440a      	add	r2, r1
 8002eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	60d3      	str	r3, [r2, #12]
 8002eb8:	e101      	b.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed0:	d12b      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3361      	adds	r3, #97	; 0x61
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	0151      	lsls	r1, r2, #5
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 f943 	bl	80071ae <USB_HC_Halt>
 8002f28:	e0c9      	b.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d109      	bne.n	8002f54 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2320      	movs	r3, #32
 8002f50:	6093      	str	r3, [r2, #8]
 8002f52:	e0b4      	b.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d133      	bne.n	8002fd2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3361      	adds	r3, #97	; 0x61
 8002f98:	2205      	movs	r2, #5
 8002f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2310      	movs	r3, #16
 8002fac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 f8ef 	bl	80071ae <USB_HC_Halt>
 8002fd0:	e075      	b.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d134      	bne.n	8003054 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3361      	adds	r3, #97	; 0x61
 8003018:	2208      	movs	r2, #8
 800301a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003040:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f004 f8ae 	bl	80071ae <USB_HC_Halt>
 8003052:	e034      	b.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d129      	bne.n	80030be <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	0151      	lsls	r1, r2, #5
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	440a      	add	r2, r1
 8003080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	2206      	movs	r2, #6
 800309a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 f881 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d4:	d122      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f004 f854 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003118:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800311a:	e2ba      	b.n	8003692 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 811b 	bne.w	800336a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d019      	beq.n	8003170 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3348      	adds	r3, #72	; 0x48
 800314a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0159      	lsls	r1, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	440b      	add	r3, r1
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	440b      	add	r3, r1
 800316c:	3350      	adds	r3, #80	; 0x50
 800316e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3361      	adds	r3, #97	; 0x61
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	2301      	movs	r3, #1
 80031a4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333f      	adds	r3, #63	; 0x3f
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333f      	adds	r3, #63	; 0x3f
 80031c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d121      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	0151      	lsls	r1, r2, #5
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	440a      	add	r2, r1
 80031e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 ffd8 	bl	80071ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2310      	movs	r3, #16
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	e066      	b.n	80032e0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d127      	bne.n	8003276 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003244:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3360      	adds	r3, #96	; 0x60
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	202c      	movs	r0, #44	; 0x2c
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f005 faba 	bl	80087e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003274:	e034      	b.n	80032e0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	333f      	adds	r3, #63	; 0x3f
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d12a      	bne.n	80032e0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3360      	adds	r3, #96	; 0x60
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3354      	adds	r3, #84	; 0x54
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2d8      	uxtb	r0, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3354      	adds	r3, #84	; 0x54
 80032c0:	4602      	mov	r2, r0
 80032c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	b2d9      	uxtb	r1, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	202c      	movs	r0, #44	; 0x2c
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3360      	adds	r3, #96	; 0x60
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 fa84 	bl	80087e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d12b      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3348      	adds	r3, #72	; 0x48
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	202c      	movs	r0, #44	; 0x2c
 80032fe:	fb00 f202 	mul.w	r2, r0, r2
 8003302:	440a      	add	r2, r1
 8003304:	3240      	adds	r2, #64	; 0x40
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	fbb3 f3f2 	udiv	r3, r3, r2
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 81be 	beq.w	8003692 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3354      	adds	r3, #84	; 0x54
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2d8      	uxtb	r0, r3
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3354      	adds	r3, #84	; 0x54
 800333a:	4602      	mov	r2, r0
 800333c:	701a      	strb	r2, [r3, #0]
}
 800333e:	e1a8      	b.n	8003692 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3354      	adds	r3, #84	; 0x54
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2d8      	uxtb	r0, r3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3354      	adds	r3, #84	; 0x54
 8003364:	4602      	mov	r2, r0
 8003366:	701a      	strb	r2, [r3, #0]
}
 8003368:	e193      	b.n	8003692 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	f040 8106 	bne.w	800358e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	440a      	add	r2, r1
 8003398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3361      	adds	r3, #97	; 0x61
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d109      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3360      	adds	r3, #96	; 0x60
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e0c9      	b.n	800355e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3361      	adds	r3, #97	; 0x61
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d109      	bne.n	80033f2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2205      	movs	r2, #5
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e0b5      	b.n	800355e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3361      	adds	r3, #97	; 0x61
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d009      	beq.n	800341a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3361      	adds	r3, #97	; 0x61
 8003414:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003416:	2b08      	cmp	r3, #8
 8003418:	d150      	bne.n	80034bc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	335c      	adds	r3, #92	; 0x5c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	202c      	movs	r0, #44	; 0x2c
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	440b      	add	r3, r1
 8003438:	335c      	adds	r3, #92	; 0x5c
 800343a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d912      	bls.n	8003476 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	335c      	adds	r3, #92	; 0x5c
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3360      	adds	r3, #96	; 0x60
 8003470:	2204      	movs	r2, #4
 8003472:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003474:	e073      	b.n	800355e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3360      	adds	r3, #96	; 0x60
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800349e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034a6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034ba:	e050      	b.n	800355e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d122      	bne.n	8003516 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3360      	adds	r3, #96	; 0x60
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003500:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e023      	b.n	800355e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3361      	adds	r3, #97	; 0x61
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b07      	cmp	r3, #7
 8003528:	d119      	bne.n	800355e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	202c      	movs	r0, #44	; 0x2c
 8003542:	fb00 f303 	mul.w	r3, r0, r3
 8003546:	440b      	add	r3, r1
 8003548:	335c      	adds	r3, #92	; 0x5c
 800354a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3360      	adds	r3, #96	; 0x60
 800355a:	2204      	movs	r2, #4
 800355c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2302      	movs	r3, #2
 800356e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	b2d9      	uxtb	r1, r3
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	202c      	movs	r0, #44	; 0x2c
 800357a:	fb00 f303 	mul.w	r3, r0, r3
 800357e:	4413      	add	r3, r2
 8003580:	3360      	adds	r3, #96	; 0x60
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f005 f92e 	bl	80087e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800358c:	e081      	b.n	8003692 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d176      	bne.n	8003692 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333f      	adds	r3, #63	; 0x3f
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d121      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	335c      	adds	r3, #92	; 0x5c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fdda 	bl	80071ae <USB_HC_Halt>
 80035fa:	e041      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	333f      	adds	r3, #63	; 0x3f
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	333f      	adds	r3, #63	; 0x3f
 800361e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003620:	2b02      	cmp	r3, #2
 8003622:	d12d      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	335c      	adds	r3, #92	; 0x5c
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d120      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3361      	adds	r3, #97	; 0x61
 800364c:	2203      	movs	r2, #3
 800364e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	440a      	add	r2, r1
 8003666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f003 fd97 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	2310      	movs	r3, #16
 8003690:	6093      	str	r3, [r2, #8]
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b088      	sub	sp, #32
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d119      	bne.n	80036fe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	461a      	mov	r2, r3
 80036d8:	2304      	movs	r3, #4
 80036da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80036fc:	e3ca      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b20      	cmp	r3, #32
 8003712:	d13e      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	461a      	mov	r2, r3
 8003722:	2320      	movs	r3, #32
 8003724:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	333d      	adds	r3, #61	; 0x3d
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 83ac 	bne.w	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	333d      	adds	r3, #61	; 0x3d
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3360      	adds	r3, #96	; 0x60
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	440a      	add	r2, r1
 8003776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fd0f 	bl	80071ae <USB_HC_Halt>
}
 8003790:	e380      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d122      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fcea 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ec:	6093      	str	r3, [r2, #8]
}
 80037ee:	e351      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d150      	bne.n	80038a8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	335c      	adds	r3, #92	; 0x5c
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d111      	bne.n	8003852 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	333d      	adds	r3, #61	; 0x3d
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	440a      	add	r2, r1
 8003868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f003 fc96 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	2301      	movs	r3, #1
 8003892:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3361      	adds	r3, #97	; 0x61
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
}
 80038a6:	e2f5      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d13c      	bne.n	8003938 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3361      	adds	r3, #97	; 0x61
 80038cc:	2204      	movs	r2, #4
 80038ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	333d      	adds	r3, #61	; 0x3d
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	335c      	adds	r3, #92	; 0x5c
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	440a      	add	r2, r1
 800390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fc45 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	6093      	str	r3, [r2, #8]
}
 8003936:	e2ad      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b08      	cmp	r3, #8
 800394c:	d12a      	bne.n	80039a4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2308      	movs	r3, #8
 800395e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	440a      	add	r2, r1
 8003976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fc0f 	bl	80071ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	2205      	movs	r2, #5
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	e277      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d150      	bne.n	8003a5c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3361      	adds	r3, #97	; 0x61
 80039da:	2203      	movs	r2, #3
 80039dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	333d      	adds	r3, #61	; 0x3d
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d112      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	333c      	adds	r3, #60	; 0x3c
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a32:	f043 0302 	orr.w	r3, r3, #2
 8003a36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fbb3 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	461a      	mov	r2, r3
 8003a56:	2310      	movs	r3, #16
 8003a58:	6093      	str	r3, [r2, #8]
}
 8003a5a:	e21b      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d174      	bne.n	8003b5c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d121      	bne.n	8003abe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3361      	adds	r3, #97	; 0x61
 8003a88:	2206      	movs	r2, #6
 8003a8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa6:	f043 0302 	orr.w	r3, r3, #2
 8003aaa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 fb79 	bl	80071ae <USB_HC_Halt>
 8003abc:	e044      	b.n	8003b48 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	335c      	adds	r3, #92	; 0x5c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	202c      	movs	r0, #44	; 0x2c
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	440b      	add	r3, r1
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	335c      	adds	r3, #92	; 0x5c
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d920      	bls.n	8003b36 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	335c      	adds	r3, #92	; 0x5c
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3360      	adds	r3, #96	; 0x60
 8003b14:	2204      	movs	r2, #4
 8003b16:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b2d9      	uxtb	r1, r3
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	202c      	movs	r0, #44	; 0x2c
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3360      	adds	r3, #96	; 0x60
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f004 fe5a 	bl	80087e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b34:	e008      	b.n	8003b48 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3360      	adds	r3, #96	; 0x60
 8003b44:	2202      	movs	r2, #2
 8003b46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	6093      	str	r3, [r2, #8]
}
 8003b5a:	e19b      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d134      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fb05 	bl	80071ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3361      	adds	r3, #97	; 0x61
 8003bd8:	2208      	movs	r2, #8
 8003bda:	701a      	strb	r2, [r3, #0]
}
 8003bdc:	e15a      	b.n	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	f040 814f 	bne.w	8003e94 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	212c      	movs	r1, #44	; 0x2c
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	3361      	adds	r3, #97	; 0x61
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d17d      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3360      	adds	r3, #96	; 0x60
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	333f      	adds	r3, #63	; 0x3f
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d00a      	beq.n	8003c66 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	333f      	adds	r3, #63	; 0x3f
 8003c5e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	f040 8100 	bne.w	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d113      	bne.n	8003c96 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	3355      	adds	r3, #85	; 0x55
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f083 0301 	eor.w	r3, r3, #1
 8003c82:	b2d8      	uxtb	r0, r3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3355      	adds	r3, #85	; 0x55
 8003c92:	4602      	mov	r2, r0
 8003c94:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	f040 80e3 	bne.w	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	334c      	adds	r3, #76	; 0x4c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80d8 	beq.w	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	334c      	adds	r3, #76	; 0x4c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f202 	mul.w	r2, r0, r2
 8003cd0:	440a      	add	r2, r1
 8003cd2:	3240      	adds	r2, #64	; 0x40
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	202c      	movs	r0, #44	; 0x2c
 8003ce0:	fb00 f202 	mul.w	r2, r0, r2
 8003ce4:	440a      	add	r2, r1
 8003ce6:	3240      	adds	r2, #64	; 0x40
 8003ce8:	8812      	ldrh	r2, [r2, #0]
 8003cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b5 	beq.w	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3355      	adds	r3, #85	; 0x55
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2d8      	uxtb	r0, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3355      	adds	r3, #85	; 0x55
 8003d20:	4602      	mov	r2, r0
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e09f      	b.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3361      	adds	r3, #97	; 0x61
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d109      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3360      	adds	r3, #96	; 0x60
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e08b      	b.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d109      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	2202      	movs	r2, #2
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e077      	b.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3361      	adds	r3, #97	; 0x61
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d109      	bne.n	8003d9e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3360      	adds	r3, #96	; 0x60
 8003d98:	2205      	movs	r2, #5
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e063      	b.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3361      	adds	r3, #97	; 0x61
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d009      	beq.n	8003dc6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3361      	adds	r3, #97	; 0x61
 8003dc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d14f      	bne.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	335c      	adds	r3, #92	; 0x5c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	202c      	movs	r0, #44	; 0x2c
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	440b      	add	r3, r1
 8003de4:	335c      	adds	r3, #92	; 0x5c
 8003de6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	335c      	adds	r3, #92	; 0x5c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d912      	bls.n	8003e22 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	335c      	adds	r3, #92	; 0x5c
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3360      	adds	r3, #96	; 0x60
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e021      	b.n	8003e66 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3360      	adds	r3, #96	; 0x60
 8003e30:	2202      	movs	r2, #2
 8003e32:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e52:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	2302      	movs	r3, #2
 8003e76:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	b2d9      	uxtb	r1, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	202c      	movs	r0, #44	; 0x2c
 8003e82:	fb00 f303 	mul.w	r3, r0, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f004 fcaa 	bl	80087e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e94:	bf00      	nop
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	0c5b      	lsrs	r3, r3, #17
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d004      	beq.n	8003ee2 <HCD_RXQLVL_IRQHandler+0x46>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	f000 80a9 	beq.w	8004032 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ee0:	e0aa      	b.n	8004038 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a6 	beq.w	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3344      	adds	r3, #68	; 0x44
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809b 	beq.w	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3350      	adds	r3, #80	; 0x50
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	441a      	add	r2, r3
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	202c      	movs	r0, #44	; 0x2c
 8003f1a:	fb00 f303 	mul.w	r3, r0, r3
 8003f1e:	440b      	add	r3, r1
 8003f20:	334c      	adds	r3, #76	; 0x4c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d87a      	bhi.n	800401e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3344      	adds	r3, #68	; 0x44
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f002 fcd7 	bl	80068f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3344      	adds	r3, #68	; 0x44
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	441a      	add	r2, r3
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	202c      	movs	r0, #44	; 0x2c
 8003f60:	fb00 f303 	mul.w	r3, r0, r3
 8003f64:	440b      	add	r3, r1
 8003f66:	3344      	adds	r3, #68	; 0x44
 8003f68:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3350      	adds	r3, #80	; 0x50
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	202c      	movs	r0, #44	; 0x2c
 8003f84:	fb00 f303 	mul.w	r3, r0, r3
 8003f88:	440b      	add	r3, r1
 8003f8a:	3350      	adds	r3, #80	; 0x50
 8003f8c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	0cdb      	lsrs	r3, r3, #19
 8003f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3340      	adds	r3, #64	; 0x40
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d13c      	bne.n	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d039      	beq.n	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fd8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fe0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3354      	adds	r3, #84	; 0x54
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2d8      	uxtb	r0, r3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3354      	adds	r3, #84	; 0x54
 8004018:	4602      	mov	r2, r0
 800401a:	701a      	strb	r2, [r3, #0]
      break;
 800401c:	e00b      	b.n	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3360      	adds	r3, #96	; 0x60
 800402c:	2204      	movs	r2, #4
 800402e:	701a      	strb	r2, [r3, #0]
      break;
 8004030:	e001      	b.n	8004036 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004036:	bf00      	nop
  }
}
 8004038:	bf00      	nop
 800403a:	3728      	adds	r7, #40	; 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800406c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d10b      	bne.n	8004090 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d102      	bne.n	8004088 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f004 fb94 	bl	80087b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b08      	cmp	r3, #8
 8004098:	d132      	bne.n	8004100 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d126      	bne.n	80040fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d113      	bne.n	80040dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040be:	d106      	bne.n	80040ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f002 fd74 	bl	8006bb4 <USB_InitFSLSPClkSel>
 80040cc:	e011      	b.n	80040f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 fd6d 	bl	8006bb4 <USB_InitFSLSPClkSel>
 80040da:	e00a      	b.n	80040f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ea:	461a      	mov	r2, r3
 80040ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80040f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f004 fb86 	bl	8008804 <HAL_HCD_PortEnabled_Callback>
 80040f8:	e002      	b.n	8004100 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f004 fb90 	bl	8008820 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b20      	cmp	r3, #32
 8004108:	d103      	bne.n	8004112 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6013      	str	r3, [r2, #0]
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e12b      	b.n	8004392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fd3e 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800418a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800418c:	f001 f9fc 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8004190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4a81      	ldr	r2, [pc, #516]	; (800439c <HAL_I2C_Init+0x274>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d807      	bhi.n	80041ac <HAL_I2C_Init+0x84>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_I2C_Init+0x278>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bf94      	ite	ls
 80041a4:	2301      	movls	r3, #1
 80041a6:	2300      	movhi	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e006      	b.n	80041ba <HAL_I2C_Init+0x92>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a7d      	ldr	r2, [pc, #500]	; (80043a4 <HAL_I2C_Init+0x27c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0e7      	b.n	8004392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a78      	ldr	r2, [pc, #480]	; (80043a8 <HAL_I2C_Init+0x280>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0c9b      	lsrs	r3, r3, #18
 80041cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a6a      	ldr	r2, [pc, #424]	; (800439c <HAL_I2C_Init+0x274>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d802      	bhi.n	80041fc <HAL_I2C_Init+0xd4>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3301      	adds	r3, #1
 80041fa:	e009      	b.n	8004210 <HAL_I2C_Init+0xe8>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	4a69      	ldr	r2, [pc, #420]	; (80043ac <HAL_I2C_Init+0x284>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	3301      	adds	r3, #1
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	495c      	ldr	r1, [pc, #368]	; (800439c <HAL_I2C_Init+0x274>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d819      	bhi.n	8004264 <HAL_I2C_Init+0x13c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e59      	subs	r1, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fbb1 f3f3 	udiv	r3, r1, r3
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004244:	400b      	ands	r3, r1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_I2C_Init+0x138>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1e59      	subs	r1, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	fbb1 f3f3 	udiv	r3, r1, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425e:	e051      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 8004260:	2304      	movs	r3, #4
 8004262:	e04f      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <HAL_I2C_Init+0x168>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e58      	subs	r0, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	440b      	add	r3, r1
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e012      	b.n	80042b6 <HAL_I2C_Init+0x18e>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e58      	subs	r0, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	0099      	lsls	r1, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Init+0x196>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e022      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10e      	bne.n	80042e4 <HAL_I2C_Init+0x1bc>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1e58      	subs	r0, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	e00f      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	0099      	lsls	r1, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6911      	ldr	r1, [r2, #16]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	430b      	orrs	r3, r1
 8004346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	000186a0 	.word	0x000186a0
 80043a0:	001e847f 	.word	0x001e847f
 80043a4:	003d08ff 	.word	0x003d08ff
 80043a8:	431bde83 	.word	0x431bde83
 80043ac:	10624dd3 	.word	0x10624dd3

080043b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e128      	b.n	8004614 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a90      	ldr	r2, [pc, #576]	; (800461c <HAL_I2S_Init+0x26c>)
 80043da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fd fc3f 	bl	8001c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043f8:	f023 030f 	bic.w	r3, r3, #15
 80043fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2202      	movs	r2, #2
 8004404:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d060      	beq.n	80044d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004416:	2310      	movs	r3, #16
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e001      	b.n	8004420 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800441c:	2320      	movs	r3, #32
 800441e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b20      	cmp	r3, #32
 8004426:	d802      	bhi.n	800442e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800442e:	2001      	movs	r0, #1
 8004430:	f001 f9a0 	bl	8005774 <HAL_RCCEx_GetPeriphCLKFreq>
 8004434:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443e:	d125      	bne.n	800448c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	3305      	adds	r3, #5
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e01f      	b.n	80044aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	3305      	adds	r3, #5
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e00e      	b.n	80044aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	3305      	adds	r3, #5
 80044a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4a5c      	ldr	r2, [pc, #368]	; (8004620 <HAL_I2S_Init+0x270>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e003      	b.n	80044d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044d0:	2302      	movs	r3, #2
 80044d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d902      	bls.n	80044e4 <HAL_I2S_Init+0x134>
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2bff      	cmp	r3, #255	; 0xff
 80044e2:	d907      	bls.n	80044f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f043 0210 	orr.w	r2, r3, #16
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e08f      	b.n	8004614 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	ea42 0103 	orr.w	r1, r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	430a      	orrs	r2, r1
 8004506:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004512:	f023 030f 	bic.w	r3, r3, #15
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6851      	ldr	r1, [r2, #4]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68d2      	ldr	r2, [r2, #12]
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6992      	ldr	r2, [r2, #24]
 800452a:	430a      	orrs	r2, r1
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d161      	bne.n	8004604 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_I2S_Init+0x274>)
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_I2S_Init+0x278>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_I2S_Init+0x1a4>
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_I2S_Init+0x27c>)
 8004552:	e001      	b.n	8004558 <HAL_I2S_Init+0x1a8>
 8004554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4932      	ldr	r1, [pc, #200]	; (8004628 <HAL_I2S_Init+0x278>)
 8004560:	428a      	cmp	r2, r1
 8004562:	d101      	bne.n	8004568 <HAL_I2S_Init+0x1b8>
 8004564:	4a31      	ldr	r2, [pc, #196]	; (800462c <HAL_I2S_Init+0x27c>)
 8004566:	e001      	b.n	800456c <HAL_I2S_Init+0x1bc>
 8004568:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800456c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <HAL_I2S_Init+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_I2S_Init+0x1d4>
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_I2S_Init+0x27c>)
 8004582:	e001      	b.n	8004588 <HAL_I2S_Init+0x1d8>
 8004584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004588:	2202      	movs	r2, #2
 800458a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_I2S_Init+0x278>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_I2S_Init+0x1ea>
 8004596:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_I2S_Init+0x27c>)
 8004598:	e001      	b.n	800459e <HAL_I2S_Init+0x1ee>
 800459a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045aa:	d003      	beq.n	80045b4 <HAL_I2S_Init+0x204>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e001      	b.n	80045c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045ca:	4313      	orrs	r3, r2
 80045cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045d4:	4313      	orrs	r3, r2
 80045d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045de:	4313      	orrs	r3, r2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_I2S_Init+0x278>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_I2S_Init+0x24c>
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_I2S_Init+0x27c>)
 80045fa:	e001      	b.n	8004600 <HAL_I2S_Init+0x250>
 80045fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004600:	897a      	ldrh	r2, [r7, #10]
 8004602:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3720      	adds	r7, #32
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	08004727 	.word	0x08004727
 8004620:	cccccccd 	.word	0xcccccccd
 8004624:	0800483d 	.word	0x0800483d
 8004628:	40003800 	.word	0x40003800
 800462c:	40003400 	.word	0x40003400

08004630 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	881a      	ldrh	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffb8 	bl	8004630 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	b292      	uxth	r2, r2
 80046dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10e      	bne.n	800471e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800470e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff93 	bl	8004644 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b04      	cmp	r3, #4
 8004740:	d13a      	bne.n	80047b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d109      	bne.n	8004760 <I2S_IRQHandler+0x3a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d102      	bne.n	8004760 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ffb4 	bl	80046c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d126      	bne.n	80047b8 <I2S_IRQHandler+0x92>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d11f      	bne.n	80047b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004786:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f043 0202 	orr.w	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ff50 	bl	8004658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d136      	bne.n	8004832 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d109      	bne.n	80047e2 <I2S_IRQHandler+0xbc>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d102      	bne.n	80047e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff45 	bl	800466c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d122      	bne.n	8004832 <I2S_IRQHandler+0x10c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d11b      	bne.n	8004832 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004808:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	f043 0204 	orr.w	r2, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff13 	bl	8004658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4aa2      	ldr	r2, [pc, #648]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004856:	4ba2      	ldr	r3, [pc, #648]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004858:	e001      	b.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800485a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a9b      	ldr	r2, [pc, #620]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004874:	4b9a      	ldr	r3, [pc, #616]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004876:	e001      	b.n	800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d004      	beq.n	8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 8099 	bne.w	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f925 	bl	8004af8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9c8 	bl	8004c58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d13a      	bne.n	8004948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d035      	beq.n	8004948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7e      	ldr	r2, [pc, #504]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048e6:	4b7e      	ldr	r3, [pc, #504]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048e8:	e001      	b.n	80048ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80048ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4979      	ldr	r1, [pc, #484]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048f6:	428b      	cmp	r3, r1
 80048f8:	d101      	bne.n	80048fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048fa:	4b79      	ldr	r3, [pc, #484]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048fc:	e001      	b.n	8004902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004906:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004916:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f043 0202 	orr.w	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fe88 	bl	8004658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b08      	cmp	r3, #8
 8004950:	f040 80be 	bne.w	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80b8 	beq.w	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800496e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a59      	ldr	r2, [pc, #356]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800497a:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800497c:	e001      	b.n	8004982 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800497e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4954      	ldr	r1, [pc, #336]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800498a:	428b      	cmp	r3, r1
 800498c:	d101      	bne.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004990:	e001      	b.n	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800499a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fe4a 	bl	8004658 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049c4:	e084      	b.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d107      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8be 	bl	8004b5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8fd 	bl	8004bf4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d12f      	bne.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02a      	beq.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2e      	ldr	r2, [pc, #184]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a28:	4b2d      	ldr	r3, [pc, #180]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a2a:	e001      	b.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4929      	ldr	r1, [pc, #164]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a38:	428b      	cmp	r3, r1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a3e:	e001      	b.n	8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f043 0202 	orr.w	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fdfa 	bl	8004658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d131      	bne.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02c      	beq.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a84:	e001      	b.n	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4912      	ldr	r1, [pc, #72]	; (8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a92:	428b      	cmp	r3, r1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a98:	e001      	b.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ab2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	f043 0204 	orr.w	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff fdc5 	bl	8004658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ace:	e000      	b.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ad0:	bf00      	nop
}
 8004ad2:	bf00      	nop
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40003800 	.word	0x40003800
 8004ae0:	40003400 	.word	0x40003400

08004ae4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	1c99      	adds	r1, r3, #2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6251      	str	r1, [r2, #36]	; 0x24
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d113      	bne.n	8004b52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffc9 	bl	8004ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c99      	adds	r1, r3, #2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004b6e:	8819      	ldrh	r1, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <I2SEx_TxISR_I2SExt+0x90>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <I2SEx_TxISR_I2SExt+0x22>
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8004b7c:	e001      	b.n	8004b82 <I2SEx_TxISR_I2SExt+0x26>
 8004b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b82:	460a      	mov	r2, r1
 8004b84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d121      	bne.n	8004be2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <I2SEx_TxISR_I2SExt+0x90>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <I2SEx_TxISR_I2SExt+0x50>
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8004baa:	e001      	b.n	8004bb0 <I2SEx_TxISR_I2SExt+0x54>
 8004bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	490d      	ldr	r1, [pc, #52]	; (8004bec <I2SEx_TxISR_I2SExt+0x90>)
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	d101      	bne.n	8004bc0 <I2SEx_TxISR_I2SExt+0x64>
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8004bbe:	e001      	b.n	8004bc4 <I2SEx_TxISR_I2SExt+0x68>
 8004bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff81 	bl	8004ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40003800 	.word	0x40003800
 8004bf0:	40003400 	.word	0x40003400

08004bf4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68d8      	ldr	r0, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	1c99      	adds	r1, r3, #2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c0c:	b282      	uxth	r2, r0
 8004c0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d113      	bne.n	8004c50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ff4a 	bl	8004ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <I2SEx_RxISR_I2SExt+0x16>
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <I2SEx_RxISR_I2SExt+0x94>)
 8004c6c:	e001      	b.n	8004c72 <I2SEx_RxISR_I2SExt+0x1a>
 8004c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c72:	68d8      	ldr	r0, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	1c99      	adds	r1, r3, #2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c7e:	b282      	uxth	r2, r0
 8004c80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d121      	bne.n	8004cde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <I2SEx_RxISR_I2SExt+0x50>
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <I2SEx_RxISR_I2SExt+0x94>)
 8004ca6:	e001      	b.n	8004cac <I2SEx_RxISR_I2SExt+0x54>
 8004ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	490d      	ldr	r1, [pc, #52]	; (8004ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	d101      	bne.n	8004cbc <I2SEx_RxISR_I2SExt+0x64>
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <I2SEx_RxISR_I2SExt+0x94>)
 8004cba:	e001      	b.n	8004cc0 <I2SEx_RxISR_I2SExt+0x68>
 8004cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff03 	bl	8004ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40003800 	.word	0x40003800
 8004cec:	40003400 	.word	0x40003400

08004cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e264      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d075      	beq.n	8004dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d0e:	4ba3      	ldr	r3, [pc, #652]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d00c      	beq.n	8004d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d1a:	4ba0      	ldr	r3, [pc, #640]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d112      	bne.n	8004d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d26:	4b9d      	ldr	r3, [pc, #628]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d32:	d10b      	bne.n	8004d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d34:	4b99      	ldr	r3, [pc, #612]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05b      	beq.n	8004df8 <HAL_RCC_OscConfig+0x108>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d157      	bne.n	8004df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e23f      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d106      	bne.n	8004d64 <HAL_RCC_OscConfig+0x74>
 8004d56:	4b91      	ldr	r3, [pc, #580]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a90      	ldr	r2, [pc, #576]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e01d      	b.n	8004da0 <HAL_RCC_OscConfig+0xb0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x98>
 8004d6e:	4b8b      	ldr	r3, [pc, #556]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a8a      	ldr	r2, [pc, #552]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4b88      	ldr	r3, [pc, #544]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a87      	ldr	r2, [pc, #540]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e00b      	b.n	8004da0 <HAL_RCC_OscConfig+0xb0>
 8004d88:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a83      	ldr	r2, [pc, #524]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	4b81      	ldr	r3, [pc, #516]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a80      	ldr	r2, [pc, #512]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d013      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da8:	f7fd f972 	bl	8002090 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db0:	f7fd f96e 	bl	8002090 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	; 0x64
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e204      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc2:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0xc0>
 8004dce:	e014      	b.n	8004dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fd f95e 	bl	8002090 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd8:	f7fd f95a 	bl	8002090 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1f0      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dea:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0xe8>
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d063      	beq.n	8004ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e06:	4b65      	ldr	r3, [pc, #404]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e12:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d11c      	bne.n	8004e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e1e:	4b5f      	ldr	r3, [pc, #380]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d116      	bne.n	8004e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2a:	4b5c      	ldr	r3, [pc, #368]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_RCC_OscConfig+0x152>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e1c4      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e42:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4952      	ldr	r1, [pc, #328]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e56:	e03a      	b.n	8004ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e60:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <HAL_RCC_OscConfig+0x2b0>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd f913 	bl	8002090 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fd f90f 	bl	8002090 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1a5      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e80:	4b46      	ldr	r3, [pc, #280]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4940      	ldr	r1, [pc, #256]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]
 8004ea0:	e015      	b.n	8004ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ea2:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <HAL_RCC_OscConfig+0x2b0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd f8f2 	bl	8002090 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb0:	f7fd f8ee 	bl	8002090 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e184      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d030      	beq.n	8004f3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee2:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_RCC_OscConfig+0x2b4>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fd f8d2 	bl	8002090 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fd f8ce 	bl	8002090 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e164      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x200>
 8004f0e:	e015      	b.n	8004f3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f10:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_RCC_OscConfig+0x2b4>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f16:	f7fd f8bb 	bl	8002090 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f1e:	f7fd f8b7 	bl	8002090 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e14d      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f0      	bne.n	8004f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a0 	beq.w	800508a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_OscConfig+0x2b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d121      	bne.n	8004fca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_RCC_OscConfig+0x2b8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <HAL_RCC_OscConfig+0x2b8>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fd f87d 	bl	8002090 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	e011      	b.n	8004fbe <HAL_RCC_OscConfig+0x2ce>
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	42470e80 	.word	0x42470e80
 8004fa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fac:	f7fd f870 	bl	8002090 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e106      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbe:	4b85      	ldr	r3, [pc, #532]	; (80051d4 <HAL_RCC_OscConfig+0x4e4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x2f0>
 8004fd2:	4b81      	ldr	r3, [pc, #516]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a80      	ldr	r2, [pc, #512]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fde:	e01c      	b.n	800501a <HAL_RCC_OscConfig+0x32a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d10c      	bne.n	8005002 <HAL_RCC_OscConfig+0x312>
 8004fe8:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a7a      	ldr	r2, [pc, #488]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004fee:	f043 0304 	orr.w	r3, r3, #4
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff4:	4b78      	ldr	r3, [pc, #480]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	4a77      	ldr	r2, [pc, #476]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8005000:	e00b      	b.n	800501a <HAL_RCC_OscConfig+0x32a>
 8005002:	4b75      	ldr	r3, [pc, #468]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a74      	ldr	r2, [pc, #464]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	6713      	str	r3, [r2, #112]	; 0x70
 800500e:	4b72      	ldr	r3, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a71      	ldr	r2, [pc, #452]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fd f835 	bl	8002090 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fd f831 	bl	8002090 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	; 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0c5      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ee      	beq.n	800502a <HAL_RCC_OscConfig+0x33a>
 800504c:	e014      	b.n	8005078 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504e:	f7fd f81f 	bl	8002090 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fd f81b 	bl	8002090 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0af      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506c:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ee      	bne.n	8005056 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d105      	bne.n	800508a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a55      	ldr	r2, [pc, #340]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 809b 	beq.w	80051ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b08      	cmp	r3, #8
 800509e:	d05c      	beq.n	800515a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d141      	bne.n	800512c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b4c      	ldr	r3, [pc, #304]	; (80051dc <HAL_RCC_OscConfig+0x4ec>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fc ffef 	bl	8002090 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b6:	f7fc ffeb 	bl	8002090 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e081      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	019b      	lsls	r3, r3, #6
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	3b01      	subs	r3, #1
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	4937      	ldr	r1, [pc, #220]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fe:	4b37      	ldr	r3, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x4ec>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fc ffc4 	bl	8002090 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fc ffc0 	bl	8002090 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e056      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x41c>
 800512a:	e04e      	b.n	80051ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_OscConfig+0x4ec>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fc ffad 	bl	8002090 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513a:	f7fc ffa9 	bl	8002090 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e03f      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514c:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x44a>
 8005158:	e037      	b.n	80051ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e032      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d028      	beq.n	80051c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d121      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d11a      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005196:	4013      	ands	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800519c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	3b01      	subs	r3, #1
 80051b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40007000 	.word	0x40007000
 80051d8:	40023800 	.word	0x40023800
 80051dc:	42470060 	.word	0x42470060

080051e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0cc      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f4:	4b68      	ldr	r3, [pc, #416]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d90c      	bls.n	800521c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b65      	ldr	r3, [pc, #404]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0b8      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005234:	4b59      	ldr	r3, [pc, #356]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a58      	ldr	r2, [pc, #352]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800523e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a52      	ldr	r2, [pc, #328]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	494d      	ldr	r1, [pc, #308]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d044      	beq.n	8005300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d119      	bne.n	80052be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e07f      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d003      	beq.n	800529e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800529a:	2b03      	cmp	r3, #3
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529e:	4b3f      	ldr	r3, [pc, #252]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e06f      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ae:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e067      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f023 0203 	bic.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4934      	ldr	r1, [pc, #208]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052d0:	f7fc fede 	bl	8002090 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fc feda 	bl	8002090 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e04f      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	4b2b      	ldr	r3, [pc, #172]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 020c 	and.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1eb      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d20c      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e032      	b.n	800538e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4916      	ldr	r1, [pc, #88]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	490e      	ldr	r1, [pc, #56]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005366:	f000 f821 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 800536a:	4602      	mov	r2, r0
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	490a      	ldr	r1, [pc, #40]	; (80053a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	5ccb      	ldrb	r3, [r1, r3]
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fe3e 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800acd8 	.word	0x0800acd8
 80053a4:	20000000 	.word	0x20000000
 80053a8:	20000004 	.word	0x20000004

080053ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	2300      	movs	r3, #0
 80053be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c4:	4b67      	ldr	r3, [pc, #412]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d00d      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x40>
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	f200 80bd 	bhi.w	8005550 <HAL_RCC_GetSysClockFreq+0x1a4>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x34>
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d003      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053de:	e0b7      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053e0:	4b61      	ldr	r3, [pc, #388]	; (8005568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053e2:	60bb      	str	r3, [r7, #8]
       break;
 80053e4:	e0b7      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053e6:	4b61      	ldr	r3, [pc, #388]	; (800556c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80053e8:	60bb      	str	r3, [r7, #8]
      break;
 80053ea:	e0b4      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053ec:	4b5d      	ldr	r3, [pc, #372]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053f6:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04d      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005402:	4b58      	ldr	r3, [pc, #352]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005412:	f04f 0100 	mov.w	r1, #0
 8005416:	ea02 0800 	and.w	r8, r2, r0
 800541a:	ea03 0901 	and.w	r9, r3, r1
 800541e:	4640      	mov	r0, r8
 8005420:	4649      	mov	r1, r9
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	014b      	lsls	r3, r1, #5
 800542c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005430:	0142      	lsls	r2, r0, #5
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	ebb0 0008 	subs.w	r0, r0, r8
 800543a:	eb61 0109 	sbc.w	r1, r1, r9
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	018b      	lsls	r3, r1, #6
 8005448:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800544c:	0182      	lsls	r2, r0, #6
 800544e:	1a12      	subs	r2, r2, r0
 8005450:	eb63 0301 	sbc.w	r3, r3, r1
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	00d9      	lsls	r1, r3, #3
 800545e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005462:	00d0      	lsls	r0, r2, #3
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	eb12 0208 	adds.w	r2, r2, r8
 800546c:	eb43 0309 	adc.w	r3, r3, r9
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	0259      	lsls	r1, r3, #9
 800547a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800547e:	0250      	lsls	r0, r2, #9
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	f7fb fb7e 	bl	8000b90 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4613      	mov	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e04a      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	461a      	mov	r2, r3
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	ea02 0400 	and.w	r4, r2, r0
 80054b6:	ea03 0501 	and.w	r5, r3, r1
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	014b      	lsls	r3, r1, #5
 80054c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054cc:	0142      	lsls	r2, r0, #5
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	1b00      	subs	r0, r0, r4
 80054d4:	eb61 0105 	sbc.w	r1, r1, r5
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	018b      	lsls	r3, r1, #6
 80054e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054e6:	0182      	lsls	r2, r0, #6
 80054e8:	1a12      	subs	r2, r2, r0
 80054ea:	eb63 0301 	sbc.w	r3, r3, r1
 80054ee:	f04f 0000 	mov.w	r0, #0
 80054f2:	f04f 0100 	mov.w	r1, #0
 80054f6:	00d9      	lsls	r1, r3, #3
 80054f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054fc:	00d0      	lsls	r0, r2, #3
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	1912      	adds	r2, r2, r4
 8005504:	eb45 0303 	adc.w	r3, r5, r3
 8005508:	f04f 0000 	mov.w	r0, #0
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	0299      	lsls	r1, r3, #10
 8005512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005516:	0290      	lsls	r0, r2, #10
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	f7fb fb32 	bl	8000b90 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	3301      	adds	r3, #1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	60bb      	str	r3, [r7, #8]
      break;
 800554e:	e002      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005552:	60bb      	str	r3, [r7, #8]
      break;
 8005554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005556:	68bb      	ldr	r3, [r7, #8]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	00f42400 	.word	0x00f42400
 800556c:	007a1200 	.word	0x007a1200

08005570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <HAL_RCC_GetHCLKFreq+0x14>)
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000000 	.word	0x20000000

08005588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800558c:	f7ff fff0 	bl	8005570 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	0a9b      	lsrs	r3, r3, #10
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4903      	ldr	r1, [pc, #12]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40023800 	.word	0x40023800
 80055ac:	0800ace8 	.word	0x0800ace8

080055b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d035      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055d8:	4b62      	ldr	r3, [pc, #392]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055de:	f7fc fd57 	bl	8002090 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e4:	e008      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055e6:	f7fc fd53 	bl	8002090 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0b0      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f8:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f0      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	019a      	lsls	r2, r3, #6
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	071b      	lsls	r3, r3, #28
 8005610:	4955      	ldr	r1, [pc, #340]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005618:	4b52      	ldr	r3, [pc, #328]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800561e:	f7fc fd37 	bl	8002090 <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005626:	f7fc fd33 	bl	8002090 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e090      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005638:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8083 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	4b44      	ldr	r3, [pc, #272]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	4a43      	ldr	r2, [pc, #268]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6413      	str	r3, [r2, #64]	; 0x40
 8005662:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800566e:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a3e      	ldr	r2, [pc, #248]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005678:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800567a:	f7fc fd09 	bl	8002090 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fc fd05 	bl	8002090 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e062      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005694:	4b35      	ldr	r3, [pc, #212]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a0:	4b31      	ldr	r3, [pc, #196]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d028      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c8:	4b29      	ldr	r3, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ce:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056d4:	4a24      	ldr	r2, [pc, #144]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d114      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056e6:	f7fc fcd3 	bl	8002090 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fc fccf 	bl	8002090 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e02a      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571c:	d10d      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800572e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005732:	490d      	ldr	r1, [pc, #52]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]
 8005738:	e005      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005740:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005744:	6093      	str	r3, [r2, #8]
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005752:	4905      	ldr	r1, [pc, #20]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005754:	4313      	orrs	r3, r2
 8005756:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	42470068 	.word	0x42470068
 8005768:	40023800 	.word	0x40023800
 800576c:	40007000 	.word	0x40007000
 8005770:	42470e40 	.word	0x42470e40

08005774 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d13e      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d12f      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057aa:	617b      	str	r3, [r7, #20]
          break;
 80057ac:	e02f      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ba:	d108      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057bc:	4b18      	ldr	r3, [pc, #96]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	e007      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057ce:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80057d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	099b      	lsrs	r3, r3, #6
 80057e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
 80057f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f8:	0f1b      	lsrs	r3, r3, #28
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	617b      	str	r3, [r7, #20]
          break;
 8005806:	e002      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
          break;
 800580c:	bf00      	nop
        }
      }
      break;
 800580e:	bf00      	nop
    }
  }
  return frequency;
 8005810:	697b      	ldr	r3, [r7, #20]
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	00bb8000 	.word	0x00bb8000
 8005828:	007a1200 	.word	0x007a1200
 800582c:	00f42400 	.word	0x00f42400

08005830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e07b      	b.n	800593a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005852:	d009      	beq.n	8005868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	61da      	str	r2, [r3, #28]
 800585a:	e005      	b.n	8005868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc fa54 	bl	8001d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	ea42 0103 	orr.w	r1, r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	f003 0104 	and.w	r1, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0210 	and.w	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e041      	b.n	80059d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fc fa29 	bl	8001dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f000 fad9 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e041      	b.n	8005a76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f839 	bl	8005a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 fa8a 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_TIM_PWM_Start+0x24>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e022      	b.n	8005afe <HAL_TIM_PWM_Start+0x6a>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d109      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0x3e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	e015      	b.n	8005afe <HAL_TIM_PWM_Start+0x6a>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d109      	bne.n	8005aec <HAL_TIM_PWM_Start+0x58>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	e008      	b.n	8005afe <HAL_TIM_PWM_Start+0x6a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07c      	b.n	8005c00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0x82>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b14:	e013      	b.n	8005b3e <HAL_TIM_PWM_Start+0xaa>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x92>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b24:	e00b      	b.n	8005b3e <HAL_TIM_PWM_Start+0xaa>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b34:	e003      	b.n	8005b3e <HAL_TIM_PWM_Start+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fce0 	bl	800650c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <HAL_TIM_PWM_Start+0x174>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_PWM_Start+0xcc>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <HAL_TIM_PWM_Start+0x178>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIM_PWM_Start+0xd0>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_TIM_PWM_Start+0xd2>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <HAL_TIM_PWM_Start+0x174>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d022      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8c:	d01d      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <HAL_TIM_PWM_Start+0x17c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <HAL_TIM_PWM_Start+0x180>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_TIM_PWM_Start+0x184>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00e      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <HAL_TIM_PWM_Start+0x178>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <HAL_TIM_PWM_Start+0x188>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIM_PWM_Start+0x136>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <HAL_TIM_PWM_Start+0x18c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d111      	bne.n	8005bee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d010      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	e007      	b.n	8005bfe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40001800 	.word	0x40001800

08005c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0ae      	b.n	8005da0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	f200 809f 	bhi.w	8005d90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c8d 	.word	0x08005c8d
 8005c5c:	08005d91 	.word	0x08005d91
 8005c60:	08005d91 	.word	0x08005d91
 8005c64:	08005d91 	.word	0x08005d91
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005d91 	.word	0x08005d91
 8005c70:	08005d91 	.word	0x08005d91
 8005c74:	08005d91 	.word	0x08005d91
 8005c78:	08005d0f 	.word	0x08005d0f
 8005c7c:	08005d91 	.word	0x08005d91
 8005c80:	08005d91 	.word	0x08005d91
 8005c84:	08005d91 	.word	0x08005d91
 8005c88:	08005d4f 	.word	0x08005d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f9f0 	bl	8006078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0208 	orr.w	r2, r2, #8
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
      break;
 8005cca:	e064      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fa40 	bl	8006158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	619a      	str	r2, [r3, #24]
      break;
 8005d0c:	e043      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fa95 	bl	8006244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0208 	orr.w	r2, r2, #8
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0204 	bic.w	r2, r2, #4
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
      break;
 8005d4c:	e023      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fae9 	bl	800632c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69d9      	ldr	r1, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	021a      	lsls	r2, r3, #8
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	61da      	str	r2, [r3, #28]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
      break;
 8005d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0b4      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x186>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfc:	d03e      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0xd4>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	f200 8087 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	f000 8086 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x172>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d87f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d01a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xa6>
 8005e18:	2b70      	cmp	r3, #112	; 0x70
 8005e1a:	d87b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d050      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d877      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d03c      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e28:	2b50      	cmp	r3, #80	; 0x50
 8005e2a:	d873      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d058      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d86f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d064      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d86b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d060      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d867      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d05a      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x15a>
 8005e4c:	e062      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6899      	ldr	r1, [r3, #8]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f000 fb35 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	609a      	str	r2, [r3, #8]
      break;
 8005e7a:	e04f      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 fb1e 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9e:	609a      	str	r2, [r3, #8]
      break;
 8005ea0:	e03c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fa92 	bl	80063d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2150      	movs	r1, #80	; 0x50
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 faeb 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e02c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fab1 	bl	8006436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2160      	movs	r1, #96	; 0x60
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fadb 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e01c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fa72 	bl	80063d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 facb 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005f00:	e00c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 fac2 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005f12:	e003      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
      break;
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d027      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d023      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d017      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <TIM_Base_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a25      	ldr	r2, [pc, #148]	; (800606c <TIM_Base_SetConfig+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a24      	ldr	r2, [pc, #144]	; (8006070 <TIM_Base_SetConfig+0x138>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <TIM_Base_SetConfig+0x13c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d108      	bne.n	8005ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <TIM_Base_SetConfig+0x114>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800
 800606c:	40001800 	.word	0x40001800
 8006070:	40001c00 	.word	0x40001c00
 8006074:	40002000 	.word	0x40002000

08006078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 0302 	bic.w	r3, r3, #2
 80060c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <TIM_OC1_SetConfig+0xd8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC1_SetConfig+0x64>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <TIM_OC1_SetConfig+0xdc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <TIM_OC1_SetConfig+0xd8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_OC1_SetConfig+0x8e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a14      	ldr	r2, [pc, #80]	; (8006154 <TIM_OC1_SetConfig+0xdc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d111      	bne.n	800612a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	621a      	str	r2, [r3, #32]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0210 	bic.w	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0320 	bic.w	r3, r3, #32
 80061a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <TIM_OC2_SetConfig+0xe4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC2_SetConfig+0x68>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a21      	ldr	r2, [pc, #132]	; (8006240 <TIM_OC2_SetConfig+0xe8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10d      	bne.n	80061dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a17      	ldr	r2, [pc, #92]	; (800623c <TIM_OC2_SetConfig+0xe4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC2_SetConfig+0x94>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a16      	ldr	r2, [pc, #88]	; (8006240 <TIM_OC2_SetConfig+0xe8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d113      	bne.n	8006214 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400

08006244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a21      	ldr	r2, [pc, #132]	; (8006324 <TIM_OC3_SetConfig+0xe0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC3_SetConfig+0x66>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <TIM_OC3_SetConfig+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10d      	bne.n	80062c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <TIM_OC3_SetConfig+0xe0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_OC3_SetConfig+0x92>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <TIM_OC3_SetConfig+0xe4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d113      	bne.n	80062fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <TIM_OC4_SetConfig+0xa4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC4_SetConfig+0x68>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a11      	ldr	r2, [pc, #68]	; (80063d4 <TIM_OC4_SetConfig+0xa8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d109      	bne.n	80063a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40010400 	.word	0x40010400

080063d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 030a 	bic.w	r3, r3, #10
 8006414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006436:	b480      	push	{r7}
 8006438:	b087      	sub	sp, #28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0210 	bic.w	r2, r3, #16
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f043 0307 	orr.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e05a      	b.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a21      	ldr	r2, [pc, #132]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d01d      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10c      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010000 	.word	0x40010000
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40001800 	.word	0x40001800

08006650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006650:	b084      	sub	sp, #16
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	f107 001c 	add.w	r0, r7, #28
 800665e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	2b01      	cmp	r3, #1
 8006666:	d122      	bne.n	80066ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d105      	bne.n	80066a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9a0 	bl	80069e8 <USB_CoreReset>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e01a      	b.n	80066e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f994 	bl	80069e8 <USB_CoreReset>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
 80066d6:	e005      	b.n	80066e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10b      	bne.n	8006702 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f043 0206 	orr.w	r2, r3, #6
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800670e:	b004      	add	sp, #16
 8006710:	4770      	bx	lr

08006712 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f043 0201 	orr.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 0201 	bic.w	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d115      	bne.n	80067a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006784:	2001      	movs	r0, #1
 8006786:	f7fb fc8f 	bl	80020a8 <HAL_Delay>
      ms++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f91a 	bl	80069ca <USB_GetMode>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d01e      	beq.n	80067da <USB_SetCurrentMode+0x84>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b31      	cmp	r3, #49	; 0x31
 80067a0:	d9f0      	bls.n	8006784 <USB_SetCurrentMode+0x2e>
 80067a2:	e01a      	b.n	80067da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d115      	bne.n	80067d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067b6:	2001      	movs	r0, #1
 80067b8:	f7fb fc76 	bl	80020a8 <HAL_Delay>
      ms++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f901 	bl	80069ca <USB_GetMode>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <USB_SetCurrentMode+0x84>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b31      	cmp	r3, #49	; 0x31
 80067d2:	d9f0      	bls.n	80067b6 <USB_SetCurrentMode+0x60>
 80067d4:	e001      	b.n	80067da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e005      	b.n	80067e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b32      	cmp	r3, #50	; 0x32
 80067de:	d101      	bne.n	80067e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	019b      	lsls	r3, r3, #6
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	4a08      	ldr	r2, [pc, #32]	; (8006834 <USB_FlushTxFifo+0x44>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e006      	b.n	8006828 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d0f1      	beq.n	800680a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	00030d40 	.word	0x00030d40

08006838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2210      	movs	r2, #16
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	4a08      	ldr	r2, [pc, #32]	; (8006874 <USB_FlushRxFifo+0x3c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e006      	b.n	8006868 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b10      	cmp	r3, #16
 8006864:	d0f1      	beq.n	800684a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	00030d40 	.word	0x00030d40

08006878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	460b      	mov	r3, r1
 8006888:	71fb      	strb	r3, [r7, #7]
 800688a:	4613      	mov	r3, r2
 800688c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d123      	bne.n	80068e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800689e:	88bb      	ldrh	r3, [r7, #4]
 80068a0:	3303      	adds	r3, #3
 80068a2:	089b      	lsrs	r3, r3, #2
 80068a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068a6:	2300      	movs	r3, #0
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e018      	b.n	80068de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	031a      	lsls	r2, r3, #12
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b8:	461a      	mov	r2, r3
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3301      	adds	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	3301      	adds	r3, #1
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3e2      	bcc.n	80068ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3724      	adds	r7, #36	; 0x24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b08b      	sub	sp, #44	; 0x2c
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	b29b      	uxth	r3, r3
 8006910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800691a:	2300      	movs	r3, #0
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	e014      	b.n	800694a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	601a      	str	r2, [r3, #0]
    pDest++;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	3301      	adds	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	3301      	adds	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	3301      	adds	r3, #1
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	3301      	adds	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	3301      	adds	r3, #1
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d3e6      	bcc.n	8006920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01e      	beq.n	8006996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006962:	461a      	mov	r2, r3
 8006964:	f107 0310 	add.w	r3, r7, #16
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	b2da      	uxtb	r2, r3
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	701a      	strb	r2, [r3, #0]
      i++;
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	3301      	adds	r3, #1
 8006982:	623b      	str	r3, [r7, #32]
      pDest++;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	3301      	adds	r3, #1
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800698a:	8bfb      	ldrh	r3, [r7, #30]
 800698c:	3b01      	subs	r3, #1
 800698e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ea      	bne.n	800696c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006998:	4618      	mov	r0, r3
 800699a:	372c      	adds	r7, #44	; 0x2c
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4013      	ands	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0301 	and.w	r3, r3, #1
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	4a13      	ldr	r2, [pc, #76]	; (8006a48 <USB_CoreReset+0x60>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e01a      	b.n	8006a3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	daf3      	bge.n	80069f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f043 0201 	orr.w	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <USB_CoreReset+0x60>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d0f1      	beq.n	8006a1c <USB_CoreReset+0x34>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	f107 001c 	add.w	r0, r7, #28
 8006a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d018      	beq.n	8006ad0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10a      	bne.n	8006aba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ab2:	f043 0304 	orr.w	r3, r3, #4
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	e014      	b.n	8006ae4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e009      	b.n	8006ae4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ade:	f023 0304 	bic.w	r3, r3, #4
 8006ae2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006ae4:	2110      	movs	r1, #16
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fe82 	bl	80067f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fea3 	bl	8006838 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e015      	b.n	8006b24 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	461a      	mov	r2, r3
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3e5      	bcc.n	8006af8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <USB_HostInit+0x154>)
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_HostInit+0x158>)
 8006b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b5c:	e009      	b.n	8006b72 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a10      	ldr	r2, [pc, #64]	; (8006ba8 <USB_HostInit+0x15c>)
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <USB_HostInit+0x160>)
 8006b6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f043 0210 	orr.w	r2, r3, #16
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <USB_HostInit+0x164>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9c:	b004      	add	sp, #16
 8006b9e:	4770      	bx	lr
 8006ba0:	01000200 	.word	0x01000200
 8006ba4:	00e00300 	.word	0x00e00300
 8006ba8:	00600080 	.word	0x00600080
 8006bac:	004000e0 	.word	0x004000e0
 8006bb0:	a3200008 	.word	0xa3200008

08006bb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bec:	4313      	orrs	r3, r2
 8006bee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c02:	6053      	str	r3, [r2, #4]
 8006c04:	e009      	b.n	8006c1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d106      	bne.n	8006c1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c12:	461a      	mov	r2, r3
 8006c14:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <USB_DriveVbus+0x44>
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d106      	bne.n	8006c6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c76:	d109      	bne.n	8006c8c <USB_DriveVbus+0x64>
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	0c5b      	lsrs	r3, r3, #17
 8006cb8:	f003 0303 	and.w	r3, r3, #3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	b29b      	uxth	r3, r3
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	70fb      	strb	r3, [r7, #3]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70bb      	strb	r3, [r7, #2]
 8006d02:	4613      	mov	r3, r2
 8006d04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d87e      	bhi.n	8006e28 <USB_HC_Init+0x13c>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USB_HC_Init+0x44>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006deb 	.word	0x08006deb
 8006d38:	08006d41 	.word	0x08006d41
 8006d3c:	08006dad 	.word	0x08006dad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da10      	bge.n	8006d7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006d7c:	e057      	b.n	8006e2e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d051      	beq.n	8006e2e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	78fa      	ldrb	r2, [r7, #3]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006da8:	60d3      	str	r3, [r2, #12]
      break;
 8006daa:	e040      	b.n	8006e2e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db8:	461a      	mov	r2, r3
 8006dba:	f240 639d 	movw	r3, #1693	; 0x69d
 8006dbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da34      	bge.n	8006e32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006de8:	e023      	b.n	8006e32 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df6:	461a      	mov	r2, r3
 8006df8:	f240 2325 	movw	r3, #549	; 0x225
 8006dfc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006dfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da17      	bge.n	8006e36 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e26:	e006      	b.n	8006e36 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	77fb      	strb	r3, [r7, #31]
      break;
 8006e2c:	e004      	b.n	8006e38 <USB_HC_Init+0x14c>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <USB_HC_Init+0x14c>
      break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <USB_HC_Init+0x14c>
      break;
 8006e36:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	2101      	movs	r1, #1
 8006e48:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4c:	6939      	ldr	r1, [r7, #16]
 8006e4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e52:	4313      	orrs	r3, r2
 8006e54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da03      	bge.n	8006e72 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e001      	b.n	8006e76 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff ff0f 	bl	8006c9a <USB_GetHostSpeed>
 8006e7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d106      	bne.n	8006e94 <USB_HC_Init+0x1a8>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d003      	beq.n	8006e94 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e001      	b.n	8006e98 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e98:	787b      	ldrb	r3, [r7, #1]
 8006e9a:	059b      	lsls	r3, r3, #22
 8006e9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ea0:	78bb      	ldrb	r3, [r7, #2]
 8006ea2:	02db      	lsls	r3, r3, #11
 8006ea4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ea8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006eae:	049b      	lsls	r3, r3, #18
 8006eb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006eb4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006eb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ebc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	0159      	lsls	r1, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	440b      	add	r3, r1
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ece:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ed4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d10f      	bne.n	8006efe <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	78fa      	ldrb	r2, [r7, #3]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006efc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	; 0x30
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f24:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d02d      	beq.n	8006f8e <USB_HC_StartXfer+0x86>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	791b      	ldrb	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d129      	bne.n	8006f8e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d117      	bne.n	8006f70 <USB_HC_StartXfer+0x68>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	79db      	ldrb	r3, [r3, #7]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <USB_HC_StartXfer+0x48>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	79db      	ldrb	r3, [r3, #7]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d10f      	bne.n	8006f70 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	6a3a      	ldr	r2, [r7, #32]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <USB_HC_StartXfer+0x86>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d107      	bne.n	8006f8e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	4619      	mov	r1, r3
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fa2f 	bl	80073e8 <USB_DoPing>
      return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e0f8      	b.n	8007180 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d018      	beq.n	8006fc8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	8912      	ldrh	r2, [r2, #8]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	8912      	ldrh	r2, [r2, #8]
 8006fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006faa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006fac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006fae:	8b7b      	ldrh	r3, [r7, #26]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d90b      	bls.n	8006fcc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006fb4:	8b7b      	ldrh	r3, [r7, #26]
 8006fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	8912      	ldrh	r2, [r2, #8]
 8006fbe:	fb02 f203 	mul.w	r2, r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	611a      	str	r2, [r3, #16]
 8006fc6:	e001      	b.n	8006fcc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	78db      	ldrb	r3, [r3, #3]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006fd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	8912      	ldrh	r2, [r2, #8]
 8006fda:	fb02 f203 	mul.w	r2, r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	611a      	str	r2, [r3, #16]
 8006fe2:	e003      	b.n	8006fec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ff6:	04d9      	lsls	r1, r3, #19
 8006ff8:	4b63      	ldr	r3, [pc, #396]	; (8007188 <USB_HC_StartXfer+0x280>)
 8006ffa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ffc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	7a9b      	ldrb	r3, [r3, #10]
 8007002:	075b      	lsls	r3, r3, #29
 8007004:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007008:	69f9      	ldr	r1, [r7, #28]
 800700a:	0148      	lsls	r0, r1, #5
 800700c:	6a39      	ldr	r1, [r7, #32]
 800700e:	4401      	add	r1, r0
 8007010:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007014:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007016:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	68d9      	ldr	r1, [r3, #12]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	460a      	mov	r2, r1
 8007030:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	440a      	add	r2, r1
 8007060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007064:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007068:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	4413      	add	r3, r2
 8007072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	7e7b      	ldrb	r3, [r7, #25]
 800707a:	075b      	lsls	r3, r3, #29
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	0148      	lsls	r0, r1, #5
 8007080:	6a39      	ldr	r1, [r7, #32]
 8007082:	4401      	add	r1, r0
 8007084:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	78db      	ldrb	r3, [r3, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e003      	b.n	80070be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d2:	461a      	mov	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	e04e      	b.n	8007180 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	78db      	ldrb	r3, [r3, #3]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d149      	bne.n	800717e <USB_HC_StartXfer+0x276>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d045      	beq.n	800717e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	79db      	ldrb	r3, [r3, #7]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d830      	bhi.n	800715c <USB_HC_StartXfer+0x254>
 80070fa:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <USB_HC_StartXfer+0x1f8>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007111 	.word	0x08007111
 8007104:	08007135 	.word	0x08007135
 8007108:	08007111 	.word	0x08007111
 800710c:	08007135 	.word	0x08007135
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	3303      	adds	r3, #3
 8007116:	089b      	lsrs	r3, r3, #2
 8007118:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800711a:	8afa      	ldrh	r2, [r7, #22]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	b29b      	uxth	r3, r3
 8007122:	429a      	cmp	r2, r3
 8007124:	d91c      	bls.n	8007160 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	619a      	str	r2, [r3, #24]
        }
        break;
 8007132:	e015      	b.n	8007160 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	3303      	adds	r3, #3
 800713a:	089b      	lsrs	r3, r3, #2
 800713c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800713e:	8afa      	ldrh	r2, [r7, #22]
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	b29b      	uxth	r3, r3
 800714a:	429a      	cmp	r2, r3
 800714c:	d90a      	bls.n	8007164 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	619a      	str	r2, [r3, #24]
        }
        break;
 800715a:	e003      	b.n	8007164 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800715c:	bf00      	nop
 800715e:	e002      	b.n	8007166 <USB_HC_StartXfer+0x25e>
        break;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <USB_HC_StartXfer+0x25e>
        break;
 8007164:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	68d9      	ldr	r1, [r3, #12]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	785a      	ldrb	r2, [r3, #1]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	b29b      	uxth	r3, r3
 8007174:	2000      	movs	r0, #0
 8007176:	9000      	str	r0, [sp, #0]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fb7d 	bl	8006878 <USB_WritePacket>
  }

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3728      	adds	r7, #40	; 0x28
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	1ff80000 	.word	0x1ff80000

0800718c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	b29b      	uxth	r3, r3
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b089      	sub	sp, #36	; 0x24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	0c9b      	lsrs	r3, r3, #18
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	0fdb      	lsrs	r3, r3, #31
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d104      	bne.n	8007208 <USB_HC_Halt+0x5a>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e0e8      	b.n	80073da <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <USB_HC_Halt+0x66>
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d173      	bne.n	80072fc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	440a      	add	r2, r1
 800722a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007232:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 80cb 	bne.w	80073d8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d143      	bne.n	80072d6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	440a      	add	r2, r1
 8007264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800726c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	440a      	add	r2, r1
 8007284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ac:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ba:	d81d      	bhi.n	80072f8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d2:	d0ec      	beq.n	80072ae <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072d4:	e080      	b.n	80073d8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072f6:	e06f      	b.n	80073d8 <USB_HC_Halt+0x22a>
            break;
 80072f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072fa:	e06d      	b.n	80073d8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	440a      	add	r2, r1
 8007312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800731a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d143      	bne.n	80073b4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	440a      	add	r2, r1
 8007342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800734a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800736a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800738a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007398:	d81d      	bhi.n	80073d6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b0:	d0ec      	beq.n	800738c <USB_HC_Halt+0x1de>
 80073b2:	e011      	b.n	80073d8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e000      	b.n	80073d8 <USB_HC_Halt+0x22a>
          break;
 80073d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3724      	adds	r7, #36	; 0x24
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80073fc:	2301      	movs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	04da      	lsls	r2, r3, #19
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <USB_DoPing+0x74>)
 8007406:	4013      	ands	r3, r2
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	440a      	add	r2, r1
 8007410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007418:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007430:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007438:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	1ff80000 	.word	0x1ff80000

08007460 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff f95f 	bl	8006734 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007476:	2110      	movs	r1, #16
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff f9b9 	bl	80067f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff f9da 	bl	8006838 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	e01f      	b.n	80074ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	461a      	mov	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	3301      	adds	r3, #1
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b0f      	cmp	r3, #15
 80074ce:	d9dc      	bls.n	800748a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	e034      	b.n	8007540 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	3301      	adds	r3, #1
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800751c:	d80c      	bhi.n	8007538 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007534:	d0ec      	beq.n	8007510 <USB_StopHost+0xb0>
 8007536:	e000      	b.n	800753a <USB_StopHost+0xda>
        break;
 8007538:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3301      	adds	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	d9c7      	bls.n	80074d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff f8d8 	bl	8006712 <USB_EnableGlobalInt>

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800756c:	b590      	push	{r4, r7, lr}
 800756e:	b089      	sub	sp, #36	; 0x24
 8007570:	af04      	add	r7, sp, #16
 8007572:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007574:	2301      	movs	r3, #1
 8007576:	2202      	movs	r2, #2
 8007578:	2102      	movs	r1, #2
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fc66 	bl	8007e4c <USBH_FindInterface>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d002      	beq.n	8007590 <USBH_CDC_InterfaceInit+0x24>
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d901      	bls.n	8007594 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007590:	2302      	movs	r3, #2
 8007592:	e13d      	b.n	8007810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc3b 	bl	8007e14 <USBH_SelectInterface>
 800759e:	4603      	mov	r3, r0
 80075a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075a8:	2302      	movs	r3, #2
 80075aa:	e131      	b.n	8007810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80075b2:	2050      	movs	r0, #80	; 0x50
 80075b4:	f001 fb12 	bl	8008bdc <malloc>
 80075b8:	4603      	mov	r3, r0
 80075ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e11f      	b.n	8007810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80075d0:	2250      	movs	r2, #80	; 0x50
 80075d2:	2100      	movs	r1, #0
 80075d4:	68b8      	ldr	r0, [r7, #8]
 80075d6:	f001 fb11 	bl	8008bfc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	211a      	movs	r1, #26
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da15      	bge.n	800761e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	211a      	movs	r1, #26
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	4413      	add	r3, r2
 80075fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	211a      	movs	r1, #26
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007618:	881a      	ldrh	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 ff9c 	bl	8008562 <USBH_AllocPipe>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	7819      	ldrb	r1, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	7858      	ldrb	r0, [r3, #1]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	8952      	ldrh	r2, [r2, #10]
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	2203      	movs	r2, #3
 800764e:	9201      	str	r2, [sp, #4]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4623      	mov	r3, r4
 8007654:	4602      	mov	r2, r0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 ff54 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fa17 	bl	8008a98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800766a:	2300      	movs	r3, #0
 800766c:	2200      	movs	r2, #0
 800766e:	210a      	movs	r1, #10
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fbeb 	bl	8007e4c <USBH_FindInterface>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2bff      	cmp	r3, #255	; 0xff
 800767e:	d002      	beq.n	8007686 <USBH_CDC_InterfaceInit+0x11a>
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d901      	bls.n	800768a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007686:	2302      	movs	r3, #2
 8007688:	e0c2      	b.n	8007810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	211a      	movs	r1, #26
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	4413      	add	r3, r2
 8007696:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b25b      	sxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da16      	bge.n	80076d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	211a      	movs	r1, #26
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	211a      	movs	r1, #26
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	835a      	strh	r2, [r3, #26]
 80076ce:	e015      	b.n	80076fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	211a      	movs	r1, #26
 80076d6:	fb01 f303 	mul.w	r3, r1, r3
 80076da:	4413      	add	r3, r2
 80076dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	211a      	movs	r1, #26
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	211a      	movs	r1, #26
 8007702:	fb01 f303 	mul.w	r3, r1, r3
 8007706:	4413      	add	r3, r2
 8007708:	f203 3356 	addw	r3, r3, #854	; 0x356
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b25b      	sxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	da16      	bge.n	8007742 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	211a      	movs	r1, #26
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	4413      	add	r3, r2
 8007720:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	211a      	movs	r1, #26
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4413      	add	r3, r2
 8007736:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	835a      	strh	r2, [r3, #26]
 8007740:	e015      	b.n	800776e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	211a      	movs	r1, #26
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	4413      	add	r3, r2
 800774e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007752:	781a      	ldrb	r2, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	211a      	movs	r1, #26
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	7b9b      	ldrb	r3, [r3, #14]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fef4 	bl	8008562 <USBH_AllocPipe>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	7bdb      	ldrb	r3, [r3, #15]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 feea 	bl	8008562 <USBH_AllocPipe>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	7b59      	ldrb	r1, [r3, #13]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	7b98      	ldrb	r0, [r3, #14]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	8b12      	ldrh	r2, [r2, #24]
 80077ae:	9202      	str	r2, [sp, #8]
 80077b0:	2202      	movs	r2, #2
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4623      	mov	r3, r4
 80077b8:	4602      	mov	r2, r0
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fea2 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	7b19      	ldrb	r1, [r3, #12]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	7bd8      	ldrb	r0, [r3, #15]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	8b52      	ldrh	r2, [r2, #26]
 80077d8:	9202      	str	r2, [sp, #8]
 80077da:	2202      	movs	r2, #2
 80077dc:	9201      	str	r2, [sp, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4623      	mov	r3, r4
 80077e2:	4602      	mov	r2, r0
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fe8d 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7b5b      	ldrb	r3, [r3, #13]
 80077f6:	2200      	movs	r2, #0
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f94c 	bl	8008a98 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b1b      	ldrb	r3, [r3, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 f945 	bl	8008a98 <USBH_LL_SetToggle>

  return USBH_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00e      	beq.n	8007850 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fe82 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fead 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	7b1b      	ldrb	r3, [r3, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	7b1b      	ldrb	r3, [r3, #12]
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fe6f 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	7b1b      	ldrb	r3, [r3, #12]
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fe9a 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	7b5b      	ldrb	r3, [r3, #13]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	7b5b      	ldrb	r3, [r3, #13]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fe5c 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	7b5b      	ldrb	r3, [r3, #13]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fe87 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 f99b 	bl	8008bec <free>
    phost->pActiveClass->pData = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078bc:	2200      	movs	r2, #0
 80078be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3340      	adds	r3, #64	; 0x40
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8b1 	bl	8007a4a <GetLineCoding>
 80078e8:	4603      	mov	r3, r0
 80078ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078f8:	2102      	movs	r1, #2
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80078fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007928:	2b04      	cmp	r3, #4
 800792a:	d877      	bhi.n	8007a1c <USBH_CDC_Process+0x114>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBH_CDC_Process+0x2c>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007949 	.word	0x08007949
 8007938:	0800794f 	.word	0x0800794f
 800793c:	0800797f 	.word	0x0800797f
 8007940:	080079f3 	.word	0x080079f3
 8007944:	08007a01 	.word	0x08007a01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
      break;
 800794c:	e06d      	b.n	8007a2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f897 	bl	8007a88 <SetLineCoding>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800796c:	e058      	b.n	8007a20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d055      	beq.n	8007a20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2204      	movs	r2, #4
 8007978:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800797c:	e050      	b.n	8007a20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3340      	adds	r3, #64	; 0x40
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f860 	bl	8007a4a <GetLineCoding>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d126      	bne.n	80079e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d13b      	bne.n	8007a24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d133      	bne.n	8007a24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d12b      	bne.n	8007a24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d124      	bne.n	8007a24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f958 	bl	8007c90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079e0:	e020      	b.n	8007a24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d01d      	beq.n	8007a24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2204      	movs	r2, #4
 80079ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079f0:	e018      	b.n	8007a24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f867 	bl	8007ac6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f8da 	bl	8007bb2 <CDC_ProcessReception>
      break;
 80079fe:	e014      	b.n	8007a2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a00:	2100      	movs	r1, #0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb08 	bl	8008018 <USBH_ClrFeature>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a1a:	e005      	b.n	8007a28 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a1c:	bf00      	nop
 8007a1e:	e004      	b.n	8007a2a <USBH_CDC_Process+0x122>
      break;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <USBH_CDC_Process+0x122>
      break;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <USBH_CDC_Process+0x122>
      break;
 8007a28:	bf00      	nop

  }

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	22a1      	movs	r2, #161	; 0xa1
 8007a58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2221      	movs	r2, #33	; 0x21
 8007a5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2207      	movs	r2, #7
 8007a70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2207      	movs	r2, #7
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 faf1 	bl	8008060 <USBH_CtlReq>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2221      	movs	r2, #33	; 0x21
 8007a96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2207      	movs	r2, #7
 8007aae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2207      	movs	r2, #7
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fad2 	bl	8008060 <USBH_CtlReq>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af02      	add	r7, sp, #8
 8007acc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d002      	beq.n	8007aec <CDC_ProcessTransmission+0x26>
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d023      	beq.n	8007b32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007aea:	e05e      	b.n	8007baa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	8b12      	ldrh	r2, [r2, #24]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d90b      	bls.n	8007b10 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8b1a      	ldrh	r2, [r3, #24]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	7b5b      	ldrb	r3, [r3, #13]
 8007b04:	2001      	movs	r0, #1
 8007b06:	9000      	str	r0, [sp, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fcb8 	bl	800847e <USBH_BulkSendData>
 8007b0e:	e00b      	b.n	8007b28 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	7b5b      	ldrb	r3, [r3, #13]
 8007b1e:	2001      	movs	r0, #1
 8007b20:	9000      	str	r0, [sp, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fcab 	bl	800847e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b30:	e03b      	b.n	8007baa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7b5b      	ldrb	r3, [r3, #13]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 ff83 	bl	8008a44 <USBH_LL_GetURBState>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d128      	bne.n	8007b9a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	8b12      	ldrh	r2, [r2, #24]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d90e      	bls.n	8007b72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	8b12      	ldrh	r2, [r2, #24]
 8007b5c:	1a9a      	subs	r2, r3, r2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	8b12      	ldrh	r2, [r2, #24]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	61da      	str	r2, [r3, #28]
 8007b70:	e002      	b.n	8007b78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b88:	e00e      	b.n	8007ba8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f868 	bl	8007c68 <USBH_CDC_TransmitCallback>
      break;
 8007b98:	e006      	b.n	8007ba8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b9a:	7afb      	ldrb	r3, [r7, #11]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d103      	bne.n	8007ba8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ba8:	bf00      	nop
  }
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d002      	beq.n	8007bd8 <CDC_ProcessReception+0x26>
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d00e      	beq.n	8007bf4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007bd6:	e043      	b.n	8007c60 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6a19      	ldr	r1, [r3, #32]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	8b5a      	ldrh	r2, [r3, #26]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	7b1b      	ldrb	r3, [r3, #12]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fc6f 	bl	80084c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2204      	movs	r2, #4
 8007bee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007bf2:	e035      	b.n	8007c60 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	7b1b      	ldrb	r3, [r3, #12]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 ff22 	bl	8008a44 <USBH_LL_GetURBState>
 8007c00:	4603      	mov	r3, r0
 8007c02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c04:	7cfb      	ldrb	r3, [r7, #19]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d129      	bne.n	8007c5e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	7b1b      	ldrb	r3, [r3, #12]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fe85 	bl	8008920 <USBH_LL_GetLastXferSize>
 8007c16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d016      	beq.n	8007c50 <CDC_ProcessReception+0x9e>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	8b5b      	ldrh	r3, [r3, #26]
 8007c26:	461a      	mov	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d910      	bls.n	8007c50 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	441a      	add	r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c4e:	e006      	b.n	8007c5e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f80f 	bl	8007c7c <USBH_CDC_ReceiveCallback>
      break;
 8007c5e:	bf00      	nop
  }
}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e029      	b.n	8007d10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	79fa      	ldrb	r2, [r7, #7]
 8007cc0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f81f 	bl	8007d18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fd97 	bl	800883c <USBH_LL_Init>

  return USBH_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	e009      	b.n	8007d3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	33e0      	adds	r3, #224	; 0xe0
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	2200      	movs	r2, #0
 8007d36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b0e      	cmp	r3, #14
 8007d42:	d9f2      	bls.n	8007d2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e009      	b.n	8007d5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d64:	d3f1      	bcc.n	8007d4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2240      	movs	r2, #64	; 0x40
 8007d8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d016      	beq.n	8007e02 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10e      	bne.n	8007dfc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007de4:	1c59      	adds	r1, r3, #1
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	33de      	adds	r3, #222	; 0xde
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	e004      	b.n	8007e06 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	73fb      	strb	r3, [r7, #15]
 8007e00:	e001      	b.n	8007e06 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e02:	2302      	movs	r3, #2
 8007e04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d204      	bcs.n	8007e3a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007e38:	e001      	b.n	8007e3e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	4608      	mov	r0, r1
 8007e56:	4611      	mov	r1, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	70fb      	strb	r3, [r7, #3]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70bb      	strb	r3, [r7, #2]
 8007e62:	4613      	mov	r3, r2
 8007e64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e76:	e025      	b.n	8007ec4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	221a      	movs	r2, #26
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	3308      	adds	r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	3302      	adds	r3, #2
 8007e88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d002      	beq.n	8007e9a <USBH_FindInterface+0x4e>
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	2bff      	cmp	r3, #255	; 0xff
 8007e98:	d111      	bne.n	8007ebe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e9e:	78ba      	ldrb	r2, [r7, #2]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d002      	beq.n	8007eaa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ea4:	78bb      	ldrb	r3, [r7, #2]
 8007ea6:	2bff      	cmp	r3, #255	; 0xff
 8007ea8:	d109      	bne.n	8007ebe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007eae:	787a      	ldrb	r2, [r7, #1]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d002      	beq.n	8007eba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007eb4:	787b      	ldrb	r3, [r7, #1]
 8007eb6:	2bff      	cmp	r3, #255	; 0xff
 8007eb8:	d101      	bne.n	8007ebe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	e006      	b.n	8007ecc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d9d6      	bls.n	8007e78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007eca:	23ff      	movs	r3, #255	; 0xff
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fce7 	bl	80088b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fdbe 	bl	8008a6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f804 	bl	8007f3a <USBH_HandleSof>
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b0b      	cmp	r3, #11
 8007f4a:	d10a      	bne.n	8007f62 <USBH_HandleSof+0x28>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
  }
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007f7a:	bf00      	nop
}
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f96:	bf00      	nop
}
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc7a 	bl	80088ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fad1 	bl	80085a4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	795b      	ldrb	r3, [r3, #5]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 facb 	bl	80085a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	789b      	ldrb	r3, [r3, #2]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d10f      	bne.n	800804c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800804c:	2200      	movs	r2, #0
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f805 	bl	8008060 <USBH_CtlReq>
 8008056:	4603      	mov	r3, r0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800806e:	2301      	movs	r3, #1
 8008070:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	789b      	ldrb	r3, [r3, #2]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d002      	beq.n	8008080 <USBH_CtlReq+0x20>
 800807a:	2b02      	cmp	r3, #2
 800807c:	d00f      	beq.n	800809e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800807e:	e027      	b.n	80080d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2202      	movs	r2, #2
 8008096:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008098:	2301      	movs	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
      break;
 800809c:	e018      	b.n	80080d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f81c 	bl	80080dc <USBH_HandleControl>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <USBH_CtlReq+0x54>
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d106      	bne.n	80080c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	761a      	strb	r2, [r3, #24]
      break;
 80080c0:	e005      	b.n	80080ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d102      	bne.n	80080ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	709a      	strb	r2, [r3, #2]
      break;
 80080ce:	bf00      	nop
  }
  return status;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7e1b      	ldrb	r3, [r3, #24]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b0a      	cmp	r3, #10
 80080f4:	f200 8156 	bhi.w	80083a4 <USBH_HandleControl+0x2c8>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <USBH_HandleControl+0x24>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	0800812d 	.word	0x0800812d
 8008104:	08008147 	.word	0x08008147
 8008108:	080081b1 	.word	0x080081b1
 800810c:	080081d7 	.word	0x080081d7
 8008110:	0800820f 	.word	0x0800820f
 8008114:	08008239 	.word	0x08008239
 8008118:	0800828b 	.word	0x0800828b
 800811c:	080082ad 	.word	0x080082ad
 8008120:	080082e9 	.word	0x080082e9
 8008124:	0800830f 	.word	0x0800830f
 8008128:	0800834d 	.word	0x0800834d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 0110 	add.w	r1, r3, #16
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	795b      	ldrb	r3, [r3, #5]
 8008136:	461a      	mov	r2, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f943 	bl	80083c4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	761a      	strb	r2, [r3, #24]
      break;
 8008144:	e139      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fc79 	bl	8008a44 <USBH_LL_GetURBState>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d11e      	bne.n	800819a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7c1b      	ldrb	r3, [r3, #16]
 8008160:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008164:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8adb      	ldrh	r3, [r3, #22]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800816e:	7b7b      	ldrb	r3, [r7, #13]
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d103      	bne.n	800817c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2203      	movs	r2, #3
 8008178:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800817a:	e115      	b.n	80083a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2205      	movs	r2, #5
 8008180:	761a      	strb	r2, [r3, #24]
      break;
 8008182:	e111      	b.n	80083a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008184:	7b7b      	ldrb	r3, [r7, #13]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d103      	bne.n	8008192 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2209      	movs	r2, #9
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e10a      	b.n	80083a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2207      	movs	r2, #7
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e106      	b.n	80083a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b04      	cmp	r3, #4
 800819e:	d003      	beq.n	80081a8 <USBH_HandleControl+0xcc>
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	f040 8100 	bne.w	80083a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	220b      	movs	r2, #11
 80081ac:	761a      	strb	r2, [r3, #24]
      break;
 80081ae:	e0fb      	b.n	80083a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6899      	ldr	r1, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	899a      	ldrh	r2, [r3, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f93a 	bl	8008442 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2204      	movs	r2, #4
 80081d2:	761a      	strb	r2, [r3, #24]
      break;
 80081d4:	e0f1      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc31 	bl	8008a44 <USBH_LL_GetURBState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d102      	bne.n	80081f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2209      	movs	r2, #9
 80081f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d102      	bne.n	80081fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081fc:	e0d6      	b.n	80083ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b04      	cmp	r3, #4
 8008202:	f040 80d3 	bne.w	80083ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220b      	movs	r2, #11
 800820a:	761a      	strb	r2, [r3, #24]
      break;
 800820c:	e0ce      	b.n	80083ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	899a      	ldrh	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	2001      	movs	r0, #1
 800821c:	9000      	str	r0, [sp, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8ea 	bl	80083f8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2206      	movs	r2, #6
 8008234:	761a      	strb	r2, [r3, #24]
      break;
 8008236:	e0c0      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	795b      	ldrb	r3, [r3, #5]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc00 	bl	8008a44 <USBH_LL_GetURBState>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d103      	bne.n	8008256 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2207      	movs	r2, #7
 8008252:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008254:	e0ac      	b.n	80083b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b05      	cmp	r3, #5
 800825a:	d105      	bne.n	8008268 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220c      	movs	r2, #12
 8008260:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008262:	2303      	movs	r3, #3
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e0a3      	b.n	80083b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2205      	movs	r2, #5
 8008272:	761a      	strb	r2, [r3, #24]
      break;
 8008274:	e09c      	b.n	80083b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b04      	cmp	r3, #4
 800827a:	f040 8099 	bne.w	80083b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	220b      	movs	r2, #11
 8008282:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008284:	2302      	movs	r3, #2
 8008286:	73fb      	strb	r3, [r7, #15]
      break;
 8008288:	e092      	b.n	80083b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f8d5 	bl	8008442 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2208      	movs	r2, #8
 80082a8:	761a      	strb	r2, [r3, #24]

      break;
 80082aa:	e086      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	791b      	ldrb	r3, [r3, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fbc6 	bl	8008a44 <USBH_LL_GetURBState>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220d      	movs	r2, #13
 80082c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082cc:	e072      	b.n	80083b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d103      	bne.n	80082dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220b      	movs	r2, #11
 80082d8:	761a      	strb	r2, [r3, #24]
      break;
 80082da:	e06b      	b.n	80083b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d168      	bne.n	80083b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80082e2:	2303      	movs	r3, #3
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e065      	b.n	80083b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	795b      	ldrb	r3, [r3, #5]
 80082ec:	2201      	movs	r2, #1
 80082ee:	9200      	str	r2, [sp, #0]
 80082f0:	2200      	movs	r2, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f87f 	bl	80083f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	220a      	movs	r2, #10
 800830a:	761a      	strb	r2, [r3, #24]
      break;
 800830c:	e055      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	795b      	ldrb	r3, [r3, #5]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb95 	bl	8008a44 <USBH_LL_GetURBState>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d105      	bne.n	8008330 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	220d      	movs	r2, #13
 800832c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800832e:	e043      	b.n	80083b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2209      	movs	r2, #9
 800833a:	761a      	strb	r2, [r3, #24]
      break;
 800833c:	e03c      	b.n	80083b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d139      	bne.n	80083b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	220b      	movs	r2, #11
 8008348:	761a      	strb	r2, [r3, #24]
      break;
 800834a:	e035      	b.n	80083b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7e5b      	ldrb	r3, [r3, #25]
 8008350:	3301      	adds	r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	765a      	strb	r2, [r3, #25]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7e5b      	ldrb	r3, [r3, #25]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d806      	bhi.n	800836e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800836c:	e025      	b.n	80083ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008374:	2106      	movs	r1, #6
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	795b      	ldrb	r3, [r3, #5]
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f90c 	bl	80085a4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	791b      	ldrb	r3, [r3, #4]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f906 	bl	80085a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	e00a      	b.n	80083ba <USBH_HandleControl+0x2de>

    default:
      break;
 80083a4:	bf00      	nop
 80083a6:	e008      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083a8:	bf00      	nop
 80083aa:	e006      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b8:	bf00      	nop
  }

  return status;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083d2:	79f9      	ldrb	r1, [r7, #7]
 80083d4:	2300      	movs	r3, #0
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	2308      	movs	r3, #8
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2300      	movs	r3, #0
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fafa 	bl	80089e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	80fb      	strh	r3, [r7, #6]
 800840a:	4613      	mov	r3, r2
 800840c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800841c:	7979      	ldrb	r1, [r7, #5]
 800841e:	7e3b      	ldrb	r3, [r7, #24]
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2301      	movs	r3, #1
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fad5 	bl	80089e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b088      	sub	sp, #32
 8008446:	af04      	add	r7, sp, #16
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4611      	mov	r1, r2
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	80fb      	strh	r3, [r7, #6]
 8008454:	4613      	mov	r3, r2
 8008456:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008458:	7979      	ldrb	r1, [r7, #5]
 800845a:	2300      	movs	r3, #0
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	9302      	str	r3, [sp, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	2301      	movs	r3, #1
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	2300      	movs	r3, #0
 800846c:	2201      	movs	r2, #1
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fab7 	bl	80089e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008474:	2300      	movs	r3, #0

}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b088      	sub	sp, #32
 8008482:	af04      	add	r7, sp, #16
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	4611      	mov	r1, r2
 800848a:	461a      	mov	r2, r3
 800848c:	460b      	mov	r3, r1
 800848e:	80fb      	strh	r3, [r7, #6]
 8008490:	4613      	mov	r3, r2
 8008492:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084a2:	7979      	ldrb	r1, [r7, #5]
 80084a4:	7e3b      	ldrb	r3, [r7, #24]
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	2301      	movs	r3, #1
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2302      	movs	r3, #2
 80084b6:	2200      	movs	r2, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fa92 	bl	80089e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af04      	add	r7, sp, #16
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4611      	mov	r1, r2
 80084d4:	461a      	mov	r2, r3
 80084d6:	460b      	mov	r3, r1
 80084d8:	80fb      	strh	r3, [r7, #6]
 80084da:	4613      	mov	r3, r2
 80084dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084de:	7979      	ldrb	r1, [r7, #5]
 80084e0:	2300      	movs	r3, #0
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	2301      	movs	r3, #1
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2302      	movs	r3, #2
 80084f2:	2201      	movs	r2, #1
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fa74 	bl	80089e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af04      	add	r7, sp, #16
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4603      	mov	r3, r0
 8008514:	70fb      	strb	r3, [r7, #3]
 8008516:	460b      	mov	r3, r1
 8008518:	70bb      	strb	r3, [r7, #2]
 800851a:	4613      	mov	r3, r2
 800851c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800851e:	7878      	ldrb	r0, [r7, #1]
 8008520:	78ba      	ldrb	r2, [r7, #2]
 8008522:	78f9      	ldrb	r1, [r7, #3]
 8008524:	8b3b      	ldrh	r3, [r7, #24]
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	7d3b      	ldrb	r3, [r7, #20]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	7c3b      	ldrb	r3, [r7, #16]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4603      	mov	r3, r0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa07 	bl	8008946 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa26 	bl	80089a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f836 	bl	80085e0 <USBH_GetFreePipe>
 8008574:	4603      	mov	r3, r0
 8008576:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008578:	89fb      	ldrh	r3, [r7, #14]
 800857a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800857e:	4293      	cmp	r3, r2
 8008580:	d00a      	beq.n	8008598 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	33e0      	adds	r3, #224	; 0xe0
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008598:	89fb      	ldrh	r3, [r7, #14]
 800859a:	b2db      	uxtb	r3, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	2b0a      	cmp	r3, #10
 80085b4:	d80d      	bhi.n	80085d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	33e0      	adds	r3, #224	; 0xe0
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	33e0      	adds	r3, #224	; 0xe0
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e00f      	b.n	8008612 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	33e0      	adds	r3, #224	; 0xe0
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	b29b      	uxth	r3, r3
 800860a:	e007      	b.n	800861c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	3301      	adds	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b0a      	cmp	r3, #10
 8008616:	d9ec      	bls.n	80085f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008618:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800862c:	2201      	movs	r2, #1
 800862e:	490e      	ldr	r1, [pc, #56]	; (8008668 <MX_USB_HOST_Init+0x40>)
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008632:	f7ff fb37 	bl	8007ca4 <USBH_Init>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800863c:	f7f9 fa9a 	bl	8001b74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008640:	490b      	ldr	r1, [pc, #44]	; (8008670 <MX_USB_HOST_Init+0x48>)
 8008642:	480a      	ldr	r0, [pc, #40]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008644:	f7ff fbbc 	bl	8007dc0 <USBH_RegisterClass>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800864e:	f7f9 fa91 	bl	8001b74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008652:	4806      	ldr	r0, [pc, #24]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008654:	f7ff fc40 	bl	8007ed8 <USBH_Start>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800865e:	f7f9 fa89 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008662:	bf00      	nop
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	08008675 	.word	0x08008675
 800866c:	20000200 	.word	0x20000200
 8008670:	2000000c 	.word	0x2000000c

08008674 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	3b01      	subs	r3, #1
 8008684:	2b04      	cmp	r3, #4
 8008686:	d819      	bhi.n	80086bc <USBH_UserProcess+0x48>
 8008688:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <USBH_UserProcess+0x1c>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086bd 	.word	0x080086bd
 8008694:	080086ad 	.word	0x080086ad
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086a5 	.word	0x080086a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086a4:	4b09      	ldr	r3, [pc, #36]	; (80086cc <USBH_UserProcess+0x58>)
 80086a6:	2203      	movs	r2, #3
 80086a8:	701a      	strb	r2, [r3, #0]
  break;
 80086aa:	e008      	b.n	80086be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086ac:	4b07      	ldr	r3, [pc, #28]	; (80086cc <USBH_UserProcess+0x58>)
 80086ae:	2202      	movs	r2, #2
 80086b0:	701a      	strb	r2, [r3, #0]
  break;
 80086b2:	e004      	b.n	80086be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086b4:	4b05      	ldr	r3, [pc, #20]	; (80086cc <USBH_UserProcess+0x58>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	701a      	strb	r2, [r3, #0]
  break;
 80086ba:	e000      	b.n	80086be <USBH_UserProcess+0x4a>

  default:
  break;
 80086bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	200000b4 	.word	0x200000b4

080086d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	; 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086f0:	d147      	bne.n	8008782 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	4b25      	ldr	r3, [pc, #148]	; (800878c <HAL_HCD_MspInit+0xbc>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	4a24      	ldr	r2, [pc, #144]	; (800878c <HAL_HCD_MspInit+0xbc>)
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	6313      	str	r3, [r2, #48]	; 0x30
 8008702:	4b22      	ldr	r3, [pc, #136]	; (800878c <HAL_HCD_MspInit+0xbc>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800870e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	2300      	movs	r3, #0
 800871a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	4619      	mov	r1, r3
 8008722:	481b      	ldr	r0, [pc, #108]	; (8008790 <HAL_HCD_MspInit+0xc0>)
 8008724:	f7f9 fdf6 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800872c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872e:	2302      	movs	r3, #2
 8008730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800873a:	230a      	movs	r3, #10
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	4619      	mov	r1, r3
 8008744:	4812      	ldr	r0, [pc, #72]	; (8008790 <HAL_HCD_MspInit+0xc0>)
 8008746:	f7f9 fde5 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <HAL_HCD_MspInit+0xbc>)
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	4a0f      	ldr	r2, [pc, #60]	; (800878c <HAL_HCD_MspInit+0xbc>)
 8008750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008754:	6353      	str	r3, [r2, #52]	; 0x34
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <HAL_HCD_MspInit+0xbc>)
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	4a0b      	ldr	r2, [pc, #44]	; (800878c <HAL_HCD_MspInit+0xbc>)
 8008760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008764:	6453      	str	r3, [r2, #68]	; 0x44
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <HAL_HCD_MspInit+0xbc>)
 8008768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	2043      	movs	r0, #67	; 0x43
 8008778:	f7f9 fd95 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800877c:	2043      	movs	r0, #67	; 0x43
 800877e:	f7f9 fdae 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008782:	bf00      	nop
 8008784:	3728      	adds	r7, #40	; 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800
 8008790:	40020000 	.word	0x40020000

08008794 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fbb7 	bl	8007f16 <USBH_LL_IncTimer>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff fbef 	bl	8007fa2 <USBH_LL_Connect>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fbf8 	bl	8007fd0 <USBH_LL_Disconnect>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	4613      	mov	r3, r2
 80087f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fba9 	bl	8007f6a <USBH_LL_PortEnabled>
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fba9 	bl	8007f86 <USBH_LL_PortDisabled>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800884a:	2b01      	cmp	r3, #1
 800884c:	d12a      	bne.n	80088a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800884e:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <USBH_LL_Init+0x74>)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <USBH_LL_Init+0x74>)
 800885a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800885e:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <USBH_LL_Init+0x74>)
 8008860:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008864:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008866:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <USBH_LL_Init+0x74>)
 8008868:	2208      	movs	r2, #8
 800886a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800886c:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <USBH_LL_Init+0x74>)
 800886e:	2201      	movs	r2, #1
 8008870:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <USBH_LL_Init+0x74>)
 8008874:	2200      	movs	r2, #0
 8008876:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008878:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <USBH_LL_Init+0x74>)
 800887a:	2202      	movs	r2, #2
 800887c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <USBH_LL_Init+0x74>)
 8008880:	2200      	movs	r2, #0
 8008882:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008884:	480a      	ldr	r0, [pc, #40]	; (80088b0 <USBH_LL_Init+0x74>)
 8008886:	f7f9 fefa 	bl	800267e <HAL_HCD_Init>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008890:	f7f9 f970 	bl	8001b74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008894:	4806      	ldr	r0, [pc, #24]	; (80088b0 <USBH_LL_Init+0x74>)
 8008896:	f7fa fad0 	bl	8002e3a <HAL_HCD_GetCurrentFrame>
 800889a:	4603      	mov	r3, r0
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fb2a 	bl	8007ef8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200005d8 	.word	0x200005d8

080088b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fa fa4d 	bl	8002d6a <HAL_HCD_Start>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f90e 	bl	8008af8 <USBH_Get_USB_Status>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008900:	4618      	mov	r0, r3
 8008902:	f7fa fa55 	bl	8002db0 <HAL_HCD_Stop>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8f3 	bl	8008af8 <USBH_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7fa fa6b 	bl	8002e12 <HAL_HCD_HC_GetXferCount>
 800893c:	4603      	mov	r3, r0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008946:	b590      	push	{r4, r7, lr}
 8008948:	b089      	sub	sp, #36	; 0x24
 800894a:	af04      	add	r7, sp, #16
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	461a      	mov	r2, r3
 8008954:	4603      	mov	r3, r0
 8008956:	70fb      	strb	r3, [r7, #3]
 8008958:	460b      	mov	r3, r1
 800895a:	70bb      	strb	r3, [r7, #2]
 800895c:	4613      	mov	r3, r2
 800895e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800896e:	787c      	ldrb	r4, [r7, #1]
 8008970:	78ba      	ldrb	r2, [r7, #2]
 8008972:	78f9      	ldrb	r1, [r7, #3]
 8008974:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	4623      	mov	r3, r4
 8008986:	f7f9 fedc 	bl	8002742 <HAL_HCD_HC_Init>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f8b1 	bl	8008af8 <USBH_Get_USB_Status>
 8008996:	4603      	mov	r3, r0
 8008998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899a:	7bbb      	ldrb	r3, [r7, #14]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd90      	pop	{r4, r7, pc}

080089a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f9 ff4c 	bl	8002860 <HAL_HCD_HC_Halt>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f892 	bl	8008af8 <USBH_Get_USB_Status>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089e2:	b590      	push	{r4, r7, lr}
 80089e4:	b089      	sub	sp, #36	; 0x24
 80089e6:	af04      	add	r7, sp, #16
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	461a      	mov	r2, r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	70fb      	strb	r3, [r7, #3]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70bb      	strb	r3, [r7, #2]
 80089f8:	4613      	mov	r3, r2
 80089fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a0a:	787c      	ldrb	r4, [r7, #1]
 8008a0c:	78ba      	ldrb	r2, [r7, #2]
 8008a0e:	78f9      	ldrb	r1, [r7, #3]
 8008a10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4623      	mov	r3, r4
 8008a26:	f7f9 ff3f 	bl	80028a8 <HAL_HCD_HC_SubmitRequest>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f861 	bl	8008af8 <USBH_Get_USB_Status>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd90      	pop	{r4, r7, pc}

08008a44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fa f9c5 	bl	8002dea <HAL_HCD_HC_GetURBState>
 8008a60:	4603      	mov	r3, r0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d103      	bne.n	8008a88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 f864 	bl	8008b50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a88:	20c8      	movs	r0, #200	; 0xc8
 8008a8a:	f7f9 fb0d 	bl	80020a8 <HAL_Delay>
  return USBH_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	212c      	movs	r1, #44	; 0x2c
 8008ab6:	fb01 f303 	mul.w	r3, r1, r3
 8008aba:	4413      	add	r3, r2
 8008abc:	333b      	adds	r3, #59	; 0x3b
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3354      	adds	r3, #84	; 0x54
 8008ad2:	78ba      	ldrb	r2, [r7, #2]
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e008      	b.n	8008aea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	212c      	movs	r1, #44	; 0x2c
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3355      	adds	r3, #85	; 0x55
 8008ae6:	78ba      	ldrb	r2, [r7, #2]
 8008ae8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d817      	bhi.n	8008b3c <USBH_Get_USB_Status+0x44>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <USBH_Get_USB_Status+0x1c>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b2b 	.word	0x08008b2b
 8008b1c:	08008b31 	.word	0x08008b31
 8008b20:	08008b37 	.word	0x08008b37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e00b      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e008      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e005      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e002      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	bf00      	nop
  }
  return usb_status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
 8008b68:	e001      	b.n	8008b6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	461a      	mov	r2, r3
 8008b72:	2101      	movs	r1, #1
 8008b74:	4803      	ldr	r0, [pc, #12]	; (8008b84 <MX_DriverVbusFS+0x34>)
 8008b76:	f7f9 fd69 	bl	800264c <HAL_GPIO_WritePin>
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40020800 	.word	0x40020800

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	2000002c 	.word	0x2000002c

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4d0d      	ldr	r5, [pc, #52]	; (8008bcc <__libc_init_array+0x38>)
 8008b98:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9a:	1b64      	subs	r4, r4, r5
 8008b9c:	10a4      	asrs	r4, r4, #2
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	4d0b      	ldr	r5, [pc, #44]	; (8008bd4 <__libc_init_array+0x40>)
 8008ba6:	4c0c      	ldr	r4, [pc, #48]	; (8008bd8 <__libc_init_array+0x44>)
 8008ba8:	f002 f854 	bl	800ac54 <_init>
 8008bac:	1b64      	subs	r4, r4, r5
 8008bae:	10a4      	asrs	r4, r4, #2
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800af18 	.word	0x0800af18
 8008bd0:	0800af18 	.word	0x0800af18
 8008bd4:	0800af18 	.word	0x0800af18
 8008bd8:	0800af1c 	.word	0x0800af1c

08008bdc <malloc>:
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <malloc+0xc>)
 8008bde:	4601      	mov	r1, r0
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	f000 b863 	b.w	8008cac <_malloc_r>
 8008be6:	bf00      	nop
 8008be8:	2000002c 	.word	0x2000002c

08008bec <free>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <free+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b80b 	b.w	8008c0c <_free_r>
 8008bf6:	bf00      	nop
 8008bf8:	2000002c 	.word	0x2000002c

08008bfc <memset>:
 8008bfc:	4402      	add	r2, r0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d100      	bne.n	8008c06 <memset+0xa>
 8008c04:	4770      	bx	lr
 8008c06:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0a:	e7f9      	b.n	8008c00 <memset+0x4>

08008c0c <_free_r>:
 8008c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	d048      	beq.n	8008ca4 <_free_r+0x98>
 8008c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c16:	9001      	str	r0, [sp, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c1e:	bfb8      	it	lt
 8008c20:	18e4      	addlt	r4, r4, r3
 8008c22:	f000 f8ad 	bl	8008d80 <__malloc_lock>
 8008c26:	4a20      	ldr	r2, [pc, #128]	; (8008ca8 <_free_r+0x9c>)
 8008c28:	9801      	ldr	r0, [sp, #4]
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	b933      	cbnz	r3, 8008c3e <_free_r+0x32>
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	6014      	str	r4, [r2, #0]
 8008c34:	b003      	add	sp, #12
 8008c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c3a:	f000 b8a7 	b.w	8008d8c <__malloc_unlock>
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	d90b      	bls.n	8008c5a <_free_r+0x4e>
 8008c42:	6821      	ldr	r1, [r4, #0]
 8008c44:	1862      	adds	r2, r4, r1
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bf04      	itt	eq
 8008c4a:	681a      	ldreq	r2, [r3, #0]
 8008c4c:	685b      	ldreq	r3, [r3, #4]
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	bf04      	itt	eq
 8008c52:	1852      	addeq	r2, r2, r1
 8008c54:	6022      	streq	r2, [r4, #0]
 8008c56:	602c      	str	r4, [r5, #0]
 8008c58:	e7ec      	b.n	8008c34 <_free_r+0x28>
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b10b      	cbz	r3, 8008c64 <_free_r+0x58>
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d9fa      	bls.n	8008c5a <_free_r+0x4e>
 8008c64:	6811      	ldr	r1, [r2, #0]
 8008c66:	1855      	adds	r5, r2, r1
 8008c68:	42a5      	cmp	r5, r4
 8008c6a:	d10b      	bne.n	8008c84 <_free_r+0x78>
 8008c6c:	6824      	ldr	r4, [r4, #0]
 8008c6e:	4421      	add	r1, r4
 8008c70:	1854      	adds	r4, r2, r1
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	d1dd      	bne.n	8008c34 <_free_r+0x28>
 8008c78:	681c      	ldr	r4, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	6053      	str	r3, [r2, #4]
 8008c7e:	4421      	add	r1, r4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	e7d7      	b.n	8008c34 <_free_r+0x28>
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x80>
 8008c86:	230c      	movs	r3, #12
 8008c88:	6003      	str	r3, [r0, #0]
 8008c8a:	e7d3      	b.n	8008c34 <_free_r+0x28>
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	1961      	adds	r1, r4, r5
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf04      	itt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	bf04      	itt	eq
 8008c9c:	1949      	addeq	r1, r1, r5
 8008c9e:	6021      	streq	r1, [r4, #0]
 8008ca0:	6054      	str	r4, [r2, #4]
 8008ca2:	e7c7      	b.n	8008c34 <_free_r+0x28>
 8008ca4:	b003      	add	sp, #12
 8008ca6:	bd30      	pop	{r4, r5, pc}
 8008ca8:	200000b8 	.word	0x200000b8

08008cac <_malloc_r>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	1ccd      	adds	r5, r1, #3
 8008cb0:	f025 0503 	bic.w	r5, r5, #3
 8008cb4:	3508      	adds	r5, #8
 8008cb6:	2d0c      	cmp	r5, #12
 8008cb8:	bf38      	it	cc
 8008cba:	250c      	movcc	r5, #12
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	db01      	blt.n	8008cc6 <_malloc_r+0x1a>
 8008cc2:	42a9      	cmp	r1, r5
 8008cc4:	d903      	bls.n	8008cce <_malloc_r+0x22>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cce:	f000 f857 	bl	8008d80 <__malloc_lock>
 8008cd2:	4921      	ldr	r1, [pc, #132]	; (8008d58 <_malloc_r+0xac>)
 8008cd4:	680a      	ldr	r2, [r1, #0]
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	b99c      	cbnz	r4, 8008d02 <_malloc_r+0x56>
 8008cda:	4f20      	ldr	r7, [pc, #128]	; (8008d5c <_malloc_r+0xb0>)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	b923      	cbnz	r3, 8008cea <_malloc_r+0x3e>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 f83c 	bl	8008d60 <_sbrk_r>
 8008ce8:	6038      	str	r0, [r7, #0]
 8008cea:	4629      	mov	r1, r5
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 f837 	bl	8008d60 <_sbrk_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d123      	bne.n	8008d3e <_malloc_r+0x92>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f000 f846 	bl	8008d8c <__malloc_unlock>
 8008d00:	e7e3      	b.n	8008cca <_malloc_r+0x1e>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	1b5b      	subs	r3, r3, r5
 8008d06:	d417      	bmi.n	8008d38 <_malloc_r+0x8c>
 8008d08:	2b0b      	cmp	r3, #11
 8008d0a:	d903      	bls.n	8008d14 <_malloc_r+0x68>
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	441c      	add	r4, r3
 8008d10:	6025      	str	r5, [r4, #0]
 8008d12:	e004      	b.n	8008d1e <_malloc_r+0x72>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	42a2      	cmp	r2, r4
 8008d18:	bf0c      	ite	eq
 8008d1a:	600b      	streq	r3, [r1, #0]
 8008d1c:	6053      	strne	r3, [r2, #4]
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f000 f834 	bl	8008d8c <__malloc_unlock>
 8008d24:	f104 000b 	add.w	r0, r4, #11
 8008d28:	1d23      	adds	r3, r4, #4
 8008d2a:	f020 0007 	bic.w	r0, r0, #7
 8008d2e:	1ac2      	subs	r2, r0, r3
 8008d30:	d0cc      	beq.n	8008ccc <_malloc_r+0x20>
 8008d32:	1a1b      	subs	r3, r3, r0
 8008d34:	50a3      	str	r3, [r4, r2]
 8008d36:	e7c9      	b.n	8008ccc <_malloc_r+0x20>
 8008d38:	4622      	mov	r2, r4
 8008d3a:	6864      	ldr	r4, [r4, #4]
 8008d3c:	e7cc      	b.n	8008cd8 <_malloc_r+0x2c>
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d0e3      	beq.n	8008d10 <_malloc_r+0x64>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f000 f808 	bl	8008d60 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d1dd      	bne.n	8008d10 <_malloc_r+0x64>
 8008d54:	e7cf      	b.n	8008cf6 <_malloc_r+0x4a>
 8008d56:	bf00      	nop
 8008d58:	200000b8 	.word	0x200000b8
 8008d5c:	200000bc 	.word	0x200000bc

08008d60 <_sbrk_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d06      	ldr	r5, [pc, #24]	; (8008d7c <_sbrk_r+0x1c>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7f9 f8b8 	bl	8001ee0 <_sbrk>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_sbrk_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_sbrk_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	200008dc 	.word	0x200008dc

08008d80 <__malloc_lock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__malloc_lock+0x8>)
 8008d82:	f000 b809 	b.w	8008d98 <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	200008e4 	.word	0x200008e4

08008d8c <__malloc_unlock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__malloc_unlock+0x8>)
 8008d8e:	f000 b804 	b.w	8008d9a <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	200008e4 	.word	0x200008e4

08008d98 <__retarget_lock_acquire_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <__retarget_lock_release_recursive>:
 8008d9a:	4770      	bx	lr
 8008d9c:	0000      	movs	r0, r0
	...

08008da0 <cos>:
 8008da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008da2:	ec53 2b10 	vmov	r2, r3, d0
 8008da6:	4824      	ldr	r0, [pc, #144]	; (8008e38 <cos+0x98>)
 8008da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008dac:	4281      	cmp	r1, r0
 8008dae:	dc06      	bgt.n	8008dbe <cos+0x1e>
 8008db0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008e30 <cos+0x90>
 8008db4:	f001 f958 	bl	800a068 <__kernel_cos>
 8008db8:	ec51 0b10 	vmov	r0, r1, d0
 8008dbc:	e007      	b.n	8008dce <cos+0x2e>
 8008dbe:	481f      	ldr	r0, [pc, #124]	; (8008e3c <cos+0x9c>)
 8008dc0:	4281      	cmp	r1, r0
 8008dc2:	dd09      	ble.n	8008dd8 <cos+0x38>
 8008dc4:	ee10 0a10 	vmov	r0, s0
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7f7 fa01 	bl	80001d0 <__aeabi_dsub>
 8008dce:	ec41 0b10 	vmov	d0, r0, r1
 8008dd2:	b005      	add	sp, #20
 8008dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dd8:	4668      	mov	r0, sp
 8008dda:	f000 fe85 	bl	8009ae8 <__ieee754_rem_pio2>
 8008dde:	f000 0003 	and.w	r0, r0, #3
 8008de2:	2801      	cmp	r0, #1
 8008de4:	d007      	beq.n	8008df6 <cos+0x56>
 8008de6:	2802      	cmp	r0, #2
 8008de8:	d012      	beq.n	8008e10 <cos+0x70>
 8008dea:	b9c0      	cbnz	r0, 8008e1e <cos+0x7e>
 8008dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008df0:	ed9d 0b00 	vldr	d0, [sp]
 8008df4:	e7de      	b.n	8008db4 <cos+0x14>
 8008df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008dfa:	ed9d 0b00 	vldr	d0, [sp]
 8008dfe:	f001 fd3b 	bl	800a878 <__kernel_sin>
 8008e02:	ec53 2b10 	vmov	r2, r3, d0
 8008e06:	ee10 0a10 	vmov	r0, s0
 8008e0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e0e:	e7de      	b.n	8008dce <cos+0x2e>
 8008e10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e14:	ed9d 0b00 	vldr	d0, [sp]
 8008e18:	f001 f926 	bl	800a068 <__kernel_cos>
 8008e1c:	e7f1      	b.n	8008e02 <cos+0x62>
 8008e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e22:	ed9d 0b00 	vldr	d0, [sp]
 8008e26:	2001      	movs	r0, #1
 8008e28:	f001 fd26 	bl	800a878 <__kernel_sin>
 8008e2c:	e7c4      	b.n	8008db8 <cos+0x18>
 8008e2e:	bf00      	nop
	...
 8008e38:	3fe921fb 	.word	0x3fe921fb
 8008e3c:	7fefffff 	.word	0x7fefffff

08008e40 <floor>:
 8008e40:	ec51 0b10 	vmov	r0, r1, d0
 8008e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008e4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008e50:	2e13      	cmp	r6, #19
 8008e52:	ee10 5a10 	vmov	r5, s0
 8008e56:	ee10 8a10 	vmov	r8, s0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	dc32      	bgt.n	8008ec4 <floor+0x84>
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	da14      	bge.n	8008e8c <floor+0x4c>
 8008e62:	a333      	add	r3, pc, #204	; (adr r3, 8008f30 <floor+0xf0>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 f9b4 	bl	80001d4 <__adddf3>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f7f7 fdf6 	bl	8000a60 <__aeabi_dcmpgt>
 8008e74:	b138      	cbz	r0, 8008e86 <floor+0x46>
 8008e76:	2c00      	cmp	r4, #0
 8008e78:	da57      	bge.n	8008f2a <floor+0xea>
 8008e7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008e7e:	431d      	orrs	r5, r3
 8008e80:	d001      	beq.n	8008e86 <floor+0x46>
 8008e82:	4c2d      	ldr	r4, [pc, #180]	; (8008f38 <floor+0xf8>)
 8008e84:	2500      	movs	r5, #0
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e025      	b.n	8008ed8 <floor+0x98>
 8008e8c:	4f2b      	ldr	r7, [pc, #172]	; (8008f3c <floor+0xfc>)
 8008e8e:	4137      	asrs	r7, r6
 8008e90:	ea01 0307 	and.w	r3, r1, r7
 8008e94:	4303      	orrs	r3, r0
 8008e96:	d01f      	beq.n	8008ed8 <floor+0x98>
 8008e98:	a325      	add	r3, pc, #148	; (adr r3, 8008f30 <floor+0xf0>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 f999 	bl	80001d4 <__adddf3>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f7f7 fddb 	bl	8000a60 <__aeabi_dcmpgt>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0eb      	beq.n	8008e86 <floor+0x46>
 8008eae:	2c00      	cmp	r4, #0
 8008eb0:	bfbe      	ittt	lt
 8008eb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008eb6:	fa43 f606 	asrlt.w	r6, r3, r6
 8008eba:	19a4      	addlt	r4, r4, r6
 8008ebc:	ea24 0407 	bic.w	r4, r4, r7
 8008ec0:	2500      	movs	r5, #0
 8008ec2:	e7e0      	b.n	8008e86 <floor+0x46>
 8008ec4:	2e33      	cmp	r6, #51	; 0x33
 8008ec6:	dd0b      	ble.n	8008ee0 <floor+0xa0>
 8008ec8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ecc:	d104      	bne.n	8008ed8 <floor+0x98>
 8008ece:	ee10 2a10 	vmov	r2, s0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	f7f7 f97e 	bl	80001d4 <__adddf3>
 8008ed8:	ec41 0b10 	vmov	d0, r0, r1
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	fa23 f707 	lsr.w	r7, r3, r7
 8008eec:	4207      	tst	r7, r0
 8008eee:	d0f3      	beq.n	8008ed8 <floor+0x98>
 8008ef0:	a30f      	add	r3, pc, #60	; (adr r3, 8008f30 <floor+0xf0>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 f96d 	bl	80001d4 <__adddf3>
 8008efa:	2200      	movs	r2, #0
 8008efc:	2300      	movs	r3, #0
 8008efe:	f7f7 fdaf 	bl	8000a60 <__aeabi_dcmpgt>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0bf      	beq.n	8008e86 <floor+0x46>
 8008f06:	2c00      	cmp	r4, #0
 8008f08:	da02      	bge.n	8008f10 <floor+0xd0>
 8008f0a:	2e14      	cmp	r6, #20
 8008f0c:	d103      	bne.n	8008f16 <floor+0xd6>
 8008f0e:	3401      	adds	r4, #1
 8008f10:	ea25 0507 	bic.w	r5, r5, r7
 8008f14:	e7b7      	b.n	8008e86 <floor+0x46>
 8008f16:	2301      	movs	r3, #1
 8008f18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008f1c:	fa03 f606 	lsl.w	r6, r3, r6
 8008f20:	4435      	add	r5, r6
 8008f22:	4545      	cmp	r5, r8
 8008f24:	bf38      	it	cc
 8008f26:	18e4      	addcc	r4, r4, r3
 8008f28:	e7f2      	b.n	8008f10 <floor+0xd0>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	462c      	mov	r4, r5
 8008f2e:	e7aa      	b.n	8008e86 <floor+0x46>
 8008f30:	8800759c 	.word	0x8800759c
 8008f34:	7e37e43c 	.word	0x7e37e43c
 8008f38:	bff00000 	.word	0xbff00000
 8008f3c:	000fffff 	.word	0x000fffff

08008f40 <pow>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	ec59 8b10 	vmov	r8, r9, d0
 8008f48:	ec57 6b11 	vmov	r6, r7, d1
 8008f4c:	f000 f8a8 	bl	80090a0 <__ieee754_pow>
 8008f50:	4b4e      	ldr	r3, [pc, #312]	; (800908c <pow+0x14c>)
 8008f52:	f993 3000 	ldrsb.w	r3, [r3]
 8008f56:	3301      	adds	r3, #1
 8008f58:	ec55 4b10 	vmov	r4, r5, d0
 8008f5c:	d015      	beq.n	8008f8a <pow+0x4a>
 8008f5e:	4632      	mov	r2, r6
 8008f60:	463b      	mov	r3, r7
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fd85 	bl	8000a74 <__aeabi_dcmpun>
 8008f6a:	b970      	cbnz	r0, 8008f8a <pow+0x4a>
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	464b      	mov	r3, r9
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 fd7e 	bl	8000a74 <__aeabi_dcmpun>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	b148      	cbz	r0, 8008f92 <pow+0x52>
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fd45 	bl	8000a10 <__aeabi_dcmpeq>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d17d      	bne.n	8009086 <pow+0x146>
 8008f8a:	ec45 4b10 	vmov	d0, r4, r5
 8008f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fd3b 	bl	8000a10 <__aeabi_dcmpeq>
 8008f9a:	b1e0      	cbz	r0, 8008fd6 <pow+0x96>
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fd34 	bl	8000a10 <__aeabi_dcmpeq>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d16c      	bne.n	8009086 <pow+0x146>
 8008fac:	ec47 6b10 	vmov	d0, r6, r7
 8008fb0:	f001 fd29 	bl	800aa06 <finite>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d0e8      	beq.n	8008f8a <pow+0x4a>
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 fd30 	bl	8000a24 <__aeabi_dcmplt>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0e0      	beq.n	8008f8a <pow+0x4a>
 8008fc8:	f7ff fdde 	bl	8008b88 <__errno>
 8008fcc:	2321      	movs	r3, #33	; 0x21
 8008fce:	6003      	str	r3, [r0, #0]
 8008fd0:	2400      	movs	r4, #0
 8008fd2:	4d2f      	ldr	r5, [pc, #188]	; (8009090 <pow+0x150>)
 8008fd4:	e7d9      	b.n	8008f8a <pow+0x4a>
 8008fd6:	ec45 4b10 	vmov	d0, r4, r5
 8008fda:	f001 fd14 	bl	800aa06 <finite>
 8008fde:	bbb8      	cbnz	r0, 8009050 <pow+0x110>
 8008fe0:	ec49 8b10 	vmov	d0, r8, r9
 8008fe4:	f001 fd0f 	bl	800aa06 <finite>
 8008fe8:	b390      	cbz	r0, 8009050 <pow+0x110>
 8008fea:	ec47 6b10 	vmov	d0, r6, r7
 8008fee:	f001 fd0a 	bl	800aa06 <finite>
 8008ff2:	b368      	cbz	r0, 8009050 <pow+0x110>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	462b      	mov	r3, r5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fd3a 	bl	8000a74 <__aeabi_dcmpun>
 8009000:	b160      	cbz	r0, 800901c <pow+0xdc>
 8009002:	f7ff fdc1 	bl	8008b88 <__errno>
 8009006:	2321      	movs	r3, #33	; 0x21
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	2300      	movs	r3, #0
 800900e:	4610      	mov	r0, r2
 8009010:	4619      	mov	r1, r3
 8009012:	f7f7 fbbf 	bl	8000794 <__aeabi_ddiv>
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	e7b6      	b.n	8008f8a <pow+0x4a>
 800901c:	f7ff fdb4 	bl	8008b88 <__errno>
 8009020:	2322      	movs	r3, #34	; 0x22
 8009022:	6003      	str	r3, [r0, #0]
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	4640      	mov	r0, r8
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fcfa 	bl	8000a24 <__aeabi_dcmplt>
 8009030:	2400      	movs	r4, #0
 8009032:	b158      	cbz	r0, 800904c <pow+0x10c>
 8009034:	ec47 6b10 	vmov	d0, r6, r7
 8009038:	f001 fcfa 	bl	800aa30 <rint>
 800903c:	4632      	mov	r2, r6
 800903e:	ec51 0b10 	vmov	r0, r1, d0
 8009042:	463b      	mov	r3, r7
 8009044:	f7f7 fce4 	bl	8000a10 <__aeabi_dcmpeq>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0c2      	beq.n	8008fd2 <pow+0x92>
 800904c:	4d11      	ldr	r5, [pc, #68]	; (8009094 <pow+0x154>)
 800904e:	e79c      	b.n	8008f8a <pow+0x4a>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fcda 	bl	8000a10 <__aeabi_dcmpeq>
 800905c:	2800      	cmp	r0, #0
 800905e:	d094      	beq.n	8008f8a <pow+0x4a>
 8009060:	ec49 8b10 	vmov	d0, r8, r9
 8009064:	f001 fccf 	bl	800aa06 <finite>
 8009068:	2800      	cmp	r0, #0
 800906a:	d08e      	beq.n	8008f8a <pow+0x4a>
 800906c:	ec47 6b10 	vmov	d0, r6, r7
 8009070:	f001 fcc9 	bl	800aa06 <finite>
 8009074:	2800      	cmp	r0, #0
 8009076:	d088      	beq.n	8008f8a <pow+0x4a>
 8009078:	f7ff fd86 	bl	8008b88 <__errno>
 800907c:	2322      	movs	r3, #34	; 0x22
 800907e:	6003      	str	r3, [r0, #0]
 8009080:	2400      	movs	r4, #0
 8009082:	2500      	movs	r5, #0
 8009084:	e781      	b.n	8008f8a <pow+0x4a>
 8009086:	4d04      	ldr	r5, [pc, #16]	; (8009098 <pow+0x158>)
 8009088:	2400      	movs	r4, #0
 800908a:	e77e      	b.n	8008f8a <pow+0x4a>
 800908c:	20000090 	.word	0x20000090
 8009090:	fff00000 	.word	0xfff00000
 8009094:	7ff00000 	.word	0x7ff00000
 8009098:	3ff00000 	.word	0x3ff00000
 800909c:	00000000 	.word	0x00000000

080090a0 <__ieee754_pow>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ed2d 8b06 	vpush	{d8-d10}
 80090a8:	b08d      	sub	sp, #52	; 0x34
 80090aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80090ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80090b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80090b6:	ea56 0100 	orrs.w	r1, r6, r0
 80090ba:	ec53 2b10 	vmov	r2, r3, d0
 80090be:	f000 84d1 	beq.w	8009a64 <__ieee754_pow+0x9c4>
 80090c2:	497f      	ldr	r1, [pc, #508]	; (80092c0 <__ieee754_pow+0x220>)
 80090c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80090c8:	428c      	cmp	r4, r1
 80090ca:	ee10 8a10 	vmov	r8, s0
 80090ce:	4699      	mov	r9, r3
 80090d0:	dc09      	bgt.n	80090e6 <__ieee754_pow+0x46>
 80090d2:	d103      	bne.n	80090dc <__ieee754_pow+0x3c>
 80090d4:	b97a      	cbnz	r2, 80090f6 <__ieee754_pow+0x56>
 80090d6:	42a6      	cmp	r6, r4
 80090d8:	dd02      	ble.n	80090e0 <__ieee754_pow+0x40>
 80090da:	e00c      	b.n	80090f6 <__ieee754_pow+0x56>
 80090dc:	428e      	cmp	r6, r1
 80090de:	dc02      	bgt.n	80090e6 <__ieee754_pow+0x46>
 80090e0:	428e      	cmp	r6, r1
 80090e2:	d110      	bne.n	8009106 <__ieee754_pow+0x66>
 80090e4:	b178      	cbz	r0, 8009106 <__ieee754_pow+0x66>
 80090e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80090ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80090ee:	ea54 0308 	orrs.w	r3, r4, r8
 80090f2:	f000 84b7 	beq.w	8009a64 <__ieee754_pow+0x9c4>
 80090f6:	4873      	ldr	r0, [pc, #460]	; (80092c4 <__ieee754_pow+0x224>)
 80090f8:	b00d      	add	sp, #52	; 0x34
 80090fa:	ecbd 8b06 	vpop	{d8-d10}
 80090fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009102:	f001 bc8d 	b.w	800aa20 <nan>
 8009106:	f1b9 0f00 	cmp.w	r9, #0
 800910a:	da36      	bge.n	800917a <__ieee754_pow+0xda>
 800910c:	496e      	ldr	r1, [pc, #440]	; (80092c8 <__ieee754_pow+0x228>)
 800910e:	428e      	cmp	r6, r1
 8009110:	dc51      	bgt.n	80091b6 <__ieee754_pow+0x116>
 8009112:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009116:	428e      	cmp	r6, r1
 8009118:	f340 84af 	ble.w	8009a7a <__ieee754_pow+0x9da>
 800911c:	1531      	asrs	r1, r6, #20
 800911e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009122:	2914      	cmp	r1, #20
 8009124:	dd0f      	ble.n	8009146 <__ieee754_pow+0xa6>
 8009126:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800912a:	fa20 fc01 	lsr.w	ip, r0, r1
 800912e:	fa0c f101 	lsl.w	r1, ip, r1
 8009132:	4281      	cmp	r1, r0
 8009134:	f040 84a1 	bne.w	8009a7a <__ieee754_pow+0x9da>
 8009138:	f00c 0c01 	and.w	ip, ip, #1
 800913c:	f1cc 0102 	rsb	r1, ip, #2
 8009140:	9100      	str	r1, [sp, #0]
 8009142:	b180      	cbz	r0, 8009166 <__ieee754_pow+0xc6>
 8009144:	e059      	b.n	80091fa <__ieee754_pow+0x15a>
 8009146:	2800      	cmp	r0, #0
 8009148:	d155      	bne.n	80091f6 <__ieee754_pow+0x156>
 800914a:	f1c1 0114 	rsb	r1, r1, #20
 800914e:	fa46 fc01 	asr.w	ip, r6, r1
 8009152:	fa0c f101 	lsl.w	r1, ip, r1
 8009156:	42b1      	cmp	r1, r6
 8009158:	f040 848c 	bne.w	8009a74 <__ieee754_pow+0x9d4>
 800915c:	f00c 0c01 	and.w	ip, ip, #1
 8009160:	f1cc 0102 	rsb	r1, ip, #2
 8009164:	9100      	str	r1, [sp, #0]
 8009166:	4959      	ldr	r1, [pc, #356]	; (80092cc <__ieee754_pow+0x22c>)
 8009168:	428e      	cmp	r6, r1
 800916a:	d12d      	bne.n	80091c8 <__ieee754_pow+0x128>
 800916c:	2f00      	cmp	r7, #0
 800916e:	da79      	bge.n	8009264 <__ieee754_pow+0x1c4>
 8009170:	4956      	ldr	r1, [pc, #344]	; (80092cc <__ieee754_pow+0x22c>)
 8009172:	2000      	movs	r0, #0
 8009174:	f7f7 fb0e 	bl	8000794 <__aeabi_ddiv>
 8009178:	e016      	b.n	80091a8 <__ieee754_pow+0x108>
 800917a:	2100      	movs	r1, #0
 800917c:	9100      	str	r1, [sp, #0]
 800917e:	2800      	cmp	r0, #0
 8009180:	d13b      	bne.n	80091fa <__ieee754_pow+0x15a>
 8009182:	494f      	ldr	r1, [pc, #316]	; (80092c0 <__ieee754_pow+0x220>)
 8009184:	428e      	cmp	r6, r1
 8009186:	d1ee      	bne.n	8009166 <__ieee754_pow+0xc6>
 8009188:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800918c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009190:	ea53 0308 	orrs.w	r3, r3, r8
 8009194:	f000 8466 	beq.w	8009a64 <__ieee754_pow+0x9c4>
 8009198:	4b4d      	ldr	r3, [pc, #308]	; (80092d0 <__ieee754_pow+0x230>)
 800919a:	429c      	cmp	r4, r3
 800919c:	dd0d      	ble.n	80091ba <__ieee754_pow+0x11a>
 800919e:	2f00      	cmp	r7, #0
 80091a0:	f280 8464 	bge.w	8009a6c <__ieee754_pow+0x9cc>
 80091a4:	2000      	movs	r0, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	ec41 0b10 	vmov	d0, r0, r1
 80091ac:	b00d      	add	sp, #52	; 0x34
 80091ae:	ecbd 8b06 	vpop	{d8-d10}
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2102      	movs	r1, #2
 80091b8:	e7e0      	b.n	800917c <__ieee754_pow+0xdc>
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	daf2      	bge.n	80091a4 <__ieee754_pow+0x104>
 80091be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80091c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80091c6:	e7ef      	b.n	80091a8 <__ieee754_pow+0x108>
 80091c8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80091cc:	d104      	bne.n	80091d8 <__ieee754_pow+0x138>
 80091ce:	4610      	mov	r0, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7f7 f9b5 	bl	8000540 <__aeabi_dmul>
 80091d6:	e7e7      	b.n	80091a8 <__ieee754_pow+0x108>
 80091d8:	493e      	ldr	r1, [pc, #248]	; (80092d4 <__ieee754_pow+0x234>)
 80091da:	428f      	cmp	r7, r1
 80091dc:	d10d      	bne.n	80091fa <__ieee754_pow+0x15a>
 80091de:	f1b9 0f00 	cmp.w	r9, #0
 80091e2:	db0a      	blt.n	80091fa <__ieee754_pow+0x15a>
 80091e4:	ec43 2b10 	vmov	d0, r2, r3
 80091e8:	b00d      	add	sp, #52	; 0x34
 80091ea:	ecbd 8b06 	vpop	{d8-d10}
 80091ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f2:	f000 be83 	b.w	8009efc <__ieee754_sqrt>
 80091f6:	2100      	movs	r1, #0
 80091f8:	9100      	str	r1, [sp, #0]
 80091fa:	ec43 2b10 	vmov	d0, r2, r3
 80091fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009202:	f001 fbf7 	bl	800a9f4 <fabs>
 8009206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800920a:	ec51 0b10 	vmov	r0, r1, d0
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d12a      	bne.n	800926a <__ieee754_pow+0x1ca>
 8009214:	b12c      	cbz	r4, 8009222 <__ieee754_pow+0x182>
 8009216:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80092cc <__ieee754_pow+0x22c>
 800921a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800921e:	45e6      	cmp	lr, ip
 8009220:	d123      	bne.n	800926a <__ieee754_pow+0x1ca>
 8009222:	2f00      	cmp	r7, #0
 8009224:	da05      	bge.n	8009232 <__ieee754_pow+0x192>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	2000      	movs	r0, #0
 800922c:	4927      	ldr	r1, [pc, #156]	; (80092cc <__ieee754_pow+0x22c>)
 800922e:	f7f7 fab1 	bl	8000794 <__aeabi_ddiv>
 8009232:	f1b9 0f00 	cmp.w	r9, #0
 8009236:	dab7      	bge.n	80091a8 <__ieee754_pow+0x108>
 8009238:	9b00      	ldr	r3, [sp, #0]
 800923a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800923e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009242:	4323      	orrs	r3, r4
 8009244:	d108      	bne.n	8009258 <__ieee754_pow+0x1b8>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f7f6 ffbf 	bl	80001d0 <__aeabi_dsub>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e78d      	b.n	8009174 <__ieee754_pow+0xd4>
 8009258:	9b00      	ldr	r3, [sp, #0]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d1a4      	bne.n	80091a8 <__ieee754_pow+0x108>
 800925e:	4602      	mov	r2, r0
 8009260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009264:	4610      	mov	r0, r2
 8009266:	4619      	mov	r1, r3
 8009268:	e79e      	b.n	80091a8 <__ieee754_pow+0x108>
 800926a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800926e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009272:	950a      	str	r5, [sp, #40]	; 0x28
 8009274:	9d00      	ldr	r5, [sp, #0]
 8009276:	46ac      	mov	ip, r5
 8009278:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800927a:	ea5c 0505 	orrs.w	r5, ip, r5
 800927e:	d0e4      	beq.n	800924a <__ieee754_pow+0x1aa>
 8009280:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <__ieee754_pow+0x238>)
 8009282:	429e      	cmp	r6, r3
 8009284:	f340 80fc 	ble.w	8009480 <__ieee754_pow+0x3e0>
 8009288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800928c:	429e      	cmp	r6, r3
 800928e:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <__ieee754_pow+0x230>)
 8009290:	dd07      	ble.n	80092a2 <__ieee754_pow+0x202>
 8009292:	429c      	cmp	r4, r3
 8009294:	dc0a      	bgt.n	80092ac <__ieee754_pow+0x20c>
 8009296:	2f00      	cmp	r7, #0
 8009298:	da84      	bge.n	80091a4 <__ieee754_pow+0x104>
 800929a:	a307      	add	r3, pc, #28	; (adr r3, 80092b8 <__ieee754_pow+0x218>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	e795      	b.n	80091ce <__ieee754_pow+0x12e>
 80092a2:	429c      	cmp	r4, r3
 80092a4:	dbf7      	blt.n	8009296 <__ieee754_pow+0x1f6>
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <__ieee754_pow+0x22c>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	dd17      	ble.n	80092dc <__ieee754_pow+0x23c>
 80092ac:	2f00      	cmp	r7, #0
 80092ae:	dcf4      	bgt.n	800929a <__ieee754_pow+0x1fa>
 80092b0:	e778      	b.n	80091a4 <__ieee754_pow+0x104>
 80092b2:	bf00      	nop
 80092b4:	f3af 8000 	nop.w
 80092b8:	8800759c 	.word	0x8800759c
 80092bc:	7e37e43c 	.word	0x7e37e43c
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	0800acf0 	.word	0x0800acf0
 80092c8:	433fffff 	.word	0x433fffff
 80092cc:	3ff00000 	.word	0x3ff00000
 80092d0:	3fefffff 	.word	0x3fefffff
 80092d4:	3fe00000 	.word	0x3fe00000
 80092d8:	41e00000 	.word	0x41e00000
 80092dc:	4b64      	ldr	r3, [pc, #400]	; (8009470 <__ieee754_pow+0x3d0>)
 80092de:	2200      	movs	r2, #0
 80092e0:	f7f6 ff76 	bl	80001d0 <__aeabi_dsub>
 80092e4:	a356      	add	r3, pc, #344	; (adr r3, 8009440 <__ieee754_pow+0x3a0>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	f7f7 f927 	bl	8000540 <__aeabi_dmul>
 80092f2:	a355      	add	r3, pc, #340	; (adr r3, 8009448 <__ieee754_pow+0x3a8>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f7 f91e 	bl	8000540 <__aeabi_dmul>
 8009304:	4b5b      	ldr	r3, [pc, #364]	; (8009474 <__ieee754_pow+0x3d4>)
 8009306:	4682      	mov	sl, r0
 8009308:	468b      	mov	fp, r1
 800930a:	2200      	movs	r2, #0
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f7 f916 	bl	8000540 <__aeabi_dmul>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	a14d      	add	r1, pc, #308	; (adr r1, 8009450 <__ieee754_pow+0x3b0>)
 800931a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931e:	f7f6 ff57 	bl	80001d0 <__aeabi_dsub>
 8009322:	4622      	mov	r2, r4
 8009324:	462b      	mov	r3, r5
 8009326:	f7f7 f90b 	bl	8000540 <__aeabi_dmul>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	2000      	movs	r0, #0
 8009330:	4951      	ldr	r1, [pc, #324]	; (8009478 <__ieee754_pow+0x3d8>)
 8009332:	f7f6 ff4d 	bl	80001d0 <__aeabi_dsub>
 8009336:	4622      	mov	r2, r4
 8009338:	4680      	mov	r8, r0
 800933a:	4689      	mov	r9, r1
 800933c:	462b      	mov	r3, r5
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	f7f7 f8fd 	bl	8000540 <__aeabi_dmul>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 f8f7 	bl	8000540 <__aeabi_dmul>
 8009352:	a341      	add	r3, pc, #260	; (adr r3, 8009458 <__ieee754_pow+0x3b8>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f7 f8f2 	bl	8000540 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4650      	mov	r0, sl
 8009362:	4659      	mov	r1, fp
 8009364:	f7f6 ff34 	bl	80001d0 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4680      	mov	r8, r0
 800936e:	4689      	mov	r9, r1
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f6 ff2e 	bl	80001d4 <__adddf3>
 8009378:	2400      	movs	r4, #0
 800937a:	4632      	mov	r2, r6
 800937c:	463b      	mov	r3, r7
 800937e:	4620      	mov	r0, r4
 8009380:	460d      	mov	r5, r1
 8009382:	f7f6 ff25 	bl	80001d0 <__aeabi_dsub>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f6 ff1f 	bl	80001d0 <__aeabi_dsub>
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009396:	3b01      	subs	r3, #1
 8009398:	4313      	orrs	r3, r2
 800939a:	4682      	mov	sl, r0
 800939c:	468b      	mov	fp, r1
 800939e:	f040 81f1 	bne.w	8009784 <__ieee754_pow+0x6e4>
 80093a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009460 <__ieee754_pow+0x3c0>
 80093a6:	eeb0 8a47 	vmov.f32	s16, s14
 80093aa:	eef0 8a67 	vmov.f32	s17, s15
 80093ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093b2:	2600      	movs	r6, #0
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	f7f6 ff08 	bl	80001d0 <__aeabi_dsub>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f8bc 	bl	8000540 <__aeabi_dmul>
 80093c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093cc:	4680      	mov	r8, r0
 80093ce:	4689      	mov	r9, r1
 80093d0:	4650      	mov	r0, sl
 80093d2:	4659      	mov	r1, fp
 80093d4:	f7f7 f8b4 	bl	8000540 <__aeabi_dmul>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4640      	mov	r0, r8
 80093de:	4649      	mov	r1, r9
 80093e0:	f7f6 fef8 	bl	80001d4 <__adddf3>
 80093e4:	4632      	mov	r2, r6
 80093e6:	463b      	mov	r3, r7
 80093e8:	4680      	mov	r8, r0
 80093ea:	4689      	mov	r9, r1
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 f8a6 	bl	8000540 <__aeabi_dmul>
 80093f4:	460b      	mov	r3, r1
 80093f6:	4604      	mov	r4, r0
 80093f8:	460d      	mov	r5, r1
 80093fa:	4602      	mov	r2, r0
 80093fc:	4649      	mov	r1, r9
 80093fe:	4640      	mov	r0, r8
 8009400:	f7f6 fee8 	bl	80001d4 <__adddf3>
 8009404:	4b1d      	ldr	r3, [pc, #116]	; (800947c <__ieee754_pow+0x3dc>)
 8009406:	4299      	cmp	r1, r3
 8009408:	ec45 4b19 	vmov	d9, r4, r5
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	468b      	mov	fp, r1
 8009412:	f340 82fe 	ble.w	8009a12 <__ieee754_pow+0x972>
 8009416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800941a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800941e:	4303      	orrs	r3, r0
 8009420:	f000 81f0 	beq.w	8009804 <__ieee754_pow+0x764>
 8009424:	a310      	add	r3, pc, #64	; (adr r3, 8009468 <__ieee754_pow+0x3c8>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	ec51 0b18 	vmov	r0, r1, d8
 800942e:	f7f7 f887 	bl	8000540 <__aeabi_dmul>
 8009432:	a30d      	add	r3, pc, #52	; (adr r3, 8009468 <__ieee754_pow+0x3c8>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	e6cb      	b.n	80091d2 <__ieee754_pow+0x132>
 800943a:	bf00      	nop
 800943c:	f3af 8000 	nop.w
 8009440:	60000000 	.word	0x60000000
 8009444:	3ff71547 	.word	0x3ff71547
 8009448:	f85ddf44 	.word	0xf85ddf44
 800944c:	3e54ae0b 	.word	0x3e54ae0b
 8009450:	55555555 	.word	0x55555555
 8009454:	3fd55555 	.word	0x3fd55555
 8009458:	652b82fe 	.word	0x652b82fe
 800945c:	3ff71547 	.word	0x3ff71547
 8009460:	00000000 	.word	0x00000000
 8009464:	bff00000 	.word	0xbff00000
 8009468:	8800759c 	.word	0x8800759c
 800946c:	7e37e43c 	.word	0x7e37e43c
 8009470:	3ff00000 	.word	0x3ff00000
 8009474:	3fd00000 	.word	0x3fd00000
 8009478:	3fe00000 	.word	0x3fe00000
 800947c:	408fffff 	.word	0x408fffff
 8009480:	4bd7      	ldr	r3, [pc, #860]	; (80097e0 <__ieee754_pow+0x740>)
 8009482:	ea03 0309 	and.w	r3, r3, r9
 8009486:	2200      	movs	r2, #0
 8009488:	b92b      	cbnz	r3, 8009496 <__ieee754_pow+0x3f6>
 800948a:	4bd6      	ldr	r3, [pc, #856]	; (80097e4 <__ieee754_pow+0x744>)
 800948c:	f7f7 f858 	bl	8000540 <__aeabi_dmul>
 8009490:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009494:	460c      	mov	r4, r1
 8009496:	1523      	asrs	r3, r4, #20
 8009498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800949c:	4413      	add	r3, r2
 800949e:	9309      	str	r3, [sp, #36]	; 0x24
 80094a0:	4bd1      	ldr	r3, [pc, #836]	; (80097e8 <__ieee754_pow+0x748>)
 80094a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80094a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80094aa:	429c      	cmp	r4, r3
 80094ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094b0:	dd08      	ble.n	80094c4 <__ieee754_pow+0x424>
 80094b2:	4bce      	ldr	r3, [pc, #824]	; (80097ec <__ieee754_pow+0x74c>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	f340 8163 	ble.w	8009780 <__ieee754_pow+0x6e0>
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	3301      	adds	r3, #1
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80094c4:	2400      	movs	r4, #0
 80094c6:	00e3      	lsls	r3, r4, #3
 80094c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ca:	4bc9      	ldr	r3, [pc, #804]	; (80097f0 <__ieee754_pow+0x750>)
 80094cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094d0:	ed93 7b00 	vldr	d7, [r3]
 80094d4:	4629      	mov	r1, r5
 80094d6:	ec53 2b17 	vmov	r2, r3, d7
 80094da:	eeb0 8a47 	vmov.f32	s16, s14
 80094de:	eef0 8a67 	vmov.f32	s17, s15
 80094e2:	4682      	mov	sl, r0
 80094e4:	f7f6 fe74 	bl	80001d0 <__aeabi_dsub>
 80094e8:	4652      	mov	r2, sl
 80094ea:	4606      	mov	r6, r0
 80094ec:	460f      	mov	r7, r1
 80094ee:	462b      	mov	r3, r5
 80094f0:	ec51 0b18 	vmov	r0, r1, d8
 80094f4:	f7f6 fe6e 	bl	80001d4 <__adddf3>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	2000      	movs	r0, #0
 80094fe:	49bd      	ldr	r1, [pc, #756]	; (80097f4 <__ieee754_pow+0x754>)
 8009500:	f7f7 f948 	bl	8000794 <__aeabi_ddiv>
 8009504:	ec41 0b19 	vmov	d9, r0, r1
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f7 f816 	bl	8000540 <__aeabi_dmul>
 8009514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800951c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009520:	2300      	movs	r3, #0
 8009522:	9304      	str	r3, [sp, #16]
 8009524:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009528:	46ab      	mov	fp, r5
 800952a:	106d      	asrs	r5, r5, #1
 800952c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009530:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009534:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009538:	2200      	movs	r2, #0
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	4614      	mov	r4, r2
 8009540:	461d      	mov	r5, r3
 8009542:	f7f6 fffd 	bl	8000540 <__aeabi_dmul>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f6 fe3f 	bl	80001d0 <__aeabi_dsub>
 8009552:	ec53 2b18 	vmov	r2, r3, d8
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f7f6 fe37 	bl	80001d0 <__aeabi_dsub>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4650      	mov	r0, sl
 8009568:	4659      	mov	r1, fp
 800956a:	f7f6 fe31 	bl	80001d0 <__aeabi_dsub>
 800956e:	4642      	mov	r2, r8
 8009570:	464b      	mov	r3, r9
 8009572:	f7f6 ffe5 	bl	8000540 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	f7f6 fe27 	bl	80001d0 <__aeabi_dsub>
 8009582:	ec53 2b19 	vmov	r2, r3, d9
 8009586:	f7f6 ffdb 	bl	8000540 <__aeabi_dmul>
 800958a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800958e:	ec41 0b18 	vmov	d8, r0, r1
 8009592:	4610      	mov	r0, r2
 8009594:	4619      	mov	r1, r3
 8009596:	f7f6 ffd3 	bl	8000540 <__aeabi_dmul>
 800959a:	a37d      	add	r3, pc, #500	; (adr r3, 8009790 <__ieee754_pow+0x6f0>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	f7f6 ffcc 	bl	8000540 <__aeabi_dmul>
 80095a8:	a37b      	add	r3, pc, #492	; (adr r3, 8009798 <__ieee754_pow+0x6f8>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f6 fe11 	bl	80001d4 <__adddf3>
 80095b2:	4622      	mov	r2, r4
 80095b4:	462b      	mov	r3, r5
 80095b6:	f7f6 ffc3 	bl	8000540 <__aeabi_dmul>
 80095ba:	a379      	add	r3, pc, #484	; (adr r3, 80097a0 <__ieee754_pow+0x700>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7f6 fe08 	bl	80001d4 <__adddf3>
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	f7f6 ffba 	bl	8000540 <__aeabi_dmul>
 80095cc:	a376      	add	r3, pc, #472	; (adr r3, 80097a8 <__ieee754_pow+0x708>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f7f6 fdff 	bl	80001d4 <__adddf3>
 80095d6:	4622      	mov	r2, r4
 80095d8:	462b      	mov	r3, r5
 80095da:	f7f6 ffb1 	bl	8000540 <__aeabi_dmul>
 80095de:	a374      	add	r3, pc, #464	; (adr r3, 80097b0 <__ieee754_pow+0x710>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fdf6 	bl	80001d4 <__adddf3>
 80095e8:	4622      	mov	r2, r4
 80095ea:	462b      	mov	r3, r5
 80095ec:	f7f6 ffa8 	bl	8000540 <__aeabi_dmul>
 80095f0:	a371      	add	r3, pc, #452	; (adr r3, 80097b8 <__ieee754_pow+0x718>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fded 	bl	80001d4 <__adddf3>
 80095fa:	4622      	mov	r2, r4
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	462b      	mov	r3, r5
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	f7f6 ff9b 	bl	8000540 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f6 ff95 	bl	8000540 <__aeabi_dmul>
 8009616:	4642      	mov	r2, r8
 8009618:	4604      	mov	r4, r0
 800961a:	460d      	mov	r5, r1
 800961c:	464b      	mov	r3, r9
 800961e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009622:	f7f6 fdd7 	bl	80001d4 <__adddf3>
 8009626:	ec53 2b18 	vmov	r2, r3, d8
 800962a:	f7f6 ff89 	bl	8000540 <__aeabi_dmul>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	f7f6 fdcf 	bl	80001d4 <__adddf3>
 8009636:	4642      	mov	r2, r8
 8009638:	4682      	mov	sl, r0
 800963a:	468b      	mov	fp, r1
 800963c:	464b      	mov	r3, r9
 800963e:	4640      	mov	r0, r8
 8009640:	4649      	mov	r1, r9
 8009642:	f7f6 ff7d 	bl	8000540 <__aeabi_dmul>
 8009646:	4b6c      	ldr	r3, [pc, #432]	; (80097f8 <__ieee754_pow+0x758>)
 8009648:	2200      	movs	r2, #0
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	f7f6 fdc1 	bl	80001d4 <__adddf3>
 8009652:	4652      	mov	r2, sl
 8009654:	465b      	mov	r3, fp
 8009656:	f7f6 fdbd 	bl	80001d4 <__adddf3>
 800965a:	9c04      	ldr	r4, [sp, #16]
 800965c:	460d      	mov	r5, r1
 800965e:	4622      	mov	r2, r4
 8009660:	460b      	mov	r3, r1
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	f7f6 ff6b 	bl	8000540 <__aeabi_dmul>
 800966a:	4b63      	ldr	r3, [pc, #396]	; (80097f8 <__ieee754_pow+0x758>)
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	2200      	movs	r2, #0
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f6 fdab 	bl	80001d0 <__aeabi_dsub>
 800967a:	4632      	mov	r2, r6
 800967c:	463b      	mov	r3, r7
 800967e:	f7f6 fda7 	bl	80001d0 <__aeabi_dsub>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4650      	mov	r0, sl
 8009688:	4659      	mov	r1, fp
 800968a:	f7f6 fda1 	bl	80001d0 <__aeabi_dsub>
 800968e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009692:	f7f6 ff55 	bl	8000540 <__aeabi_dmul>
 8009696:	4622      	mov	r2, r4
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	462b      	mov	r3, r5
 800969e:	ec51 0b18 	vmov	r0, r1, d8
 80096a2:	f7f6 ff4d 	bl	8000540 <__aeabi_dmul>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4630      	mov	r0, r6
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f6 fd91 	bl	80001d4 <__adddf3>
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	f7f6 fd89 	bl	80001d4 <__adddf3>
 80096c2:	9c04      	ldr	r4, [sp, #16]
 80096c4:	a33e      	add	r3, pc, #248	; (adr r3, 80097c0 <__ieee754_pow+0x720>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	4620      	mov	r0, r4
 80096cc:	460d      	mov	r5, r1
 80096ce:	f7f6 ff37 	bl	8000540 <__aeabi_dmul>
 80096d2:	4642      	mov	r2, r8
 80096d4:	ec41 0b18 	vmov	d8, r0, r1
 80096d8:	464b      	mov	r3, r9
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	f7f6 fd77 	bl	80001d0 <__aeabi_dsub>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4630      	mov	r0, r6
 80096e8:	4639      	mov	r1, r7
 80096ea:	f7f6 fd71 	bl	80001d0 <__aeabi_dsub>
 80096ee:	a336      	add	r3, pc, #216	; (adr r3, 80097c8 <__ieee754_pow+0x728>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 ff24 	bl	8000540 <__aeabi_dmul>
 80096f8:	a335      	add	r3, pc, #212	; (adr r3, 80097d0 <__ieee754_pow+0x730>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	4606      	mov	r6, r0
 8009700:	460f      	mov	r7, r1
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f6 ff1b 	bl	8000540 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fd5f 	bl	80001d4 <__adddf3>
 8009716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009718:	4b38      	ldr	r3, [pc, #224]	; (80097fc <__ieee754_pow+0x75c>)
 800971a:	4413      	add	r3, r2
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fd58 	bl	80001d4 <__adddf3>
 8009724:	4682      	mov	sl, r0
 8009726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009728:	468b      	mov	fp, r1
 800972a:	f7f6 fe9f 	bl	800046c <__aeabi_i2d>
 800972e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009730:	4b33      	ldr	r3, [pc, #204]	; (8009800 <__ieee754_pow+0x760>)
 8009732:	4413      	add	r3, r2
 8009734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009738:	4606      	mov	r6, r0
 800973a:	460f      	mov	r7, r1
 800973c:	4652      	mov	r2, sl
 800973e:	465b      	mov	r3, fp
 8009740:	ec51 0b18 	vmov	r0, r1, d8
 8009744:	f7f6 fd46 	bl	80001d4 <__adddf3>
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	f7f6 fd42 	bl	80001d4 <__adddf3>
 8009750:	4632      	mov	r2, r6
 8009752:	463b      	mov	r3, r7
 8009754:	f7f6 fd3e 	bl	80001d4 <__adddf3>
 8009758:	9c04      	ldr	r4, [sp, #16]
 800975a:	4632      	mov	r2, r6
 800975c:	463b      	mov	r3, r7
 800975e:	4620      	mov	r0, r4
 8009760:	460d      	mov	r5, r1
 8009762:	f7f6 fd35 	bl	80001d0 <__aeabi_dsub>
 8009766:	4642      	mov	r2, r8
 8009768:	464b      	mov	r3, r9
 800976a:	f7f6 fd31 	bl	80001d0 <__aeabi_dsub>
 800976e:	ec53 2b18 	vmov	r2, r3, d8
 8009772:	f7f6 fd2d 	bl	80001d0 <__aeabi_dsub>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4650      	mov	r0, sl
 800977c:	4659      	mov	r1, fp
 800977e:	e606      	b.n	800938e <__ieee754_pow+0x2ee>
 8009780:	2401      	movs	r4, #1
 8009782:	e6a0      	b.n	80094c6 <__ieee754_pow+0x426>
 8009784:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80097d8 <__ieee754_pow+0x738>
 8009788:	e60d      	b.n	80093a6 <__ieee754_pow+0x306>
 800978a:	bf00      	nop
 800978c:	f3af 8000 	nop.w
 8009790:	4a454eef 	.word	0x4a454eef
 8009794:	3fca7e28 	.word	0x3fca7e28
 8009798:	93c9db65 	.word	0x93c9db65
 800979c:	3fcd864a 	.word	0x3fcd864a
 80097a0:	a91d4101 	.word	0xa91d4101
 80097a4:	3fd17460 	.word	0x3fd17460
 80097a8:	518f264d 	.word	0x518f264d
 80097ac:	3fd55555 	.word	0x3fd55555
 80097b0:	db6fabff 	.word	0xdb6fabff
 80097b4:	3fdb6db6 	.word	0x3fdb6db6
 80097b8:	33333303 	.word	0x33333303
 80097bc:	3fe33333 	.word	0x3fe33333
 80097c0:	e0000000 	.word	0xe0000000
 80097c4:	3feec709 	.word	0x3feec709
 80097c8:	dc3a03fd 	.word	0xdc3a03fd
 80097cc:	3feec709 	.word	0x3feec709
 80097d0:	145b01f5 	.word	0x145b01f5
 80097d4:	be3e2fe0 	.word	0xbe3e2fe0
 80097d8:	00000000 	.word	0x00000000
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	43400000 	.word	0x43400000
 80097e8:	0003988e 	.word	0x0003988e
 80097ec:	000bb679 	.word	0x000bb679
 80097f0:	0800acf8 	.word	0x0800acf8
 80097f4:	3ff00000 	.word	0x3ff00000
 80097f8:	40080000 	.word	0x40080000
 80097fc:	0800ad18 	.word	0x0800ad18
 8009800:	0800ad08 	.word	0x0800ad08
 8009804:	a3b5      	add	r3, pc, #724	; (adr r3, 8009adc <__ieee754_pow+0xa3c>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fce1 	bl	80001d4 <__adddf3>
 8009812:	4622      	mov	r2, r4
 8009814:	ec41 0b1a 	vmov	d10, r0, r1
 8009818:	462b      	mov	r3, r5
 800981a:	4630      	mov	r0, r6
 800981c:	4639      	mov	r1, r7
 800981e:	f7f6 fcd7 	bl	80001d0 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	ec51 0b1a 	vmov	r0, r1, d10
 800982a:	f7f7 f919 	bl	8000a60 <__aeabi_dcmpgt>
 800982e:	2800      	cmp	r0, #0
 8009830:	f47f adf8 	bne.w	8009424 <__ieee754_pow+0x384>
 8009834:	4aa4      	ldr	r2, [pc, #656]	; (8009ac8 <__ieee754_pow+0xa28>)
 8009836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800983a:	4293      	cmp	r3, r2
 800983c:	f340 810b 	ble.w	8009a56 <__ieee754_pow+0x9b6>
 8009840:	151b      	asrs	r3, r3, #20
 8009842:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009846:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800984a:	fa4a f303 	asr.w	r3, sl, r3
 800984e:	445b      	add	r3, fp
 8009850:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009854:	4e9d      	ldr	r6, [pc, #628]	; (8009acc <__ieee754_pow+0xa2c>)
 8009856:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800985a:	4116      	asrs	r6, r2
 800985c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009860:	2000      	movs	r0, #0
 8009862:	ea23 0106 	bic.w	r1, r3, r6
 8009866:	f1c2 0214 	rsb	r2, r2, #20
 800986a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800986e:	fa4a fa02 	asr.w	sl, sl, r2
 8009872:	f1bb 0f00 	cmp.w	fp, #0
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4620      	mov	r0, r4
 800987c:	4629      	mov	r1, r5
 800987e:	bfb8      	it	lt
 8009880:	f1ca 0a00 	rsblt	sl, sl, #0
 8009884:	f7f6 fca4 	bl	80001d0 <__aeabi_dsub>
 8009888:	ec41 0b19 	vmov	d9, r0, r1
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	ec51 0b19 	vmov	r0, r1, d9
 8009894:	f7f6 fc9e 	bl	80001d4 <__adddf3>
 8009898:	2400      	movs	r4, #0
 800989a:	a379      	add	r3, pc, #484	; (adr r3, 8009a80 <__ieee754_pow+0x9e0>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	4620      	mov	r0, r4
 80098a2:	460d      	mov	r5, r1
 80098a4:	f7f6 fe4c 	bl	8000540 <__aeabi_dmul>
 80098a8:	ec53 2b19 	vmov	r2, r3, d9
 80098ac:	4606      	mov	r6, r0
 80098ae:	460f      	mov	r7, r1
 80098b0:	4620      	mov	r0, r4
 80098b2:	4629      	mov	r1, r5
 80098b4:	f7f6 fc8c 	bl	80001d0 <__aeabi_dsub>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4640      	mov	r0, r8
 80098be:	4649      	mov	r1, r9
 80098c0:	f7f6 fc86 	bl	80001d0 <__aeabi_dsub>
 80098c4:	a370      	add	r3, pc, #448	; (adr r3, 8009a88 <__ieee754_pow+0x9e8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fe39 	bl	8000540 <__aeabi_dmul>
 80098ce:	a370      	add	r3, pc, #448	; (adr r3, 8009a90 <__ieee754_pow+0x9f0>)
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	4680      	mov	r8, r0
 80098d6:	4689      	mov	r9, r1
 80098d8:	4620      	mov	r0, r4
 80098da:	4629      	mov	r1, r5
 80098dc:	f7f6 fe30 	bl	8000540 <__aeabi_dmul>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4640      	mov	r0, r8
 80098e6:	4649      	mov	r1, r9
 80098e8:	f7f6 fc74 	bl	80001d4 <__adddf3>
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4630      	mov	r0, r6
 80098f6:	4639      	mov	r1, r7
 80098f8:	f7f6 fc6c 	bl	80001d4 <__adddf3>
 80098fc:	4632      	mov	r2, r6
 80098fe:	463b      	mov	r3, r7
 8009900:	4680      	mov	r8, r0
 8009902:	4689      	mov	r9, r1
 8009904:	f7f6 fc64 	bl	80001d0 <__aeabi_dsub>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fc5e 	bl	80001d0 <__aeabi_dsub>
 8009914:	4642      	mov	r2, r8
 8009916:	4606      	mov	r6, r0
 8009918:	460f      	mov	r7, r1
 800991a:	464b      	mov	r3, r9
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f6 fe0e 	bl	8000540 <__aeabi_dmul>
 8009924:	a35c      	add	r3, pc, #368	; (adr r3, 8009a98 <__ieee754_pow+0x9f8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	4604      	mov	r4, r0
 800992c:	460d      	mov	r5, r1
 800992e:	f7f6 fe07 	bl	8000540 <__aeabi_dmul>
 8009932:	a35b      	add	r3, pc, #364	; (adr r3, 8009aa0 <__ieee754_pow+0xa00>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fc4a 	bl	80001d0 <__aeabi_dsub>
 800993c:	4622      	mov	r2, r4
 800993e:	462b      	mov	r3, r5
 8009940:	f7f6 fdfe 	bl	8000540 <__aeabi_dmul>
 8009944:	a358      	add	r3, pc, #352	; (adr r3, 8009aa8 <__ieee754_pow+0xa08>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fc43 	bl	80001d4 <__adddf3>
 800994e:	4622      	mov	r2, r4
 8009950:	462b      	mov	r3, r5
 8009952:	f7f6 fdf5 	bl	8000540 <__aeabi_dmul>
 8009956:	a356      	add	r3, pc, #344	; (adr r3, 8009ab0 <__ieee754_pow+0xa10>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fc38 	bl	80001d0 <__aeabi_dsub>
 8009960:	4622      	mov	r2, r4
 8009962:	462b      	mov	r3, r5
 8009964:	f7f6 fdec 	bl	8000540 <__aeabi_dmul>
 8009968:	a353      	add	r3, pc, #332	; (adr r3, 8009ab8 <__ieee754_pow+0xa18>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f6 fc31 	bl	80001d4 <__adddf3>
 8009972:	4622      	mov	r2, r4
 8009974:	462b      	mov	r3, r5
 8009976:	f7f6 fde3 	bl	8000540 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4640      	mov	r0, r8
 8009980:	4649      	mov	r1, r9
 8009982:	f7f6 fc25 	bl	80001d0 <__aeabi_dsub>
 8009986:	4604      	mov	r4, r0
 8009988:	460d      	mov	r5, r1
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4640      	mov	r0, r8
 8009990:	4649      	mov	r1, r9
 8009992:	f7f6 fdd5 	bl	8000540 <__aeabi_dmul>
 8009996:	2200      	movs	r2, #0
 8009998:	ec41 0b19 	vmov	d9, r0, r1
 800999c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fc14 	bl	80001d0 <__aeabi_dsub>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	ec51 0b19 	vmov	r0, r1, d9
 80099b0:	f7f6 fef0 	bl	8000794 <__aeabi_ddiv>
 80099b4:	4632      	mov	r2, r6
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	463b      	mov	r3, r7
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f6 fdbe 	bl	8000540 <__aeabi_dmul>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	f7f6 fc04 	bl	80001d4 <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4620      	mov	r0, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	f7f6 fbfc 	bl	80001d0 <__aeabi_dsub>
 80099d8:	4642      	mov	r2, r8
 80099da:	464b      	mov	r3, r9
 80099dc:	f7f6 fbf8 	bl	80001d0 <__aeabi_dsub>
 80099e0:	460b      	mov	r3, r1
 80099e2:	4602      	mov	r2, r0
 80099e4:	493a      	ldr	r1, [pc, #232]	; (8009ad0 <__ieee754_pow+0xa30>)
 80099e6:	2000      	movs	r0, #0
 80099e8:	f7f6 fbf2 	bl	80001d0 <__aeabi_dsub>
 80099ec:	e9cd 0100 	strd	r0, r1, [sp]
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80099f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099fa:	da2f      	bge.n	8009a5c <__ieee754_pow+0x9bc>
 80099fc:	4650      	mov	r0, sl
 80099fe:	ed9d 0b00 	vldr	d0, [sp]
 8009a02:	f001 f8a1 	bl	800ab48 <scalbn>
 8009a06:	ec51 0b10 	vmov	r0, r1, d0
 8009a0a:	ec53 2b18 	vmov	r2, r3, d8
 8009a0e:	f7ff bbe0 	b.w	80091d2 <__ieee754_pow+0x132>
 8009a12:	4b30      	ldr	r3, [pc, #192]	; (8009ad4 <__ieee754_pow+0xa34>)
 8009a14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a18:	429e      	cmp	r6, r3
 8009a1a:	f77f af0b 	ble.w	8009834 <__ieee754_pow+0x794>
 8009a1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <__ieee754_pow+0xa38>)
 8009a20:	440b      	add	r3, r1
 8009a22:	4303      	orrs	r3, r0
 8009a24:	d00b      	beq.n	8009a3e <__ieee754_pow+0x99e>
 8009a26:	a326      	add	r3, pc, #152	; (adr r3, 8009ac0 <__ieee754_pow+0xa20>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	ec51 0b18 	vmov	r0, r1, d8
 8009a30:	f7f6 fd86 	bl	8000540 <__aeabi_dmul>
 8009a34:	a322      	add	r3, pc, #136	; (adr r3, 8009ac0 <__ieee754_pow+0xa20>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7ff bbca 	b.w	80091d2 <__ieee754_pow+0x132>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	f7f6 fbc5 	bl	80001d0 <__aeabi_dsub>
 8009a46:	4642      	mov	r2, r8
 8009a48:	464b      	mov	r3, r9
 8009a4a:	f7f6 ffff 	bl	8000a4c <__aeabi_dcmpge>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f aef0 	beq.w	8009834 <__ieee754_pow+0x794>
 8009a54:	e7e7      	b.n	8009a26 <__ieee754_pow+0x986>
 8009a56:	f04f 0a00 	mov.w	sl, #0
 8009a5a:	e717      	b.n	800988c <__ieee754_pow+0x7ec>
 8009a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a60:	4619      	mov	r1, r3
 8009a62:	e7d2      	b.n	8009a0a <__ieee754_pow+0x96a>
 8009a64:	491a      	ldr	r1, [pc, #104]	; (8009ad0 <__ieee754_pow+0xa30>)
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7ff bb9e 	b.w	80091a8 <__ieee754_pow+0x108>
 8009a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a70:	f7ff bb9a 	b.w	80091a8 <__ieee754_pow+0x108>
 8009a74:	9000      	str	r0, [sp, #0]
 8009a76:	f7ff bb76 	b.w	8009166 <__ieee754_pow+0xc6>
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	f7ff bb60 	b.w	8009140 <__ieee754_pow+0xa0>
 8009a80:	00000000 	.word	0x00000000
 8009a84:	3fe62e43 	.word	0x3fe62e43
 8009a88:	fefa39ef 	.word	0xfefa39ef
 8009a8c:	3fe62e42 	.word	0x3fe62e42
 8009a90:	0ca86c39 	.word	0x0ca86c39
 8009a94:	be205c61 	.word	0xbe205c61
 8009a98:	72bea4d0 	.word	0x72bea4d0
 8009a9c:	3e663769 	.word	0x3e663769
 8009aa0:	c5d26bf1 	.word	0xc5d26bf1
 8009aa4:	3ebbbd41 	.word	0x3ebbbd41
 8009aa8:	af25de2c 	.word	0xaf25de2c
 8009aac:	3f11566a 	.word	0x3f11566a
 8009ab0:	16bebd93 	.word	0x16bebd93
 8009ab4:	3f66c16c 	.word	0x3f66c16c
 8009ab8:	5555553e 	.word	0x5555553e
 8009abc:	3fc55555 	.word	0x3fc55555
 8009ac0:	c2f8f359 	.word	0xc2f8f359
 8009ac4:	01a56e1f 	.word	0x01a56e1f
 8009ac8:	3fe00000 	.word	0x3fe00000
 8009acc:	000fffff 	.word	0x000fffff
 8009ad0:	3ff00000 	.word	0x3ff00000
 8009ad4:	4090cbff 	.word	0x4090cbff
 8009ad8:	3f6f3400 	.word	0x3f6f3400
 8009adc:	652b82fe 	.word	0x652b82fe
 8009ae0:	3c971547 	.word	0x3c971547
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <__ieee754_rem_pio2>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b02 	vpush	{d8}
 8009af0:	ec55 4b10 	vmov	r4, r5, d0
 8009af4:	4bca      	ldr	r3, [pc, #808]	; (8009e20 <__ieee754_rem_pio2+0x338>)
 8009af6:	b08b      	sub	sp, #44	; 0x2c
 8009af8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009afc:	4598      	cmp	r8, r3
 8009afe:	4682      	mov	sl, r0
 8009b00:	9502      	str	r5, [sp, #8]
 8009b02:	dc08      	bgt.n	8009b16 <__ieee754_rem_pio2+0x2e>
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	ed80 0b00 	vstr	d0, [r0]
 8009b0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009b10:	f04f 0b00 	mov.w	fp, #0
 8009b14:	e028      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009b16:	4bc3      	ldr	r3, [pc, #780]	; (8009e24 <__ieee754_rem_pio2+0x33c>)
 8009b18:	4598      	cmp	r8, r3
 8009b1a:	dc78      	bgt.n	8009c0e <__ieee754_rem_pio2+0x126>
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	4ec2      	ldr	r6, [pc, #776]	; (8009e28 <__ieee754_rem_pio2+0x340>)
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	ee10 0a10 	vmov	r0, s0
 8009b26:	a3b0      	add	r3, pc, #704	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x300>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	dd39      	ble.n	8009ba4 <__ieee754_rem_pio2+0xbc>
 8009b30:	f7f6 fb4e 	bl	80001d0 <__aeabi_dsub>
 8009b34:	45b0      	cmp	r8, r6
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	d01b      	beq.n	8009b74 <__ieee754_rem_pio2+0x8c>
 8009b3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb45 	bl	80001d0 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	e9ca 2300 	strd	r2, r3, [sl]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb3d 	bl	80001d0 <__aeabi_dsub>
 8009b56:	a3a6      	add	r3, pc, #664	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fb38 	bl	80001d0 <__aeabi_dsub>
 8009b60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b64:	f04f 0b01 	mov.w	fp, #1
 8009b68:	4658      	mov	r0, fp
 8009b6a:	b00b      	add	sp, #44	; 0x2c
 8009b6c:	ecbd 8b02 	vpop	{d8}
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	a3a0      	add	r3, pc, #640	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb29 	bl	80001d0 <__aeabi_dsub>
 8009b7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	f7f6 fb22 	bl	80001d0 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	e9ca 2300 	strd	r2, r3, [sl]
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fb1a 	bl	80001d0 <__aeabi_dsub>
 8009b9c:	a398      	add	r3, pc, #608	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	e7db      	b.n	8009b5c <__ieee754_rem_pio2+0x74>
 8009ba4:	f7f6 fb16 	bl	80001d4 <__adddf3>
 8009ba8:	45b0      	cmp	r8, r6
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	d016      	beq.n	8009bde <__ieee754_rem_pio2+0xf6>
 8009bb0:	a38f      	add	r3, pc, #572	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fb0d 	bl	80001d4 <__adddf3>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9ca 2300 	strd	r2, r3, [sl]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 fb03 	bl	80001d0 <__aeabi_dsub>
 8009bca:	a389      	add	r3, pc, #548	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fb00 	bl	80001d4 <__adddf3>
 8009bd4:	f04f 3bff 	mov.w	fp, #4294967295
 8009bd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bdc:	e7c4      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009bde:	a386      	add	r3, pc, #536	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 faf6 	bl	80001d4 <__adddf3>
 8009be8:	a385      	add	r3, pc, #532	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	4604      	mov	r4, r0
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	f7f6 faef 	bl	80001d4 <__adddf3>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9ca 2300 	strd	r2, r3, [sl]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fae5 	bl	80001d0 <__aeabi_dsub>
 8009c06:	a37e      	add	r3, pc, #504	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	e7e0      	b.n	8009bd0 <__ieee754_rem_pio2+0xe8>
 8009c0e:	4b87      	ldr	r3, [pc, #540]	; (8009e2c <__ieee754_rem_pio2+0x344>)
 8009c10:	4598      	cmp	r8, r3
 8009c12:	f300 80d9 	bgt.w	8009dc8 <__ieee754_rem_pio2+0x2e0>
 8009c16:	f000 feed 	bl	800a9f4 <fabs>
 8009c1a:	ec55 4b10 	vmov	r4, r5, d0
 8009c1e:	ee10 0a10 	vmov	r0, s0
 8009c22:	a379      	add	r3, pc, #484	; (adr r3, 8009e08 <__ieee754_rem_pio2+0x320>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fc89 	bl	8000540 <__aeabi_dmul>
 8009c2e:	4b80      	ldr	r3, [pc, #512]	; (8009e30 <__ieee754_rem_pio2+0x348>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	f7f6 facf 	bl	80001d4 <__adddf3>
 8009c36:	f7f6 ff33 	bl	8000aa0 <__aeabi_d2iz>
 8009c3a:	4683      	mov	fp, r0
 8009c3c:	f7f6 fc16 	bl	800046c <__aeabi_i2d>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	ec43 2b18 	vmov	d8, r2, r3
 8009c48:	a367      	add	r3, pc, #412	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x300>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fc77 	bl	8000540 <__aeabi_dmul>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7f6 fab9 	bl	80001d0 <__aeabi_dsub>
 8009c5e:	a364      	add	r3, pc, #400	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	ec51 0b18 	vmov	r0, r1, d8
 8009c6c:	f7f6 fc68 	bl	8000540 <__aeabi_dmul>
 8009c70:	f1bb 0f1f 	cmp.w	fp, #31
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	dc0d      	bgt.n	8009c96 <__ieee754_rem_pio2+0x1ae>
 8009c7a:	4b6e      	ldr	r3, [pc, #440]	; (8009e34 <__ieee754_rem_pio2+0x34c>)
 8009c7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c84:	4543      	cmp	r3, r8
 8009c86:	d006      	beq.n	8009c96 <__ieee754_rem_pio2+0x1ae>
 8009c88:	4622      	mov	r2, r4
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fa9e 	bl	80001d0 <__aeabi_dsub>
 8009c94:	e00f      	b.n	8009cb6 <__ieee754_rem_pio2+0x1ce>
 8009c96:	462b      	mov	r3, r5
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 fa97 	bl	80001d0 <__aeabi_dsub>
 8009ca2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009cac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009cb0:	f1b8 0f10 	cmp.w	r8, #16
 8009cb4:	dc02      	bgt.n	8009cbc <__ieee754_rem_pio2+0x1d4>
 8009cb6:	e9ca 0100 	strd	r0, r1, [sl]
 8009cba:	e039      	b.n	8009d30 <__ieee754_rem_pio2+0x248>
 8009cbc:	a34e      	add	r3, pc, #312	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	ec51 0b18 	vmov	r0, r1, d8
 8009cc6:	f7f6 fc3b 	bl	8000540 <__aeabi_dmul>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	460d      	mov	r5, r1
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	f7f6 fa7b 	bl	80001d0 <__aeabi_dsub>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fa73 	bl	80001d0 <__aeabi_dsub>
 8009cea:	4622      	mov	r2, r4
 8009cec:	462b      	mov	r3, r5
 8009cee:	f7f6 fa6f 	bl	80001d0 <__aeabi_dsub>
 8009cf2:	a343      	add	r3, pc, #268	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	ec51 0b18 	vmov	r0, r1, d8
 8009d00:	f7f6 fc1e 	bl	8000540 <__aeabi_dmul>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fa62 	bl	80001d0 <__aeabi_dsub>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 fa5a 	bl	80001d0 <__aeabi_dsub>
 8009d1c:	9a03      	ldr	r2, [sp, #12]
 8009d1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b31      	cmp	r3, #49	; 0x31
 8009d26:	dc24      	bgt.n	8009d72 <__ieee754_rem_pio2+0x28a>
 8009d28:	e9ca 0100 	strd	r0, r1, [sl]
 8009d2c:	4646      	mov	r6, r8
 8009d2e:	464f      	mov	r7, r9
 8009d30:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d34:	4630      	mov	r0, r6
 8009d36:	4642      	mov	r2, r8
 8009d38:	464b      	mov	r3, r9
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	f7f6 fa48 	bl	80001d0 <__aeabi_dsub>
 8009d40:	462b      	mov	r3, r5
 8009d42:	4622      	mov	r2, r4
 8009d44:	f7f6 fa44 	bl	80001d0 <__aeabi_dsub>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d50:	f6bf af0a 	bge.w	8009b68 <__ieee754_rem_pio2+0x80>
 8009d54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d58:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d5c:	f8ca 8000 	str.w	r8, [sl]
 8009d60:	f8ca 0008 	str.w	r0, [sl, #8]
 8009d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d68:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d6c:	f1cb 0b00 	rsb	fp, fp, #0
 8009d70:	e6fa      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009d72:	a327      	add	r3, pc, #156	; (adr r3, 8009e10 <__ieee754_rem_pio2+0x328>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	ec51 0b18 	vmov	r0, r1, d8
 8009d7c:	f7f6 fbe0 	bl	8000540 <__aeabi_dmul>
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fa20 	bl	80001d0 <__aeabi_dsub>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 fa18 	bl	80001d0 <__aeabi_dsub>
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	f7f6 fa14 	bl	80001d0 <__aeabi_dsub>
 8009da8:	a31b      	add	r3, pc, #108	; (adr r3, 8009e18 <__ieee754_rem_pio2+0x330>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	ec51 0b18 	vmov	r0, r1, d8
 8009db6:	f7f6 fbc3 	bl	8000540 <__aeabi_dmul>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	f7f6 fa07 	bl	80001d0 <__aeabi_dsub>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	e75f      	b.n	8009c88 <__ieee754_rem_pio2+0x1a0>
 8009dc8:	4b1b      	ldr	r3, [pc, #108]	; (8009e38 <__ieee754_rem_pio2+0x350>)
 8009dca:	4598      	cmp	r8, r3
 8009dcc:	dd36      	ble.n	8009e3c <__ieee754_rem_pio2+0x354>
 8009dce:	ee10 2a10 	vmov	r2, s0
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 f9fa 	bl	80001d0 <__aeabi_dsub>
 8009ddc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009de0:	e9ca 0100 	strd	r0, r1, [sl]
 8009de4:	e694      	b.n	8009b10 <__ieee754_rem_pio2+0x28>
 8009de6:	bf00      	nop
 8009de8:	54400000 	.word	0x54400000
 8009dec:	3ff921fb 	.word	0x3ff921fb
 8009df0:	1a626331 	.word	0x1a626331
 8009df4:	3dd0b461 	.word	0x3dd0b461
 8009df8:	1a600000 	.word	0x1a600000
 8009dfc:	3dd0b461 	.word	0x3dd0b461
 8009e00:	2e037073 	.word	0x2e037073
 8009e04:	3ba3198a 	.word	0x3ba3198a
 8009e08:	6dc9c883 	.word	0x6dc9c883
 8009e0c:	3fe45f30 	.word	0x3fe45f30
 8009e10:	2e000000 	.word	0x2e000000
 8009e14:	3ba3198a 	.word	0x3ba3198a
 8009e18:	252049c1 	.word	0x252049c1
 8009e1c:	397b839a 	.word	0x397b839a
 8009e20:	3fe921fb 	.word	0x3fe921fb
 8009e24:	4002d97b 	.word	0x4002d97b
 8009e28:	3ff921fb 	.word	0x3ff921fb
 8009e2c:	413921fb 	.word	0x413921fb
 8009e30:	3fe00000 	.word	0x3fe00000
 8009e34:	0800ad28 	.word	0x0800ad28
 8009e38:	7fefffff 	.word	0x7fefffff
 8009e3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009e40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009e44:	ee10 0a10 	vmov	r0, s0
 8009e48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009e4c:	ee10 6a10 	vmov	r6, s0
 8009e50:	460f      	mov	r7, r1
 8009e52:	f7f6 fe25 	bl	8000aa0 <__aeabi_d2iz>
 8009e56:	f7f6 fb09 	bl	800046c <__aeabi_i2d>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e66:	f7f6 f9b3 	bl	80001d0 <__aeabi_dsub>
 8009e6a:	4b22      	ldr	r3, [pc, #136]	; (8009ef4 <__ieee754_rem_pio2+0x40c>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f7f6 fb67 	bl	8000540 <__aeabi_dmul>
 8009e72:	460f      	mov	r7, r1
 8009e74:	4606      	mov	r6, r0
 8009e76:	f7f6 fe13 	bl	8000aa0 <__aeabi_d2iz>
 8009e7a:	f7f6 faf7 	bl	800046c <__aeabi_i2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4630      	mov	r0, r6
 8009e84:	4639      	mov	r1, r7
 8009e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e8a:	f7f6 f9a1 	bl	80001d0 <__aeabi_dsub>
 8009e8e:	4b19      	ldr	r3, [pc, #100]	; (8009ef4 <__ieee754_rem_pio2+0x40c>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	f7f6 fb55 	bl	8000540 <__aeabi_dmul>
 8009e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e9a:	ad04      	add	r5, sp, #16
 8009e9c:	f04f 0803 	mov.w	r8, #3
 8009ea0:	46a9      	mov	r9, r5
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	2700      	movs	r7, #0
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009eae:	46c3      	mov	fp, r8
 8009eb0:	3d08      	subs	r5, #8
 8009eb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eb6:	f7f6 fdab 	bl	8000a10 <__aeabi_dcmpeq>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1f3      	bne.n	8009ea6 <__ieee754_rem_pio2+0x3be>
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <__ieee754_rem_pio2+0x410>)
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	465b      	mov	r3, fp
 8009eca:	4651      	mov	r1, sl
 8009ecc:	4648      	mov	r0, r9
 8009ece:	f000 f993 	bl	800a1f8 <__kernel_rem_pio2>
 8009ed2:	9b02      	ldr	r3, [sp, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	4683      	mov	fp, r0
 8009ed8:	f6bf ae46 	bge.w	8009b68 <__ieee754_rem_pio2+0x80>
 8009edc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ee0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	f8ca 3004 	str.w	r3, [sl, #4]
 8009ee8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009eec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	e73a      	b.n	8009d68 <__ieee754_rem_pio2+0x280>
 8009ef2:	bf00      	nop
 8009ef4:	41700000 	.word	0x41700000
 8009ef8:	0800ada8 	.word	0x0800ada8

08009efc <__ieee754_sqrt>:
 8009efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f00:	ec55 4b10 	vmov	r4, r5, d0
 8009f04:	4e56      	ldr	r6, [pc, #344]	; (800a060 <__ieee754_sqrt+0x164>)
 8009f06:	43ae      	bics	r6, r5
 8009f08:	ee10 0a10 	vmov	r0, s0
 8009f0c:	ee10 3a10 	vmov	r3, s0
 8009f10:	4629      	mov	r1, r5
 8009f12:	462a      	mov	r2, r5
 8009f14:	d110      	bne.n	8009f38 <__ieee754_sqrt+0x3c>
 8009f16:	ee10 2a10 	vmov	r2, s0
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	f7f6 fb10 	bl	8000540 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4620      	mov	r0, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7f6 f954 	bl	80001d4 <__adddf3>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	ec45 4b10 	vmov	d0, r4, r5
 8009f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	dc10      	bgt.n	8009f5e <__ieee754_sqrt+0x62>
 8009f3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f40:	4330      	orrs	r0, r6
 8009f42:	d0f5      	beq.n	8009f30 <__ieee754_sqrt+0x34>
 8009f44:	b15d      	cbz	r5, 8009f5e <__ieee754_sqrt+0x62>
 8009f46:	ee10 2a10 	vmov	r2, s0
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	ee10 0a10 	vmov	r0, s0
 8009f50:	f7f6 f93e 	bl	80001d0 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	f7f6 fc1c 	bl	8000794 <__aeabi_ddiv>
 8009f5c:	e7e6      	b.n	8009f2c <__ieee754_sqrt+0x30>
 8009f5e:	1509      	asrs	r1, r1, #20
 8009f60:	d076      	beq.n	800a050 <__ieee754_sqrt+0x154>
 8009f62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009f66:	07ce      	lsls	r6, r1, #31
 8009f68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009f6c:	bf5e      	ittt	pl
 8009f6e:	0fda      	lsrpl	r2, r3, #31
 8009f70:	005b      	lslpl	r3, r3, #1
 8009f72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009f76:	0fda      	lsrs	r2, r3, #31
 8009f78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009f7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009f80:	2000      	movs	r0, #0
 8009f82:	106d      	asrs	r5, r5, #1
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	f04f 0e16 	mov.w	lr, #22
 8009f8a:	4684      	mov	ip, r0
 8009f8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f90:	eb0c 0401 	add.w	r4, ip, r1
 8009f94:	4294      	cmp	r4, r2
 8009f96:	bfde      	ittt	le
 8009f98:	1b12      	suble	r2, r2, r4
 8009f9a:	eb04 0c01 	addle.w	ip, r4, r1
 8009f9e:	1840      	addle	r0, r0, r1
 8009fa0:	0052      	lsls	r2, r2, #1
 8009fa2:	f1be 0e01 	subs.w	lr, lr, #1
 8009fa6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009faa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009fae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fb2:	d1ed      	bne.n	8009f90 <__ieee754_sqrt+0x94>
 8009fb4:	4671      	mov	r1, lr
 8009fb6:	2720      	movs	r7, #32
 8009fb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009fbc:	4562      	cmp	r2, ip
 8009fbe:	eb04 060e 	add.w	r6, r4, lr
 8009fc2:	dc02      	bgt.n	8009fca <__ieee754_sqrt+0xce>
 8009fc4:	d113      	bne.n	8009fee <__ieee754_sqrt+0xf2>
 8009fc6:	429e      	cmp	r6, r3
 8009fc8:	d811      	bhi.n	8009fee <__ieee754_sqrt+0xf2>
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	eb06 0e04 	add.w	lr, r6, r4
 8009fd0:	da43      	bge.n	800a05a <__ieee754_sqrt+0x15e>
 8009fd2:	f1be 0f00 	cmp.w	lr, #0
 8009fd6:	db40      	blt.n	800a05a <__ieee754_sqrt+0x15e>
 8009fd8:	f10c 0801 	add.w	r8, ip, #1
 8009fdc:	eba2 020c 	sub.w	r2, r2, ip
 8009fe0:	429e      	cmp	r6, r3
 8009fe2:	bf88      	it	hi
 8009fe4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009fe8:	1b9b      	subs	r3, r3, r6
 8009fea:	4421      	add	r1, r4
 8009fec:	46c4      	mov	ip, r8
 8009fee:	0052      	lsls	r2, r2, #1
 8009ff0:	3f01      	subs	r7, #1
 8009ff2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009ff6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009ffa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ffe:	d1dd      	bne.n	8009fbc <__ieee754_sqrt+0xc0>
 800a000:	4313      	orrs	r3, r2
 800a002:	d006      	beq.n	800a012 <__ieee754_sqrt+0x116>
 800a004:	1c4c      	adds	r4, r1, #1
 800a006:	bf13      	iteet	ne
 800a008:	3101      	addne	r1, #1
 800a00a:	3001      	addeq	r0, #1
 800a00c:	4639      	moveq	r1, r7
 800a00e:	f021 0101 	bicne.w	r1, r1, #1
 800a012:	1043      	asrs	r3, r0, #1
 800a014:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a018:	0849      	lsrs	r1, r1, #1
 800a01a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a01e:	07c2      	lsls	r2, r0, #31
 800a020:	bf48      	it	mi
 800a022:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a026:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a02a:	460c      	mov	r4, r1
 800a02c:	463d      	mov	r5, r7
 800a02e:	e77f      	b.n	8009f30 <__ieee754_sqrt+0x34>
 800a030:	0ada      	lsrs	r2, r3, #11
 800a032:	3815      	subs	r0, #21
 800a034:	055b      	lsls	r3, r3, #21
 800a036:	2a00      	cmp	r2, #0
 800a038:	d0fa      	beq.n	800a030 <__ieee754_sqrt+0x134>
 800a03a:	02d7      	lsls	r7, r2, #11
 800a03c:	d50a      	bpl.n	800a054 <__ieee754_sqrt+0x158>
 800a03e:	f1c1 0420 	rsb	r4, r1, #32
 800a042:	fa23 f404 	lsr.w	r4, r3, r4
 800a046:	1e4d      	subs	r5, r1, #1
 800a048:	408b      	lsls	r3, r1
 800a04a:	4322      	orrs	r2, r4
 800a04c:	1b41      	subs	r1, r0, r5
 800a04e:	e788      	b.n	8009f62 <__ieee754_sqrt+0x66>
 800a050:	4608      	mov	r0, r1
 800a052:	e7f0      	b.n	800a036 <__ieee754_sqrt+0x13a>
 800a054:	0052      	lsls	r2, r2, #1
 800a056:	3101      	adds	r1, #1
 800a058:	e7ef      	b.n	800a03a <__ieee754_sqrt+0x13e>
 800a05a:	46e0      	mov	r8, ip
 800a05c:	e7be      	b.n	8009fdc <__ieee754_sqrt+0xe0>
 800a05e:	bf00      	nop
 800a060:	7ff00000 	.word	0x7ff00000
 800a064:	00000000 	.word	0x00000000

0800a068 <__kernel_cos>:
 800a068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	ec57 6b10 	vmov	r6, r7, d0
 800a070:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a074:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a078:	ed8d 1b00 	vstr	d1, [sp]
 800a07c:	da07      	bge.n	800a08e <__kernel_cos+0x26>
 800a07e:	ee10 0a10 	vmov	r0, s0
 800a082:	4639      	mov	r1, r7
 800a084:	f7f6 fd0c 	bl	8000aa0 <__aeabi_d2iz>
 800a088:	2800      	cmp	r0, #0
 800a08a:	f000 8088 	beq.w	800a19e <__kernel_cos+0x136>
 800a08e:	4632      	mov	r2, r6
 800a090:	463b      	mov	r3, r7
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7f6 fa53 	bl	8000540 <__aeabi_dmul>
 800a09a:	4b51      	ldr	r3, [pc, #324]	; (800a1e0 <__kernel_cos+0x178>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	f7f6 fa4d 	bl	8000540 <__aeabi_dmul>
 800a0a6:	a340      	add	r3, pc, #256	; (adr r3, 800a1a8 <__kernel_cos+0x140>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	468b      	mov	fp, r1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 fa44 	bl	8000540 <__aeabi_dmul>
 800a0b8:	a33d      	add	r3, pc, #244	; (adr r3, 800a1b0 <__kernel_cos+0x148>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f889 	bl	80001d4 <__adddf3>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	f7f6 fa3b 	bl	8000540 <__aeabi_dmul>
 800a0ca:	a33b      	add	r3, pc, #236	; (adr r3, 800a1b8 <__kernel_cos+0x150>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f87e 	bl	80001d0 <__aeabi_dsub>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f7f6 fa32 	bl	8000540 <__aeabi_dmul>
 800a0dc:	a338      	add	r3, pc, #224	; (adr r3, 800a1c0 <__kernel_cos+0x158>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f877 	bl	80001d4 <__adddf3>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 fa29 	bl	8000540 <__aeabi_dmul>
 800a0ee:	a336      	add	r3, pc, #216	; (adr r3, 800a1c8 <__kernel_cos+0x160>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f86c 	bl	80001d0 <__aeabi_dsub>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f7f6 fa20 	bl	8000540 <__aeabi_dmul>
 800a100:	a333      	add	r3, pc, #204	; (adr r3, 800a1d0 <__kernel_cos+0x168>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f865 	bl	80001d4 <__adddf3>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 fa17 	bl	8000540 <__aeabi_dmul>
 800a112:	4622      	mov	r2, r4
 800a114:	462b      	mov	r3, r5
 800a116:	f7f6 fa13 	bl	8000540 <__aeabi_dmul>
 800a11a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a11e:	4604      	mov	r4, r0
 800a120:	460d      	mov	r5, r1
 800a122:	4630      	mov	r0, r6
 800a124:	4639      	mov	r1, r7
 800a126:	f7f6 fa0b 	bl	8000540 <__aeabi_dmul>
 800a12a:	460b      	mov	r3, r1
 800a12c:	4602      	mov	r2, r0
 800a12e:	4629      	mov	r1, r5
 800a130:	4620      	mov	r0, r4
 800a132:	f7f6 f84d 	bl	80001d0 <__aeabi_dsub>
 800a136:	4b2b      	ldr	r3, [pc, #172]	; (800a1e4 <__kernel_cos+0x17c>)
 800a138:	4598      	cmp	r8, r3
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	dc10      	bgt.n	800a162 <__kernel_cos+0xfa>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4650      	mov	r0, sl
 800a146:	4659      	mov	r1, fp
 800a148:	f7f6 f842 	bl	80001d0 <__aeabi_dsub>
 800a14c:	460b      	mov	r3, r1
 800a14e:	4926      	ldr	r1, [pc, #152]	; (800a1e8 <__kernel_cos+0x180>)
 800a150:	4602      	mov	r2, r0
 800a152:	2000      	movs	r0, #0
 800a154:	f7f6 f83c 	bl	80001d0 <__aeabi_dsub>
 800a158:	ec41 0b10 	vmov	d0, r0, r1
 800a15c:	b003      	add	sp, #12
 800a15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a162:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <__kernel_cos+0x184>)
 800a164:	4920      	ldr	r1, [pc, #128]	; (800a1e8 <__kernel_cos+0x180>)
 800a166:	4598      	cmp	r8, r3
 800a168:	bfcc      	ite	gt
 800a16a:	4d21      	ldrgt	r5, [pc, #132]	; (800a1f0 <__kernel_cos+0x188>)
 800a16c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a170:	2400      	movs	r4, #0
 800a172:	4622      	mov	r2, r4
 800a174:	462b      	mov	r3, r5
 800a176:	2000      	movs	r0, #0
 800a178:	f7f6 f82a 	bl	80001d0 <__aeabi_dsub>
 800a17c:	4622      	mov	r2, r4
 800a17e:	4680      	mov	r8, r0
 800a180:	4689      	mov	r9, r1
 800a182:	462b      	mov	r3, r5
 800a184:	4650      	mov	r0, sl
 800a186:	4659      	mov	r1, fp
 800a188:	f7f6 f822 	bl	80001d0 <__aeabi_dsub>
 800a18c:	4632      	mov	r2, r6
 800a18e:	463b      	mov	r3, r7
 800a190:	f7f6 f81e 	bl	80001d0 <__aeabi_dsub>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	e7da      	b.n	800a154 <__kernel_cos+0xec>
 800a19e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a1d8 <__kernel_cos+0x170>
 800a1a2:	e7db      	b.n	800a15c <__kernel_cos+0xf4>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	be8838d4 	.word	0xbe8838d4
 800a1ac:	bda8fae9 	.word	0xbda8fae9
 800a1b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a1b4:	3e21ee9e 	.word	0x3e21ee9e
 800a1b8:	809c52ad 	.word	0x809c52ad
 800a1bc:	3e927e4f 	.word	0x3e927e4f
 800a1c0:	19cb1590 	.word	0x19cb1590
 800a1c4:	3efa01a0 	.word	0x3efa01a0
 800a1c8:	16c15177 	.word	0x16c15177
 800a1cc:	3f56c16c 	.word	0x3f56c16c
 800a1d0:	5555554c 	.word	0x5555554c
 800a1d4:	3fa55555 	.word	0x3fa55555
 800a1d8:	00000000 	.word	0x00000000
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	3fe00000 	.word	0x3fe00000
 800a1e4:	3fd33332 	.word	0x3fd33332
 800a1e8:	3ff00000 	.word	0x3ff00000
 800a1ec:	3fe90000 	.word	0x3fe90000
 800a1f0:	3fd20000 	.word	0x3fd20000
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <__kernel_rem_pio2>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	ed2d 8b02 	vpush	{d8}
 800a200:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a204:	f112 0f14 	cmn.w	r2, #20
 800a208:	9308      	str	r3, [sp, #32]
 800a20a:	9101      	str	r1, [sp, #4]
 800a20c:	4bc6      	ldr	r3, [pc, #792]	; (800a528 <__kernel_rem_pio2+0x330>)
 800a20e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a210:	9009      	str	r0, [sp, #36]	; 0x24
 800a212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a21e:	bfa8      	it	ge
 800a220:	1ed4      	subge	r4, r2, #3
 800a222:	9306      	str	r3, [sp, #24]
 800a224:	bfb2      	itee	lt
 800a226:	2400      	movlt	r4, #0
 800a228:	2318      	movge	r3, #24
 800a22a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a22e:	f06f 0317 	mvn.w	r3, #23
 800a232:	fb04 3303 	mla	r3, r4, r3, r3
 800a236:	eb03 0a02 	add.w	sl, r3, r2
 800a23a:	9b04      	ldr	r3, [sp, #16]
 800a23c:	9a06      	ldr	r2, [sp, #24]
 800a23e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a518 <__kernel_rem_pio2+0x320>
 800a242:	eb03 0802 	add.w	r8, r3, r2
 800a246:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a248:	1aa7      	subs	r7, r4, r2
 800a24a:	ae20      	add	r6, sp, #128	; 0x80
 800a24c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a250:	2500      	movs	r5, #0
 800a252:	4545      	cmp	r5, r8
 800a254:	dd18      	ble.n	800a288 <__kernel_rem_pio2+0x90>
 800a256:	9b08      	ldr	r3, [sp, #32]
 800a258:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a25c:	aa20      	add	r2, sp, #128	; 0x80
 800a25e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a518 <__kernel_rem_pio2+0x320>
 800a262:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a266:	f1c3 0301 	rsb	r3, r3, #1
 800a26a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	9b07      	ldr	r3, [sp, #28]
 800a272:	9a04      	ldr	r2, [sp, #16]
 800a274:	4443      	add	r3, r8
 800a276:	429a      	cmp	r2, r3
 800a278:	db2f      	blt.n	800a2da <__kernel_rem_pio2+0xe2>
 800a27a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a27e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a282:	462f      	mov	r7, r5
 800a284:	2600      	movs	r6, #0
 800a286:	e01b      	b.n	800a2c0 <__kernel_rem_pio2+0xc8>
 800a288:	42ef      	cmn	r7, r5
 800a28a:	d407      	bmi.n	800a29c <__kernel_rem_pio2+0xa4>
 800a28c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a290:	f7f6 f8ec 	bl	800046c <__aeabi_i2d>
 800a294:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a298:	3501      	adds	r5, #1
 800a29a:	e7da      	b.n	800a252 <__kernel_rem_pio2+0x5a>
 800a29c:	ec51 0b18 	vmov	r0, r1, d8
 800a2a0:	e7f8      	b.n	800a294 <__kernel_rem_pio2+0x9c>
 800a2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a2aa:	f7f6 f949 	bl	8000540 <__aeabi_dmul>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b6:	f7f5 ff8d 	bl	80001d4 <__adddf3>
 800a2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2be:	3601      	adds	r6, #1
 800a2c0:	9b06      	ldr	r3, [sp, #24]
 800a2c2:	429e      	cmp	r6, r3
 800a2c4:	f1a7 0708 	sub.w	r7, r7, #8
 800a2c8:	ddeb      	ble.n	800a2a2 <__kernel_rem_pio2+0xaa>
 800a2ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2ce:	3508      	adds	r5, #8
 800a2d0:	ecab 7b02 	vstmia	fp!, {d7}
 800a2d4:	f108 0801 	add.w	r8, r8, #1
 800a2d8:	e7ca      	b.n	800a270 <__kernel_rem_pio2+0x78>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	aa0c      	add	r2, sp, #48	; 0x30
 800a2de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a2e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a2ea:	9c04      	ldr	r4, [sp, #16]
 800a2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ee:	ab98      	add	r3, sp, #608	; 0x260
 800a2f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2f4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a2f8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a2fc:	f8cd b008 	str.w	fp, [sp, #8]
 800a300:	4625      	mov	r5, r4
 800a302:	2d00      	cmp	r5, #0
 800a304:	dc78      	bgt.n	800a3f8 <__kernel_rem_pio2+0x200>
 800a306:	ec47 6b10 	vmov	d0, r6, r7
 800a30a:	4650      	mov	r0, sl
 800a30c:	f000 fc1c 	bl	800ab48 <scalbn>
 800a310:	ec57 6b10 	vmov	r6, r7, d0
 800a314:	2200      	movs	r2, #0
 800a316:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a31a:	ee10 0a10 	vmov	r0, s0
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f6 f90e 	bl	8000540 <__aeabi_dmul>
 800a324:	ec41 0b10 	vmov	d0, r0, r1
 800a328:	f7fe fd8a 	bl	8008e40 <floor>
 800a32c:	4b7f      	ldr	r3, [pc, #508]	; (800a52c <__kernel_rem_pio2+0x334>)
 800a32e:	ec51 0b10 	vmov	r0, r1, d0
 800a332:	2200      	movs	r2, #0
 800a334:	f7f6 f904 	bl	8000540 <__aeabi_dmul>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f5 ff46 	bl	80001d0 <__aeabi_dsub>
 800a344:	460f      	mov	r7, r1
 800a346:	4606      	mov	r6, r0
 800a348:	f7f6 fbaa 	bl	8000aa0 <__aeabi_d2iz>
 800a34c:	9007      	str	r0, [sp, #28]
 800a34e:	f7f6 f88d 	bl	800046c <__aeabi_i2d>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f5 ff39 	bl	80001d0 <__aeabi_dsub>
 800a35e:	f1ba 0f00 	cmp.w	sl, #0
 800a362:	4606      	mov	r6, r0
 800a364:	460f      	mov	r7, r1
 800a366:	dd70      	ble.n	800a44a <__kernel_rem_pio2+0x252>
 800a368:	1e62      	subs	r2, r4, #1
 800a36a:	ab0c      	add	r3, sp, #48	; 0x30
 800a36c:	9d07      	ldr	r5, [sp, #28]
 800a36e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a372:	f1ca 0118 	rsb	r1, sl, #24
 800a376:	fa40 f301 	asr.w	r3, r0, r1
 800a37a:	441d      	add	r5, r3
 800a37c:	408b      	lsls	r3, r1
 800a37e:	1ac0      	subs	r0, r0, r3
 800a380:	ab0c      	add	r3, sp, #48	; 0x30
 800a382:	9507      	str	r5, [sp, #28]
 800a384:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a388:	f1ca 0317 	rsb	r3, sl, #23
 800a38c:	fa40 f303 	asr.w	r3, r0, r3
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	9b02      	ldr	r3, [sp, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	dd66      	ble.n	800a466 <__kernel_rem_pio2+0x26e>
 800a398:	9b07      	ldr	r3, [sp, #28]
 800a39a:	2200      	movs	r2, #0
 800a39c:	3301      	adds	r3, #1
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	4615      	mov	r5, r2
 800a3a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a3a6:	4294      	cmp	r4, r2
 800a3a8:	f300 8099 	bgt.w	800a4de <__kernel_rem_pio2+0x2e6>
 800a3ac:	f1ba 0f00 	cmp.w	sl, #0
 800a3b0:	dd07      	ble.n	800a3c2 <__kernel_rem_pio2+0x1ca>
 800a3b2:	f1ba 0f01 	cmp.w	sl, #1
 800a3b6:	f000 80a5 	beq.w	800a504 <__kernel_rem_pio2+0x30c>
 800a3ba:	f1ba 0f02 	cmp.w	sl, #2
 800a3be:	f000 80c1 	beq.w	800a544 <__kernel_rem_pio2+0x34c>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d14e      	bne.n	800a466 <__kernel_rem_pio2+0x26e>
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	4958      	ldr	r1, [pc, #352]	; (800a530 <__kernel_rem_pio2+0x338>)
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7f5 fefe 	bl	80001d0 <__aeabi_dsub>
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	d044      	beq.n	800a466 <__kernel_rem_pio2+0x26e>
 800a3dc:	4650      	mov	r0, sl
 800a3de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a520 <__kernel_rem_pio2+0x328>
 800a3e2:	f000 fbb1 	bl	800ab48 <scalbn>
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	ec53 2b10 	vmov	r2, r3, d0
 800a3ee:	f7f5 feef 	bl	80001d0 <__aeabi_dsub>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	e036      	b.n	800a466 <__kernel_rem_pio2+0x26e>
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <__kernel_rem_pio2+0x33c>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 f89e 	bl	8000540 <__aeabi_dmul>
 800a404:	f7f6 fb4c 	bl	8000aa0 <__aeabi_d2iz>
 800a408:	f7f6 f830 	bl	800046c <__aeabi_i2d>
 800a40c:	4b4a      	ldr	r3, [pc, #296]	; (800a538 <__kernel_rem_pio2+0x340>)
 800a40e:	2200      	movs	r2, #0
 800a410:	4680      	mov	r8, r0
 800a412:	4689      	mov	r9, r1
 800a414:	f7f6 f894 	bl	8000540 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f5 fed6 	bl	80001d0 <__aeabi_dsub>
 800a424:	f7f6 fb3c 	bl	8000aa0 <__aeabi_d2iz>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	f843 0b04 	str.w	r0, [r3], #4
 800a42e:	3d01      	subs	r5, #1
 800a430:	9302      	str	r3, [sp, #8]
 800a432:	ab70      	add	r3, sp, #448	; 0x1c0
 800a434:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f5 fec8 	bl	80001d4 <__adddf3>
 800a444:	4606      	mov	r6, r0
 800a446:	460f      	mov	r7, r1
 800a448:	e75b      	b.n	800a302 <__kernel_rem_pio2+0x10a>
 800a44a:	d105      	bne.n	800a458 <__kernel_rem_pio2+0x260>
 800a44c:	1e63      	subs	r3, r4, #1
 800a44e:	aa0c      	add	r2, sp, #48	; 0x30
 800a450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a454:	15c3      	asrs	r3, r0, #23
 800a456:	e79b      	b.n	800a390 <__kernel_rem_pio2+0x198>
 800a458:	4b38      	ldr	r3, [pc, #224]	; (800a53c <__kernel_rem_pio2+0x344>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	f7f6 faf6 	bl	8000a4c <__aeabi_dcmpge>
 800a460:	2800      	cmp	r0, #0
 800a462:	d139      	bne.n	800a4d8 <__kernel_rem_pio2+0x2e0>
 800a464:	9002      	str	r0, [sp, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f6 facf 	bl	8000a10 <__aeabi_dcmpeq>
 800a472:	2800      	cmp	r0, #0
 800a474:	f000 80b4 	beq.w	800a5e0 <__kernel_rem_pio2+0x3e8>
 800a478:	f104 3bff 	add.w	fp, r4, #4294967295
 800a47c:	465b      	mov	r3, fp
 800a47e:	2200      	movs	r2, #0
 800a480:	9904      	ldr	r1, [sp, #16]
 800a482:	428b      	cmp	r3, r1
 800a484:	da65      	bge.n	800a552 <__kernel_rem_pio2+0x35a>
 800a486:	2a00      	cmp	r2, #0
 800a488:	d07b      	beq.n	800a582 <__kernel_rem_pio2+0x38a>
 800a48a:	ab0c      	add	r3, sp, #48	; 0x30
 800a48c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a490:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80a0 	beq.w	800a5da <__kernel_rem_pio2+0x3e2>
 800a49a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a520 <__kernel_rem_pio2+0x328>
 800a49e:	4650      	mov	r0, sl
 800a4a0:	f000 fb52 	bl	800ab48 <scalbn>
 800a4a4:	4f23      	ldr	r7, [pc, #140]	; (800a534 <__kernel_rem_pio2+0x33c>)
 800a4a6:	ec55 4b10 	vmov	r4, r5, d0
 800a4aa:	46d8      	mov	r8, fp
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	f280 80cf 	bge.w	800a654 <__kernel_rem_pio2+0x45c>
 800a4b6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a518 <__kernel_rem_pio2+0x320>
 800a4ba:	465f      	mov	r7, fp
 800a4bc:	f04f 0800 	mov.w	r8, #0
 800a4c0:	2f00      	cmp	r7, #0
 800a4c2:	f2c0 80fd 	blt.w	800a6c0 <__kernel_rem_pio2+0x4c8>
 800a4c6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a4c8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a540 <__kernel_rem_pio2+0x348>
 800a4cc:	ec55 4b18 	vmov	r4, r5, d8
 800a4d0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	e0e5      	b.n	800a6a4 <__kernel_rem_pio2+0x4ac>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	e75c      	b.n	800a398 <__kernel_rem_pio2+0x1a0>
 800a4de:	f8db 3000 	ldr.w	r3, [fp]
 800a4e2:	b955      	cbnz	r5, 800a4fa <__kernel_rem_pio2+0x302>
 800a4e4:	b123      	cbz	r3, 800a4f0 <__kernel_rem_pio2+0x2f8>
 800a4e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a4ea:	f8cb 3000 	str.w	r3, [fp]
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	f10b 0b04 	add.w	fp, fp, #4
 800a4f6:	461d      	mov	r5, r3
 800a4f8:	e755      	b.n	800a3a6 <__kernel_rem_pio2+0x1ae>
 800a4fa:	1acb      	subs	r3, r1, r3
 800a4fc:	f8cb 3000 	str.w	r3, [fp]
 800a500:	462b      	mov	r3, r5
 800a502:	e7f5      	b.n	800a4f0 <__kernel_rem_pio2+0x2f8>
 800a504:	1e62      	subs	r2, r4, #1
 800a506:	ab0c      	add	r3, sp, #48	; 0x30
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a510:	a90c      	add	r1, sp, #48	; 0x30
 800a512:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a516:	e754      	b.n	800a3c2 <__kernel_rem_pio2+0x1ca>
	...
 800a524:	3ff00000 	.word	0x3ff00000
 800a528:	0800aef0 	.word	0x0800aef0
 800a52c:	40200000 	.word	0x40200000
 800a530:	3ff00000 	.word	0x3ff00000
 800a534:	3e700000 	.word	0x3e700000
 800a538:	41700000 	.word	0x41700000
 800a53c:	3fe00000 	.word	0x3fe00000
 800a540:	0800aeb0 	.word	0x0800aeb0
 800a544:	1e62      	subs	r2, r4, #1
 800a546:	ab0c      	add	r3, sp, #48	; 0x30
 800a548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a550:	e7de      	b.n	800a510 <__kernel_rem_pio2+0x318>
 800a552:	a90c      	add	r1, sp, #48	; 0x30
 800a554:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a558:	3b01      	subs	r3, #1
 800a55a:	430a      	orrs	r2, r1
 800a55c:	e790      	b.n	800a480 <__kernel_rem_pio2+0x288>
 800a55e:	3301      	adds	r3, #1
 800a560:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a564:	2900      	cmp	r1, #0
 800a566:	d0fa      	beq.n	800a55e <__kernel_rem_pio2+0x366>
 800a568:	9a08      	ldr	r2, [sp, #32]
 800a56a:	18e3      	adds	r3, r4, r3
 800a56c:	18a6      	adds	r6, r4, r2
 800a56e:	aa20      	add	r2, sp, #128	; 0x80
 800a570:	1c65      	adds	r5, r4, #1
 800a572:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a576:	9302      	str	r3, [sp, #8]
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	42ab      	cmp	r3, r5
 800a57c:	da04      	bge.n	800a588 <__kernel_rem_pio2+0x390>
 800a57e:	461c      	mov	r4, r3
 800a580:	e6b5      	b.n	800a2ee <__kernel_rem_pio2+0xf6>
 800a582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a584:	2301      	movs	r3, #1
 800a586:	e7eb      	b.n	800a560 <__kernel_rem_pio2+0x368>
 800a588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a58a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a58e:	f7f5 ff6d 	bl	800046c <__aeabi_i2d>
 800a592:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	46b3      	mov	fp, r6
 800a59a:	461c      	mov	r4, r3
 800a59c:	2700      	movs	r7, #0
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	f04f 0900 	mov.w	r9, #0
 800a5a6:	9b06      	ldr	r3, [sp, #24]
 800a5a8:	429f      	cmp	r7, r3
 800a5aa:	dd06      	ble.n	800a5ba <__kernel_rem_pio2+0x3c2>
 800a5ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800a5ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5b2:	e9c3 8900 	strd	r8, r9, [r3]
 800a5b6:	3501      	adds	r5, #1
 800a5b8:	e7de      	b.n	800a578 <__kernel_rem_pio2+0x380>
 800a5ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a5be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a5c2:	f7f5 ffbd 	bl	8000540 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f5 fe01 	bl	80001d4 <__adddf3>
 800a5d2:	3701      	adds	r7, #1
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	e7e5      	b.n	800a5a6 <__kernel_rem_pio2+0x3ae>
 800a5da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5de:	e754      	b.n	800a48a <__kernel_rem_pio2+0x292>
 800a5e0:	ec47 6b10 	vmov	d0, r6, r7
 800a5e4:	f1ca 0000 	rsb	r0, sl, #0
 800a5e8:	f000 faae 	bl	800ab48 <scalbn>
 800a5ec:	ec57 6b10 	vmov	r6, r7, d0
 800a5f0:	4b9f      	ldr	r3, [pc, #636]	; (800a870 <__kernel_rem_pio2+0x678>)
 800a5f2:	ee10 0a10 	vmov	r0, s0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	f7f6 fa27 	bl	8000a4c <__aeabi_dcmpge>
 800a5fe:	b300      	cbz	r0, 800a642 <__kernel_rem_pio2+0x44a>
 800a600:	4b9c      	ldr	r3, [pc, #624]	; (800a874 <__kernel_rem_pio2+0x67c>)
 800a602:	2200      	movs	r2, #0
 800a604:	4630      	mov	r0, r6
 800a606:	4639      	mov	r1, r7
 800a608:	f7f5 ff9a 	bl	8000540 <__aeabi_dmul>
 800a60c:	f7f6 fa48 	bl	8000aa0 <__aeabi_d2iz>
 800a610:	4605      	mov	r5, r0
 800a612:	f7f5 ff2b 	bl	800046c <__aeabi_i2d>
 800a616:	4b96      	ldr	r3, [pc, #600]	; (800a870 <__kernel_rem_pio2+0x678>)
 800a618:	2200      	movs	r2, #0
 800a61a:	f7f5 ff91 	bl	8000540 <__aeabi_dmul>
 800a61e:	460b      	mov	r3, r1
 800a620:	4602      	mov	r2, r0
 800a622:	4639      	mov	r1, r7
 800a624:	4630      	mov	r0, r6
 800a626:	f7f5 fdd3 	bl	80001d0 <__aeabi_dsub>
 800a62a:	f7f6 fa39 	bl	8000aa0 <__aeabi_d2iz>
 800a62e:	f104 0b01 	add.w	fp, r4, #1
 800a632:	ab0c      	add	r3, sp, #48	; 0x30
 800a634:	f10a 0a18 	add.w	sl, sl, #24
 800a638:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a63c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a640:	e72b      	b.n	800a49a <__kernel_rem_pio2+0x2a2>
 800a642:	4630      	mov	r0, r6
 800a644:	4639      	mov	r1, r7
 800a646:	f7f6 fa2b 	bl	8000aa0 <__aeabi_d2iz>
 800a64a:	ab0c      	add	r3, sp, #48	; 0x30
 800a64c:	46a3      	mov	fp, r4
 800a64e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a652:	e722      	b.n	800a49a <__kernel_rem_pio2+0x2a2>
 800a654:	ab70      	add	r3, sp, #448	; 0x1c0
 800a656:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a65a:	ab0c      	add	r3, sp, #48	; 0x30
 800a65c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a660:	f7f5 ff04 	bl	800046c <__aeabi_i2d>
 800a664:	4622      	mov	r2, r4
 800a666:	462b      	mov	r3, r5
 800a668:	f7f5 ff6a 	bl	8000540 <__aeabi_dmul>
 800a66c:	4632      	mov	r2, r6
 800a66e:	e9c9 0100 	strd	r0, r1, [r9]
 800a672:	463b      	mov	r3, r7
 800a674:	4620      	mov	r0, r4
 800a676:	4629      	mov	r1, r5
 800a678:	f7f5 ff62 	bl	8000540 <__aeabi_dmul>
 800a67c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	e713      	b.n	800a4ae <__kernel_rem_pio2+0x2b6>
 800a686:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a68a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a68e:	f7f5 ff57 	bl	8000540 <__aeabi_dmul>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f5 fd9b 	bl	80001d4 <__adddf3>
 800a69e:	3601      	adds	r6, #1
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	429e      	cmp	r6, r3
 800a6a8:	dc01      	bgt.n	800a6ae <__kernel_rem_pio2+0x4b6>
 800a6aa:	45b0      	cmp	r8, r6
 800a6ac:	daeb      	bge.n	800a686 <__kernel_rem_pio2+0x48e>
 800a6ae:	ab48      	add	r3, sp, #288	; 0x120
 800a6b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a6b4:	e9c3 4500 	strd	r4, r5, [r3]
 800a6b8:	3f01      	subs	r7, #1
 800a6ba:	f108 0801 	add.w	r8, r8, #1
 800a6be:	e6ff      	b.n	800a4c0 <__kernel_rem_pio2+0x2c8>
 800a6c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	dc0b      	bgt.n	800a6de <__kernel_rem_pio2+0x4e6>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dc6e      	bgt.n	800a7a8 <__kernel_rem_pio2+0x5b0>
 800a6ca:	d045      	beq.n	800a758 <__kernel_rem_pio2+0x560>
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	f003 0007 	and.w	r0, r3, #7
 800a6d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a6d6:	ecbd 8b02 	vpop	{d8}
 800a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d1f3      	bne.n	800a6cc <__kernel_rem_pio2+0x4d4>
 800a6e4:	ab48      	add	r3, sp, #288	; 0x120
 800a6e6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a6ea:	46d0      	mov	r8, sl
 800a6ec:	46d9      	mov	r9, fp
 800a6ee:	f1b9 0f00 	cmp.w	r9, #0
 800a6f2:	f1a8 0808 	sub.w	r8, r8, #8
 800a6f6:	dc64      	bgt.n	800a7c2 <__kernel_rem_pio2+0x5ca>
 800a6f8:	465c      	mov	r4, fp
 800a6fa:	2c01      	cmp	r4, #1
 800a6fc:	f1aa 0a08 	sub.w	sl, sl, #8
 800a700:	dc7e      	bgt.n	800a800 <__kernel_rem_pio2+0x608>
 800a702:	2000      	movs	r0, #0
 800a704:	2100      	movs	r1, #0
 800a706:	f1bb 0f01 	cmp.w	fp, #1
 800a70a:	f300 8097 	bgt.w	800a83c <__kernel_rem_pio2+0x644>
 800a70e:	9b02      	ldr	r3, [sp, #8]
 800a710:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a714:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f040 8099 	bne.w	800a850 <__kernel_rem_pio2+0x658>
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	e9c3 5600 	strd	r5, r6, [r3]
 800a724:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a728:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a72c:	e7ce      	b.n	800a6cc <__kernel_rem_pio2+0x4d4>
 800a72e:	ab48      	add	r3, sp, #288	; 0x120
 800a730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fd4c 	bl	80001d4 <__adddf3>
 800a73c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a740:	f1bb 0f00 	cmp.w	fp, #0
 800a744:	daf3      	bge.n	800a72e <__kernel_rem_pio2+0x536>
 800a746:	9b02      	ldr	r3, [sp, #8]
 800a748:	b113      	cbz	r3, 800a750 <__kernel_rem_pio2+0x558>
 800a74a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a74e:	4619      	mov	r1, r3
 800a750:	9b01      	ldr	r3, [sp, #4]
 800a752:	e9c3 0100 	strd	r0, r1, [r3]
 800a756:	e7b9      	b.n	800a6cc <__kernel_rem_pio2+0x4d4>
 800a758:	2000      	movs	r0, #0
 800a75a:	2100      	movs	r1, #0
 800a75c:	e7f0      	b.n	800a740 <__kernel_rem_pio2+0x548>
 800a75e:	ab48      	add	r3, sp, #288	; 0x120
 800a760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	f7f5 fd34 	bl	80001d4 <__adddf3>
 800a76c:	3c01      	subs	r4, #1
 800a76e:	2c00      	cmp	r4, #0
 800a770:	daf5      	bge.n	800a75e <__kernel_rem_pio2+0x566>
 800a772:	9b02      	ldr	r3, [sp, #8]
 800a774:	b1e3      	cbz	r3, 800a7b0 <__kernel_rem_pio2+0x5b8>
 800a776:	4602      	mov	r2, r0
 800a778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a77c:	9c01      	ldr	r4, [sp, #4]
 800a77e:	e9c4 2300 	strd	r2, r3, [r4]
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a78a:	f7f5 fd21 	bl	80001d0 <__aeabi_dsub>
 800a78e:	ad4a      	add	r5, sp, #296	; 0x128
 800a790:	2401      	movs	r4, #1
 800a792:	45a3      	cmp	fp, r4
 800a794:	da0f      	bge.n	800a7b6 <__kernel_rem_pio2+0x5be>
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	b113      	cbz	r3, 800a7a0 <__kernel_rem_pio2+0x5a8>
 800a79a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a79e:	4619      	mov	r1, r3
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a7a6:	e791      	b.n	800a6cc <__kernel_rem_pio2+0x4d4>
 800a7a8:	465c      	mov	r4, fp
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	e7de      	b.n	800a76e <__kernel_rem_pio2+0x576>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	e7e2      	b.n	800a77c <__kernel_rem_pio2+0x584>
 800a7b6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a7ba:	f7f5 fd0b 	bl	80001d4 <__adddf3>
 800a7be:	3401      	adds	r4, #1
 800a7c0:	e7e7      	b.n	800a792 <__kernel_rem_pio2+0x59a>
 800a7c2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a7c6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7f5 fcff 	bl	80001d4 <__adddf3>
 800a7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4620      	mov	r0, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	f7f5 fcf5 	bl	80001d0 <__aeabi_dsub>
 800a7e6:	4632      	mov	r2, r6
 800a7e8:	463b      	mov	r3, r7
 800a7ea:	f7f5 fcf3 	bl	80001d4 <__adddf3>
 800a7ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7f2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a7f6:	ed88 7b00 	vstr	d7, [r8]
 800a7fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7fe:	e776      	b.n	800a6ee <__kernel_rem_pio2+0x4f6>
 800a800:	e9da 8900 	ldrd	r8, r9, [sl]
 800a804:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a808:	4640      	mov	r0, r8
 800a80a:	4632      	mov	r2, r6
 800a80c:	463b      	mov	r3, r7
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f5 fce0 	bl	80001d4 <__adddf3>
 800a814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4640      	mov	r0, r8
 800a81e:	4649      	mov	r1, r9
 800a820:	f7f5 fcd6 	bl	80001d0 <__aeabi_dsub>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f5 fcd4 	bl	80001d4 <__adddf3>
 800a82c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a834:	ed8a 7b00 	vstr	d7, [sl]
 800a838:	3c01      	subs	r4, #1
 800a83a:	e75e      	b.n	800a6fa <__kernel_rem_pio2+0x502>
 800a83c:	ab48      	add	r3, sp, #288	; 0x120
 800a83e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fcc5 	bl	80001d4 <__adddf3>
 800a84a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a84e:	e75a      	b.n	800a706 <__kernel_rem_pio2+0x50e>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	9a01      	ldr	r2, [sp, #4]
 800a854:	601d      	str	r5, [r3, #0]
 800a856:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a85a:	605c      	str	r4, [r3, #4]
 800a85c:	609f      	str	r7, [r3, #8]
 800a85e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a862:	60d3      	str	r3, [r2, #12]
 800a864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a868:	6110      	str	r0, [r2, #16]
 800a86a:	6153      	str	r3, [r2, #20]
 800a86c:	e72e      	b.n	800a6cc <__kernel_rem_pio2+0x4d4>
 800a86e:	bf00      	nop
 800a870:	41700000 	.word	0x41700000
 800a874:	3e700000 	.word	0x3e700000

0800a878 <__kernel_sin>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	ed2d 8b04 	vpush	{d8-d9}
 800a880:	eeb0 8a41 	vmov.f32	s16, s2
 800a884:	eef0 8a61 	vmov.f32	s17, s3
 800a888:	ec55 4b10 	vmov	r4, r5, d0
 800a88c:	b083      	sub	sp, #12
 800a88e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a892:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a896:	9001      	str	r0, [sp, #4]
 800a898:	da06      	bge.n	800a8a8 <__kernel_sin+0x30>
 800a89a:	ee10 0a10 	vmov	r0, s0
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f6 f8fe 	bl	8000aa0 <__aeabi_d2iz>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d051      	beq.n	800a94c <__kernel_sin+0xd4>
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f7f5 fe46 	bl	8000540 <__aeabi_dmul>
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	468b      	mov	fp, r1
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fe3e 	bl	8000540 <__aeabi_dmul>
 800a8c4:	a341      	add	r3, pc, #260	; (adr r3, 800a9cc <__kernel_sin+0x154>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	f7f5 fe35 	bl	8000540 <__aeabi_dmul>
 800a8d6:	a33f      	add	r3, pc, #252	; (adr r3, 800a9d4 <__kernel_sin+0x15c>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fc78 	bl	80001d0 <__aeabi_dsub>
 800a8e0:	4652      	mov	r2, sl
 800a8e2:	465b      	mov	r3, fp
 800a8e4:	f7f5 fe2c 	bl	8000540 <__aeabi_dmul>
 800a8e8:	a33c      	add	r3, pc, #240	; (adr r3, 800a9dc <__kernel_sin+0x164>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f5 fc71 	bl	80001d4 <__adddf3>
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	465b      	mov	r3, fp
 800a8f6:	f7f5 fe23 	bl	8000540 <__aeabi_dmul>
 800a8fa:	a33a      	add	r3, pc, #232	; (adr r3, 800a9e4 <__kernel_sin+0x16c>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fc66 	bl	80001d0 <__aeabi_dsub>
 800a904:	4652      	mov	r2, sl
 800a906:	465b      	mov	r3, fp
 800a908:	f7f5 fe1a 	bl	8000540 <__aeabi_dmul>
 800a90c:	a337      	add	r3, pc, #220	; (adr r3, 800a9ec <__kernel_sin+0x174>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fc5f 	bl	80001d4 <__adddf3>
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	4606      	mov	r6, r0
 800a91a:	460f      	mov	r7, r1
 800a91c:	b9eb      	cbnz	r3, 800a95a <__kernel_sin+0xe2>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4650      	mov	r0, sl
 800a924:	4659      	mov	r1, fp
 800a926:	f7f5 fe0b 	bl	8000540 <__aeabi_dmul>
 800a92a:	a325      	add	r3, pc, #148	; (adr r3, 800a9c0 <__kernel_sin+0x148>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fc4e 	bl	80001d0 <__aeabi_dsub>
 800a934:	4642      	mov	r2, r8
 800a936:	464b      	mov	r3, r9
 800a938:	f7f5 fe02 	bl	8000540 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fc46 	bl	80001d4 <__adddf3>
 800a948:	4604      	mov	r4, r0
 800a94a:	460d      	mov	r5, r1
 800a94c:	ec45 4b10 	vmov	d0, r4, r5
 800a950:	b003      	add	sp, #12
 800a952:	ecbd 8b04 	vpop	{d8-d9}
 800a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95a:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <__kernel_sin+0x150>)
 800a95c:	ec51 0b18 	vmov	r0, r1, d8
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fded 	bl	8000540 <__aeabi_dmul>
 800a966:	4632      	mov	r2, r6
 800a968:	ec41 0b19 	vmov	d9, r0, r1
 800a96c:	463b      	mov	r3, r7
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fde5 	bl	8000540 <__aeabi_dmul>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	ec51 0b19 	vmov	r0, r1, d9
 800a97e:	f7f5 fc27 	bl	80001d0 <__aeabi_dsub>
 800a982:	4652      	mov	r2, sl
 800a984:	465b      	mov	r3, fp
 800a986:	f7f5 fddb 	bl	8000540 <__aeabi_dmul>
 800a98a:	ec53 2b18 	vmov	r2, r3, d8
 800a98e:	f7f5 fc1f 	bl	80001d0 <__aeabi_dsub>
 800a992:	a30b      	add	r3, pc, #44	; (adr r3, 800a9c0 <__kernel_sin+0x148>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	4606      	mov	r6, r0
 800a99a:	460f      	mov	r7, r1
 800a99c:	4640      	mov	r0, r8
 800a99e:	4649      	mov	r1, r9
 800a9a0:	f7f5 fdce 	bl	8000540 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f5 fc12 	bl	80001d4 <__adddf3>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 fc0a 	bl	80001d0 <__aeabi_dsub>
 800a9bc:	e7c4      	b.n	800a948 <__kernel_sin+0xd0>
 800a9be:	bf00      	nop
 800a9c0:	55555549 	.word	0x55555549
 800a9c4:	3fc55555 	.word	0x3fc55555
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	5acfd57c 	.word	0x5acfd57c
 800a9d0:	3de5d93a 	.word	0x3de5d93a
 800a9d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a9d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a9dc:	57b1fe7d 	.word	0x57b1fe7d
 800a9e0:	3ec71de3 	.word	0x3ec71de3
 800a9e4:	19c161d5 	.word	0x19c161d5
 800a9e8:	3f2a01a0 	.word	0x3f2a01a0
 800a9ec:	1110f8a6 	.word	0x1110f8a6
 800a9f0:	3f811111 	.word	0x3f811111

0800a9f4 <fabs>:
 800a9f4:	ec51 0b10 	vmov	r0, r1, d0
 800a9f8:	ee10 2a10 	vmov	r2, s0
 800a9fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa00:	ec43 2b10 	vmov	d0, r2, r3
 800aa04:	4770      	bx	lr

0800aa06 <finite>:
 800aa06:	b082      	sub	sp, #8
 800aa08:	ed8d 0b00 	vstr	d0, [sp]
 800aa0c:	9801      	ldr	r0, [sp, #4]
 800aa0e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800aa12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aa16:	0fc0      	lsrs	r0, r0, #31
 800aa18:	b002      	add	sp, #8
 800aa1a:	4770      	bx	lr
 800aa1c:	0000      	movs	r0, r0
	...

0800aa20 <nan>:
 800aa20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa28 <nan+0x8>
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	7ff80000 	.word	0x7ff80000

0800aa30 <rint>:
 800aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa32:	ec51 0b10 	vmov	r0, r1, d0
 800aa36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa3a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800aa3e:	2e13      	cmp	r6, #19
 800aa40:	ee10 4a10 	vmov	r4, s0
 800aa44:	460b      	mov	r3, r1
 800aa46:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800aa4a:	dc58      	bgt.n	800aafe <rint+0xce>
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	da2b      	bge.n	800aaa8 <rint+0x78>
 800aa50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aa54:	4302      	orrs	r2, r0
 800aa56:	d023      	beq.n	800aaa0 <rint+0x70>
 800aa58:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800aa5c:	4302      	orrs	r2, r0
 800aa5e:	4254      	negs	r4, r2
 800aa60:	4314      	orrs	r4, r2
 800aa62:	0c4b      	lsrs	r3, r1, #17
 800aa64:	0b24      	lsrs	r4, r4, #12
 800aa66:	045b      	lsls	r3, r3, #17
 800aa68:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800aa6c:	ea44 0103 	orr.w	r1, r4, r3
 800aa70:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <rint+0x10c>)
 800aa72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa76:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4630      	mov	r0, r6
 800aa80:	4639      	mov	r1, r7
 800aa82:	f7f5 fba7 	bl	80001d4 <__adddf3>
 800aa86:	e9cd 0100 	strd	r0, r1, [sp]
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa90:	4632      	mov	r2, r6
 800aa92:	f7f5 fb9d 	bl	80001d0 <__aeabi_dsub>
 800aa96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa9a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	ec41 0b10 	vmov	d0, r0, r1
 800aaa4:	b003      	add	sp, #12
 800aaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa8:	4a25      	ldr	r2, [pc, #148]	; (800ab40 <rint+0x110>)
 800aaaa:	4132      	asrs	r2, r6
 800aaac:	ea01 0702 	and.w	r7, r1, r2
 800aab0:	4307      	orrs	r7, r0
 800aab2:	d0f5      	beq.n	800aaa0 <rint+0x70>
 800aab4:	0851      	lsrs	r1, r2, #1
 800aab6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800aaba:	4314      	orrs	r4, r2
 800aabc:	d00c      	beq.n	800aad8 <rint+0xa8>
 800aabe:	ea23 0201 	bic.w	r2, r3, r1
 800aac2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aac6:	2e13      	cmp	r6, #19
 800aac8:	fa43 f606 	asr.w	r6, r3, r6
 800aacc:	bf0c      	ite	eq
 800aace:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800aad2:	2400      	movne	r4, #0
 800aad4:	ea42 0306 	orr.w	r3, r2, r6
 800aad8:	4918      	ldr	r1, [pc, #96]	; (800ab3c <rint+0x10c>)
 800aada:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800aade:	4622      	mov	r2, r4
 800aae0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aae4:	4620      	mov	r0, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	f7f5 fb74 	bl	80001d4 <__adddf3>
 800aaec:	e9cd 0100 	strd	r0, r1, [sp]
 800aaf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf4:	4622      	mov	r2, r4
 800aaf6:	462b      	mov	r3, r5
 800aaf8:	f7f5 fb6a 	bl	80001d0 <__aeabi_dsub>
 800aafc:	e7d0      	b.n	800aaa0 <rint+0x70>
 800aafe:	2e33      	cmp	r6, #51	; 0x33
 800ab00:	dd07      	ble.n	800ab12 <rint+0xe2>
 800ab02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ab06:	d1cb      	bne.n	800aaa0 <rint+0x70>
 800ab08:	ee10 2a10 	vmov	r2, s0
 800ab0c:	f7f5 fb62 	bl	80001d4 <__adddf3>
 800ab10:	e7c6      	b.n	800aaa0 <rint+0x70>
 800ab12:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ab16:	f04f 36ff 	mov.w	r6, #4294967295
 800ab1a:	40d6      	lsrs	r6, r2
 800ab1c:	4230      	tst	r0, r6
 800ab1e:	d0bf      	beq.n	800aaa0 <rint+0x70>
 800ab20:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ab24:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ab28:	bf1f      	itttt	ne
 800ab2a:	ea24 0101 	bicne.w	r1, r4, r1
 800ab2e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ab32:	fa44 f202 	asrne.w	r2, r4, r2
 800ab36:	ea41 0402 	orrne.w	r4, r1, r2
 800ab3a:	e7cd      	b.n	800aad8 <rint+0xa8>
 800ab3c:	0800af00 	.word	0x0800af00
 800ab40:	000fffff 	.word	0x000fffff
 800ab44:	00000000 	.word	0x00000000

0800ab48 <scalbn>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	ec55 4b10 	vmov	r4, r5, d0
 800ab4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ab52:	4606      	mov	r6, r0
 800ab54:	462b      	mov	r3, r5
 800ab56:	b99a      	cbnz	r2, 800ab80 <scalbn+0x38>
 800ab58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab5c:	4323      	orrs	r3, r4
 800ab5e:	d036      	beq.n	800abce <scalbn+0x86>
 800ab60:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <scalbn+0x100>)
 800ab62:	4629      	mov	r1, r5
 800ab64:	ee10 0a10 	vmov	r0, s0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f7f5 fce9 	bl	8000540 <__aeabi_dmul>
 800ab6e:	4b37      	ldr	r3, [pc, #220]	; (800ac4c <scalbn+0x104>)
 800ab70:	429e      	cmp	r6, r3
 800ab72:	4604      	mov	r4, r0
 800ab74:	460d      	mov	r5, r1
 800ab76:	da10      	bge.n	800ab9a <scalbn+0x52>
 800ab78:	a32b      	add	r3, pc, #172	; (adr r3, 800ac28 <scalbn+0xe0>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	e03a      	b.n	800abf6 <scalbn+0xae>
 800ab80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab84:	428a      	cmp	r2, r1
 800ab86:	d10c      	bne.n	800aba2 <scalbn+0x5a>
 800ab88:	ee10 2a10 	vmov	r2, s0
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	f7f5 fb20 	bl	80001d4 <__adddf3>
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	e019      	b.n	800abce <scalbn+0x86>
 800ab9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab9e:	460b      	mov	r3, r1
 800aba0:	3a36      	subs	r2, #54	; 0x36
 800aba2:	4432      	add	r2, r6
 800aba4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aba8:	428a      	cmp	r2, r1
 800abaa:	dd08      	ble.n	800abbe <scalbn+0x76>
 800abac:	2d00      	cmp	r5, #0
 800abae:	a120      	add	r1, pc, #128	; (adr r1, 800ac30 <scalbn+0xe8>)
 800abb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb4:	da1c      	bge.n	800abf0 <scalbn+0xa8>
 800abb6:	a120      	add	r1, pc, #128	; (adr r1, 800ac38 <scalbn+0xf0>)
 800abb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abbc:	e018      	b.n	800abf0 <scalbn+0xa8>
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	dd08      	ble.n	800abd4 <scalbn+0x8c>
 800abc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800abce:	ec45 4b10 	vmov	d0, r4, r5
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800abd8:	da19      	bge.n	800ac0e <scalbn+0xc6>
 800abda:	f24c 3350 	movw	r3, #50000	; 0xc350
 800abde:	429e      	cmp	r6, r3
 800abe0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800abe4:	dd0a      	ble.n	800abfc <scalbn+0xb4>
 800abe6:	a112      	add	r1, pc, #72	; (adr r1, 800ac30 <scalbn+0xe8>)
 800abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e2      	bne.n	800abb6 <scalbn+0x6e>
 800abf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ac30 <scalbn+0xe8>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 fca3 	bl	8000540 <__aeabi_dmul>
 800abfa:	e7cb      	b.n	800ab94 <scalbn+0x4c>
 800abfc:	a10a      	add	r1, pc, #40	; (adr r1, 800ac28 <scalbn+0xe0>)
 800abfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0b8      	beq.n	800ab78 <scalbn+0x30>
 800ac06:	a10e      	add	r1, pc, #56	; (adr r1, 800ac40 <scalbn+0xf8>)
 800ac08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0c:	e7b4      	b.n	800ab78 <scalbn+0x30>
 800ac0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac12:	3236      	adds	r2, #54	; 0x36
 800ac14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <scalbn+0x108>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	e7e8      	b.n	800abf6 <scalbn+0xae>
 800ac24:	f3af 8000 	nop.w
 800ac28:	c2f8f359 	.word	0xc2f8f359
 800ac2c:	01a56e1f 	.word	0x01a56e1f
 800ac30:	8800759c 	.word	0x8800759c
 800ac34:	7e37e43c 	.word	0x7e37e43c
 800ac38:	8800759c 	.word	0x8800759c
 800ac3c:	fe37e43c 	.word	0xfe37e43c
 800ac40:	c2f8f359 	.word	0xc2f8f359
 800ac44:	81a56e1f 	.word	0x81a56e1f
 800ac48:	43500000 	.word	0x43500000
 800ac4c:	ffff3cb0 	.word	0xffff3cb0
 800ac50:	3c900000 	.word	0x3c900000

0800ac54 <_init>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	bf00      	nop
 800ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5a:	bc08      	pop	{r3}
 800ac5c:	469e      	mov	lr, r3
 800ac5e:	4770      	bx	lr

0800ac60 <_fini>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	bf00      	nop
 800ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac66:	bc08      	pop	{r3}
 800ac68:	469e      	mov	lr, r3
 800ac6a:	4770      	bx	lr
