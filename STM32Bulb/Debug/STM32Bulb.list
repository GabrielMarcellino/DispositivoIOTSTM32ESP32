
STM32Bulb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800c2b0  0800c2b0  0001c2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c770  0800c770  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c778  0800c778  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000094  0800c814  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800c814  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020803  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c4  00000000  00000000  000408c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00044b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000462d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002610b  00000000  00000000  00047890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7bc  00000000  00000000  0006d99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56bc  00000000  00000000  0008b157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  00160868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c294 	.word	0x0800c294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c294 	.word	0x0800c294

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	f5ad 5d7c 	sub.w	sp, sp, #16128	; 0x3f00
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fb83 	bl	8002644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f907 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fab1 	bl	80014a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f46:	f000 f985 	bl	8001254 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f4a:	f000 f9b1 	bl	80012b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f4e:	f000 f9df 	bl	8001310 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f52:	f007 fea9 	bl	8008ca8 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000f56:	f000 fa11 	bl	800137c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4879      	ldr	r0, [pc, #484]	; (8001144 <main+0x214>)
 8000f5e:	f005 f8d9 	bl	8006114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f62:	2104      	movs	r1, #4
 8000f64:	4877      	ldr	r0, [pc, #476]	; (8001144 <main+0x214>)
 8000f66:	f005 f8d5 	bl	8006114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	4875      	ldr	r0, [pc, #468]	; (8001144 <main+0x214>)
 8000f6e:	f005 f8d1 	bl	8006114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f72:	210c      	movs	r1, #12
 8000f74:	4873      	ldr	r0, [pc, #460]	; (8001144 <main+0x214>)
 8000f76:	f005 f8cd 	bl	8006114 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char configString[] = "Y-1000-0-R-0+O-1000-0-H-0+S-1000-0-R-0+B-1000-0-S-0";
 8000f7a:	4b73      	ldr	r3, [pc, #460]	; (8001148 <main+0x218>)
 8000f7c:	f507 547b 	add.w	r4, r7, #16064	; 0x3ec0
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	6023      	str	r3, [r4, #0]

  LEDBehavior yellow, orange, red, blue;

  DeserializeConfiguration(configString, &yellow, &orange, &red, &blue);
 8000f92:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8000f96:	3918      	subs	r1, #24
 8000f98:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8000f9c:	f102 0208 	add.w	r2, r2, #8
 8000fa0:	3a08      	subs	r2, #8
 8000fa2:	f507 543c 	add.w	r4, r7, #12032	; 0x2f00
 8000fa6:	f104 0410 	add.w	r4, r4, #16
 8000faa:	f507 507b 	add.w	r0, r7, #16064	; 0x3ec0
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	3b08      	subs	r3, #8
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4621      	mov	r1, r4
 8000fba:	f000 fb71 	bl	80016a0 <DeserializeConfiguration>

  int yellowPhase;
  int orangePhase;
  int redPhase;
  int bluePhase;
  int globalCounter = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000fc4:	f102 0204 	add.w	r2, r2, #4
 8000fc8:	6013      	str	r3, [r2, #0]
  while (1)
  {
	globalCounter++;
 8000fca:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8000fce:	f103 0304 	add.w	r3, r3, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8000fda:	f102 0204 	add.w	r2, r2, #4
 8000fde:	6013      	str	r3, [r2, #0]

	yellowPhase = floor(globalCounter%yellow.samples);
 8000fe0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000fe4:	f103 0310 	add.w	r3, r3, #16
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8000fee:	f103 0304 	add.w	r3, r3, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ff8:	fb02 f201 	mul.w	r2, r2, r1
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa88 	bl	8000514 <__aeabi_i2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd9c 	bl	8000b48 <__aeabi_d2iz>
 8001010:	4603      	mov	r3, r0
 8001012:	f507 527c 	add.w	r2, r7, #16128	; 0x3f00
 8001016:	6013      	str	r3, [r2, #0]
	orangePhase = floor(globalCounter%orange.samples);
 8001018:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800101c:	f103 0308 	add.w	r3, r3, #8
 8001020:	3b08      	subs	r3, #8
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8001028:	f103 0304 	add.w	r3, r3, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001032:	fb02 f201 	mul.w	r2, r2, r1
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa6b 	bl	8000514 <__aeabi_i2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd7f 	bl	8000b48 <__aeabi_d2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 8001050:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001054:	6013      	str	r3, [r2, #0]
	redPhase = floor(globalCounter%red.samples);
 8001056:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800105a:	3b18      	subs	r3, #24
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 8001062:	f103 0304 	add.w	r3, r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	fb93 f1f2 	sdiv	r1, r3, r2
 800106c:	fb02 f201 	mul.w	r2, r2, r1
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa4e 	bl	8000514 <__aeabi_i2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd62 	bl	8000b48 <__aeabi_d2iz>
 8001084:	4603      	mov	r3, r0
 8001086:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 800108a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800108e:	6013      	str	r3, [r2, #0]
	bluePhase = floor(globalCounter%blue.samples);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	3b08      	subs	r3, #8
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 800109c:	f103 0304 	add.w	r3, r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80010a6:	fb02 f201 	mul.w	r2, r2, r1
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa31 	bl	8000514 <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd45 	bl	8000b48 <__aeabi_d2iz>
 80010be:	4603      	mov	r3, r0
 80010c0:	f507 527b 	add.w	r2, r7, #16064	; 0x3ec0
 80010c4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80010c8:	6013      	str	r3, [r2, #0]

	TIM4->CCR1 = yellow.shape[yellowPhase];
 80010ca:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80010ce:	f102 0210 	add.w	r2, r2, #16
 80010d2:	f507 537c 	add.w	r3, r7, #16128	; 0x3f00
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3302      	adds	r3, #2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <main+0x21c>)
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = orange.shape[orangePhase];
 80010e4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80010e8:	f102 0208 	add.w	r2, r2, #8
 80010ec:	3a08      	subs	r2, #8
 80010ee:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80010f2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3302      	adds	r3, #2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x21c>)
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = red.shape[redPhase];
 8001104:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8001108:	3a18      	subs	r2, #24
 800110a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 800110e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3302      	adds	r3, #2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <main+0x21c>)
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = blue.shape[bluePhase];
 8001120:	f107 0208 	add.w	r2, r7, #8
 8001124:	3a08      	subs	r2, #8
 8001126:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 800112a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <main+0x21c>)
 800113a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2);
 800113c:	2002      	movs	r0, #2
 800113e:	f001 faf3 	bl	8002728 <HAL_Delay>
	globalCounter++;
 8001142:	e742      	b.n	8000fca <main+0x9a>
 8001144:	200000c0 	.word	0x200000c0
 8001148:	0800c2b0 	.word	0x0800c2b0
 800114c:	40000800 	.word	0x40000800

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b098      	sub	sp, #96	; 0x60
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f008 f890 	bl	8009284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <SystemClock_Config+0xfc>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <SystemClock_Config+0xfc>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <SystemClock_Config+0xfc>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <SystemClock_Config+0x100>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <SystemClock_Config+0x100>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <SystemClock_Config+0x100>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ce:	2308      	movs	r3, #8
 80011d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011dc:	2307      	movs	r3, #7
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f8c3 	bl	8005370 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011f0:	f000 ff70 	bl	80020d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fb24 	bl	8005860 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800121e:	f000 ff59 	bl	80020d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001222:	2301      	movs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fcfc 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800123e:	f000 ff49 	bl	80020d4 <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3760      	adds	r7, #96	; 0x60
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x50>)
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x54>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_I2C1_Init+0x58>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001292:	f003 fa89 	bl	80047a8 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 ff1a 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000108 	.word	0x20000108
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_I2S3_Init+0x54>)
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <MX_I2S3_Init+0x58>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2S3_Init+0x54>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_I2S3_Init+0x54>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2S3_Init+0x54>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_I2S3_Init+0x54>)
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_I2S3_Init+0x54>)
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <MX_I2S3_Init+0x5c>)
 80012da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2S3_Init+0x54>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_I2S3_Init+0x54>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2S3_Init+0x54>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_I2S3_Init+0x54>)
 80012f0:	f003 fb9e 	bl	8004a30 <HAL_I2S_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80012fa:	f000 feeb 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001b4 	.word	0x200001b4
 8001308:	40003c00 	.word	0x40003c00
 800130c:	00017700 	.word	0x00017700

08001310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI1_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_SPI1_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SPI1_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI1_Init+0x64>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI1_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI1_Init+0x64>)
 8001362:	f004 fda5 	bl	8005eb0 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800136c:	f000 feb2 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000015c 	.word	0x2000015c
 8001378:	40013000 	.word	0x40013000

0800137c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013d2:	f004 fdf6 	bl	8005fc2 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80013dc:	f000 fe7a 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013ee:	f005 f81b 	bl	8006428 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80013f8:	f000 fe6c 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013fc:	4828      	ldr	r0, [pc, #160]	; (80014a0 <MX_TIM4_Init+0x124>)
 80013fe:	f004 fe2f 	bl	8006060 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001408:	f000 fe64 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	4821      	ldr	r0, [pc, #132]	; (80014a0 <MX_TIM4_Init+0x124>)
 800141c:	f005 fbdc 	bl	8006bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001426:	f000 fe55 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001436:	2304      	movs	r3, #4
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_TIM4_Init+0x124>)
 8001442:	f004 ff2f 	bl	80062a4 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800144c:	f000 fe42 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2204      	movs	r2, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4812      	ldr	r0, [pc, #72]	; (80014a0 <MX_TIM4_Init+0x124>)
 8001458:	f004 ff24 	bl	80062a4 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001462:	f000 fe37 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2208      	movs	r2, #8
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM4_Init+0x124>)
 800146e:	f004 ff19 	bl	80062a4 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001478:	f000 fe2c 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	220c      	movs	r2, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM4_Init+0x124>)
 8001484:	f004 ff0e 	bl	80062a4 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800148e:	f000 fe21 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM4_Init+0x124>)
 8001494:	f000 ff66 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	; 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000c0 	.word	0x200000c0
 80014a4:	40000800 	.word	0x40000800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b71      	ldr	r3, [pc, #452]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a70      	ldr	r2, [pc, #448]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b6e      	ldr	r3, [pc, #440]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a69      	ldr	r2, [pc, #420]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b67      	ldr	r3, [pc, #412]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <MX_GPIO_Init+0x1e0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a62      	ldr	r2, [pc, #392]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a5b      	ldr	r2, [pc, #364]	; (8001688 <MX_GPIO_Init+0x1e0>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a54      	ldr	r2, [pc, #336]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <MX_GPIO_Init+0x1e0>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <MX_GPIO_Init+0x1e0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2108      	movs	r1, #8
 800156a:	4848      	ldr	r0, [pc, #288]	; (800168c <MX_GPIO_Init+0x1e4>)
 800156c:	f001 fbae 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	4846      	ldr	r0, [pc, #280]	; (8001690 <MX_GPIO_Init+0x1e8>)
 8001576:	f001 fba9 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2110      	movs	r1, #16
 800157e:	4845      	ldr	r0, [pc, #276]	; (8001694 <MX_GPIO_Init+0x1ec>)
 8001580:	f001 fba4 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001584:	2308      	movs	r3, #8
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <MX_GPIO_Init+0x1e4>)
 800159c:	f001 f9fa 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4836      	ldr	r0, [pc, #216]	; (8001690 <MX_GPIO_Init+0x1e8>)
 80015b8:	f001 f9ec 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015bc:	2308      	movs	r3, #8
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015cc:	2305      	movs	r3, #5
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <MX_GPIO_Init+0x1e8>)
 80015d8:	f001 f9dc 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4829      	ldr	r0, [pc, #164]	; (8001698 <MX_GPIO_Init+0x1f0>)
 80015f2:	f001 f9cf 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015f6:	2304      	movs	r3, #4
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4824      	ldr	r0, [pc, #144]	; (800169c <MX_GPIO_Init+0x1f4>)
 800160a:	f001 f9c3 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <MX_GPIO_Init+0x1f4>)
 800162c:	f001 f9b2 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001630:	2310      	movs	r3, #16
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4813      	ldr	r0, [pc, #76]	; (8001694 <MX_GPIO_Init+0x1ec>)
 8001648:	f001 f9a4 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800164c:	2320      	movs	r3, #32
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_GPIO_Init+0x1ec>)
 8001660:	f001 f998 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001668:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_GPIO_Init+0x1e4>)
 800167a:	f001 f98b 	bl	8002994 <HAL_GPIO_Init>

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40021000 	.word	0x40021000
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400

080016a0 <DeserializeConfiguration>:

/* USER CODE BEGIN 4 */

void DeserializeConfiguration(char *configurationString, LEDBehavior *yellow, LEDBehavior *orange, LEDBehavior *red, LEDBehavior *blue){
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b092      	sub	sp, #72	; 0x48
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
	char* ledConfiguration[4];
	char* configurationParameters[5];

	char* token = strtok(configurationString, "+");
 80016ae:	49ba      	ldr	r1, [pc, #744]	; (8001998 <DeserializeConfiguration+0x2f8>)
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f007 fea9 	bl	8009408 <strtok>
 80016b6:	6478      	str	r0, [r7, #68]	; 0x44
	ledConfiguration[0] = token;
 80016b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int index = 1; token != NULL; index++){
 80016bc:	2301      	movs	r3, #1
 80016be:	643b      	str	r3, [r7, #64]	; 0x40
 80016c0:	e00f      	b.n	80016e2 <DeserializeConfiguration+0x42>
		token = strtok(NULL, "+");
 80016c2:	49b5      	ldr	r1, [pc, #724]	; (8001998 <DeserializeConfiguration+0x2f8>)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f007 fe9f 	bl	8009408 <strtok>
 80016ca:	6478      	str	r0, [r7, #68]	; 0x44
		ledConfiguration[index] = token;
 80016cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016d4:	4413      	add	r3, r2
 80016d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016d8:	f843 2c20 	str.w	r2, [r3, #-32]
	for(int index = 1; token != NULL; index++){
 80016dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016de:	3301      	adds	r3, #1
 80016e0:	643b      	str	r3, [r7, #64]	; 0x40
 80016e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ec      	bne.n	80016c2 <DeserializeConfiguration+0x22>
	}

	for(int index = 0; index < 5; index++){
 80016e8:	2300      	movs	r3, #0
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ec:	e2c9      	b.n	8001c82 <DeserializeConfiguration+0x5e2>
		token = strtok(ledConfiguration[index], "-");
 80016ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016f6:	4413      	add	r3, r2
 80016f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80016fc:	49a7      	ldr	r1, [pc, #668]	; (800199c <DeserializeConfiguration+0x2fc>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 fe82 	bl	8009408 <strtok>
 8001704:	6478      	str	r0, [r7, #68]	; 0x44
		configurationParameters[0] = token;
 8001706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001708:	617b      	str	r3, [r7, #20]
		for(int indexIn = 1; token != NULL; indexIn++){
 800170a:	2301      	movs	r3, #1
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
 800170e:	e00f      	b.n	8001730 <DeserializeConfiguration+0x90>
			token = strtok(NULL, "-");
 8001710:	49a2      	ldr	r1, [pc, #648]	; (800199c <DeserializeConfiguration+0x2fc>)
 8001712:	2000      	movs	r0, #0
 8001714:	f007 fe78 	bl	8009408 <strtok>
 8001718:	6478      	str	r0, [r7, #68]	; 0x44
			configurationParameters[indexIn] = token;
 800171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001722:	4413      	add	r3, r2
 8001724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001726:	f843 2c34 	str.w	r2, [r3, #-52]
		for(int indexIn = 1; token != NULL; indexIn++){
 800172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172c:	3301      	adds	r3, #1
 800172e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ec      	bne.n	8001710 <DeserializeConfiguration+0x70>
		}

		if (*configurationParameters[0] == 'Y'){
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b59      	cmp	r3, #89	; 0x59
 800173c:	f040 80a3 	bne.w	8001886 <DeserializeConfiguration+0x1e6>
			yellow->samples = atoi(configurationParameters[1]);
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fd60 	bl	8009208 <atoi>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	601a      	str	r2, [r3, #0]
			yellow->delay = atoi(configurationParameters[2]);
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4618      	mov	r0, r3
 8001752:	f007 fd59 	bl	8009208 <atoi>
 8001756:	4602      	mov	r2, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	605a      	str	r2, [r3, #4]
			yellow->maximum = (65535/512);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	227f      	movs	r2, #127	; 0x7f
 8001760:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b43      	cmp	r3, #67	; 0x43
 8001768:	d112      	bne.n	8001790 <DeserializeConfiguration+0xf0>
				GenerateCossine(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f103 040c 	add.w	r4, r3, #12
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	4618      	mov	r0, r3
 8001774:	f007 fd48 	bl	8009208 <atoi>
 8001778:	4605      	mov	r5, r0
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4618      	mov	r0, r3
 800177e:	f007 fd43 	bl	8009208 <atoi>
 8001782:	4603      	mov	r3, r0
 8001784:	227f      	movs	r2, #127	; 0x7f
 8001786:	4629      	mov	r1, r5
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fa85 	bl	8001c98 <GenerateCossine>
 800178e:	e071      	b.n	8001874 <DeserializeConfiguration+0x1d4>
			}
			else if (*configurationParameters[3] == 'H'){
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b48      	cmp	r3, #72	; 0x48
 8001796:	d112      	bne.n	80017be <DeserializeConfiguration+0x11e>
				GenerateHigh(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f103 040c 	add.w	r4, r3, #12
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 fd31 	bl	8009208 <atoi>
 80017a6:	4605      	mov	r5, r0
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f007 fd2c 	bl	8009208 <atoi>
 80017b0:	4603      	mov	r3, r0
 80017b2:	227f      	movs	r2, #127	; 0x7f
 80017b4:	4629      	mov	r1, r5
 80017b6:	4620      	mov	r0, r4
 80017b8:	f000 fadc 	bl	8001d74 <GenerateHigh>
 80017bc:	e05a      	b.n	8001874 <DeserializeConfiguration+0x1d4>
			}
			else if (*configurationParameters[3] == 'L'){
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b4c      	cmp	r3, #76	; 0x4c
 80017c4:	d112      	bne.n	80017ec <DeserializeConfiguration+0x14c>
				GenerateLow(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f103 040c 	add.w	r4, r3, #12
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fd1a 	bl	8009208 <atoi>
 80017d4:	4605      	mov	r5, r0
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fd15 	bl	8009208 <atoi>
 80017de:	4603      	mov	r3, r0
 80017e0:	227f      	movs	r2, #127	; 0x7f
 80017e2:	4629      	mov	r1, r5
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 faea 	bl	8001dbe <GenerateLow>
 80017ea:	e043      	b.n	8001874 <DeserializeConfiguration+0x1d4>
			}
			else if (*configurationParameters[3] == 'P'){
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b50      	cmp	r3, #80	; 0x50
 80017f2:	d112      	bne.n	800181a <DeserializeConfiguration+0x17a>
				GenerateParabola(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f103 040c 	add.w	r4, r3, #12
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fd03 	bl	8009208 <atoi>
 8001802:	4605      	mov	r5, r0
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4618      	mov	r0, r3
 8001808:	f007 fcfe 	bl	8009208 <atoi>
 800180c:	4603      	mov	r3, r0
 800180e:	227f      	movs	r2, #127	; 0x7f
 8001810:	4629      	mov	r1, r5
 8001812:	4620      	mov	r0, r4
 8001814:	f000 fb84 	bl	8001f20 <GenerateParabola>
 8001818:	e02c      	b.n	8001874 <DeserializeConfiguration+0x1d4>
			}
			else if (*configurationParameters[3] == 'R'){
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b52      	cmp	r3, #82	; 0x52
 8001820:	d112      	bne.n	8001848 <DeserializeConfiguration+0x1a8>
				GenerateRamp(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f103 040c 	add.w	r4, r3, #12
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fcec 	bl	8009208 <atoi>
 8001830:	4605      	mov	r5, r0
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4618      	mov	r0, r3
 8001836:	f007 fce7 	bl	8009208 <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	227f      	movs	r2, #127	; 0x7f
 800183e:	4629      	mov	r1, r5
 8001840:	4620      	mov	r0, r4
 8001842:	f000 fada 	bl	8001dfa <GenerateRamp>
 8001846:	e015      	b.n	8001874 <DeserializeConfiguration+0x1d4>
			}
			else if (*configurationParameters[3] == 'S'){
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b53      	cmp	r3, #83	; 0x53
 800184e:	d111      	bne.n	8001874 <DeserializeConfiguration+0x1d4>
				GenerateSquare(yellow->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f103 040c 	add.w	r4, r3, #12
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4618      	mov	r0, r3
 800185a:	f007 fcd5 	bl	8009208 <atoi>
 800185e:	4605      	mov	r5, r0
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4618      	mov	r0, r3
 8001864:	f007 fcd0 	bl	8009208 <atoi>
 8001868:	4603      	mov	r3, r0
 800186a:	227f      	movs	r2, #127	; 0x7f
 800186c:	4629      	mov	r1, r5
 800186e:	4620      	mov	r0, r4
 8001870:	f000 fb08 	bl	8001e84 <GenerateSquare>
			}
			yellow->phase = atoi(configurationParameters[4]);
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	4618      	mov	r0, r3
 8001878:	f007 fcc6 	bl	8009208 <atoi>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f8c3 2fac 	str.w	r2, [r3, #4012]	; 0xfac
 8001884:	e1fa      	b.n	8001c7c <DeserializeConfiguration+0x5dc>
		}
		else if (*configurationParameters[0] == 'O'){
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b4f      	cmp	r3, #79	; 0x4f
 800188c:	f040 80a7 	bne.w	80019de <DeserializeConfiguration+0x33e>
			orange->samples = atoi(configurationParameters[1]);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4618      	mov	r0, r3
 8001894:	f007 fcb8 	bl	8009208 <atoi>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
			orange->delay = atoi(configurationParameters[2]);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fcb1 	bl	8009208 <atoi>
 80018a6:	4602      	mov	r2, r0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]
			orange->maximum = (65535/512);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	227f      	movs	r2, #127	; 0x7f
 80018b0:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b43      	cmp	r3, #67	; 0x43
 80018b8:	d112      	bne.n	80018e0 <DeserializeConfiguration+0x240>
				GenerateCossine(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 040c 	add.w	r4, r3, #12
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f007 fca0 	bl	8009208 <atoi>
 80018c8:	4605      	mov	r5, r0
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fc9b 	bl	8009208 <atoi>
 80018d2:	4603      	mov	r3, r0
 80018d4:	227f      	movs	r2, #127	; 0x7f
 80018d6:	4629      	mov	r1, r5
 80018d8:	4620      	mov	r0, r4
 80018da:	f000 f9dd 	bl	8001c98 <GenerateCossine>
 80018de:	e075      	b.n	80019cc <DeserializeConfiguration+0x32c>
			}
			else if (*configurationParameters[3] == 'H'){
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b48      	cmp	r3, #72	; 0x48
 80018e6:	d112      	bne.n	800190e <DeserializeConfiguration+0x26e>
				GenerateHigh(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 040c 	add.w	r4, r3, #12
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f007 fc89 	bl	8009208 <atoi>
 80018f6:	4605      	mov	r5, r0
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 fc84 	bl	8009208 <atoi>
 8001900:	4603      	mov	r3, r0
 8001902:	227f      	movs	r2, #127	; 0x7f
 8001904:	4629      	mov	r1, r5
 8001906:	4620      	mov	r0, r4
 8001908:	f000 fa34 	bl	8001d74 <GenerateHigh>
 800190c:	e05e      	b.n	80019cc <DeserializeConfiguration+0x32c>
			}
			else if (*configurationParameters[3] == 'L'){
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b4c      	cmp	r3, #76	; 0x4c
 8001914:	d112      	bne.n	800193c <DeserializeConfiguration+0x29c>
				GenerateLow(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f103 040c 	add.w	r4, r3, #12
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4618      	mov	r0, r3
 8001920:	f007 fc72 	bl	8009208 <atoi>
 8001924:	4605      	mov	r5, r0
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fc6d 	bl	8009208 <atoi>
 800192e:	4603      	mov	r3, r0
 8001930:	227f      	movs	r2, #127	; 0x7f
 8001932:	4629      	mov	r1, r5
 8001934:	4620      	mov	r0, r4
 8001936:	f000 fa42 	bl	8001dbe <GenerateLow>
 800193a:	e047      	b.n	80019cc <DeserializeConfiguration+0x32c>
			}
			else if (*configurationParameters[3] == 'P'){
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b50      	cmp	r3, #80	; 0x50
 8001942:	d112      	bne.n	800196a <DeserializeConfiguration+0x2ca>
				GenerateParabola(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 040c 	add.w	r4, r3, #12
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4618      	mov	r0, r3
 800194e:	f007 fc5b 	bl	8009208 <atoi>
 8001952:	4605      	mov	r5, r0
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4618      	mov	r0, r3
 8001958:	f007 fc56 	bl	8009208 <atoi>
 800195c:	4603      	mov	r3, r0
 800195e:	227f      	movs	r2, #127	; 0x7f
 8001960:	4629      	mov	r1, r5
 8001962:	4620      	mov	r0, r4
 8001964:	f000 fadc 	bl	8001f20 <GenerateParabola>
 8001968:	e030      	b.n	80019cc <DeserializeConfiguration+0x32c>
			}
			else if (*configurationParameters[3] == 'R'){
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b52      	cmp	r3, #82	; 0x52
 8001970:	d116      	bne.n	80019a0 <DeserializeConfiguration+0x300>
				GenerateRamp(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 040c 	add.w	r4, r3, #12
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4618      	mov	r0, r3
 800197c:	f007 fc44 	bl	8009208 <atoi>
 8001980:	4605      	mov	r5, r0
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fc3f 	bl	8009208 <atoi>
 800198a:	4603      	mov	r3, r0
 800198c:	227f      	movs	r2, #127	; 0x7f
 800198e:	4629      	mov	r1, r5
 8001990:	4620      	mov	r0, r4
 8001992:	f000 fa32 	bl	8001dfa <GenerateRamp>
 8001996:	e019      	b.n	80019cc <DeserializeConfiguration+0x32c>
 8001998:	0800c2e4 	.word	0x0800c2e4
 800199c:	0800c2e8 	.word	0x0800c2e8
			}
			else if (*configurationParameters[3] == 'S'){
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b53      	cmp	r3, #83	; 0x53
 80019a6:	d111      	bne.n	80019cc <DeserializeConfiguration+0x32c>
				GenerateSquare(orange->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f103 040c 	add.w	r4, r3, #12
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 fc29 	bl	8009208 <atoi>
 80019b6:	4605      	mov	r5, r0
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f007 fc24 	bl	8009208 <atoi>
 80019c0:	4603      	mov	r3, r0
 80019c2:	227f      	movs	r2, #127	; 0x7f
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f000 fa5c 	bl	8001e84 <GenerateSquare>
			}
			orange->phase = atoi(configurationParameters[4]);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	4618      	mov	r0, r3
 80019d0:	f007 fc1a 	bl	8009208 <atoi>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8c3 2fac 	str.w	r2, [r3, #4012]	; 0xfac
 80019dc:	e14e      	b.n	8001c7c <DeserializeConfiguration+0x5dc>
		}
		else if (*configurationParameters[0] == 'R'){
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b52      	cmp	r3, #82	; 0x52
 80019e4:	f040 80a3 	bne.w	8001b2e <DeserializeConfiguration+0x48e>
			red->samples = atoi(configurationParameters[1]);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f007 fc0c 	bl	8009208 <atoi>
 80019f0:	4602      	mov	r2, r0
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	601a      	str	r2, [r3, #0]
			red->delay = atoi(configurationParameters[2]);
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 fc05 	bl	8009208 <atoi>
 80019fe:	4602      	mov	r2, r0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	605a      	str	r2, [r3, #4]
			red->maximum = (65535/512);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	227f      	movs	r2, #127	; 0x7f
 8001a08:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b43      	cmp	r3, #67	; 0x43
 8001a10:	d112      	bne.n	8001a38 <DeserializeConfiguration+0x398>
				GenerateCossine(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f103 040c 	add.w	r4, r3, #12
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 fbf4 	bl	8009208 <atoi>
 8001a20:	4605      	mov	r5, r0
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f007 fbef 	bl	8009208 <atoi>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	227f      	movs	r2, #127	; 0x7f
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4620      	mov	r0, r4
 8001a32:	f000 f931 	bl	8001c98 <GenerateCossine>
 8001a36:	e071      	b.n	8001b1c <DeserializeConfiguration+0x47c>
			}
			else if (*configurationParameters[3] == 'H'){
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b48      	cmp	r3, #72	; 0x48
 8001a3e:	d112      	bne.n	8001a66 <DeserializeConfiguration+0x3c6>
				GenerateHigh(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f103 040c 	add.w	r4, r3, #12
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 fbdd 	bl	8009208 <atoi>
 8001a4e:	4605      	mov	r5, r0
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 fbd8 	bl	8009208 <atoi>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	227f      	movs	r2, #127	; 0x7f
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f000 f988 	bl	8001d74 <GenerateHigh>
 8001a64:	e05a      	b.n	8001b1c <DeserializeConfiguration+0x47c>
			}
			else if (*configurationParameters[3] == 'L'){
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b4c      	cmp	r3, #76	; 0x4c
 8001a6c:	d112      	bne.n	8001a94 <DeserializeConfiguration+0x3f4>
				GenerateLow(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f103 040c 	add.w	r4, r3, #12
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f007 fbc6 	bl	8009208 <atoi>
 8001a7c:	4605      	mov	r5, r0
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 fbc1 	bl	8009208 <atoi>
 8001a86:	4603      	mov	r3, r0
 8001a88:	227f      	movs	r2, #127	; 0x7f
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 f996 	bl	8001dbe <GenerateLow>
 8001a92:	e043      	b.n	8001b1c <DeserializeConfiguration+0x47c>
			}
			else if (*configurationParameters[3] == 'P'){
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b50      	cmp	r3, #80	; 0x50
 8001a9a:	d112      	bne.n	8001ac2 <DeserializeConfiguration+0x422>
				GenerateParabola(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f103 040c 	add.w	r4, r3, #12
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f007 fbaf 	bl	8009208 <atoi>
 8001aaa:	4605      	mov	r5, r0
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f007 fbaa 	bl	8009208 <atoi>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	227f      	movs	r2, #127	; 0x7f
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4620      	mov	r0, r4
 8001abc:	f000 fa30 	bl	8001f20 <GenerateParabola>
 8001ac0:	e02c      	b.n	8001b1c <DeserializeConfiguration+0x47c>
			}
			else if (*configurationParameters[3] == 'R'){
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b52      	cmp	r3, #82	; 0x52
 8001ac8:	d112      	bne.n	8001af0 <DeserializeConfiguration+0x450>
				GenerateRamp(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f103 040c 	add.w	r4, r3, #12
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f007 fb98 	bl	8009208 <atoi>
 8001ad8:	4605      	mov	r5, r0
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f007 fb93 	bl	8009208 <atoi>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	227f      	movs	r2, #127	; 0x7f
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f000 f986 	bl	8001dfa <GenerateRamp>
 8001aee:	e015      	b.n	8001b1c <DeserializeConfiguration+0x47c>
			}
			else if (*configurationParameters[3] == 'S'){
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b53      	cmp	r3, #83	; 0x53
 8001af6:	d111      	bne.n	8001b1c <DeserializeConfiguration+0x47c>
				GenerateSquare(red->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f103 040c 	add.w	r4, r3, #12
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 fb81 	bl	8009208 <atoi>
 8001b06:	4605      	mov	r5, r0
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f007 fb7c 	bl	8009208 <atoi>
 8001b10:	4603      	mov	r3, r0
 8001b12:	227f      	movs	r2, #127	; 0x7f
 8001b14:	4629      	mov	r1, r5
 8001b16:	4620      	mov	r0, r4
 8001b18:	f000 f9b4 	bl	8001e84 <GenerateSquare>
			}
			red->phase = atoi(configurationParameters[4]);
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fb72 	bl	8009208 <atoi>
 8001b24:	4602      	mov	r2, r0
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f8c3 2fac 	str.w	r2, [r3, #4012]	; 0xfac
 8001b2c:	e0a6      	b.n	8001c7c <DeserializeConfiguration+0x5dc>
		}
		else if (*configurationParameters[0] == 'B'){
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b42      	cmp	r3, #66	; 0x42
 8001b34:	f040 80a2 	bne.w	8001c7c <DeserializeConfiguration+0x5dc>
			blue->samples = atoi(configurationParameters[1]);
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fb64 	bl	8009208 <atoi>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b44:	601a      	str	r2, [r3, #0]
			blue->delay = atoi(configurationParameters[2]);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 fb5d 	bl	8009208 <atoi>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b52:	605a      	str	r2, [r3, #4]
			blue->maximum = (65535/512);
 8001b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b56:	227f      	movs	r2, #127	; 0x7f
 8001b58:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b43      	cmp	r3, #67	; 0x43
 8001b60:	d112      	bne.n	8001b88 <DeserializeConfiguration+0x4e8>
				GenerateCossine(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b64:	f103 040c 	add.w	r4, r3, #12
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f007 fb4c 	bl	8009208 <atoi>
 8001b70:	4605      	mov	r5, r0
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f007 fb47 	bl	8009208 <atoi>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	227f      	movs	r2, #127	; 0x7f
 8001b7e:	4629      	mov	r1, r5
 8001b80:	4620      	mov	r0, r4
 8001b82:	f000 f889 	bl	8001c98 <GenerateCossine>
 8001b86:	e071      	b.n	8001c6c <DeserializeConfiguration+0x5cc>
			}
			else if (*configurationParameters[3] == 'H'){
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b48      	cmp	r3, #72	; 0x48
 8001b8e:	d112      	bne.n	8001bb6 <DeserializeConfiguration+0x516>
				GenerateHigh(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b92:	f103 040c 	add.w	r4, r3, #12
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 fb35 	bl	8009208 <atoi>
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f007 fb30 	bl	8009208 <atoi>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	227f      	movs	r2, #127	; 0x7f
 8001bac:	4629      	mov	r1, r5
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f000 f8e0 	bl	8001d74 <GenerateHigh>
 8001bb4:	e05a      	b.n	8001c6c <DeserializeConfiguration+0x5cc>
			}
			else if (*configurationParameters[3] == 'L'){
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b4c      	cmp	r3, #76	; 0x4c
 8001bbc:	d112      	bne.n	8001be4 <DeserializeConfiguration+0x544>
				GenerateLow(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc0:	f103 040c 	add.w	r4, r3, #12
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fb1e 	bl	8009208 <atoi>
 8001bcc:	4605      	mov	r5, r0
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f007 fb19 	bl	8009208 <atoi>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	227f      	movs	r2, #127	; 0x7f
 8001bda:	4629      	mov	r1, r5
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 f8ee 	bl	8001dbe <GenerateLow>
 8001be2:	e043      	b.n	8001c6c <DeserializeConfiguration+0x5cc>
			}
			else if (*configurationParameters[3] == 'P'){
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b50      	cmp	r3, #80	; 0x50
 8001bea:	d112      	bne.n	8001c12 <DeserializeConfiguration+0x572>
				GenerateParabola(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bee:	f103 040c 	add.w	r4, r3, #12
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f007 fb07 	bl	8009208 <atoi>
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 fb02 	bl	8009208 <atoi>
 8001c04:	4603      	mov	r3, r0
 8001c06:	227f      	movs	r2, #127	; 0x7f
 8001c08:	4629      	mov	r1, r5
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f988 	bl	8001f20 <GenerateParabola>
 8001c10:	e02c      	b.n	8001c6c <DeserializeConfiguration+0x5cc>
			}
			else if (*configurationParameters[3] == 'R'){
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b52      	cmp	r3, #82	; 0x52
 8001c18:	d112      	bne.n	8001c40 <DeserializeConfiguration+0x5a0>
				GenerateRamp(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1c:	f103 040c 	add.w	r4, r3, #12
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f007 faf0 	bl	8009208 <atoi>
 8001c28:	4605      	mov	r5, r0
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f007 faeb 	bl	8009208 <atoi>
 8001c32:	4603      	mov	r3, r0
 8001c34:	227f      	movs	r2, #127	; 0x7f
 8001c36:	4629      	mov	r1, r5
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f000 f8de 	bl	8001dfa <GenerateRamp>
 8001c3e:	e015      	b.n	8001c6c <DeserializeConfiguration+0x5cc>
			}
			else if (*configurationParameters[3] == 'S'){
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b53      	cmp	r3, #83	; 0x53
 8001c46:	d111      	bne.n	8001c6c <DeserializeConfiguration+0x5cc>
				GenerateSquare(blue->shape, atoi(configurationParameters[1]), (65535/512), atoi(configurationParameters[2]));
 8001c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c4a:	f103 040c 	add.w	r4, r3, #12
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 fad9 	bl	8009208 <atoi>
 8001c56:	4605      	mov	r5, r0
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 fad4 	bl	8009208 <atoi>
 8001c60:	4603      	mov	r3, r0
 8001c62:	227f      	movs	r2, #127	; 0x7f
 8001c64:	4629      	mov	r1, r5
 8001c66:	4620      	mov	r0, r4
 8001c68:	f000 f90c 	bl	8001e84 <GenerateSquare>
			}
			blue->phase = atoi(configurationParameters[4]);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 faca 	bl	8009208 <atoi>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c78:	f8c3 2fac 	str.w	r2, [r3, #4012]	; 0xfac
	for(int index = 0; index < 5; index++){
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7e:	3301      	adds	r3, #1
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	f77f ad32 	ble.w	80016ee <DeserializeConfiguration+0x4e>
		}
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3748      	adds	r7, #72	; 0x48
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	0000      	movs	r0, r0
	...

08001c98 <GenerateCossine>:

void GenerateCossine(int *cosinusoid, int samples, int maximum, int delay){
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
	float theta;
	float phases = 6.28/samples;
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f7fe fc34 	bl	8000514 <__aeabi_i2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	a12e      	add	r1, pc, #184	; (adr r1, 8001d6c <GenerateCossine+0xd4>)
 8001cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cb6:	f7fe fdc1 	bl	800083c <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff69 	bl	8000b98 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < samples; i++){
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e03c      	b.n	8001d4a <GenerateCossine+0xb2>
		theta = phases * i;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce2:	edc7 7a05 	vstr	s15, [r7, #20]
		cosinusoid[i] = floor(maximum*(cos(theta)+1));
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fc14 	bl	8000514 <__aeabi_i2d>
 8001cec:	4604      	mov	r4, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7fe fc21 	bl	8000538 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	ec43 2b10 	vmov	d0, r2, r3
 8001cfe:	f008 fb6f 	bl	800a3e0 <cos>
 8001d02:	ec51 0b10 	vmov	r0, r1, d0
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <GenerateCossine+0xd0>)
 8001d0c:	f7fe fab6 	bl	800027c <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fc66 	bl	80005e8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	ec43 2b17 	vmov	d7, r2, r3
 8001d24:	eeb0 0a47 	vmov.f32	s0, s14
 8001d28:	eef0 0a67 	vmov.f32	s1, s15
 8001d2c:	f008 fba8 	bl	800a480 <floor>
 8001d30:	ec51 0b10 	vmov	r0, r1, d0
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	18d4      	adds	r4, r2, r3
 8001d3c:	f7fe ff04 	bl	8000b48 <__aeabi_d2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbbe      	blt.n	8001cd0 <GenerateCossine+0x38>
	}
	Rotate(cosinusoid, samples, delay);
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f98a 	bl	8002070 <Rotate>
}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	3ff00000 	.word	0x3ff00000
 8001d6c:	51eb851f 	.word	0x51eb851f
 8001d70:	40191eb8 	.word	0x40191eb8

08001d74 <GenerateHigh>:

void GenerateHigh(int *fixed, int samples, int maximum, int delay){
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < samples; i++){
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e011      	b.n	8001dac <GenerateHigh+0x38>
		fixed[i] = floor(maximum);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fbc3 	bl	8000514 <__aeabi_i2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	0089      	lsls	r1, r1, #2
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	1844      	adds	r4, r0, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe fed3 	bl	8000b48 <__aeabi_d2iz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbe9      	blt.n	8001d88 <GenerateHigh+0x14>
	}
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <GenerateLow>:

void GenerateLow(int *fixed, int samples, int maximum, int delay){
 8001dbe:	b480      	push	{r7}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < samples; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e008      	b.n	8001de4 <GenerateLow+0x26>
		fixed[i] = 0;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < samples; i++){
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf2      	blt.n	8001dd2 <GenerateLow+0x14>
	}
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <GenerateRamp>:

void GenerateRamp(int *ramp, int samples, int maximum, int delay){
 8001dfa:	b590      	push	{r4, r7, lr}
 8001dfc:	b087      	sub	sp, #28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
	float theta = maximum/(float)samples;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e20:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e01f      	b.n	8001e6a <GenerateRamp+0x70>
		ramp[i] = floor(i*theta);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	ee17 0a90 	vmov	r0, s15
 8001e40:	f7fe fb7a 	bl	8000538 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b10 	vmov	d0, r2, r3
 8001e4c:	f008 fb18 	bl	800a480 <floor>
 8001e50:	ec51 0b10 	vmov	r0, r1, d0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	18d4      	adds	r4, r2, r3
 8001e5c:	f7fe fe74 	bl	8000b48 <__aeabi_d2iz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dbdb      	blt.n	8001e2a <GenerateRamp+0x30>
	}
	Rotate(ramp, samples, delay);
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f8fa 	bl	8002070 <Rotate>
}
 8001e7c:	bf00      	nop
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}

08001e84 <GenerateSquare>:

void GenerateSquare(int *square, int samples, int maximum, int delay){
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < floor(samples/2); i++){
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e008      	b.n	8001eaa <GenerateSquare+0x26>
		square[i] = maximum;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < floor(samples/2); i++){
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7fe fb32 	bl	8000514 <__aeabi_i2d>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0fda      	lsrs	r2, r3, #31
 8001eb8:	4413      	add	r3, r2
 8001eba:	105b      	asrs	r3, r3, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb29 	bl	8000514 <__aeabi_i2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe fdff 	bl	8000acc <__aeabi_dcmplt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e1      	bne.n	8001e98 <GenerateSquare+0x14>
	}
	for (int i = floor(samples/2); i < samples; i++){
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0fda      	lsrs	r2, r3, #31
 8001ed8:	4413      	add	r3, r2
 8001eda:	105b      	asrs	r3, r3, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb19 	bl	8000514 <__aeabi_i2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe2d 	bl	8000b48 <__aeabi_d2iz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e008      	b.n	8001f06 <GenerateSquare+0x82>
		square[i] = 0;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
	for (int i = floor(samples/2); i < samples; i++){
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	3301      	adds	r3, #1
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbf2      	blt.n	8001ef4 <GenerateSquare+0x70>
	}
	Rotate(square, samples, delay);
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f8ac 	bl	8002070 <Rotate>
}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}

08001f20 <GenerateParabola>:

void GenerateParabola(int *parabola, int samples, int maximum, int delay){
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
	float a = (4*maximum)/(pow(samples,2));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faee 	bl	8000514 <__aeabi_i2d>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460d      	mov	r5, r1
 8001f3c:	68b8      	ldr	r0, [r7, #8]
 8001f3e:	f7fe fae9 	bl	8000514 <__aeabi_i2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002068 <GenerateParabola+0x148>
 8001f4a:	ec43 2b10 	vmov	d0, r2, r3
 8001f4e:	f008 fb17 	bl	800a580 <pow>
 8001f52:	ec53 2b10 	vmov	r2, r3, d0
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe fc6f 	bl	800083c <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe17 	bl	8000b98 <__aeabi_d2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]
	float b = -(4*maximum)/(float)samples;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	079b      	lsls	r3, r3, #30
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8e:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = maximum;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	e050      	b.n	8002048 <GenerateParabola+0x128>
		parabola[i] = floor(a*pow(i,2) + b*i + c);
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f7fe fac6 	bl	8000538 <__aeabi_f2d>
 8001fac:	4604      	mov	r4, r0
 8001fae:	460d      	mov	r5, r1
 8001fb0:	69f8      	ldr	r0, [r7, #28]
 8001fb2:	f7fe faaf 	bl	8000514 <__aeabi_i2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002068 <GenerateParabola+0x148>
 8001fbe:	ec43 2b10 	vmov	d0, r2, r3
 8001fc2:	f008 fadd 	bl	800a580 <pow>
 8001fc6:	ec53 2b10 	vmov	r2, r3, d0
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe fb0b 	bl	80005e8 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4614      	mov	r4, r2
 8001fd8:	461d      	mov	r5, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	ee17 0a90 	vmov	r0, s15
 8001ff0:	f7fe faa2 	bl	8000538 <__aeabi_f2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	f7fe f93e 	bl	800027c <__adddf3>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	6938      	ldr	r0, [r7, #16]
 800200a:	f7fe fa95 	bl	8000538 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe f931 	bl	800027c <__adddf3>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ec43 2b17 	vmov	d7, r2, r3
 8002022:	eeb0 0a47 	vmov.f32	s0, s14
 8002026:	eef0 0a67 	vmov.f32	s1, s15
 800202a:	f008 fa29 	bl	800a480 <floor>
 800202e:	ec51 0b10 	vmov	r0, r1, d0
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	18d4      	adds	r4, r2, r3
 800203a:	f7fe fd85 	bl	8000b48 <__aeabi_d2iz>
 800203e:	4603      	mov	r3, r0
 8002040:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbaa      	blt.n	8001fa6 <GenerateParabola+0x86>
	}
	Rotate(parabola, samples, delay);
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f80b 	bl	8002070 <Rotate>
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	40000000 	.word	0x40000000

08002070 <Rotate>:

void Rotate(int *shape, int samples, int delay){
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
	for (int index; index < delay; index++){
 800207c:	e01f      	b.n	80020be <Rotate+0x4e>
		int temp = shape[0];
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
		for (int allIndex; allIndex < samples - 1; allIndex++){
 8002084:	e00d      	b.n	80020a2 <Rotate+0x32>
			shape[allIndex] = shape[allIndex + 1];
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3301      	adds	r3, #1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	441a      	add	r2, r3
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	440b      	add	r3, r1
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	601a      	str	r2, [r3, #0]
		for (int allIndex; allIndex < samples - 1; allIndex++){
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3301      	adds	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbec      	blt.n	8002086 <Rotate+0x16>
		}
		shape[samples] = temp;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
	for (int index; index < delay; index++){
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbdb      	blt.n	800207e <Rotate+0xe>
	}
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3724      	adds	r7, #36	; 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	e7fe      	b.n	80020dc <Error_Handler+0x8>
	...

080020e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_MspInit+0x4c>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_MspInit+0x4c>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_MspInit+0x4c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800211e:	2007      	movs	r0, #7
 8002120:	f000 fbf6 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_I2C_MspInit+0x84>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12c      	bne.n	80021ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800216e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002174:	2312      	movs	r3, #18
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002180:	2304      	movs	r3, #4
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <HAL_I2C_MspInit+0x8c>)
 800218c:	f000 fc02 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 800219a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_I2C_MspInit+0x88>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40005400 	.word	0x40005400
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_I2S_MspInit+0xc0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d14a      	bne.n	8002278 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_I2S_MspInit+0xc4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002236:	2310      	movs	r3, #16
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002246:	2306      	movs	r3, #6
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <HAL_I2S_MspInit+0xc8>)
 8002252:	f000 fb9f 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002256:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002268:	2306      	movs	r3, #6
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_I2S_MspInit+0xcc>)
 8002274:	f000 fb8e 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40003c00 	.word	0x40003c00
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020800 	.word	0x40020800

08002290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d12b      	bne.n	800230a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a10      	ldr	r2, [pc, #64]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_SPI_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80022ea:	23e0      	movs	r3, #224	; 0xe0
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fa:	2305      	movs	r3, #5
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <HAL_SPI_MspInit+0x8c>)
 8002306:	f000 fb45 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40013000 	.word	0x40013000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_TIM_Base_MspInit+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10d      	bne.n	800234e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_TIM_Base_MspInit+0x40>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_TIM_Base_MspInit+0x40>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_TIM_Base_MspInit+0x40>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40000800 	.word	0x40000800
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_MspPostInit+0x68>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11e      	bne.n	80023c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80023a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_TIM_MspPostInit+0x70>)
 80023c0:	f000 fae8 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020c00 	.word	0x40020c00

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <NMI_Handler+0x4>

080023de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler+0x4>

080023ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002424:	f000 f960 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <OTG_FS_IRQHandler+0x10>)
 8002432:	f000 fecf 	bl	80031d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200005d8 	.word	0x200005d8

08002440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
	return 1;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_kill>:

int _kill(int pid, int sig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800245a:	f006 fed9 	bl	8009210 <__errno>
 800245e:	4603      	mov	r3, r0
 8002460:	2216      	movs	r2, #22
 8002462:	601a      	str	r2, [r3, #0]
	return -1;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_exit>:

void _exit (int status)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ffe7 	bl	8002450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002482:	e7fe      	b.n	8002482 <_exit+0x12>

08002484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e00a      	b.n	80024ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002496:	f3af 8000 	nop.w
 800249a:	4601      	mov	r1, r0
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	60ba      	str	r2, [r7, #8]
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbf0      	blt.n	8002496 <_read+0x12>
	}

return len;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e009      	b.n	80024e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf1      	blt.n	80024d0 <_write+0x12>
	}
	return len;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_close>:

int _close(int file)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	return -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800251e:	605a      	str	r2, [r3, #4]
	return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_isatty>:

int _isatty(int file)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	return 1;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	return 0;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <_sbrk+0x5c>)
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_sbrk+0x60>)
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_sbrk+0x64>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <_sbrk+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d207      	bcs.n	80025a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002590:	f006 fe3e 	bl	8009210 <__errno>
 8002594:	4603      	mov	r3, r0
 8002596:	220c      	movs	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e009      	b.n	80025b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <_sbrk+0x64>)
 80025b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20020000 	.word	0x20020000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	200000b0 	.word	0x200000b0
 80025c8:	200008f0 	.word	0x200008f0

080025cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x20>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <SystemInit+0x20>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025f6:	490e      	ldr	r1, [pc, #56]	; (8002630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800260c:	4c0b      	ldr	r4, [pc, #44]	; (800263c <LoopFillZerobss+0x26>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800261a:	f7ff ffd7 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f006 fdfd 	bl	800921c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002622:	f7fe fc85 	bl	8000f30 <main>
  bx  lr    
 8002626:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002630:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002634:	0800c780 	.word	0x0800c780
  ldr r2, =_sbss
 8002638:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800263c:	200008ec 	.word	0x200008ec

08002640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <ADC_IRQHandler>
	...

08002644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_Init+0x40>)
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_Init+0x40>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_Init+0x40>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 f94f 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f808 	bl	8002688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002678:	f7ff fd32 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x54>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x58>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f967 	bl	800297a <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00e      	b.n	80026d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d80a      	bhi.n	80026d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f000 f92f 	bl	8002926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_InitTick+0x5c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008
 800270c:	200001fc 	.word	0x200001fc

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	200001fc 	.word	0x200001fc

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <__NVIC_EnableIRQ+0x38>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	; (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff29 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff3e 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff8e 	bl	8002864 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff31 	bl	80027d4 <__NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffa2 	bl	80028cc <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e16b      	b.n	8002c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 815a 	bne.w	8002c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80b4 	beq.w	8002c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_GPIO_Init+0x310>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x320>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x21a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x216>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_GPIO_Init+0x328>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_GPIO_Init+0x32c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x20e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x20a>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00e      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e00c      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00a      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_GPIO_Init+0x310>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfe:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f ae90 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40021400 	.word	0x40021400
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40021c00 	.word	0x40021c00
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d00:	b08f      	sub	sp, #60	; 0x3c
 8002d02:	af0a      	add	r7, sp, #40	; 0x28
 8002d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e054      	b.n	8002dba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f006 f810 	bl	8008d50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f830 	bl	8006db4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	687e      	ldr	r6, [r7, #4]
 8002d5c:	466d      	mov	r5, sp
 8002d5e:	f106 0410 	add.w	r4, r6, #16
 8002d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d72:	1d33      	adds	r3, r6, #4
 8002d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f003 ffaa 	bl	8006cd0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f827 	bl	8006dd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	687e      	ldr	r6, [r7, #4]
 8002d90:	466d      	mov	r5, sp
 8002d92:	f106 0410 	add.w	r4, r6, #16
 8002d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da6:	1d33      	adds	r3, r6, #4
 8002da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002daa:	6838      	ldr	r0, [r7, #0]
 8002dac:	f004 f98e 	bl	80070cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b089      	sub	sp, #36	; 0x24
 8002dc6:	af04      	add	r7, sp, #16
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	4608      	mov	r0, r1
 8002dcc:	4611      	mov	r1, r2
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	70fb      	strb	r3, [r7, #3]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70bb      	strb	r3, [r7, #2]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_HCD_HC_Init+0x28>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e076      	b.n	8002ed8 <HAL_HCD_HC_Init+0x116>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	333d      	adds	r3, #61	; 0x3d
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3338      	adds	r3, #56	; 0x38
 8002e12:	787a      	ldrb	r2, [r7, #1]
 8002e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3340      	adds	r3, #64	; 0x40
 8002e24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e26:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3339      	adds	r3, #57	; 0x39
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333f      	adds	r3, #63	; 0x3f
 8002e48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	78ba      	ldrb	r2, [r7, #2]
 8002e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e56:	b2d0      	uxtb	r0, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	333a      	adds	r3, #58	; 0x3a
 8002e64:	4602      	mov	r2, r0
 8002e66:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da09      	bge.n	8002e84 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	333b      	adds	r3, #59	; 0x3b
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e008      	b.n	8002e96 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	333b      	adds	r3, #59	; 0x3b
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333c      	adds	r3, #60	; 0x3c
 8002ea4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ea8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	787c      	ldrb	r4, [r7, #1]
 8002eb0:	78ba      	ldrb	r2, [r7, #2]
 8002eb2:	78f9      	ldrb	r1, [r7, #3]
 8002eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	f004 fa51 	bl	800736c <USB_HC_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}

08002ee0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_HCD_HC_Halt+0x1e>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00f      	b.n	8002f1e <HAL_HCD_HC_Halt+0x3e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fc8d 	bl	800782e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	70fb      	strb	r3, [r7, #3]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70bb      	strb	r3, [r7, #2]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	333b      	adds	r3, #59	; 0x3b
 8002f50:	78ba      	ldrb	r2, [r7, #2]
 8002f52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	333f      	adds	r3, #63	; 0x3f
 8002f62:	787a      	ldrb	r2, [r7, #1]
 8002f64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f66:	7c3b      	ldrb	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3342      	adds	r3, #66	; 0x42
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	333d      	adds	r3, #61	; 0x3d
 8002f8c:	7f3a      	ldrb	r2, [r7, #28]
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e008      	b.n	8002fa4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3342      	adds	r3, #66	; 0x42
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f200 80c6 	bhi.w	8003138 <HAL_HCD_HC_SubmitRequest+0x210>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08003125 	.word	0x08003125
 8002fbc:	08003029 	.word	0x08003029
 8002fc0:	080030a7 	.word	0x080030a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fc4:	7c3b      	ldrb	r3, [r7, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 80b8 	bne.w	800313c <HAL_HCD_HC_SubmitRequest+0x214>
 8002fcc:	78bb      	ldrb	r3, [r7, #2]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 80b4 	bne.w	800313c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fd4:	8b3b      	ldrh	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3355      	adds	r3, #85	; 0x55
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3355      	adds	r3, #85	; 0x55
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3342      	adds	r3, #66	; 0x42
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003012:	e093      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3342      	adds	r3, #66	; 0x42
 8003022:	2202      	movs	r2, #2
 8003024:	701a      	strb	r2, [r3, #0]
      break;
 8003026:	e089      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11d      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3355      	adds	r3, #85	; 0x55
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3342      	adds	r3, #66	; 0x42
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003054:	e073      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
      break;
 8003068:	e069      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3354      	adds	r3, #84	; 0x54
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3342      	adds	r3, #66	; 0x42
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
      break;
 8003090:	e055      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3342      	adds	r3, #66	; 0x42
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
      break;
 80030a4:	e04b      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11d      	bne.n	80030e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3355      	adds	r3, #85	; 0x55
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3342      	adds	r3, #66	; 0x42
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030d2:	e034      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3342      	adds	r3, #66	; 0x42
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e02a      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3354      	adds	r3, #84	; 0x54
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d109      	bne.n	8003110 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3342      	adds	r3, #66	; 0x42
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
      break;
 800310e:	e016      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3342      	adds	r3, #66	; 0x42
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
      break;
 8003122:	e00c      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3342      	adds	r3, #66	; 0x42
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
      break;
 8003136:	e002      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003138:	bf00      	nop
 800313a:	e000      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800313c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3344      	adds	r3, #68	; 0x44
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	8b3a      	ldrh	r2, [r7, #24]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	202c      	movs	r0, #44	; 0x2c
 8003158:	fb00 f303 	mul.w	r3, r0, r3
 800315c:	440b      	add	r3, r1
 800315e:	334c      	adds	r3, #76	; 0x4c
 8003160:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3360      	adds	r3, #96	; 0x60
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3350      	adds	r3, #80	; 0x50
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3339      	adds	r3, #57	; 0x39
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3361      	adds	r3, #97	; 0x61
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	222c      	movs	r2, #44	; 0x2c
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	3338      	adds	r3, #56	; 0x38
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	18d1      	adds	r1, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	f004 f9e0 	bl	8007588 <USB_HC_StartXfer>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 ff2d 	bl	800704a <USB_GetMode>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 80f6 	bne.w	80033e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 ff11 	bl	8007024 <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80ec 	beq.w	80033e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 ff08 	bl	8007024 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321e:	d104      	bne.n	800322a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fef8 	bl	8007024 <USB_ReadInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323e:	d104      	bne.n	800324a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003248:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fee8 	bl	8007024 <USB_ReadInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325e:	d104      	bne.n	800326a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003268:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f003 fed8 	bl	8007024 <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d103      	bne.n	8003286 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 feca 	bl	8007024 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d11c      	bne.n	80032d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032b6:	2110      	movs	r1, #16
 80032b8:	6938      	ldr	r0, [r7, #16]
 80032ba:	f003 fdd9 	bl	8006e70 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f003 fdfa 	bl	8006eb8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 ffb2 	bl	8007234 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f005 fdbb 	bl	8008e4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fea2 	bl	8007024 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ea:	d102      	bne.n	80032f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f001 f9e7 	bl	80046c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fe94 	bl	8007024 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b08      	cmp	r3, #8
 8003304:	d106      	bne.n	8003314 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fd84 	bl	8008e14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2208      	movs	r2, #8
 8003312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fe83 	bl	8007024 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d101      	bne.n	800332c <HAL_HCD_IRQHandler+0x158>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_HCD_IRQHandler+0x15a>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0210 	bic.w	r2, r2, #16
 8003340:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 f8ea 	bl	800451c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fe61 	bl	8007024 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336c:	d13a      	bne.n	80033e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f004 fa4a 	bl	800780c <USB_HC_ReadInterrupt>
 8003378:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e025      	b.n	80033cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d018      	beq.n	80033c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033aa:	d106      	bne.n	80033ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f88f 	bl	80034d6 <HCD_HC_IN_IRQHandler>
 80033b8:	e005      	b.n	80033c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fcaa 	bl	8003d1a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3d4      	bcc.n	8003380 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	e000      	b.n	80033e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80033e2:	bf00      	nop
    }
  }
}
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_HCD_Start+0x16>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e013      	b.n	8003428 <HAL_HCD_Start+0x3e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f003 ff4a 	bl	80072a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fcba 	bl	8006d92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_HCD_Stop+0x16>
 8003442:	2302      	movs	r3, #2
 8003444:	e00d      	b.n	8003462 <HAL_HCD_Stop+0x32>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f004 fb44 	bl	8007ae0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3360      	adds	r3, #96	; 0x60
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3350      	adds	r3, #80	; 0x50
 80034ac:	681b      	ldr	r3, [r3, #0]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 ff3e 	bl	8007348 <USB_GetCurrentFrame>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d119      	bne.n	800353a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	2304      	movs	r3, #4
 8003516:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	440a      	add	r2, r1
 800352e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003532:	f043 0302 	orr.w	r3, r3, #2
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e101      	b.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003550:	d12b      	bne.n	80035aa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003564:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3361      	adds	r3, #97	; 0x61
 8003574:	2207      	movs	r2, #7
 8003576:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	440a      	add	r2, r1
 800358e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 f943 	bl	800782e <USB_HC_Halt>
 80035a8:	e0c9      	b.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d109      	bne.n	80035d4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2320      	movs	r3, #32
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	e0b4      	b.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d133      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3361      	adds	r3, #97	; 0x61
 8003618:	2205      	movs	r2, #5
 800361a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2310      	movs	r3, #16
 800362c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2308      	movs	r3, #8
 800363e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f004 f8ef 	bl	800782e <USB_HC_Halt>
 8003650:	e075      	b.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d134      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3361      	adds	r3, #97	; 0x61
 8003698:	2208      	movs	r2, #8
 800369a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	461a      	mov	r2, r3
 80036aa:	2310      	movs	r3, #16
 80036ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 f8ae 	bl	800782e <USB_HC_Halt>
 80036d2:	e034      	b.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d129      	bne.n	800373e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3361      	adds	r3, #97	; 0x61
 8003718:	2206      	movs	r2, #6
 800371a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f881 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d122      	bne.n	800379c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	440a      	add	r2, r1
 800376c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 f854 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003798:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800379a:	e2ba      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 811b 	bne.w	80039ea <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d019      	beq.n	80037f0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3348      	adds	r3, #72	; 0x48
 80037ca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	0159      	lsls	r1, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	202c      	movs	r0, #44	; 0x2c
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	440b      	add	r3, r1
 80037ec:	3350      	adds	r3, #80	; 0x50
 80037ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3361      	adds	r3, #97	; 0x61
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	335c      	adds	r3, #92	; 0x5c
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2301      	movs	r3, #1
 8003824:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	333f      	adds	r3, #63	; 0x3f
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333f      	adds	r3, #63	; 0x3f
 8003848:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800384a:	2b02      	cmp	r3, #2
 800384c:	d121      	bne.n	8003892 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	440a      	add	r2, r1
 8003864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f003 ffd8 	bl	800782e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	2310      	movs	r3, #16
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	e066      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	333f      	adds	r3, #63	; 0x3f
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d127      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3360      	adds	r3, #96	; 0x60
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	b2d9      	uxtb	r1, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	202c      	movs	r0, #44	; 0x2c
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f005 faba 	bl	8008e68 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038f4:	e034      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	333f      	adds	r3, #63	; 0x3f
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d12a      	bne.n	8003960 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3360      	adds	r3, #96	; 0x60
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3354      	adds	r3, #84	; 0x54
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3354      	adds	r3, #84	; 0x54
 8003940:	4602      	mov	r2, r0
 8003942:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	b2d9      	uxtb	r1, r3
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	202c      	movs	r0, #44	; 0x2c
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f005 fa84 	bl	8008e68 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d12b      	bne.n	80039c0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3348      	adds	r3, #72	; 0x48
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	202c      	movs	r0, #44	; 0x2c
 800397e:	fb00 f202 	mul.w	r2, r0, r2
 8003982:	440a      	add	r2, r1
 8003984:	3240      	adds	r2, #64	; 0x40
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	fbb3 f3f2 	udiv	r3, r3, r2
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 81be 	beq.w	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3354      	adds	r3, #84	; 0x54
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2d8      	uxtb	r0, r3
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3354      	adds	r3, #84	; 0x54
 80039ba:	4602      	mov	r2, r0
 80039bc:	701a      	strb	r2, [r3, #0]
}
 80039be:	e1a8      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3354      	adds	r3, #84	; 0x54
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2d8      	uxtb	r0, r3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3354      	adds	r3, #84	; 0x54
 80039e4:	4602      	mov	r2, r0
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	e193      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f040 8106 	bne.w	8003c0e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1c:	f023 0302 	bic.w	r3, r3, #2
 8003a20:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3361      	adds	r3, #97	; 0x61
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d109      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3360      	adds	r3, #96	; 0x60
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e0c9      	b.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3361      	adds	r3, #97	; 0x61
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d109      	bne.n	8003a72 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3360      	adds	r3, #96	; 0x60
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e0b5      	b.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3361      	adds	r3, #97	; 0x61
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d009      	beq.n	8003a9a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3361      	adds	r3, #97	; 0x61
 8003a94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d150      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	202c      	movs	r0, #44	; 0x2c
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	335c      	adds	r3, #92	; 0x5c
 8003aba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d912      	bls.n	8003af6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	2204      	movs	r2, #4
 8003af2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003af4:	e073      	b.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3360      	adds	r3, #96	; 0x60
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b1e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b26:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b3a:	e050      	b.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d122      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	2202      	movs	r2, #2
 8003b60:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b78:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e023      	b.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3361      	adds	r3, #97	; 0x61
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	d119      	bne.n	8003bde <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	335c      	adds	r3, #92	; 0x5c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	202c      	movs	r0, #44	; 0x2c
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	335c      	adds	r3, #92	; 0x5c
 8003bca:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3360      	adds	r3, #96	; 0x60
 8003bda:	2204      	movs	r2, #4
 8003bdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	2302      	movs	r3, #2
 8003bee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b2d9      	uxtb	r1, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	202c      	movs	r0, #44	; 0x2c
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3360      	adds	r3, #96	; 0x60
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f005 f92e 	bl	8008e68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c0c:	e081      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d176      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	333f      	adds	r3, #63	; 0x3f
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d121      	bne.n	8003c7c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	335c      	adds	r3, #92	; 0x5c
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f003 fdda 	bl	800782e <USB_HC_Halt>
 8003c7a:	e041      	b.n	8003d00 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	333f      	adds	r3, #63	; 0x3f
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	333f      	adds	r3, #63	; 0x3f
 8003c9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d12d      	bne.n	8003d00 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	335c      	adds	r3, #92	; 0x5c
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d120      	bne.n	8003d00 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3361      	adds	r3, #97	; 0x61
 8003ccc:	2203      	movs	r2, #3
 8003cce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fd97 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2310      	movs	r3, #16
 8003d10:	6093      	str	r3, [r2, #8]
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d119      	bne.n	8003d7e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d56:	461a      	mov	r2, r3
 8003d58:	2304      	movs	r3, #4
 8003d5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003d7c:	e3ca      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d13e      	bne.n	8003e12 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	2320      	movs	r3, #32
 8003da4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	333d      	adds	r3, #61	; 0x3d
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	f040 83ac 	bne.w	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	333d      	adds	r3, #61	; 0x3d
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3360      	adds	r3, #96	; 0x60
 8003ddc:	2202      	movs	r2, #2
 8003dde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 fd0f 	bl	800782e <USB_HC_Halt>
}
 8003e10:	e380      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d122      	bne.n	8003e70 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 fcea 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	461a      	mov	r2, r3
 8003e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e6c:	6093      	str	r3, [r2, #8]
}
 8003e6e:	e351      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d150      	bne.n	8003f28 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	335c      	adds	r3, #92	; 0x5c
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d111      	bne.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333d      	adds	r3, #61	; 0x3d
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2340      	movs	r3, #64	; 0x40
 8003ed0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 fc96 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2301      	movs	r3, #1
 8003f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3361      	adds	r3, #97	; 0x61
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
}
 8003f26:	e2f5      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d13c      	bne.n	8003fb8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	3361      	adds	r3, #97	; 0x61
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	333d      	adds	r3, #61	; 0x3d
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	335c      	adds	r3, #92	; 0x5c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 fc45 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2340      	movs	r3, #64	; 0x40
 8003fb4:	6093      	str	r3, [r2, #8]
}
 8003fb6:	e2ad      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d12a      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2308      	movs	r3, #8
 8003fde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f003 fc0f 	bl	800782e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	2205      	movs	r2, #5
 8004020:	701a      	strb	r2, [r3, #0]
}
 8004022:	e277      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b10      	cmp	r3, #16
 8004038:	d150      	bne.n	80040dc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	335c      	adds	r3, #92	; 0x5c
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3361      	adds	r3, #97	; 0x61
 800405a:	2203      	movs	r2, #3
 800405c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	333d      	adds	r3, #61	; 0x3d
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d112      	bne.n	8004098 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	333c      	adds	r3, #60	; 0x3c
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333d      	adds	r3, #61	; 0x3d
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f003 fbb3 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2310      	movs	r3, #16
 80040d8:	6093      	str	r3, [r2, #8]
}
 80040da:	e21b      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d174      	bne.n	80041dc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d121      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3361      	adds	r3, #97	; 0x61
 8004108:	2206      	movs	r2, #6
 800410a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	440a      	add	r2, r1
 8004122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fb79 	bl	800782e <USB_HC_Halt>
 800413c:	e044      	b.n	80041c8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	335c      	adds	r3, #92	; 0x5c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	202c      	movs	r0, #44	; 0x2c
 8004156:	fb00 f303 	mul.w	r3, r0, r3
 800415a:	440b      	add	r3, r1
 800415c:	335c      	adds	r3, #92	; 0x5c
 800415e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	335c      	adds	r3, #92	; 0x5c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d920      	bls.n	80041b6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	335c      	adds	r3, #92	; 0x5c
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3360      	adds	r3, #96	; 0x60
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	b2d9      	uxtb	r1, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	202c      	movs	r0, #44	; 0x2c
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3360      	adds	r3, #96	; 0x60
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f004 fe5a 	bl	8008e68 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041b4:	e008      	b.n	80041c8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	3360      	adds	r3, #96	; 0x60
 80041c4:	2202      	movs	r2, #2
 80041c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d4:	461a      	mov	r2, r3
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	6093      	str	r3, [r2, #8]
}
 80041da:	e19b      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d134      	bne.n	800425e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	440a      	add	r2, r1
 800420a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420e:	f043 0302 	orr.w	r3, r3, #2
 8004212:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fb05 	bl	800782e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	2310      	movs	r3, #16
 8004234:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	461a      	mov	r2, r3
 8004244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004248:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3361      	adds	r3, #97	; 0x61
 8004258:	2208      	movs	r2, #8
 800425a:	701a      	strb	r2, [r3, #0]
}
 800425c:	e15a      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	f040 814f 	bne.w	8004514 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f023 0302 	bic.w	r3, r3, #2
 8004294:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3361      	adds	r3, #97	; 0x61
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d17d      	bne.n	80043a6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3360      	adds	r3, #96	; 0x60
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	212c      	movs	r1, #44	; 0x2c
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	333f      	adds	r3, #63	; 0x3f
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d00a      	beq.n	80042e6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	333f      	adds	r3, #63	; 0x3f
 80042de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	f040 8100 	bne.w	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d113      	bne.n	8004316 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3355      	adds	r3, #85	; 0x55
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f083 0301 	eor.w	r3, r3, #1
 8004302:	b2d8      	uxtb	r0, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	4413      	add	r3, r2
 8004310:	3355      	adds	r3, #85	; 0x55
 8004312:	4602      	mov	r2, r0
 8004314:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 80e3 	bne.w	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80d8 	beq.w	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	334c      	adds	r3, #76	; 0x4c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	202c      	movs	r0, #44	; 0x2c
 800434c:	fb00 f202 	mul.w	r2, r0, r2
 8004350:	440a      	add	r2, r1
 8004352:	3240      	adds	r2, #64	; 0x40
 8004354:	8812      	ldrh	r2, [r2, #0]
 8004356:	4413      	add	r3, r2
 8004358:	3b01      	subs	r3, #1
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	fb00 f202 	mul.w	r2, r0, r2
 8004364:	440a      	add	r2, r1
 8004366:	3240      	adds	r2, #64	; 0x40
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	fbb3 f3f2 	udiv	r3, r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80b5 	beq.w	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3355      	adds	r3, #85	; 0x55
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f083 0301 	eor.w	r3, r3, #1
 8004390:	b2d8      	uxtb	r0, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3355      	adds	r3, #85	; 0x55
 80043a0:	4602      	mov	r2, r0
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e09f      	b.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3361      	adds	r3, #97	; 0x61
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d109      	bne.n	80043ce <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3360      	adds	r3, #96	; 0x60
 80043c8:	2202      	movs	r2, #2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e08b      	b.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3361      	adds	r3, #97	; 0x61
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d109      	bne.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3360      	adds	r3, #96	; 0x60
 80043f0:	2202      	movs	r2, #2
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e077      	b.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3361      	adds	r3, #97	; 0x61
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d109      	bne.n	800441e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3360      	adds	r3, #96	; 0x60
 8004418:	2205      	movs	r2, #5
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e063      	b.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3361      	adds	r3, #97	; 0x61
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b06      	cmp	r3, #6
 8004430:	d009      	beq.n	8004446 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3361      	adds	r3, #97	; 0x61
 8004440:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004442:	2b08      	cmp	r3, #8
 8004444:	d14f      	bne.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	335c      	adds	r3, #92	; 0x5c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	202c      	movs	r0, #44	; 0x2c
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	440b      	add	r3, r1
 8004464:	335c      	adds	r3, #92	; 0x5c
 8004466:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	335c      	adds	r3, #92	; 0x5c
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d912      	bls.n	80044a2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	335c      	adds	r3, #92	; 0x5c
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3360      	adds	r3, #96	; 0x60
 800449c:	2204      	movs	r2, #4
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e021      	b.n	80044e6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3360      	adds	r3, #96	; 0x60
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044ca:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044d2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	461a      	mov	r2, r3
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	461a      	mov	r2, r3
 80044f4:	2302      	movs	r3, #2
 80044f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	b2d9      	uxtb	r1, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	202c      	movs	r0, #44	; 0x2c
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	4413      	add	r3, r2
 8004508:	3360      	adds	r3, #96	; 0x60
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f004 fcaa 	bl	8008e68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	0c5b      	lsrs	r3, r3, #17
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004550:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d004      	beq.n	8004562 <HCD_RXQLVL_IRQHandler+0x46>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b05      	cmp	r3, #5
 800455c:	f000 80a9 	beq.w	80046b2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004560:	e0aa      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a6 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	3344      	adds	r3, #68	; 0x44
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 809b 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	3350      	adds	r3, #80	; 0x50
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	441a      	add	r2, r3
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	202c      	movs	r0, #44	; 0x2c
 800459a:	fb00 f303 	mul.w	r3, r0, r3
 800459e:	440b      	add	r3, r1
 80045a0:	334c      	adds	r3, #76	; 0x4c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d87a      	bhi.n	800469e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3344      	adds	r3, #68	; 0x44
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	b292      	uxth	r2, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	f002 fcd7 	bl	8006f74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3344      	adds	r3, #68	; 0x44
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	441a      	add	r2, r3
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	202c      	movs	r0, #44	; 0x2c
 80045e0:	fb00 f303 	mul.w	r3, r0, r3
 80045e4:	440b      	add	r3, r1
 80045e6:	3344      	adds	r3, #68	; 0x44
 80045e8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3350      	adds	r3, #80	; 0x50
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	441a      	add	r2, r3
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	202c      	movs	r0, #44	; 0x2c
 8004604:	fb00 f303 	mul.w	r3, r0, r3
 8004608:	440b      	add	r3, r1
 800460a:	3350      	adds	r3, #80	; 0x50
 800460c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	0cdb      	lsrs	r3, r3, #19
 800461e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004622:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3340      	adds	r3, #64	; 0x40
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4293      	cmp	r3, r2
 800463a:	d13c      	bne.n	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d039      	beq.n	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004658:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004660:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3354      	adds	r3, #84	; 0x54
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2d8      	uxtb	r0, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	212c      	movs	r1, #44	; 0x2c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	3354      	adds	r3, #84	; 0x54
 8004698:	4602      	mov	r2, r0
 800469a:	701a      	strb	r2, [r3, #0]
      break;
 800469c:	e00b      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3360      	adds	r3, #96	; 0x60
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
      break;
 80046b0:	e001      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80046b6:	bf00      	nop
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d10b      	bne.n	8004710 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f004 fb94 	bl	8008e30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d132      	bne.n	8004780 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d126      	bne.n	800477a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d113      	bne.n	800475c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800473a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800473e:	d106      	bne.n	800474e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fd74 	bl	8007234 <USB_InitFSLSPClkSel>
 800474c:	e011      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f002 fd6d 	bl	8007234 <USB_InitFSLSPClkSel>
 800475a:	e00a      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476a:	461a      	mov	r2, r3
 800476c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004770:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f004 fb86 	bl	8008e84 <HAL_HCD_PortEnabled_Callback>
 8004778:	e002      	b.n	8004780 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f004 fb90 	bl	8008ea0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d103      	bne.n	8004792 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e12b      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fcae 	bl	8002130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800480c:	f001 f9fc 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8004810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4a81      	ldr	r2, [pc, #516]	; (8004a1c <HAL_I2C_Init+0x274>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d807      	bhi.n	800482c <HAL_I2C_Init+0x84>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a80      	ldr	r2, [pc, #512]	; (8004a20 <HAL_I2C_Init+0x278>)
 8004820:	4293      	cmp	r3, r2
 8004822:	bf94      	ite	ls
 8004824:	2301      	movls	r3, #1
 8004826:	2300      	movhi	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e006      	b.n	800483a <HAL_I2C_Init+0x92>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a7d      	ldr	r2, [pc, #500]	; (8004a24 <HAL_I2C_Init+0x27c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	bf94      	ite	ls
 8004834:	2301      	movls	r3, #1
 8004836:	2300      	movhi	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0e7      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a78      	ldr	r2, [pc, #480]	; (8004a28 <HAL_I2C_Init+0x280>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9b      	lsrs	r3, r3, #18
 800484c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_I2C_Init+0x274>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <HAL_I2C_Init+0xd4>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3301      	adds	r3, #1
 800487a:	e009      	b.n	8004890 <HAL_I2C_Init+0xe8>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	4a69      	ldr	r2, [pc, #420]	; (8004a2c <HAL_I2C_Init+0x284>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	3301      	adds	r3, #1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	430b      	orrs	r3, r1
 8004896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	495c      	ldr	r1, [pc, #368]	; (8004a1c <HAL_I2C_Init+0x274>)
 80048ac:	428b      	cmp	r3, r1
 80048ae:	d819      	bhi.n	80048e4 <HAL_I2C_Init+0x13c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e59      	subs	r1, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048c4:	400b      	ands	r3, r1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_I2C_Init+0x138>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e59      	subs	r1, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048de:	e051      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e0:	2304      	movs	r3, #4
 80048e2:	e04f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <HAL_I2C_Init+0x168>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1e58      	subs	r0, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e012      	b.n	8004936 <HAL_I2C_Init+0x18e>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	0099      	lsls	r1, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Init+0x196>
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <HAL_I2C_Init+0x1bc>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e58      	subs	r0, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	440b      	add	r3, r1
 8004954:	fbb0 f3f3 	udiv	r3, r0, r3
 8004958:	3301      	adds	r3, #1
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	e00f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e58      	subs	r0, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	0099      	lsls	r1, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	6809      	ldr	r1, [r1, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6911      	ldr	r1, [r2, #16]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68d2      	ldr	r2, [r2, #12]
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	000186a0 	.word	0x000186a0
 8004a20:	001e847f 	.word	0x001e847f
 8004a24:	003d08ff 	.word	0x003d08ff
 8004a28:	431bde83 	.word	0x431bde83
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e128      	b.n	8004c94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a90      	ldr	r2, [pc, #576]	; (8004c9c <HAL_I2S_Init+0x26c>)
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fd fbaf 	bl	80021c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d060      	beq.n	8004b50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a96:	2310      	movs	r3, #16
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e001      	b.n	8004aa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d802      	bhi.n	8004aae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f001 f9a0 	bl	8005df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ab4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abe:	d125      	bne.n	8004b0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d010      	beq.n	8004aea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	3305      	adds	r3, #5
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e01f      	b.n	8004b2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	3305      	adds	r3, #5
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e00e      	b.n	8004b2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	3305      	adds	r3, #5
 8004b28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ca0 <HAL_I2S_Init+0x270>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e003      	b.n	8004b58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d902      	bls.n	8004b64 <HAL_I2S_Init+0x134>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2bff      	cmp	r3, #255	; 0xff
 8004b62:	d907      	bls.n	8004b74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e08f      	b.n	8004c94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	ea42 0103 	orr.w	r1, r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b92:	f023 030f 	bic.w	r3, r3, #15
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6851      	ldr	r1, [r2, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6992      	ldr	r2, [r2, #24]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d161      	bne.n	8004c84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a38      	ldr	r2, [pc, #224]	; (8004ca4 <HAL_I2S_Init+0x274>)
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <HAL_I2S_Init+0x278>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2S_Init+0x1a4>
 8004bd0:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_I2S_Init+0x27c>)
 8004bd2:	e001      	b.n	8004bd8 <HAL_I2S_Init+0x1a8>
 8004bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4932      	ldr	r1, [pc, #200]	; (8004ca8 <HAL_I2S_Init+0x278>)
 8004be0:	428a      	cmp	r2, r1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2S_Init+0x1b8>
 8004be4:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_I2S_Init+0x27c>)
 8004be6:	e001      	b.n	8004bec <HAL_I2S_Init+0x1bc>
 8004be8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004bec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bf0:	f023 030f 	bic.w	r3, r3, #15
 8004bf4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ca8 <HAL_I2S_Init+0x278>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2S_Init+0x1d4>
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_I2S_Init+0x27c>)
 8004c02:	e001      	b.n	8004c08 <HAL_I2S_Init+0x1d8>
 8004c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c08:	2202      	movs	r2, #2
 8004c0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_I2S_Init+0x278>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_I2S_Init+0x1ea>
 8004c16:	4b25      	ldr	r3, [pc, #148]	; (8004cac <HAL_I2S_Init+0x27c>)
 8004c18:	e001      	b.n	8004c1e <HAL_I2S_Init+0x1ee>
 8004c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d003      	beq.n	8004c34 <HAL_I2S_Init+0x204>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e001      	b.n	8004c40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <HAL_I2S_Init+0x278>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_I2S_Init+0x24c>
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_I2S_Init+0x27c>)
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x250>
 8004c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c80:	897a      	ldrh	r2, [r7, #10]
 8004c82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08004da7 	.word	0x08004da7
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	08004ebd 	.word	0x08004ebd
 8004ca8:	40003800 	.word	0x40003800
 8004cac:	40003400 	.word	0x40003400

08004cb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	881a      	ldrh	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ffb8 	bl	8004cb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10e      	bne.n	8004d9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff93 	bl	8004cc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d13a      	bne.n	8004e38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d109      	bne.n	8004de0 <I2S_IRQHandler+0x3a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d102      	bne.n	8004de0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ffb4 	bl	8004d48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d126      	bne.n	8004e38 <I2S_IRQHandler+0x92>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d11f      	bne.n	8004e38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff50 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d136      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d109      	bne.n	8004e62 <I2S_IRQHandler+0xbc>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d102      	bne.n	8004e62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff45 	bl	8004cec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d122      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d11b      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f043 0204 	orr.w	r2, r3, #4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff13 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4aa2      	ldr	r2, [pc, #648]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004ed6:	4ba2      	ldr	r3, [pc, #648]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ed8:	e001      	b.n	8004ede <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a9b      	ldr	r2, [pc, #620]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ef4:	4b9a      	ldr	r3, [pc, #616]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ef6:	e001      	b.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f08:	d004      	beq.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 8099 	bne.w	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d107      	bne.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f925 	bl	8005178 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9c8 	bl	80052d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d13a      	bne.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d035      	beq.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a7e      	ldr	r2, [pc, #504]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f66:	4b7e      	ldr	r3, [pc, #504]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f68:	e001      	b.n	8004f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4979      	ldr	r1, [pc, #484]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d101      	bne.n	8004f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f7a:	4b79      	ldr	r3, [pc, #484]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f7c:	e001      	b.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f043 0202 	orr.w	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe88 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	f040 80be 	bne.w	8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80b8 	beq.w	8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a59      	ldr	r2, [pc, #356]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ffc:	e001      	b.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4954      	ldr	r1, [pc, #336]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800500a:	428b      	cmp	r3, r1
 800500c:	d101      	bne.n	8005012 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005010:	e001      	b.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800501a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe4a 	bl	8004cd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005044:	e084      	b.n	8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d107      	bne.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8be 	bl	80051dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8fd 	bl	8005274 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d12f      	bne.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02a      	beq.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800509c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2e      	ldr	r2, [pc, #184]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050a8:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050aa:	e001      	b.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4929      	ldr	r1, [pc, #164]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d101      	bne.n	80050c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050be:	e001      	b.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f043 0202 	orr.w	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fdfa 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d131      	bne.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02c      	beq.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a17      	ldr	r2, [pc, #92]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005104:	e001      	b.n	800510a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4912      	ldr	r1, [pc, #72]	; (800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005112:	428b      	cmp	r3, r1
 8005114:	d101      	bne.n	800511a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005118:	e001      	b.n	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800511a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800511e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005122:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005132:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005140:	f043 0204 	orr.w	r2, r3, #4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fdc5 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800514e:	e000      	b.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005150:	bf00      	nop
}
 8005152:	bf00      	nop
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40003800 	.word	0x40003800
 8005160:	40003400 	.word	0x40003400

08005164 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c99      	adds	r1, r3, #2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6251      	str	r1, [r2, #36]	; 0x24
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffc9 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c99      	adds	r1, r3, #2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6251      	str	r1, [r2, #36]	; 0x24
 80051ee:	8819      	ldrh	r1, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	; (800526c <I2SEx_TxISR_I2SExt+0x90>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <I2SEx_TxISR_I2SExt+0x22>
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 80051fc:	e001      	b.n	8005202 <I2SEx_TxISR_I2SExt+0x26>
 80051fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005202:	460a      	mov	r2, r1
 8005204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d121      	bne.n	8005262 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <I2SEx_TxISR_I2SExt+0x90>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <I2SEx_TxISR_I2SExt+0x50>
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 800522a:	e001      	b.n	8005230 <I2SEx_TxISR_I2SExt+0x54>
 800522c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	490d      	ldr	r1, [pc, #52]	; (800526c <I2SEx_TxISR_I2SExt+0x90>)
 8005238:	428b      	cmp	r3, r1
 800523a:	d101      	bne.n	8005240 <I2SEx_TxISR_I2SExt+0x64>
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 800523e:	e001      	b.n	8005244 <I2SEx_TxISR_I2SExt+0x68>
 8005240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005244:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005248:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff81 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40003800 	.word	0x40003800
 8005270:	40003400 	.word	0x40003400

08005274 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68d8      	ldr	r0, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	1c99      	adds	r1, r3, #2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800528c:	b282      	uxth	r2, r0
 800528e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d113      	bne.n	80052d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff4a 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <I2SEx_RxISR_I2SExt+0x16>
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <I2SEx_RxISR_I2SExt+0x94>)
 80052ec:	e001      	b.n	80052f2 <I2SEx_RxISR_I2SExt+0x1a>
 80052ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f2:	68d8      	ldr	r0, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	1c99      	adds	r1, r3, #2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052fe:	b282      	uxth	r2, r0
 8005300:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d121      	bne.n	800535e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <I2SEx_RxISR_I2SExt+0x50>
 8005324:	4b11      	ldr	r3, [pc, #68]	; (800536c <I2SEx_RxISR_I2SExt+0x94>)
 8005326:	e001      	b.n	800532c <I2SEx_RxISR_I2SExt+0x54>
 8005328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	490d      	ldr	r1, [pc, #52]	; (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 8005334:	428b      	cmp	r3, r1
 8005336:	d101      	bne.n	800533c <I2SEx_RxISR_I2SExt+0x64>
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <I2SEx_RxISR_I2SExt+0x94>)
 800533a:	e001      	b.n	8005340 <I2SEx_RxISR_I2SExt+0x68>
 800533c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005344:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff03 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40003800 	.word	0x40003800
 800536c:	40003400 	.word	0x40003400

08005370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e264      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d075      	beq.n	800547a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538e:	4ba3      	ldr	r3, [pc, #652]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d00c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4ba0      	ldr	r3, [pc, #640]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a6:	4b9d      	ldr	r3, [pc, #628]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x108>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e23f      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x74>
 80053d6:	4b91      	ldr	r3, [pc, #580]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a90      	ldr	r2, [pc, #576]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b8b      	ldr	r3, [pc, #556]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a8a      	ldr	r2, [pc, #552]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a87      	ldr	r2, [pc, #540]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 8005408:	4b84      	ldr	r3, [pc, #528]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a83      	ldr	r2, [pc, #524]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fd f972 	bl	8002710 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fd f96e 	bl	8002710 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e204      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xc0>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd f95e 	bl	8002710 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fd f95a 	bl	8002710 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1f0      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	4b6c      	ldr	r3, [pc, #432]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0xe8>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005486:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b62      	ldr	r3, [pc, #392]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d11c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	4b5c      	ldr	r3, [pc, #368]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e1c4      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c2:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4952      	ldr	r1, [pc, #328]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	e03a      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <HAL_RCC_OscConfig+0x2b0>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fd f913 	bl	8002710 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fd f90f 	bl	8002710 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1a5      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4940      	ldr	r1, [pc, #256]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005522:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_OscConfig+0x2b0>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fd f8f2 	bl	8002710 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005530:	f7fd f8ee 	bl	8002710 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e184      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d030      	beq.n	80055bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b30      	ldr	r3, [pc, #192]	; (8005624 <HAL_RCC_OscConfig+0x2b4>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fd f8d2 	bl	8002710 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fd f8ce 	bl	8002710 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e164      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	4b26      	ldr	r3, [pc, #152]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x200>
 800558e:	e015      	b.n	80055bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <HAL_RCC_OscConfig+0x2b4>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005596:	f7fd f8bb 	bl	8002710 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559e:	f7fd f8b7 	bl	8002710 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e14d      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80a0 	beq.w	800570a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d121      	bne.n	800564a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fd f87d 	bl	8002710 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e011      	b.n	800563e <HAL_RCC_OscConfig+0x2ce>
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	42470000 	.word	0x42470000
 8005624:	42470e80 	.word	0x42470e80
 8005628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562c:	f7fd f870 	bl	8002710 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e106      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	4b85      	ldr	r3, [pc, #532]	; (8005854 <HAL_RCC_OscConfig+0x4e4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d106      	bne.n	8005660 <HAL_RCC_OscConfig+0x2f0>
 8005652:	4b81      	ldr	r3, [pc, #516]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a80      	ldr	r2, [pc, #512]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	e01c      	b.n	800569a <HAL_RCC_OscConfig+0x32a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b05      	cmp	r3, #5
 8005666:	d10c      	bne.n	8005682 <HAL_RCC_OscConfig+0x312>
 8005668:	4b7b      	ldr	r3, [pc, #492]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a7a      	ldr	r2, [pc, #488]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	4b78      	ldr	r3, [pc, #480]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a77      	ldr	r2, [pc, #476]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	e00b      	b.n	800569a <HAL_RCC_OscConfig+0x32a>
 8005682:	4b75      	ldr	r3, [pc, #468]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a74      	ldr	r2, [pc, #464]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	4b72      	ldr	r3, [pc, #456]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a71      	ldr	r2, [pc, #452]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd f835 	bl	8002710 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd f831 	bl	8002710 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0c5      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCC_OscConfig+0x33a>
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fd f81f 	bl	8002710 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd f81b 	bl	8002710 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0af      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ec:	4b5a      	ldr	r3, [pc, #360]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ee      	bne.n	80056d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	4a55      	ldr	r2, [pc, #340]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 809b 	beq.w	800584a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005714:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d05c      	beq.n	80057da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d141      	bne.n	80057ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005728:	4b4c      	ldr	r3, [pc, #304]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fc ffef 	bl	8002710 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fc ffeb 	bl	8002710 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e081      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005748:	4b43      	ldr	r3, [pc, #268]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	019b      	lsls	r3, r3, #6
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	3b01      	subs	r3, #1
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	4937      	ldr	r1, [pc, #220]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fc ffc4 	bl	8002710 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578c:	f7fc ffc0 	bl	8002710 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e056      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0x41c>
 80057aa:	e04e      	b.n	800584a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fc ffad 	bl	8002710 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fc ffa9 	bl	8002710 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e03f      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057cc:	4b22      	ldr	r3, [pc, #136]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0x44a>
 80057d8:	e037      	b.n	800584a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e032      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d028      	beq.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d121      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d11a      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005816:	4013      	ands	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800581c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800581e:	4293      	cmp	r3, r2
 8005820:	d111      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	3b01      	subs	r3, #1
 8005830:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d107      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d001      	beq.n	800584a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40007000 	.word	0x40007000
 8005858:	40023800 	.word	0x40023800
 800585c:	42470060 	.word	0x42470060

08005860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cc      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90c      	bls.n	800589c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b8      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058cc:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a52      	ldr	r2, [pc, #328]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	494d      	ldr	r1, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d044      	beq.n	8005980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d119      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d003      	beq.n	800591e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	2b03      	cmp	r3, #3
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e06f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592e:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e067      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593e:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4934      	ldr	r1, [pc, #208]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005950:	f7fc fede 	bl	8002710 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc feda 	bl	8002710 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e04f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 020c 	and.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d1eb      	bne.n	8005958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20c      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e032      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4916      	ldr	r1, [pc, #88]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e6:	f000 f821 	bl	8005a2c <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490a      	ldr	r1, [pc, #40]	; (8005a20 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fe3e 	bl	8002688 <HAL_InitTick>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800c2f0 	.word	0x0800c2f0
 8005a24:	20000000 	.word	0x20000000
 8005a28:	20000004 	.word	0x20000004

08005a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a44:	4b67      	ldr	r3, [pc, #412]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d00d      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x40>
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	f200 80bd 	bhi.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5e:	e0b7      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a62:	60bb      	str	r3, [r7, #8]
       break;
 8005a64:	e0b7      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a66:	4b61      	ldr	r3, [pc, #388]	; (8005bec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a68:	60bb      	str	r3, [r7, #8]
      break;
 8005a6a:	e0b4      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a6c:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a76:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04d      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	ea02 0800 	and.w	r8, r2, r0
 8005a9a:	ea03 0901 	and.w	r9, r3, r1
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	014b      	lsls	r3, r1, #5
 8005aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ab0:	0142      	lsls	r2, r0, #5
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	ebb0 0008 	subs.w	r0, r0, r8
 8005aba:	eb61 0109 	sbc.w	r1, r1, r9
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	018b      	lsls	r3, r1, #6
 8005ac8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005acc:	0182      	lsls	r2, r0, #6
 8005ace:	1a12      	subs	r2, r2, r0
 8005ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	00d9      	lsls	r1, r3, #3
 8005ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae2:	00d0      	lsls	r0, r2, #3
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	eb12 0208 	adds.w	r2, r2, r8
 8005aec:	eb43 0309 	adc.w	r3, r3, r9
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	0259      	lsls	r1, r3, #9
 8005afa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005afe:	0250      	lsls	r0, r2, #9
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4610      	mov	r0, r2
 8005b06:	4619      	mov	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	f7fb f892 	bl	8000c38 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4613      	mov	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e04a      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1e:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	099b      	lsrs	r3, r3, #6
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	ea02 0400 	and.w	r4, r2, r0
 8005b36:	ea03 0501 	and.w	r5, r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	014b      	lsls	r3, r1, #5
 8005b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b4c:	0142      	lsls	r2, r0, #5
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	1b00      	subs	r0, r0, r4
 8005b54:	eb61 0105 	sbc.w	r1, r1, r5
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	018b      	lsls	r3, r1, #6
 8005b62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b66:	0182      	lsls	r2, r0, #6
 8005b68:	1a12      	subs	r2, r2, r0
 8005b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	00d9      	lsls	r1, r3, #3
 8005b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b7c:	00d0      	lsls	r0, r2, #3
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	1912      	adds	r2, r2, r4
 8005b84:	eb45 0303 	adc.w	r3, r5, r3
 8005b88:	f04f 0000 	mov.w	r0, #0
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	0299      	lsls	r1, r3, #10
 8005b92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b96:	0290      	lsls	r0, r2, #10
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f7fb f846 	bl	8000c38 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bd2:	60bb      	str	r3, [r7, #8]
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	007a1200 	.word	0x007a1200

08005bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000000 	.word	0x20000000

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4903      	ldr	r1, [pc, #12]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	0800c300 	.word	0x0800c300

08005c30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d035      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c58:	4b62      	ldr	r3, [pc, #392]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fc fd57 	bl	8002710 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c66:	f7fc fd53 	bl	8002710 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e0b0      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	019a      	lsls	r2, r3, #6
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	071b      	lsls	r3, r3, #28
 8005c90:	4955      	ldr	r1, [pc, #340]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c98:	4b52      	ldr	r3, [pc, #328]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c9e:	f7fc fd37 	bl	8002710 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ca6:	f7fc fd33 	bl	8002710 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e090      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8083 	beq.w	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4a43      	ldr	r2, [pc, #268]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cee:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3e      	ldr	r2, [pc, #248]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cfa:	f7fc fd09 	bl	8002710 <HAL_GetTick>
 8005cfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d00:	e008      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d02:	f7fc fd05 	bl	8002710 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e062      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02f      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d028      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d3e:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d48:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d4e:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d54:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d5a:	4b23      	ldr	r3, [pc, #140]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d114      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fc fcd3 	bl	8002710 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fc fccf 	bl	8002710 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e02a      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ee      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db2:	490d      	ldr	r1, [pc, #52]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dc4:	6093      	str	r3, [r2, #8]
 8005dc6:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd2:	4905      	ldr	r1, [pc, #20]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	42470068 	.word	0x42470068
 8005de8:	40023800 	.word	0x40023800
 8005dec:	40007000 	.word	0x40007000
 8005df0:	42470e40 	.word	0x42470e40

08005df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d13e      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d12f      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e28:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e2a:	617b      	str	r3, [r7, #20]
          break;
 8005e2c:	e02f      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e3a:	d108      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e3c:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e44:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e007      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e64:	099b      	lsrs	r3, r3, #6
 8005e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e78:	0f1b      	lsrs	r3, r3, #28
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]
          break;
 8005e86:	e002      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
          break;
 8005e8c:	bf00      	nop
        }
      }
      break;
 8005e8e:	bf00      	nop
    }
  }
  return frequency;
 8005e90:	697b      	ldr	r3, [r7, #20]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	00bb8000 	.word	0x00bb8000
 8005ea8:	007a1200 	.word	0x007a1200
 8005eac:	00f42400 	.word	0x00f42400

08005eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e07b      	b.n	8005fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc f9c4 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	ea42 0103 	orr.w	r1, r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	f003 0104 	and.w	r1, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	f003 0210 	and.w	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e041      	b.n	8006058 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fc f999 	bl	8002320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f000 fad9 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e041      	b.n	80060f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f839 	bl	80060fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f000 fa8a 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_TIM_PWM_Start+0x24>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	bf14      	ite	ne
 8006130:	2301      	movne	r3, #1
 8006132:	2300      	moveq	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	e022      	b.n	800617e <HAL_TIM_PWM_Start+0x6a>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b04      	cmp	r3, #4
 800613c:	d109      	bne.n	8006152 <HAL_TIM_PWM_Start+0x3e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e015      	b.n	800617e <HAL_TIM_PWM_Start+0x6a>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start+0x58>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e008      	b.n	800617e <HAL_TIM_PWM_Start+0x6a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e07c      	b.n	8006280 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start+0x82>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006194:	e013      	b.n	80061be <HAL_TIM_PWM_Start+0xaa>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x92>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a4:	e00b      	b.n	80061be <HAL_TIM_PWM_Start+0xaa>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_PWM_Start+0xa2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b4:	e003      	b.n	80061be <HAL_TIM_PWM_Start+0xaa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2201      	movs	r2, #1
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fce0 	bl	8006b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <HAL_TIM_PWM_Start+0x174>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_PWM_Start+0xcc>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2c      	ldr	r2, [pc, #176]	; (800628c <HAL_TIM_PWM_Start+0x178>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_TIM_PWM_Start+0xd0>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_TIM_PWM_Start+0xd2>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a22      	ldr	r2, [pc, #136]	; (8006288 <HAL_TIM_PWM_Start+0x174>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d022      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d01d      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_TIM_PWM_Start+0x17c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d018      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_TIM_PWM_Start+0x180>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d013      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <HAL_TIM_PWM_Start+0x184>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00e      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <HAL_TIM_PWM_Start+0x178>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_TIM_PWM_Start+0x188>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d004      	beq.n	800624a <HAL_TIM_PWM_Start+0x136>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_TIM_PWM_Start+0x18c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d111      	bne.n	800626e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d010      	beq.n	800627e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	e007      	b.n	800627e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40014000 	.word	0x40014000
 80062a0:	40001800 	.word	0x40001800

080062a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062be:	2302      	movs	r3, #2
 80062c0:	e0ae      	b.n	8006420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	f200 809f 	bhi.w	8006410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	08006411 	.word	0x08006411
 80062e0:	08006411 	.word	0x08006411
 80062e4:	08006411 	.word	0x08006411
 80062e8:	0800634d 	.word	0x0800634d
 80062ec:	08006411 	.word	0x08006411
 80062f0:	08006411 	.word	0x08006411
 80062f4:	08006411 	.word	0x08006411
 80062f8:	0800638f 	.word	0x0800638f
 80062fc:	08006411 	.word	0x08006411
 8006300:	08006411 	.word	0x08006411
 8006304:	08006411 	.word	0x08006411
 8006308:	080063cf 	.word	0x080063cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f9f0 	bl	80066f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0208 	orr.w	r2, r2, #8
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0204 	bic.w	r2, r2, #4
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	619a      	str	r2, [r3, #24]
      break;
 800634a:	e064      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fa40 	bl	80067d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	619a      	str	r2, [r3, #24]
      break;
 800638c:	e043      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa95 	bl	80068c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0208 	orr.w	r2, r2, #8
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0204 	bic.w	r2, r2, #4
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	61da      	str	r2, [r3, #28]
      break;
 80063cc:	e023      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fae9 	bl	80069ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	021a      	lsls	r2, r3, #8
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	61da      	str	r2, [r3, #28]
      break;
 800640e:	e002      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
      break;
 8006414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x1c>
 8006440:	2302      	movs	r3, #2
 8006442:	e0b4      	b.n	80065ae <HAL_TIM_ConfigClockSource+0x186>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800646a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647c:	d03e      	beq.n	80064fc <HAL_TIM_ConfigClockSource+0xd4>
 800647e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006482:	f200 8087 	bhi.w	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648a:	f000 8086 	beq.w	800659a <HAL_TIM_ConfigClockSource+0x172>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	d87f      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 8006494:	2b70      	cmp	r3, #112	; 0x70
 8006496:	d01a      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xa6>
 8006498:	2b70      	cmp	r3, #112	; 0x70
 800649a:	d87b      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 800649c:	2b60      	cmp	r3, #96	; 0x60
 800649e:	d050      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x11a>
 80064a0:	2b60      	cmp	r3, #96	; 0x60
 80064a2:	d877      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 80064a4:	2b50      	cmp	r3, #80	; 0x50
 80064a6:	d03c      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0xfa>
 80064a8:	2b50      	cmp	r3, #80	; 0x50
 80064aa:	d873      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d058      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x13a>
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d86f      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b30      	cmp	r3, #48	; 0x30
 80064b6:	d064      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15a>
 80064b8:	2b30      	cmp	r3, #48	; 0x30
 80064ba:	d86b      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d060      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15a>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d867      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d05c      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15a>
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d05a      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15a>
 80064cc:	e062      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f000 fb35 	bl	8006b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	609a      	str	r2, [r3, #8]
      break;
 80064fa:	e04f      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	6899      	ldr	r1, [r3, #8]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f000 fb1e 	bl	8006b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800651e:	609a      	str	r2, [r3, #8]
      break;
 8006520:	e03c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	f000 fa92 	bl	8006a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2150      	movs	r1, #80	; 0x50
 800653a:	4618      	mov	r0, r3
 800653c:	f000 faeb 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006540:	e02c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fab1 	bl	8006ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2160      	movs	r1, #96	; 0x60
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fadb 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006560:	e01c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fa72 	bl	8006a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2140      	movs	r1, #64	; 0x40
 800657a:	4618      	mov	r0, r3
 800657c:	f000 facb 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006580:	e00c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f000 fac2 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006592:	e003      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
      break;
 8006598:	e000      	b.n	800659c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800659a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a40      	ldr	r2, [pc, #256]	; (80066cc <TIM_Base_SetConfig+0x114>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d00f      	beq.n	80065f8 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3d      	ldr	r2, [pc, #244]	; (80066d0 <TIM_Base_SetConfig+0x118>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00b      	beq.n	80065f8 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a3c      	ldr	r2, [pc, #240]	; (80066d4 <TIM_Base_SetConfig+0x11c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a3b      	ldr	r2, [pc, #236]	; (80066d8 <TIM_Base_SetConfig+0x120>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a3a      	ldr	r2, [pc, #232]	; (80066dc <TIM_Base_SetConfig+0x124>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d108      	bne.n	800660a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2f      	ldr	r2, [pc, #188]	; (80066cc <TIM_Base_SetConfig+0x114>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d02b      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d027      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <TIM_Base_SetConfig+0x118>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d023      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <TIM_Base_SetConfig+0x11c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01f      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <TIM_Base_SetConfig+0x120>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01b      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a29      	ldr	r2, [pc, #164]	; (80066dc <TIM_Base_SetConfig+0x124>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d017      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <TIM_Base_SetConfig+0x128>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <TIM_Base_SetConfig+0x12c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00f      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <TIM_Base_SetConfig+0x130>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00b      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a25      	ldr	r2, [pc, #148]	; (80066ec <TIM_Base_SetConfig+0x134>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a24      	ldr	r2, [pc, #144]	; (80066f0 <TIM_Base_SetConfig+0x138>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <TIM_Base_SetConfig+0x13c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d108      	bne.n	800667c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <TIM_Base_SetConfig+0x114>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_Base_SetConfig+0xf8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <TIM_Base_SetConfig+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d103      	bne.n	80066b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	615a      	str	r2, [r3, #20]
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800
 80066ec:	40001800 	.word	0x40001800
 80066f0:	40001c00 	.word	0x40001c00
 80066f4:	40002000 	.word	0x40002000

080066f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 0302 	bic.w	r3, r3, #2
 8006740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <TIM_OC1_SetConfig+0xd8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC1_SetConfig+0x64>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <TIM_OC1_SetConfig+0xdc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <TIM_OC1_SetConfig+0xd8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC1_SetConfig+0x8e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <TIM_OC1_SetConfig+0xdc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d111      	bne.n	80067aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f023 0210 	bic.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0320 	bic.w	r3, r3, #32
 8006822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a22      	ldr	r2, [pc, #136]	; (80068bc <TIM_OC2_SetConfig+0xe4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_OC2_SetConfig+0x68>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <TIM_OC2_SetConfig+0xe8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10d      	bne.n	800685c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a17      	ldr	r2, [pc, #92]	; (80068bc <TIM_OC2_SetConfig+0xe4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_OC2_SetConfig+0x94>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC2_SetConfig+0xe8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d113      	bne.n	8006894 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <TIM_OC3_SetConfig+0xe0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_OC3_SetConfig+0x66>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <TIM_OC3_SetConfig+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d10d      	bne.n	8006946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <TIM_OC3_SetConfig+0xe0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC3_SetConfig+0x92>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <TIM_OC3_SetConfig+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d113      	bne.n	800697e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <TIM_OC4_SetConfig+0xa4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC4_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <TIM_OC4_SetConfig+0xa8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 030a 	bic.w	r3, r3, #10
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0210 	bic.w	r2, r3, #16
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f043 0307 	orr.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	401a      	ands	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e05a      	b.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d01d      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d10c      	bne.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40001800 	.word	0x40001800

08006cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	f107 001c 	add.w	r0, r7, #28
 8006cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d122      	bne.n	8006d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9a0 	bl	8007068 <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e01a      	b.n	8006d64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f994 	bl	8007068 <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
 8006d56:	e005      	b.n	8006d64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d10b      	bne.n	8006d82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f043 0206 	orr.w	r2, r3, #6
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f043 0220 	orr.w	r2, r3, #32
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d8e:	b004      	add	sp, #16
 8006d90:	4770      	bx	lr

08006d92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f043 0201 	orr.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f023 0201 	bic.w	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d115      	bne.n	8006e24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e04:	2001      	movs	r0, #1
 8006e06:	f7fb fc8f 	bl	8002728 <HAL_Delay>
      ms++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f91a 	bl	800704a <USB_GetMode>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d01e      	beq.n	8006e5a <USB_SetCurrentMode+0x84>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b31      	cmp	r3, #49	; 0x31
 8006e20:	d9f0      	bls.n	8006e04 <USB_SetCurrentMode+0x2e>
 8006e22:	e01a      	b.n	8006e5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d115      	bne.n	8006e56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7fb fc76 	bl	8002728 <HAL_Delay>
      ms++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f901 	bl	800704a <USB_GetMode>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <USB_SetCurrentMode+0x84>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b31      	cmp	r3, #49	; 0x31
 8006e52:	d9f0      	bls.n	8006e36 <USB_SetCurrentMode+0x60>
 8006e54:	e001      	b.n	8006e5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e005      	b.n	8006e66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b32      	cmp	r3, #50	; 0x32
 8006e5e:	d101      	bne.n	8006e64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <USB_FlushTxFifo+0x44>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e006      	b.n	8006ea8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d0f1      	beq.n	8006e8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	00030d40 	.word	0x00030d40

08006eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USB_FlushRxFifo+0x3c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e006      	b.n	8006ee8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d0f1      	beq.n	8006eca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b089      	sub	sp, #36	; 0x24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	460b      	mov	r3, r1
 8006f08:	71fb      	strb	r3, [r7, #7]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d123      	bne.n	8006f66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	3303      	adds	r3, #3
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e018      	b.n	8006f5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	031a      	lsls	r2, r3, #12
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f38:	461a      	mov	r2, r3
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	3301      	adds	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3301      	adds	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d3e2      	bcc.n	8006f2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3724      	adds	r7, #36	; 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b08b      	sub	sp, #44	; 0x2c
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	e014      	b.n	8006fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	3301      	adds	r3, #1
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	3301      	adds	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	623b      	str	r3, [r7, #32]
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d3e6      	bcc.n	8006fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fd2:	8bfb      	ldrh	r3, [r7, #30]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01e      	beq.n	8007016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	3301      	adds	r3, #1
 8007002:	623b      	str	r3, [r7, #32]
      pDest++;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	3301      	adds	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800700a:	8bfb      	ldrh	r3, [r7, #30]
 800700c:	3b01      	subs	r3, #1
 800700e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007010:	8bfb      	ldrh	r3, [r7, #30]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1ea      	bne.n	8006fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007018:	4618      	mov	r0, r3
 800701a:	372c      	adds	r7, #44	; 0x2c
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 0301 	and.w	r3, r3, #1
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <USB_CoreReset+0x60>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d901      	bls.n	8007084 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e01a      	b.n	80070ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	daf3      	bge.n	8007074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f043 0201 	orr.w	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <USB_CoreReset+0x60>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d901      	bls.n	80070ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d0f1      	beq.n	800709c <USB_CoreReset+0x34>

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	00030d40 	.word	0x00030d40

080070cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070cc:	b084      	sub	sp, #16
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	f107 001c 	add.w	r0, r7, #28
 80070da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e8:	461a      	mov	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d018      	beq.n	8007150 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10a      	bne.n	800713a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007132:	f043 0304 	orr.w	r3, r3, #4
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	e014      	b.n	8007164 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	e009      	b.n	8007164 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800715e:	f023 0304 	bic.w	r3, r3, #4
 8007162:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007164:	2110      	movs	r1, #16
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fe82 	bl	8006e70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fea3 	bl	8006eb8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e015      	b.n	80071a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007184:	461a      	mov	r2, r3
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	461a      	mov	r2, r3
 800719a:	2300      	movs	r3, #0
 800719c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3e5      	bcc.n	8007178 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a13      	ldr	r2, [pc, #76]	; (8007220 <USB_HostInit+0x154>)
 80071d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <USB_HostInit+0x158>)
 80071d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80071dc:	e009      	b.n	80071f2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2280      	movs	r2, #128	; 0x80
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a10      	ldr	r2, [pc, #64]	; (8007228 <USB_HostInit+0x15c>)
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a0f      	ldr	r2, [pc, #60]	; (800722c <USB_HostInit+0x160>)
 80071ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f043 0210 	orr.w	r2, r3, #16
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699a      	ldr	r2, [r3, #24]
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <USB_HostInit+0x164>)
 800720a:	4313      	orrs	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800721c:	b004      	add	sp, #16
 800721e:	4770      	bx	lr
 8007220:	01000200 	.word	0x01000200
 8007224:	00e00300 	.word	0x00e00300
 8007228:	00600080 	.word	0x00600080
 800722c:	004000e0 	.word	0x004000e0
 8007230:	a3200008 	.word	0xa3200008

08007234 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d107      	bne.n	8007286 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727c:	461a      	mov	r2, r3
 800727e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007282:	6053      	str	r3, [r2, #4]
 8007284:	e009      	b.n	800729a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d106      	bne.n	800729a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007292:	461a      	mov	r2, r3
 8007294:	f241 7370 	movw	r3, #6000	; 0x1770
 8007298:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <USB_DriveVbus+0x44>
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d106      	bne.n	80072ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d109      	bne.n	800730c <USB_DriveVbus+0x64>
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	0c5b      	lsrs	r3, r3, #17
 8007338:	f003 0303 	and.w	r3, r3, #3
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	b29b      	uxth	r3, r3
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4603      	mov	r3, r0
 800737c:	70fb      	strb	r3, [r7, #3]
 800737e:	460b      	mov	r3, r1
 8007380:	70bb      	strb	r3, [r7, #2]
 8007382:	4613      	mov	r3, r2
 8007384:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739a:	461a      	mov	r2, r3
 800739c:	f04f 33ff 	mov.w	r3, #4294967295
 80073a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80073a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d87e      	bhi.n	80074a8 <USB_HC_Init+0x13c>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <USB_HC_Init+0x44>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	0800746b 	.word	0x0800746b
 80073b8:	080073c1 	.word	0x080073c1
 80073bc:	0800742d 	.word	0x0800742d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073cc:	461a      	mov	r2, r3
 80073ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80073d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80073d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da10      	bge.n	80073fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80073fc:	e057      	b.n	80074ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d051      	beq.n	80074ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007424:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007428:	60d3      	str	r3, [r2, #12]
      break;
 800742a:	e040      	b.n	80074ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4413      	add	r3, r2
 8007434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007438:	461a      	mov	r2, r3
 800743a:	f240 639d 	movw	r3, #1693	; 0x69d
 800743e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007440:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	da34      	bge.n	80074b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4413      	add	r3, r2
 8007450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	440a      	add	r2, r1
 800745e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007466:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007468:	e023      	b.n	80074b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	461a      	mov	r2, r3
 8007478:	f240 2325 	movw	r3, #549	; 0x225
 800747c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800747e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007482:	2b00      	cmp	r3, #0
 8007484:	da17      	bge.n	80074b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4413      	add	r3, r2
 800748e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	440a      	add	r2, r1
 800749c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80074a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80074a6:	e006      	b.n	80074b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
      break;
 80074ac:	e004      	b.n	80074b8 <USB_HC_Init+0x14c>
      break;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <USB_HC_Init+0x14c>
      break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <USB_HC_Init+0x14c>
      break;
 80074b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	699a      	ldr	r2, [r3, #24]
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	2101      	movs	r1, #1
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	6939      	ldr	r1, [r7, #16]
 80074ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074d2:	4313      	orrs	r3, r2
 80074d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80074e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da03      	bge.n	80074f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80074ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	e001      	b.n	80074f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff ff0f 	bl	800731a <USB_GetHostSpeed>
 80074fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007502:	2b02      	cmp	r3, #2
 8007504:	d106      	bne.n	8007514 <USB_HC_Init+0x1a8>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d003      	beq.n	8007514 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800750c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e001      	b.n	8007518 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007518:	787b      	ldrb	r3, [r7, #1]
 800751a:	059b      	lsls	r3, r3, #22
 800751c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007520:	78bb      	ldrb	r3, [r7, #2]
 8007522:	02db      	lsls	r3, r3, #11
 8007524:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007528:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800752a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800752e:	049b      	lsls	r3, r3, #18
 8007530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007534:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007536:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007538:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800753c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	0159      	lsls	r1, r3, #5
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	440b      	add	r3, r1
 800754a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007554:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800755a:	2b03      	cmp	r3, #3
 800755c:	d10f      	bne.n	800757e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	4413      	add	r3, r2
 8007566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	440a      	add	r2, r1
 8007574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800757c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800757e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80075a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02d      	beq.n	800760e <USB_HC_StartXfer+0x86>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	791b      	ldrb	r3, [r3, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d129      	bne.n	800760e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d117      	bne.n	80075f0 <USB_HC_StartXfer+0x68>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	79db      	ldrb	r3, [r3, #7]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <USB_HC_StartXfer+0x48>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	79db      	ldrb	r3, [r3, #7]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d10f      	bne.n	80075f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <USB_HC_StartXfer+0x86>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	795b      	ldrb	r3, [r3, #5]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d107      	bne.n	800760e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	4619      	mov	r1, r3
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fa2f 	bl	8007a68 <USB_DoPing>
      return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e0f8      	b.n	8007800 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	8912      	ldrh	r2, [r2, #8]
 800761e:	4413      	add	r3, r2
 8007620:	3b01      	subs	r3, #1
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	8912      	ldrh	r2, [r2, #8]
 8007626:	fbb3 f3f2 	udiv	r3, r3, r2
 800762a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800762c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800762e:	8b7b      	ldrh	r3, [r7, #26]
 8007630:	429a      	cmp	r2, r3
 8007632:	d90b      	bls.n	800764c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007634:	8b7b      	ldrh	r3, [r7, #26]
 8007636:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	8912      	ldrh	r2, [r2, #8]
 800763e:	fb02 f203 	mul.w	r2, r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	611a      	str	r2, [r3, #16]
 8007646:	e001      	b.n	800764c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007648:	2301      	movs	r3, #1
 800764a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	78db      	ldrb	r3, [r3, #3]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	8912      	ldrh	r2, [r2, #8]
 800765a:	fb02 f203 	mul.w	r2, r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	611a      	str	r2, [r3, #16]
 8007662:	e003      	b.n	800766c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007676:	04d9      	lsls	r1, r3, #19
 8007678:	4b63      	ldr	r3, [pc, #396]	; (8007808 <USB_HC_StartXfer+0x280>)
 800767a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800767c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	7a9b      	ldrb	r3, [r3, #10]
 8007682:	075b      	lsls	r3, r3, #29
 8007684:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	0148      	lsls	r0, r1, #5
 800768c:	6a39      	ldr	r1, [r7, #32]
 800768e:	4401      	add	r1, r0
 8007690:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007694:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007696:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	68d9      	ldr	r1, [r3, #12]
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	460a      	mov	r2, r1
 80076b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	7e7b      	ldrb	r3, [r7, #25]
 80076fa:	075b      	lsls	r3, r3, #29
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	0148      	lsls	r0, r1, #5
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	4401      	add	r1, r0
 8007704:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007722:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	78db      	ldrb	r3, [r3, #3]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	e003      	b.n	800773e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800773c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007744:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	4413      	add	r3, r2
 800774e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007752:	461a      	mov	r2, r3
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e04e      	b.n	8007800 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d149      	bne.n	80077fe <USB_HC_StartXfer+0x276>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d045      	beq.n	80077fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	79db      	ldrb	r3, [r3, #7]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d830      	bhi.n	80077dc <USB_HC_StartXfer+0x254>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <USB_HC_StartXfer+0x1f8>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007791 	.word	0x08007791
 8007784:	080077b5 	.word	0x080077b5
 8007788:	08007791 	.word	0x08007791
 800778c:	080077b5 	.word	0x080077b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	3303      	adds	r3, #3
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800779a:	8afa      	ldrh	r2, [r7, #22]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d91c      	bls.n	80077e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f043 0220 	orr.w	r2, r3, #32
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80077b2:	e015      	b.n	80077e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	3303      	adds	r3, #3
 80077ba:	089b      	lsrs	r3, r3, #2
 80077bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80077be:	8afa      	ldrh	r2, [r7, #22]
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d90a      	bls.n	80077e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80077da:	e003      	b.n	80077e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80077dc:	bf00      	nop
 80077de:	e002      	b.n	80077e6 <USB_HC_StartXfer+0x25e>
        break;
 80077e0:	bf00      	nop
 80077e2:	e000      	b.n	80077e6 <USB_HC_StartXfer+0x25e>
        break;
 80077e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68d9      	ldr	r1, [r3, #12]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	785a      	ldrb	r2, [r3, #1]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2000      	movs	r0, #0
 80077f6:	9000      	str	r0, [sp, #0]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fb7d 	bl	8006ef8 <USB_WritePacket>
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	1ff80000 	.word	0x1ff80000

0800780c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	b29b      	uxth	r3, r3
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800782e:	b480      	push	{r7}
 8007830:	b089      	sub	sp, #36	; 0x24
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	4413      	add	r3, r2
 800784e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	0c9b      	lsrs	r3, r3, #18
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	0fdb      	lsrs	r3, r3, #31
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	d104      	bne.n	8007888 <USB_HC_Halt+0x5a>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e0e8      	b.n	8007a5a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <USB_HC_Halt+0x66>
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d173      	bne.n	800797c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	4413      	add	r3, r2
 800789c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 80cb 	bne.w	8007a58 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d143      	bne.n	8007956 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	440a      	add	r2, r1
 8007904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800790c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	4413      	add	r3, r2
 8007916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	440a      	add	r2, r1
 8007924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800792c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3301      	adds	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793a:	d81d      	bhi.n	8007978 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800794e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007952:	d0ec      	beq.n	800792e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007954:	e080      	b.n	8007a58 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	4413      	add	r3, r2
 800795e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	440a      	add	r2, r1
 800796c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007974:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007976:	e06f      	b.n	8007a58 <USB_HC_Halt+0x22a>
            break;
 8007978:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800797a:	e06d      	b.n	8007a58 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800799a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d143      	bne.n	8007a34 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a0a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a18:	d81d      	bhi.n	8007a56 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a30:	d0ec      	beq.n	8007a0c <USB_HC_Halt+0x1de>
 8007a32:	e011      	b.n	8007a58 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e000      	b.n	8007a58 <USB_HC_Halt+0x22a>
          break;
 8007a56:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3724      	adds	r7, #36	; 0x24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
	...

08007a68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	04da      	lsls	r2, r3, #19
 8007a84:	4b15      	ldr	r3, [pc, #84]	; (8007adc <USB_DoPing+0x74>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ab0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ab8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	1ff80000 	.word	0x1ff80000

08007ae0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f95f 	bl	8006db4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007af6:	2110      	movs	r1, #16
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff f9b9 	bl	8006e70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff f9da 	bl	8006eb8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	e01f      	b.n	8007b4a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b30:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3e:	461a      	mov	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b0f      	cmp	r3, #15
 8007b4e:	d9dc      	bls.n	8007b0a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e034      	b.n	8007bc0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b7c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	3301      	adds	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b9c:	d80c      	bhi.n	8007bb8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb4:	d0ec      	beq.n	8007b90 <USB_StopHost+0xb0>
 8007bb6:	e000      	b.n	8007bba <USB_StopHost+0xda>
        break;
 8007bb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	2b0f      	cmp	r3, #15
 8007bc4:	d9c7      	bls.n	8007b56 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff f8d8 	bl	8006d92 <USB_EnableGlobalInt>

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b089      	sub	sp, #36	; 0x24
 8007bf0:	af04      	add	r7, sp, #16
 8007bf2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fc66 	bl	80084cc <USBH_FindInterface>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2bff      	cmp	r3, #255	; 0xff
 8007c08:	d002      	beq.n	8007c10 <USBH_CDC_InterfaceInit+0x24>
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d901      	bls.n	8007c14 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c10:	2302      	movs	r3, #2
 8007c12:	e13d      	b.n	8007e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fc3b 	bl	8008494 <USBH_SelectInterface>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e131      	b.n	8007e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c32:	2050      	movs	r0, #80	; 0x50
 8007c34:	f001 fb16 	bl	8009264 <malloc>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e11f      	b.n	8007e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007c50:	2250      	movs	r2, #80	; 0x50
 8007c52:	2100      	movs	r1, #0
 8007c54:	68b8      	ldr	r0, [r7, #8]
 8007c56:	f001 fb15 	bl	8009284 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	211a      	movs	r1, #26
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da15      	bge.n	8007c9e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	211a      	movs	r1, #26
 8007c78:	fb01 f303 	mul.w	r3, r1, r3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	211a      	movs	r1, #26
 8007c8e:	fb01 f303 	mul.w	r3, r1, r3
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c98:	881a      	ldrh	r2, [r3, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 ff9c 	bl	8008be2 <USBH_AllocPipe>
 8007caa:	4603      	mov	r3, r0
 8007cac:	461a      	mov	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	7858      	ldrb	r0, [r3, #1]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	8952      	ldrh	r2, [r2, #10]
 8007cca:	9202      	str	r2, [sp, #8]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	9201      	str	r2, [sp, #4]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 ff54 	bl	8008b84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fa17 	bl	8009118 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	210a      	movs	r1, #10
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fbeb 	bl	80084cc <USBH_FindInterface>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2bff      	cmp	r3, #255	; 0xff
 8007cfe:	d002      	beq.n	8007d06 <USBH_CDC_InterfaceInit+0x11a>
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d901      	bls.n	8007d0a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0c2      	b.n	8007e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	211a      	movs	r1, #26
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	4413      	add	r3, r2
 8007d16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da16      	bge.n	8007d50 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	211a      	movs	r1, #26
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	211a      	movs	r1, #26
 8007d3e:	fb01 f303 	mul.w	r3, r1, r3
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d48:	881a      	ldrh	r2, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	835a      	strh	r2, [r3, #26]
 8007d4e:	e015      	b.n	8007d7c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	211a      	movs	r1, #26
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	211a      	movs	r1, #26
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d76:	881a      	ldrh	r2, [r3, #0]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	211a      	movs	r1, #26
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b25b      	sxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	da16      	bge.n	8007dc2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	211a      	movs	r1, #26
 8007d9a:	fb01 f303 	mul.w	r3, r1, r3
 8007d9e:	4413      	add	r3, r2
 8007da0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	211a      	movs	r1, #26
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007dba:	881a      	ldrh	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	835a      	strh	r2, [r3, #26]
 8007dc0:	e015      	b.n	8007dee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	211a      	movs	r1, #26
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	211a      	movs	r1, #26
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007de8:	881a      	ldrh	r2, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	7b9b      	ldrb	r3, [r3, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fef4 	bl	8008be2 <USBH_AllocPipe>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	7bdb      	ldrb	r3, [r3, #15]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 feea 	bl	8008be2 <USBH_AllocPipe>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	7b59      	ldrb	r1, [r3, #13]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	7b98      	ldrb	r0, [r3, #14]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	8b12      	ldrh	r2, [r2, #24]
 8007e2e:	9202      	str	r2, [sp, #8]
 8007e30:	2202      	movs	r2, #2
 8007e32:	9201      	str	r2, [sp, #4]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4623      	mov	r3, r4
 8007e38:	4602      	mov	r2, r0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fea2 	bl	8008b84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7b19      	ldrb	r1, [r3, #12]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	7bd8      	ldrb	r0, [r3, #15]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	8b52      	ldrh	r2, [r2, #26]
 8007e58:	9202      	str	r2, [sp, #8]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	9201      	str	r2, [sp, #4]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4623      	mov	r3, r4
 8007e62:	4602      	mov	r2, r0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fe8d 	bl	8008b84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	7b5b      	ldrb	r3, [r3, #13]
 8007e76:	2200      	movs	r2, #0
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f94c 	bl	8009118 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	7b1b      	ldrb	r3, [r3, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 f945 	bl	8009118 <USBH_LL_SetToggle>

  return USBH_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd90      	pop	{r4, r7, pc}

08007e98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00e      	beq.n	8007ed0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fe82 	bl	8008bc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fead 	bl	8008c24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	7b1b      	ldrb	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7b1b      	ldrb	r3, [r3, #12]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fe6f 	bl	8008bc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	7b1b      	ldrb	r3, [r3, #12]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fe9a 	bl	8008c24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	7b5b      	ldrb	r3, [r3, #13]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00e      	beq.n	8007f1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	7b5b      	ldrb	r3, [r3, #13]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fe5c 	bl	8008bc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	7b5b      	ldrb	r3, [r3, #13]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fe87 	bl	8008c24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 f99f 	bl	8009274 <free>
    phost->pActiveClass->pData = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3340      	adds	r3, #64	; 0x40
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8b1 	bl	80080ca <GetLineCoding>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f78:	2102      	movs	r1, #2
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d877      	bhi.n	800809c <USBH_CDC_Process+0x114>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <USBH_CDC_Process+0x2c>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fcf 	.word	0x08007fcf
 8007fbc:	08007fff 	.word	0x08007fff
 8007fc0:	08008073 	.word	0x08008073
 8007fc4:	08008081 	.word	0x08008081
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
      break;
 8007fcc:	e06d      	b.n	80080aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f897 	bl	8008108 <SetLineCoding>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007fec:	e058      	b.n	80080a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d055      	beq.n	80080a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ffc:	e050      	b.n	80080a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3340      	adds	r3, #64	; 0x40
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f860 	bl	80080ca <GetLineCoding>
 800800a:	4603      	mov	r3, r0
 800800c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d126      	bne.n	8008062 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008026:	791b      	ldrb	r3, [r3, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d13b      	bne.n	80080a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008036:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008038:	429a      	cmp	r2, r3
 800803a:	d133      	bne.n	80080a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008046:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008048:	429a      	cmp	r2, r3
 800804a:	d12b      	bne.n	80080a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008056:	429a      	cmp	r2, r3
 8008058:	d124      	bne.n	80080a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f958 	bl	8008310 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008060:	e020      	b.n	80080a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d01d      	beq.n	80080a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2204      	movs	r2, #4
 800806c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008070:	e018      	b.n	80080a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f867 	bl	8008146 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8da 	bl	8008232 <CDC_ProcessReception>
      break;
 800807e:	e014      	b.n	80080aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fb08 	bl	8008698 <USBH_ClrFeature>
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800809a:	e005      	b.n	80080a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800809c:	bf00      	nop
 800809e:	e004      	b.n	80080aa <USBH_CDC_Process+0x122>
      break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <USBH_CDC_Process+0x122>
      break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <USBH_CDC_Process+0x122>
      break;
 80080a8:	bf00      	nop

  }

  return status;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	22a1      	movs	r2, #161	; 0xa1
 80080d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2221      	movs	r2, #33	; 0x21
 80080de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2207      	movs	r2, #7
 80080f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2207      	movs	r2, #7
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 faf1 	bl	80086e0 <USBH_CtlReq>
 80080fe:	4603      	mov	r3, r0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2221      	movs	r2, #33	; 0x21
 8008116:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2207      	movs	r2, #7
 800812e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2207      	movs	r2, #7
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fad2 	bl	80086e0 <USBH_CtlReq>
 800813c:	4603      	mov	r3, r0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af02      	add	r7, sp, #8
 800814c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008158:	2300      	movs	r3, #0
 800815a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008162:	2b01      	cmp	r3, #1
 8008164:	d002      	beq.n	800816c <CDC_ProcessTransmission+0x26>
 8008166:	2b02      	cmp	r3, #2
 8008168:	d023      	beq.n	80081b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800816a:	e05e      	b.n	800822a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	8b12      	ldrh	r2, [r2, #24]
 8008174:	4293      	cmp	r3, r2
 8008176:	d90b      	bls.n	8008190 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	69d9      	ldr	r1, [r3, #28]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8b1a      	ldrh	r2, [r3, #24]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	7b5b      	ldrb	r3, [r3, #13]
 8008184:	2001      	movs	r0, #1
 8008186:	9000      	str	r0, [sp, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fcb8 	bl	8008afe <USBH_BulkSendData>
 800818e:	e00b      	b.n	80081a8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	7b5b      	ldrb	r3, [r3, #13]
 800819e:	2001      	movs	r0, #1
 80081a0:	9000      	str	r0, [sp, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fcab 	bl	8008afe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081b0:	e03b      	b.n	800822a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	7b5b      	ldrb	r3, [r3, #13]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 ff83 	bl	80090c4 <USBH_LL_GetURBState>
 80081be:	4603      	mov	r3, r0
 80081c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d128      	bne.n	800821a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	8b12      	ldrh	r2, [r2, #24]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d90e      	bls.n	80081f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	8b12      	ldrh	r2, [r2, #24]
 80081dc:	1a9a      	subs	r2, r3, r2
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	8b12      	ldrh	r2, [r2, #24]
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	61da      	str	r2, [r3, #28]
 80081f0:	e002      	b.n	80081f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008208:	e00e      	b.n	8008228 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f868 	bl	80082e8 <USBH_CDC_TransmitCallback>
      break;
 8008218:	e006      	b.n	8008228 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d103      	bne.n	8008228 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008228:	bf00      	nop
  }
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008244:	2300      	movs	r3, #0
 8008246:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800824e:	2b03      	cmp	r3, #3
 8008250:	d002      	beq.n	8008258 <CDC_ProcessReception+0x26>
 8008252:	2b04      	cmp	r3, #4
 8008254:	d00e      	beq.n	8008274 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008256:	e043      	b.n	80082e0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	6a19      	ldr	r1, [r3, #32]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	8b5a      	ldrh	r2, [r3, #26]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	7b1b      	ldrb	r3, [r3, #12]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fc6f 	bl	8008b48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2204      	movs	r2, #4
 800826e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008272:	e035      	b.n	80082e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	7b1b      	ldrb	r3, [r3, #12]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 ff22 	bl	80090c4 <USBH_LL_GetURBState>
 8008280:	4603      	mov	r3, r0
 8008282:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d129      	bne.n	80082de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	7b1b      	ldrb	r3, [r3, #12]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fe85 	bl	8008fa0 <USBH_LL_GetLastXferSize>
 8008296:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d016      	beq.n	80082d0 <CDC_ProcessReception+0x9e>
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	8b5b      	ldrh	r3, [r3, #26]
 80082a6:	461a      	mov	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d910      	bls.n	80082d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1ad2      	subs	r2, r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a1a      	ldr	r2, [r3, #32]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	441a      	add	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2203      	movs	r2, #3
 80082ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80082ce:	e006      	b.n	80082de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f80f 	bl	80082fc <USBH_CDC_ReceiveCallback>
      break;
 80082de:	bf00      	nop
  }
}
 80082e0:	bf00      	nop
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	e029      	b.n	8008390 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	79fa      	ldrb	r2, [r7, #7]
 8008340:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f81f 	bl	8008398 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fd97 	bl	8008ebc <USBH_LL_Init>

  return USBH_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e009      	b.n	80083be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	33e0      	adds	r3, #224	; 0xe0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	2200      	movs	r2, #0
 80083b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b0e      	cmp	r3, #14
 80083c2:	d9f2      	bls.n	80083aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e009      	b.n	80083de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e4:	d3f1      	bcc.n	80083ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2240      	movs	r2, #64	; 0x40
 800840a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d016      	beq.n	8008482 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10e      	bne.n	800847c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008464:	1c59      	adds	r1, r3, #1
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	33de      	adds	r3, #222	; 0xde
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
 800847a:	e004      	b.n	8008486 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800847c:	2302      	movs	r3, #2
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e001      	b.n	8008486 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008482:	2302      	movs	r3, #2
 8008484:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d204      	bcs.n	80084ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80084b8:	e001      	b.n	80084be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80084ba:	2302      	movs	r3, #2
 80084bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	4603      	mov	r3, r0
 80084dc:	70fb      	strb	r3, [r7, #3]
 80084de:	460b      	mov	r3, r1
 80084e0:	70bb      	strb	r3, [r7, #2]
 80084e2:	4613      	mov	r3, r2
 80084e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80084f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80084f6:	e025      	b.n	8008544 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	221a      	movs	r2, #26
 80084fc:	fb02 f303 	mul.w	r3, r2, r3
 8008500:	3308      	adds	r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	3302      	adds	r3, #2
 8008508:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	795b      	ldrb	r3, [r3, #5]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	429a      	cmp	r2, r3
 8008512:	d002      	beq.n	800851a <USBH_FindInterface+0x4e>
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	2bff      	cmp	r3, #255	; 0xff
 8008518:	d111      	bne.n	800853e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800851e:	78ba      	ldrb	r2, [r7, #2]
 8008520:	429a      	cmp	r2, r3
 8008522:	d002      	beq.n	800852a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008524:	78bb      	ldrb	r3, [r7, #2]
 8008526:	2bff      	cmp	r3, #255	; 0xff
 8008528:	d109      	bne.n	800853e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800852e:	787a      	ldrb	r2, [r7, #1]
 8008530:	429a      	cmp	r2, r3
 8008532:	d002      	beq.n	800853a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008534:	787b      	ldrb	r3, [r7, #1]
 8008536:	2bff      	cmp	r3, #255	; 0xff
 8008538:	d101      	bne.n	800853e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	e006      	b.n	800854c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	3301      	adds	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d9d6      	bls.n	80084f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800854a:	23ff      	movs	r3, #255	; 0xff
}
 800854c:	4618      	mov	r0, r3
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fce7 	bl	8008f34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008566:	2101      	movs	r1, #1
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fdbe 	bl	80090ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f804 	bl	80085ba <USBH_HandleSof>
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d10a      	bne.n	80085e2 <USBH_HandleSof+0x28>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
  }
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80085fa:	bf00      	nop
}
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008616:	bf00      	nop
}
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc7a 	bl	8008f6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	791b      	ldrb	r3, [r3, #4]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fad1 	bl	8008c24 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	795b      	ldrb	r3, [r3, #5]
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 facb 	bl	8008c24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	789b      	ldrb	r3, [r3, #2]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d10f      	bne.n	80086cc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f805 	bl	80086e0 <USBH_CtlReq>
 80086d6:	4603      	mov	r3, r0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	789b      	ldrb	r3, [r3, #2]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d002      	beq.n	8008700 <USBH_CtlReq+0x20>
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d00f      	beq.n	800871e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086fe:	e027      	b.n	8008750 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	88fa      	ldrh	r2, [r7, #6]
 800870a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2202      	movs	r2, #2
 8008716:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
      break;
 800871c:	e018      	b.n	8008750 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 f81c 	bl	800875c <USBH_HandleControl>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <USBH_CtlReq+0x54>
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d106      	bne.n	8008742 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	761a      	strb	r2, [r3, #24]
      break;
 8008740:	e005      	b.n	800874e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d102      	bne.n	800874e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	709a      	strb	r2, [r3, #2]
      break;
 800874e:	bf00      	nop
  }
  return status;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af02      	add	r7, sp, #8
 8008762:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008768:	2300      	movs	r3, #0
 800876a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	7e1b      	ldrb	r3, [r3, #24]
 8008770:	3b01      	subs	r3, #1
 8008772:	2b0a      	cmp	r3, #10
 8008774:	f200 8156 	bhi.w	8008a24 <USBH_HandleControl+0x2c8>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <USBH_HandleControl+0x24>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	080087ad 	.word	0x080087ad
 8008784:	080087c7 	.word	0x080087c7
 8008788:	08008831 	.word	0x08008831
 800878c:	08008857 	.word	0x08008857
 8008790:	0800888f 	.word	0x0800888f
 8008794:	080088b9 	.word	0x080088b9
 8008798:	0800890b 	.word	0x0800890b
 800879c:	0800892d 	.word	0x0800892d
 80087a0:	08008969 	.word	0x08008969
 80087a4:	0800898f 	.word	0x0800898f
 80087a8:	080089cd 	.word	0x080089cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 0110 	add.w	r1, r3, #16
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	795b      	ldrb	r3, [r3, #5]
 80087b6:	461a      	mov	r2, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f943 	bl	8008a44 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e139      	b.n	8008a3a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	795b      	ldrb	r3, [r3, #5]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc79 	bl	80090c4 <USBH_LL_GetURBState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d11e      	bne.n	800881a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	7c1b      	ldrb	r3, [r3, #16]
 80087e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8adb      	ldrh	r3, [r3, #22]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087ee:	7b7b      	ldrb	r3, [r7, #13]
 80087f0:	2b80      	cmp	r3, #128	; 0x80
 80087f2:	d103      	bne.n	80087fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2203      	movs	r2, #3
 80087f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087fa:	e115      	b.n	8008a28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2205      	movs	r2, #5
 8008800:	761a      	strb	r2, [r3, #24]
      break;
 8008802:	e111      	b.n	8008a28 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008804:	7b7b      	ldrb	r3, [r7, #13]
 8008806:	2b80      	cmp	r3, #128	; 0x80
 8008808:	d103      	bne.n	8008812 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2209      	movs	r2, #9
 800880e:	761a      	strb	r2, [r3, #24]
      break;
 8008810:	e10a      	b.n	8008a28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2207      	movs	r2, #7
 8008816:	761a      	strb	r2, [r3, #24]
      break;
 8008818:	e106      	b.n	8008a28 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d003      	beq.n	8008828 <USBH_HandleControl+0xcc>
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b02      	cmp	r3, #2
 8008824:	f040 8100 	bne.w	8008a28 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	220b      	movs	r2, #11
 800882c:	761a      	strb	r2, [r3, #24]
      break;
 800882e:	e0fb      	b.n	8008a28 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008836:	b29a      	uxth	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6899      	ldr	r1, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	899a      	ldrh	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f93a 	bl	8008ac2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2204      	movs	r2, #4
 8008852:	761a      	strb	r2, [r3, #24]
      break;
 8008854:	e0f1      	b.n	8008a3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	791b      	ldrb	r3, [r3, #4]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fc31 	bl	80090c4 <USBH_LL_GetURBState>
 8008862:	4603      	mov	r3, r0
 8008864:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d102      	bne.n	8008872 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2209      	movs	r2, #9
 8008870:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b05      	cmp	r3, #5
 8008876:	d102      	bne.n	800887e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008878:	2303      	movs	r3, #3
 800887a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800887c:	e0d6      	b.n	8008a2c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b04      	cmp	r3, #4
 8008882:	f040 80d3 	bne.w	8008a2c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	220b      	movs	r2, #11
 800888a:	761a      	strb	r2, [r3, #24]
      break;
 800888c:	e0ce      	b.n	8008a2c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6899      	ldr	r1, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	899a      	ldrh	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	795b      	ldrb	r3, [r3, #5]
 800889a:	2001      	movs	r0, #1
 800889c:	9000      	str	r0, [sp, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f8ea 	bl	8008a78 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2206      	movs	r2, #6
 80088b4:	761a      	strb	r2, [r3, #24]
      break;
 80088b6:	e0c0      	b.n	8008a3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	795b      	ldrb	r3, [r3, #5]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc00 	bl	80090c4 <USBH_LL_GetURBState>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d103      	bne.n	80088d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2207      	movs	r2, #7
 80088d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088d4:	e0ac      	b.n	8008a30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b05      	cmp	r3, #5
 80088da:	d105      	bne.n	80088e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	220c      	movs	r2, #12
 80088e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088e2:	2303      	movs	r3, #3
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e0a3      	b.n	8008a30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2205      	movs	r2, #5
 80088f2:	761a      	strb	r2, [r3, #24]
      break;
 80088f4:	e09c      	b.n	8008a30 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	f040 8099 	bne.w	8008a30 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	220b      	movs	r2, #11
 8008902:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008904:	2302      	movs	r3, #2
 8008906:	73fb      	strb	r3, [r7, #15]
      break;
 8008908:	e092      	b.n	8008a30 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	2100      	movs	r1, #0
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f8d5 	bl	8008ac2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2208      	movs	r2, #8
 8008928:	761a      	strb	r2, [r3, #24]

      break;
 800892a:	e086      	b.n	8008a3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	791b      	ldrb	r3, [r3, #4]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fbc6 	bl	80090c4 <USBH_LL_GetURBState>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d105      	bne.n	800894e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	220d      	movs	r2, #13
 8008946:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800894c:	e072      	b.n	8008a34 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	2b04      	cmp	r3, #4
 8008952:	d103      	bne.n	800895c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	220b      	movs	r2, #11
 8008958:	761a      	strb	r2, [r3, #24]
      break;
 800895a:	e06b      	b.n	8008a34 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b05      	cmp	r3, #5
 8008960:	d168      	bne.n	8008a34 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008962:	2303      	movs	r3, #3
 8008964:	73fb      	strb	r3, [r7, #15]
      break;
 8008966:	e065      	b.n	8008a34 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	795b      	ldrb	r3, [r3, #5]
 800896c:	2201      	movs	r2, #1
 800896e:	9200      	str	r2, [sp, #0]
 8008970:	2200      	movs	r2, #0
 8008972:	2100      	movs	r1, #0
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f87f 	bl	8008a78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	220a      	movs	r2, #10
 800898a:	761a      	strb	r2, [r3, #24]
      break;
 800898c:	e055      	b.n	8008a3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	795b      	ldrb	r3, [r3, #5]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb95 	bl	80090c4 <USBH_LL_GetURBState>
 800899a:	4603      	mov	r3, r0
 800899c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d105      	bne.n	80089b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	220d      	movs	r2, #13
 80089ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089ae:	e043      	b.n	8008a38 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d103      	bne.n	80089be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2209      	movs	r2, #9
 80089ba:	761a      	strb	r2, [r3, #24]
      break;
 80089bc:	e03c      	b.n	8008a38 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d139      	bne.n	8008a38 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	220b      	movs	r2, #11
 80089c8:	761a      	strb	r2, [r3, #24]
      break;
 80089ca:	e035      	b.n	8008a38 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7e5b      	ldrb	r3, [r3, #25]
 80089d0:	3301      	adds	r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	765a      	strb	r2, [r3, #25]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	7e5b      	ldrb	r3, [r3, #25]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d806      	bhi.n	80089ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089ec:	e025      	b.n	8008a3a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089f4:	2106      	movs	r1, #6
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	795b      	ldrb	r3, [r3, #5]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f90c 	bl	8008c24 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	791b      	ldrb	r3, [r3, #4]
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f906 	bl	8008c24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	73fb      	strb	r3, [r7, #15]
      break;
 8008a22:	e00a      	b.n	8008a3a <USBH_HandleControl+0x2de>

    default:
      break;
 8008a24:	bf00      	nop
 8008a26:	e008      	b.n	8008a3a <USBH_HandleControl+0x2de>
      break;
 8008a28:	bf00      	nop
 8008a2a:	e006      	b.n	8008a3a <USBH_HandleControl+0x2de>
      break;
 8008a2c:	bf00      	nop
 8008a2e:	e004      	b.n	8008a3a <USBH_HandleControl+0x2de>
      break;
 8008a30:	bf00      	nop
 8008a32:	e002      	b.n	8008a3a <USBH_HandleControl+0x2de>
      break;
 8008a34:	bf00      	nop
 8008a36:	e000      	b.n	8008a3a <USBH_HandleControl+0x2de>
      break;
 8008a38:	bf00      	nop
  }

  return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af04      	add	r7, sp, #16
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a52:	79f9      	ldrb	r1, [r7, #7]
 8008a54:	2300      	movs	r3, #0
 8008a56:	9303      	str	r3, [sp, #12]
 8008a58:	2308      	movs	r3, #8
 8008a5a:	9302      	str	r3, [sp, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fafa 	bl	8009062 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af04      	add	r7, sp, #16
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4611      	mov	r1, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	460b      	mov	r3, r1
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a9c:	7979      	ldrb	r1, [r7, #5]
 8008a9e:	7e3b      	ldrb	r3, [r7, #24]
 8008aa0:	9303      	str	r3, [sp, #12]
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	9302      	str	r3, [sp, #8]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fad5 	bl	8009062 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b088      	sub	sp, #32
 8008ac6:	af04      	add	r7, sp, #16
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	4611      	mov	r1, r2
 8008ace:	461a      	mov	r2, r3
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	80fb      	strh	r3, [r7, #6]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ad8:	7979      	ldrb	r1, [r7, #5]
 8008ada:	2300      	movs	r3, #0
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	2300      	movs	r3, #0
 8008aec:	2201      	movs	r2, #1
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fab7 	bl	8009062 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008af4:	2300      	movs	r3, #0

}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af04      	add	r7, sp, #16
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	80fb      	strh	r3, [r7, #6]
 8008b10:	4613      	mov	r3, r2
 8008b12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b22:	7979      	ldrb	r1, [r7, #5]
 8008b24:	7e3b      	ldrb	r3, [r7, #24]
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	2301      	movs	r3, #1
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2302      	movs	r3, #2
 8008b36:	2200      	movs	r2, #0
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fa92 	bl	8009062 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af04      	add	r7, sp, #16
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	4611      	mov	r1, r2
 8008b54:	461a      	mov	r2, r3
 8008b56:	460b      	mov	r3, r1
 8008b58:	80fb      	strh	r3, [r7, #6]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b5e:	7979      	ldrb	r1, [r7, #5]
 8008b60:	2300      	movs	r3, #0
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2302      	movs	r3, #2
 8008b72:	2201      	movs	r2, #1
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fa74 	bl	8009062 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	70fb      	strb	r3, [r7, #3]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70bb      	strb	r3, [r7, #2]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b9e:	7878      	ldrb	r0, [r7, #1]
 8008ba0:	78ba      	ldrb	r2, [r7, #2]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	8b3b      	ldrh	r3, [r7, #24]
 8008ba6:	9302      	str	r3, [sp, #8]
 8008ba8:	7d3b      	ldrb	r3, [r7, #20]
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	7c3b      	ldrb	r3, [r7, #16]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fa07 	bl	8008fc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa26 	bl	8009024 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f836 	bl	8008c60 <USBH_GetFreePipe>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00a      	beq.n	8008c18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	89fb      	ldrh	r3, [r7, #14]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	33e0      	adds	r3, #224	; 0xe0
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c18:	89fb      	ldrh	r3, [r7, #14]
 8008c1a:	b2db      	uxtb	r3, r3
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	2b0a      	cmp	r3, #10
 8008c34:	d80d      	bhi.n	8008c52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	33e0      	adds	r3, #224	; 0xe0
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	33e0      	adds	r3, #224	; 0xe0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e00f      	b.n	8008c92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	33e0      	adds	r3, #224	; 0xe0
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	e007      	b.n	8008c9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b0a      	cmp	r3, #10
 8008c96:	d9ec      	bls.n	8008c72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cac:	2201      	movs	r2, #1
 8008cae:	490e      	ldr	r1, [pc, #56]	; (8008ce8 <MX_USB_HOST_Init+0x40>)
 8008cb0:	480e      	ldr	r0, [pc, #56]	; (8008cec <MX_USB_HOST_Init+0x44>)
 8008cb2:	f7ff fb37 	bl	8008324 <USBH_Init>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cbc:	f7f9 fa0a 	bl	80020d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cc0:	490b      	ldr	r1, [pc, #44]	; (8008cf0 <MX_USB_HOST_Init+0x48>)
 8008cc2:	480a      	ldr	r0, [pc, #40]	; (8008cec <MX_USB_HOST_Init+0x44>)
 8008cc4:	f7ff fbbc 	bl	8008440 <USBH_RegisterClass>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cce:	f7f9 fa01 	bl	80020d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cd2:	4806      	ldr	r0, [pc, #24]	; (8008cec <MX_USB_HOST_Init+0x44>)
 8008cd4:	f7ff fc40 	bl	8008558 <USBH_Start>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cde:	f7f9 f9f9 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08008cf5 	.word	0x08008cf5
 8008cec:	20000200 	.word	0x20000200
 8008cf0:	2000000c 	.word	0x2000000c

08008cf4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d819      	bhi.n	8008d3c <USBH_UserProcess+0x48>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBH_UserProcess+0x1c>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d3d 	.word	0x08008d3d
 8008d1c:	08008d35 	.word	0x08008d35
 8008d20:	08008d25 	.word	0x08008d25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <USBH_UserProcess+0x58>)
 8008d26:	2203      	movs	r2, #3
 8008d28:	701a      	strb	r2, [r3, #0]
  break;
 8008d2a:	e008      	b.n	8008d3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <USBH_UserProcess+0x58>)
 8008d2e:	2202      	movs	r2, #2
 8008d30:	701a      	strb	r2, [r3, #0]
  break;
 8008d32:	e004      	b.n	8008d3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <USBH_UserProcess+0x58>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
  break;
 8008d3a:	e000      	b.n	8008d3e <USBH_UserProcess+0x4a>

  default:
  break;
 8008d3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	200000b4 	.word	0x200000b4

08008d50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d58:	f107 0314 	add.w	r3, r7, #20
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	609a      	str	r2, [r3, #8]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d70:	d147      	bne.n	8008e02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	4a24      	ldr	r2, [pc, #144]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008d7c:	f043 0301 	orr.w	r3, r3, #1
 8008d80:	6313      	str	r3, [r2, #48]	; 0x30
 8008d82:	4b22      	ldr	r3, [pc, #136]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	4619      	mov	r1, r3
 8008da2:	481b      	ldr	r0, [pc, #108]	; (8008e10 <HAL_HCD_MspInit+0xc0>)
 8008da4:	f7f9 fdf6 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008da8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dae:	2302      	movs	r3, #2
 8008db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008db6:	2300      	movs	r3, #0
 8008db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dba:	230a      	movs	r3, #10
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dbe:	f107 0314 	add.w	r3, r7, #20
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4812      	ldr	r0, [pc, #72]	; (8008e10 <HAL_HCD_MspInit+0xc0>)
 8008dc6:	f7f9 fde5 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	4a0f      	ldr	r2, [pc, #60]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	6353      	str	r3, [r2, #52]	; 0x34
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	4a0b      	ldr	r2, [pc, #44]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_HCD_MspInit+0xbc>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	2043      	movs	r0, #67	; 0x43
 8008df8:	f7f9 fd95 	bl	8002926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dfc:	2043      	movs	r0, #67	; 0x43
 8008dfe:	f7f9 fdae 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e02:	bf00      	nop
 8008e04:	3728      	adds	r7, #40	; 0x28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40023800 	.word	0x40023800
 8008e10:	40020000 	.word	0x40020000

08008e14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fbb7 	bl	8008596 <USBH_LL_IncTimer>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fbef 	bl	8008622 <USBH_LL_Connect>
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fbf8 	bl	8008650 <USBH_LL_Disconnect>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
 8008e74:	4613      	mov	r3, r2
 8008e76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fba9 	bl	80085ea <USBH_LL_PortEnabled>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff fba9 	bl	8008606 <USBH_LL_PortDisabled>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d12a      	bne.n	8008f24 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ece:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <USBH_LL_Init+0x74>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <USBH_LL_Init+0x74>)
 8008eda:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ede:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <USBH_LL_Init+0x74>)
 8008ee0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ee4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <USBH_LL_Init+0x74>)
 8008ee8:	2208      	movs	r2, #8
 8008eea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <USBH_LL_Init+0x74>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <USBH_LL_Init+0x74>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <USBH_LL_Init+0x74>)
 8008efa:	2202      	movs	r2, #2
 8008efc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <USBH_LL_Init+0x74>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f04:	480a      	ldr	r0, [pc, #40]	; (8008f30 <USBH_LL_Init+0x74>)
 8008f06:	f7f9 fefa 	bl	8002cfe <HAL_HCD_Init>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f10:	f7f9 f8e0 	bl	80020d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f14:	4806      	ldr	r0, [pc, #24]	; (8008f30 <USBH_LL_Init+0x74>)
 8008f16:	f7fa fad0 	bl	80034ba <HAL_HCD_GetCurrentFrame>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fb2a 	bl	8008578 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200005d8 	.word	0x200005d8

08008f34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fa fa4d 	bl	80033ea <HAL_HCD_Start>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f90e 	bl	8009178 <USBH_Get_USB_Status>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fa fa55 	bl	8003430 <HAL_HCD_Stop>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f8f3 	bl	8009178 <USBH_Get_USB_Status>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fa fa6b 	bl	8003492 <HAL_HCD_HC_GetXferCount>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fc6:	b590      	push	{r4, r7, lr}
 8008fc8:	b089      	sub	sp, #36	; 0x24
 8008fca:	af04      	add	r7, sp, #16
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	70fb      	strb	r3, [r7, #3]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70bb      	strb	r3, [r7, #2]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fee:	787c      	ldrb	r4, [r7, #1]
 8008ff0:	78ba      	ldrb	r2, [r7, #2]
 8008ff2:	78f9      	ldrb	r1, [r7, #3]
 8008ff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ff6:	9302      	str	r3, [sp, #8]
 8008ff8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4623      	mov	r3, r4
 8009006:	f7f9 fedc 	bl	8002dc2 <HAL_HCD_HC_Init>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f8b1 	bl	8009178 <USBH_Get_USB_Status>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901a:	7bbb      	ldrb	r3, [r7, #14]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	bd90      	pop	{r4, r7, pc}

08009024 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	4611      	mov	r1, r2
 8009042:	4618      	mov	r0, r3
 8009044:	f7f9 ff4c 	bl	8002ee0 <HAL_HCD_HC_Halt>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f892 	bl	8009178 <USBH_Get_USB_Status>
 8009054:	4603      	mov	r3, r0
 8009056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009058:	7bbb      	ldrb	r3, [r7, #14]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009062:	b590      	push	{r4, r7, lr}
 8009064:	b089      	sub	sp, #36	; 0x24
 8009066:	af04      	add	r7, sp, #16
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	461a      	mov	r2, r3
 8009070:	4603      	mov	r3, r0
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	460b      	mov	r3, r1
 8009076:	70bb      	strb	r3, [r7, #2]
 8009078:	4613      	mov	r3, r2
 800907a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800908a:	787c      	ldrb	r4, [r7, #1]
 800908c:	78ba      	ldrb	r2, [r7, #2]
 800908e:	78f9      	ldrb	r1, [r7, #3]
 8009090:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009098:	9302      	str	r3, [sp, #8]
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4623      	mov	r3, r4
 80090a6:	f7f9 ff3f 	bl	8002f28 <HAL_HCD_HC_SubmitRequest>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f861 	bl	8009178 <USBH_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd90      	pop	{r4, r7, pc}

080090c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa f9c5 	bl	800346a <HAL_HCD_HC_GetURBState>
 80090e0:	4603      	mov	r3, r0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d103      	bne.n	8009108 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f864 	bl	80091d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009108:	20c8      	movs	r0, #200	; 0xc8
 800910a:	f7f9 fb0d 	bl	8002728 <HAL_Delay>
  return USBH_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
 8009124:	4613      	mov	r3, r2
 8009126:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800912e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	212c      	movs	r1, #44	; 0x2c
 8009136:	fb01 f303 	mul.w	r3, r1, r3
 800913a:	4413      	add	r3, r2
 800913c:	333b      	adds	r3, #59	; 0x3b
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	212c      	movs	r1, #44	; 0x2c
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	4413      	add	r3, r2
 8009150:	3354      	adds	r3, #84	; 0x54
 8009152:	78ba      	ldrb	r2, [r7, #2]
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	e008      	b.n	800916a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	212c      	movs	r1, #44	; 0x2c
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	4413      	add	r3, r2
 8009164:	3355      	adds	r3, #85	; 0x55
 8009166:	78ba      	ldrb	r2, [r7, #2]
 8009168:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d817      	bhi.n	80091bc <USBH_Get_USB_Status+0x44>
 800918c:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <USBH_Get_USB_Status+0x1c>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091ab 	.word	0x080091ab
 800919c:	080091b1 	.word	0x080091b1
 80091a0:	080091b7 	.word	0x080091b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]
    break;
 80091a8:	e00b      	b.n	80091c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091aa:	2302      	movs	r3, #2
 80091ac:	73fb      	strb	r3, [r7, #15]
    break;
 80091ae:	e008      	b.n	80091c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	e005      	b.n	80091c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ba:	e002      	b.n	80091c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80091bc:	2302      	movs	r3, #2
 80091be:	73fb      	strb	r3, [r7, #15]
    break;
 80091c0:	bf00      	nop
  }
  return usb_status;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
 80091e8:	e001      	b.n	80091ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	461a      	mov	r2, r3
 80091f2:	2101      	movs	r1, #1
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <MX_DriverVbusFS+0x34>)
 80091f6:	f7f9 fd69 	bl	8002ccc <HAL_GPIO_WritePin>
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	40020800 	.word	0x40020800

08009208 <atoi>:
 8009208:	220a      	movs	r2, #10
 800920a:	2100      	movs	r1, #0
 800920c:	f000 b9dc 	b.w	80095c8 <strtol>

08009210 <__errno>:
 8009210:	4b01      	ldr	r3, [pc, #4]	; (8009218 <__errno+0x8>)
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	2000002c 	.word	0x2000002c

0800921c <__libc_init_array>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4d0d      	ldr	r5, [pc, #52]	; (8009254 <__libc_init_array+0x38>)
 8009220:	4c0d      	ldr	r4, [pc, #52]	; (8009258 <__libc_init_array+0x3c>)
 8009222:	1b64      	subs	r4, r4, r5
 8009224:	10a4      	asrs	r4, r4, #2
 8009226:	2600      	movs	r6, #0
 8009228:	42a6      	cmp	r6, r4
 800922a:	d109      	bne.n	8009240 <__libc_init_array+0x24>
 800922c:	4d0b      	ldr	r5, [pc, #44]	; (800925c <__libc_init_array+0x40>)
 800922e:	4c0c      	ldr	r4, [pc, #48]	; (8009260 <__libc_init_array+0x44>)
 8009230:	f003 f830 	bl	800c294 <_init>
 8009234:	1b64      	subs	r4, r4, r5
 8009236:	10a4      	asrs	r4, r4, #2
 8009238:	2600      	movs	r6, #0
 800923a:	42a6      	cmp	r6, r4
 800923c:	d105      	bne.n	800924a <__libc_init_array+0x2e>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	f855 3b04 	ldr.w	r3, [r5], #4
 8009244:	4798      	blx	r3
 8009246:	3601      	adds	r6, #1
 8009248:	e7ee      	b.n	8009228 <__libc_init_array+0xc>
 800924a:	f855 3b04 	ldr.w	r3, [r5], #4
 800924e:	4798      	blx	r3
 8009250:	3601      	adds	r6, #1
 8009252:	e7f2      	b.n	800923a <__libc_init_array+0x1e>
 8009254:	0800c778 	.word	0x0800c778
 8009258:	0800c778 	.word	0x0800c778
 800925c:	0800c778 	.word	0x0800c778
 8009260:	0800c77c 	.word	0x0800c77c

08009264 <malloc>:
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <malloc+0xc>)
 8009266:	4601      	mov	r1, r0
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	f000 b863 	b.w	8009334 <_malloc_r>
 800926e:	bf00      	nop
 8009270:	2000002c 	.word	0x2000002c

08009274 <free>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <free+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f000 b80b 	b.w	8009294 <_free_r>
 800927e:	bf00      	nop
 8009280:	2000002c 	.word	0x2000002c

08009284 <memset>:
 8009284:	4402      	add	r2, r0
 8009286:	4603      	mov	r3, r0
 8009288:	4293      	cmp	r3, r2
 800928a:	d100      	bne.n	800928e <memset+0xa>
 800928c:	4770      	bx	lr
 800928e:	f803 1b01 	strb.w	r1, [r3], #1
 8009292:	e7f9      	b.n	8009288 <memset+0x4>

08009294 <_free_r>:
 8009294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009296:	2900      	cmp	r1, #0
 8009298:	d048      	beq.n	800932c <_free_r+0x98>
 800929a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800929e:	9001      	str	r0, [sp, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f1a1 0404 	sub.w	r4, r1, #4
 80092a6:	bfb8      	it	lt
 80092a8:	18e4      	addlt	r4, r4, r3
 80092aa:	f000 f9c7 	bl	800963c <__malloc_lock>
 80092ae:	4a20      	ldr	r2, [pc, #128]	; (8009330 <_free_r+0x9c>)
 80092b0:	9801      	ldr	r0, [sp, #4]
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	4615      	mov	r5, r2
 80092b6:	b933      	cbnz	r3, 80092c6 <_free_r+0x32>
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	6014      	str	r4, [r2, #0]
 80092bc:	b003      	add	sp, #12
 80092be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c2:	f000 b9c1 	b.w	8009648 <__malloc_unlock>
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	d90b      	bls.n	80092e2 <_free_r+0x4e>
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	1862      	adds	r2, r4, r1
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf04      	itt	eq
 80092d2:	681a      	ldreq	r2, [r3, #0]
 80092d4:	685b      	ldreq	r3, [r3, #4]
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	bf04      	itt	eq
 80092da:	1852      	addeq	r2, r2, r1
 80092dc:	6022      	streq	r2, [r4, #0]
 80092de:	602c      	str	r4, [r5, #0]
 80092e0:	e7ec      	b.n	80092bc <_free_r+0x28>
 80092e2:	461a      	mov	r2, r3
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	b10b      	cbz	r3, 80092ec <_free_r+0x58>
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d9fa      	bls.n	80092e2 <_free_r+0x4e>
 80092ec:	6811      	ldr	r1, [r2, #0]
 80092ee:	1855      	adds	r5, r2, r1
 80092f0:	42a5      	cmp	r5, r4
 80092f2:	d10b      	bne.n	800930c <_free_r+0x78>
 80092f4:	6824      	ldr	r4, [r4, #0]
 80092f6:	4421      	add	r1, r4
 80092f8:	1854      	adds	r4, r2, r1
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	6011      	str	r1, [r2, #0]
 80092fe:	d1dd      	bne.n	80092bc <_free_r+0x28>
 8009300:	681c      	ldr	r4, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	6053      	str	r3, [r2, #4]
 8009306:	4421      	add	r1, r4
 8009308:	6011      	str	r1, [r2, #0]
 800930a:	e7d7      	b.n	80092bc <_free_r+0x28>
 800930c:	d902      	bls.n	8009314 <_free_r+0x80>
 800930e:	230c      	movs	r3, #12
 8009310:	6003      	str	r3, [r0, #0]
 8009312:	e7d3      	b.n	80092bc <_free_r+0x28>
 8009314:	6825      	ldr	r5, [r4, #0]
 8009316:	1961      	adds	r1, r4, r5
 8009318:	428b      	cmp	r3, r1
 800931a:	bf04      	itt	eq
 800931c:	6819      	ldreq	r1, [r3, #0]
 800931e:	685b      	ldreq	r3, [r3, #4]
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	bf04      	itt	eq
 8009324:	1949      	addeq	r1, r1, r5
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	6054      	str	r4, [r2, #4]
 800932a:	e7c7      	b.n	80092bc <_free_r+0x28>
 800932c:	b003      	add	sp, #12
 800932e:	bd30      	pop	{r4, r5, pc}
 8009330:	200000b8 	.word	0x200000b8

08009334 <_malloc_r>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	1ccd      	adds	r5, r1, #3
 8009338:	f025 0503 	bic.w	r5, r5, #3
 800933c:	3508      	adds	r5, #8
 800933e:	2d0c      	cmp	r5, #12
 8009340:	bf38      	it	cc
 8009342:	250c      	movcc	r5, #12
 8009344:	2d00      	cmp	r5, #0
 8009346:	4606      	mov	r6, r0
 8009348:	db01      	blt.n	800934e <_malloc_r+0x1a>
 800934a:	42a9      	cmp	r1, r5
 800934c:	d903      	bls.n	8009356 <_malloc_r+0x22>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	2000      	movs	r0, #0
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009356:	f000 f971 	bl	800963c <__malloc_lock>
 800935a:	4921      	ldr	r1, [pc, #132]	; (80093e0 <_malloc_r+0xac>)
 800935c:	680a      	ldr	r2, [r1, #0]
 800935e:	4614      	mov	r4, r2
 8009360:	b99c      	cbnz	r4, 800938a <_malloc_r+0x56>
 8009362:	4f20      	ldr	r7, [pc, #128]	; (80093e4 <_malloc_r+0xb0>)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	b923      	cbnz	r3, 8009372 <_malloc_r+0x3e>
 8009368:	4621      	mov	r1, r4
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f83c 	bl	80093e8 <_sbrk_r>
 8009370:	6038      	str	r0, [r7, #0]
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f837 	bl	80093e8 <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d123      	bne.n	80093c6 <_malloc_r+0x92>
 800937e:	230c      	movs	r3, #12
 8009380:	6033      	str	r3, [r6, #0]
 8009382:	4630      	mov	r0, r6
 8009384:	f000 f960 	bl	8009648 <__malloc_unlock>
 8009388:	e7e3      	b.n	8009352 <_malloc_r+0x1e>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	1b5b      	subs	r3, r3, r5
 800938e:	d417      	bmi.n	80093c0 <_malloc_r+0x8c>
 8009390:	2b0b      	cmp	r3, #11
 8009392:	d903      	bls.n	800939c <_malloc_r+0x68>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	441c      	add	r4, r3
 8009398:	6025      	str	r5, [r4, #0]
 800939a:	e004      	b.n	80093a6 <_malloc_r+0x72>
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	42a2      	cmp	r2, r4
 80093a0:	bf0c      	ite	eq
 80093a2:	600b      	streq	r3, [r1, #0]
 80093a4:	6053      	strne	r3, [r2, #4]
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f94e 	bl	8009648 <__malloc_unlock>
 80093ac:	f104 000b 	add.w	r0, r4, #11
 80093b0:	1d23      	adds	r3, r4, #4
 80093b2:	f020 0007 	bic.w	r0, r0, #7
 80093b6:	1ac2      	subs	r2, r0, r3
 80093b8:	d0cc      	beq.n	8009354 <_malloc_r+0x20>
 80093ba:	1a1b      	subs	r3, r3, r0
 80093bc:	50a3      	str	r3, [r4, r2]
 80093be:	e7c9      	b.n	8009354 <_malloc_r+0x20>
 80093c0:	4622      	mov	r2, r4
 80093c2:	6864      	ldr	r4, [r4, #4]
 80093c4:	e7cc      	b.n	8009360 <_malloc_r+0x2c>
 80093c6:	1cc4      	adds	r4, r0, #3
 80093c8:	f024 0403 	bic.w	r4, r4, #3
 80093cc:	42a0      	cmp	r0, r4
 80093ce:	d0e3      	beq.n	8009398 <_malloc_r+0x64>
 80093d0:	1a21      	subs	r1, r4, r0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f808 	bl	80093e8 <_sbrk_r>
 80093d8:	3001      	adds	r0, #1
 80093da:	d1dd      	bne.n	8009398 <_malloc_r+0x64>
 80093dc:	e7cf      	b.n	800937e <_malloc_r+0x4a>
 80093de:	bf00      	nop
 80093e0:	200000b8 	.word	0x200000b8
 80093e4:	200000bc 	.word	0x200000bc

080093e8 <_sbrk_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d06      	ldr	r5, [pc, #24]	; (8009404 <_sbrk_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f9 f8b4 	bl	8002560 <_sbrk>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_sbrk_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_sbrk_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	200008dc 	.word	0x200008dc

08009408 <strtok>:
 8009408:	4b16      	ldr	r3, [pc, #88]	; (8009464 <strtok+0x5c>)
 800940a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800940c:	681e      	ldr	r6, [r3, #0]
 800940e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009410:	4605      	mov	r5, r0
 8009412:	b9fc      	cbnz	r4, 8009454 <strtok+0x4c>
 8009414:	2050      	movs	r0, #80	; 0x50
 8009416:	9101      	str	r1, [sp, #4]
 8009418:	f7ff ff24 	bl	8009264 <malloc>
 800941c:	9901      	ldr	r1, [sp, #4]
 800941e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009420:	4602      	mov	r2, r0
 8009422:	b920      	cbnz	r0, 800942e <strtok+0x26>
 8009424:	4b10      	ldr	r3, [pc, #64]	; (8009468 <strtok+0x60>)
 8009426:	4811      	ldr	r0, [pc, #68]	; (800946c <strtok+0x64>)
 8009428:	2157      	movs	r1, #87	; 0x57
 800942a:	f000 f8d7 	bl	80095dc <__assert_func>
 800942e:	e9c0 4400 	strd	r4, r4, [r0]
 8009432:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009436:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800943a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800943e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009442:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009446:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800944a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800944e:	6184      	str	r4, [r0, #24]
 8009450:	7704      	strb	r4, [r0, #28]
 8009452:	6244      	str	r4, [r0, #36]	; 0x24
 8009454:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009456:	2301      	movs	r3, #1
 8009458:	4628      	mov	r0, r5
 800945a:	b002      	add	sp, #8
 800945c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009460:	f000 b806 	b.w	8009470 <__strtok_r>
 8009464:	2000002c 	.word	0x2000002c
 8009468:	0800c30c 	.word	0x0800c30c
 800946c:	0800c323 	.word	0x0800c323

08009470 <__strtok_r>:
 8009470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009472:	b908      	cbnz	r0, 8009478 <__strtok_r+0x8>
 8009474:	6810      	ldr	r0, [r2, #0]
 8009476:	b188      	cbz	r0, 800949c <__strtok_r+0x2c>
 8009478:	4604      	mov	r4, r0
 800947a:	4620      	mov	r0, r4
 800947c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009480:	460f      	mov	r7, r1
 8009482:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009486:	b91e      	cbnz	r6, 8009490 <__strtok_r+0x20>
 8009488:	b965      	cbnz	r5, 80094a4 <__strtok_r+0x34>
 800948a:	6015      	str	r5, [r2, #0]
 800948c:	4628      	mov	r0, r5
 800948e:	e005      	b.n	800949c <__strtok_r+0x2c>
 8009490:	42b5      	cmp	r5, r6
 8009492:	d1f6      	bne.n	8009482 <__strtok_r+0x12>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f0      	bne.n	800947a <__strtok_r+0xa>
 8009498:	6014      	str	r4, [r2, #0]
 800949a:	7003      	strb	r3, [r0, #0]
 800949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800949e:	461c      	mov	r4, r3
 80094a0:	e00c      	b.n	80094bc <__strtok_r+0x4c>
 80094a2:	b915      	cbnz	r5, 80094aa <__strtok_r+0x3a>
 80094a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094a8:	460e      	mov	r6, r1
 80094aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80094ae:	42ab      	cmp	r3, r5
 80094b0:	d1f7      	bne.n	80094a2 <__strtok_r+0x32>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0f3      	beq.n	800949e <__strtok_r+0x2e>
 80094b6:	2300      	movs	r3, #0
 80094b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80094bc:	6014      	str	r4, [r2, #0]
 80094be:	e7ed      	b.n	800949c <__strtok_r+0x2c>

080094c0 <_strtol_l.isra.0>:
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c6:	d001      	beq.n	80094cc <_strtol_l.isra.0+0xc>
 80094c8:	2b24      	cmp	r3, #36	; 0x24
 80094ca:	d906      	bls.n	80094da <_strtol_l.isra.0+0x1a>
 80094cc:	f7ff fea0 	bl	8009210 <__errno>
 80094d0:	2316      	movs	r3, #22
 80094d2:	6003      	str	r3, [r0, #0]
 80094d4:	2000      	movs	r0, #0
 80094d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094da:	4f3a      	ldr	r7, [pc, #232]	; (80095c4 <_strtol_l.isra.0+0x104>)
 80094dc:	468e      	mov	lr, r1
 80094de:	4676      	mov	r6, lr
 80094e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80094e4:	5de5      	ldrb	r5, [r4, r7]
 80094e6:	f015 0508 	ands.w	r5, r5, #8
 80094ea:	d1f8      	bne.n	80094de <_strtol_l.isra.0+0x1e>
 80094ec:	2c2d      	cmp	r4, #45	; 0x2d
 80094ee:	d134      	bne.n	800955a <_strtol_l.isra.0+0x9a>
 80094f0:	f89e 4000 	ldrb.w	r4, [lr]
 80094f4:	f04f 0801 	mov.w	r8, #1
 80094f8:	f106 0e02 	add.w	lr, r6, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d05c      	beq.n	80095ba <_strtol_l.isra.0+0xfa>
 8009500:	2b10      	cmp	r3, #16
 8009502:	d10c      	bne.n	800951e <_strtol_l.isra.0+0x5e>
 8009504:	2c30      	cmp	r4, #48	; 0x30
 8009506:	d10a      	bne.n	800951e <_strtol_l.isra.0+0x5e>
 8009508:	f89e 4000 	ldrb.w	r4, [lr]
 800950c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009510:	2c58      	cmp	r4, #88	; 0x58
 8009512:	d14d      	bne.n	80095b0 <_strtol_l.isra.0+0xf0>
 8009514:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009518:	2310      	movs	r3, #16
 800951a:	f10e 0e02 	add.w	lr, lr, #2
 800951e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009522:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009526:	2600      	movs	r6, #0
 8009528:	fbbc f9f3 	udiv	r9, ip, r3
 800952c:	4635      	mov	r5, r6
 800952e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009532:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009536:	2f09      	cmp	r7, #9
 8009538:	d818      	bhi.n	800956c <_strtol_l.isra.0+0xac>
 800953a:	463c      	mov	r4, r7
 800953c:	42a3      	cmp	r3, r4
 800953e:	dd24      	ble.n	800958a <_strtol_l.isra.0+0xca>
 8009540:	2e00      	cmp	r6, #0
 8009542:	db1f      	blt.n	8009584 <_strtol_l.isra.0+0xc4>
 8009544:	45a9      	cmp	r9, r5
 8009546:	d31d      	bcc.n	8009584 <_strtol_l.isra.0+0xc4>
 8009548:	d101      	bne.n	800954e <_strtol_l.isra.0+0x8e>
 800954a:	45a2      	cmp	sl, r4
 800954c:	db1a      	blt.n	8009584 <_strtol_l.isra.0+0xc4>
 800954e:	fb05 4503 	mla	r5, r5, r3, r4
 8009552:	2601      	movs	r6, #1
 8009554:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009558:	e7eb      	b.n	8009532 <_strtol_l.isra.0+0x72>
 800955a:	2c2b      	cmp	r4, #43	; 0x2b
 800955c:	bf08      	it	eq
 800955e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009562:	46a8      	mov	r8, r5
 8009564:	bf08      	it	eq
 8009566:	f106 0e02 	addeq.w	lr, r6, #2
 800956a:	e7c7      	b.n	80094fc <_strtol_l.isra.0+0x3c>
 800956c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009570:	2f19      	cmp	r7, #25
 8009572:	d801      	bhi.n	8009578 <_strtol_l.isra.0+0xb8>
 8009574:	3c37      	subs	r4, #55	; 0x37
 8009576:	e7e1      	b.n	800953c <_strtol_l.isra.0+0x7c>
 8009578:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800957c:	2f19      	cmp	r7, #25
 800957e:	d804      	bhi.n	800958a <_strtol_l.isra.0+0xca>
 8009580:	3c57      	subs	r4, #87	; 0x57
 8009582:	e7db      	b.n	800953c <_strtol_l.isra.0+0x7c>
 8009584:	f04f 36ff 	mov.w	r6, #4294967295
 8009588:	e7e4      	b.n	8009554 <_strtol_l.isra.0+0x94>
 800958a:	2e00      	cmp	r6, #0
 800958c:	da05      	bge.n	800959a <_strtol_l.isra.0+0xda>
 800958e:	2322      	movs	r3, #34	; 0x22
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	4665      	mov	r5, ip
 8009594:	b942      	cbnz	r2, 80095a8 <_strtol_l.isra.0+0xe8>
 8009596:	4628      	mov	r0, r5
 8009598:	e79d      	b.n	80094d6 <_strtol_l.isra.0+0x16>
 800959a:	f1b8 0f00 	cmp.w	r8, #0
 800959e:	d000      	beq.n	80095a2 <_strtol_l.isra.0+0xe2>
 80095a0:	426d      	negs	r5, r5
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d0f7      	beq.n	8009596 <_strtol_l.isra.0+0xd6>
 80095a6:	b10e      	cbz	r6, 80095ac <_strtol_l.isra.0+0xec>
 80095a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	e7f2      	b.n	8009596 <_strtol_l.isra.0+0xd6>
 80095b0:	2430      	movs	r4, #48	; 0x30
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1b3      	bne.n	800951e <_strtol_l.isra.0+0x5e>
 80095b6:	2308      	movs	r3, #8
 80095b8:	e7b1      	b.n	800951e <_strtol_l.isra.0+0x5e>
 80095ba:	2c30      	cmp	r4, #48	; 0x30
 80095bc:	d0a4      	beq.n	8009508 <_strtol_l.isra.0+0x48>
 80095be:	230a      	movs	r3, #10
 80095c0:	e7ad      	b.n	800951e <_strtol_l.isra.0+0x5e>
 80095c2:	bf00      	nop
 80095c4:	0800c3c1 	.word	0x0800c3c1

080095c8 <strtol>:
 80095c8:	4613      	mov	r3, r2
 80095ca:	460a      	mov	r2, r1
 80095cc:	4601      	mov	r1, r0
 80095ce:	4802      	ldr	r0, [pc, #8]	; (80095d8 <strtol+0x10>)
 80095d0:	6800      	ldr	r0, [r0, #0]
 80095d2:	f7ff bf75 	b.w	80094c0 <_strtol_l.isra.0>
 80095d6:	bf00      	nop
 80095d8:	2000002c 	.word	0x2000002c

080095dc <__assert_func>:
 80095dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095de:	4614      	mov	r4, r2
 80095e0:	461a      	mov	r2, r3
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <__assert_func+0x2c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4605      	mov	r5, r0
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	b14c      	cbz	r4, 8009600 <__assert_func+0x24>
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <__assert_func+0x30>)
 80095ee:	9100      	str	r1, [sp, #0]
 80095f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095f4:	4906      	ldr	r1, [pc, #24]	; (8009610 <__assert_func+0x34>)
 80095f6:	462b      	mov	r3, r5
 80095f8:	f000 f80e 	bl	8009618 <fiprintf>
 80095fc:	f000 fbd8 	bl	8009db0 <abort>
 8009600:	4b04      	ldr	r3, [pc, #16]	; (8009614 <__assert_func+0x38>)
 8009602:	461c      	mov	r4, r3
 8009604:	e7f3      	b.n	80095ee <__assert_func+0x12>
 8009606:	bf00      	nop
 8009608:	2000002c 	.word	0x2000002c
 800960c:	0800c384 	.word	0x0800c384
 8009610:	0800c391 	.word	0x0800c391
 8009614:	0800c3bf 	.word	0x0800c3bf

08009618 <fiprintf>:
 8009618:	b40e      	push	{r1, r2, r3}
 800961a:	b503      	push	{r0, r1, lr}
 800961c:	4601      	mov	r1, r0
 800961e:	ab03      	add	r3, sp, #12
 8009620:	4805      	ldr	r0, [pc, #20]	; (8009638 <fiprintf+0x20>)
 8009622:	f853 2b04 	ldr.w	r2, [r3], #4
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f000 f83d 	bl	80096a8 <_vfiprintf_r>
 800962e:	b002      	add	sp, #8
 8009630:	f85d eb04 	ldr.w	lr, [sp], #4
 8009634:	b003      	add	sp, #12
 8009636:	4770      	bx	lr
 8009638:	2000002c 	.word	0x2000002c

0800963c <__malloc_lock>:
 800963c:	4801      	ldr	r0, [pc, #4]	; (8009644 <__malloc_lock+0x8>)
 800963e:	f000 bd77 	b.w	800a130 <__retarget_lock_acquire_recursive>
 8009642:	bf00      	nop
 8009644:	200008e4 	.word	0x200008e4

08009648 <__malloc_unlock>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__malloc_unlock+0x8>)
 800964a:	f000 bd72 	b.w	800a132 <__retarget_lock_release_recursive>
 800964e:	bf00      	nop
 8009650:	200008e4 	.word	0x200008e4

08009654 <__sfputc_r>:
 8009654:	6893      	ldr	r3, [r2, #8]
 8009656:	3b01      	subs	r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	b410      	push	{r4}
 800965c:	6093      	str	r3, [r2, #8]
 800965e:	da08      	bge.n	8009672 <__sfputc_r+0x1e>
 8009660:	6994      	ldr	r4, [r2, #24]
 8009662:	42a3      	cmp	r3, r4
 8009664:	db01      	blt.n	800966a <__sfputc_r+0x16>
 8009666:	290a      	cmp	r1, #10
 8009668:	d103      	bne.n	8009672 <__sfputc_r+0x1e>
 800966a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800966e:	f000 badf 	b.w	8009c30 <__swbuf_r>
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	1c58      	adds	r0, r3, #1
 8009676:	6010      	str	r0, [r2, #0]
 8009678:	7019      	strb	r1, [r3, #0]
 800967a:	4608      	mov	r0, r1
 800967c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009680:	4770      	bx	lr

08009682 <__sfputs_r>:
 8009682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	4614      	mov	r4, r2
 800968a:	18d5      	adds	r5, r2, r3
 800968c:	42ac      	cmp	r4, r5
 800968e:	d101      	bne.n	8009694 <__sfputs_r+0x12>
 8009690:	2000      	movs	r0, #0
 8009692:	e007      	b.n	80096a4 <__sfputs_r+0x22>
 8009694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009698:	463a      	mov	r2, r7
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff ffda 	bl	8009654 <__sfputc_r>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d1f3      	bne.n	800968c <__sfputs_r+0xa>
 80096a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096a8 <_vfiprintf_r>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	460d      	mov	r5, r1
 80096ae:	b09d      	sub	sp, #116	; 0x74
 80096b0:	4614      	mov	r4, r2
 80096b2:	4698      	mov	r8, r3
 80096b4:	4606      	mov	r6, r0
 80096b6:	b118      	cbz	r0, 80096c0 <_vfiprintf_r+0x18>
 80096b8:	6983      	ldr	r3, [r0, #24]
 80096ba:	b90b      	cbnz	r3, 80096c0 <_vfiprintf_r+0x18>
 80096bc:	f000 fc9a 	bl	8009ff4 <__sinit>
 80096c0:	4b89      	ldr	r3, [pc, #548]	; (80098e8 <_vfiprintf_r+0x240>)
 80096c2:	429d      	cmp	r5, r3
 80096c4:	d11b      	bne.n	80096fe <_vfiprintf_r+0x56>
 80096c6:	6875      	ldr	r5, [r6, #4]
 80096c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ca:	07d9      	lsls	r1, r3, #31
 80096cc:	d405      	bmi.n	80096da <_vfiprintf_r+0x32>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	059a      	lsls	r2, r3, #22
 80096d2:	d402      	bmi.n	80096da <_vfiprintf_r+0x32>
 80096d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d6:	f000 fd2b 	bl	800a130 <__retarget_lock_acquire_recursive>
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	071b      	lsls	r3, r3, #28
 80096de:	d501      	bpl.n	80096e4 <_vfiprintf_r+0x3c>
 80096e0:	692b      	ldr	r3, [r5, #16]
 80096e2:	b9eb      	cbnz	r3, 8009720 <_vfiprintf_r+0x78>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4630      	mov	r0, r6
 80096e8:	f000 faf4 	bl	8009cd4 <__swsetup_r>
 80096ec:	b1c0      	cbz	r0, 8009720 <_vfiprintf_r+0x78>
 80096ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f0:	07dc      	lsls	r4, r3, #31
 80096f2:	d50e      	bpl.n	8009712 <_vfiprintf_r+0x6a>
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	b01d      	add	sp, #116	; 0x74
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	4b7b      	ldr	r3, [pc, #492]	; (80098ec <_vfiprintf_r+0x244>)
 8009700:	429d      	cmp	r5, r3
 8009702:	d101      	bne.n	8009708 <_vfiprintf_r+0x60>
 8009704:	68b5      	ldr	r5, [r6, #8]
 8009706:	e7df      	b.n	80096c8 <_vfiprintf_r+0x20>
 8009708:	4b79      	ldr	r3, [pc, #484]	; (80098f0 <_vfiprintf_r+0x248>)
 800970a:	429d      	cmp	r5, r3
 800970c:	bf08      	it	eq
 800970e:	68f5      	ldreq	r5, [r6, #12]
 8009710:	e7da      	b.n	80096c8 <_vfiprintf_r+0x20>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	0598      	lsls	r0, r3, #22
 8009716:	d4ed      	bmi.n	80096f4 <_vfiprintf_r+0x4c>
 8009718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971a:	f000 fd0a 	bl	800a132 <__retarget_lock_release_recursive>
 800971e:	e7e9      	b.n	80096f4 <_vfiprintf_r+0x4c>
 8009720:	2300      	movs	r3, #0
 8009722:	9309      	str	r3, [sp, #36]	; 0x24
 8009724:	2320      	movs	r3, #32
 8009726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800972a:	f8cd 800c 	str.w	r8, [sp, #12]
 800972e:	2330      	movs	r3, #48	; 0x30
 8009730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098f4 <_vfiprintf_r+0x24c>
 8009734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009738:	f04f 0901 	mov.w	r9, #1
 800973c:	4623      	mov	r3, r4
 800973e:	469a      	mov	sl, r3
 8009740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009744:	b10a      	cbz	r2, 800974a <_vfiprintf_r+0xa2>
 8009746:	2a25      	cmp	r2, #37	; 0x25
 8009748:	d1f9      	bne.n	800973e <_vfiprintf_r+0x96>
 800974a:	ebba 0b04 	subs.w	fp, sl, r4
 800974e:	d00b      	beq.n	8009768 <_vfiprintf_r+0xc0>
 8009750:	465b      	mov	r3, fp
 8009752:	4622      	mov	r2, r4
 8009754:	4629      	mov	r1, r5
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff ff93 	bl	8009682 <__sfputs_r>
 800975c:	3001      	adds	r0, #1
 800975e:	f000 80aa 	beq.w	80098b6 <_vfiprintf_r+0x20e>
 8009762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009764:	445a      	add	r2, fp
 8009766:	9209      	str	r2, [sp, #36]	; 0x24
 8009768:	f89a 3000 	ldrb.w	r3, [sl]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80a2 	beq.w	80098b6 <_vfiprintf_r+0x20e>
 8009772:	2300      	movs	r3, #0
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800977c:	f10a 0a01 	add.w	sl, sl, #1
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	9307      	str	r3, [sp, #28]
 8009784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009788:	931a      	str	r3, [sp, #104]	; 0x68
 800978a:	4654      	mov	r4, sl
 800978c:	2205      	movs	r2, #5
 800978e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009792:	4858      	ldr	r0, [pc, #352]	; (80098f4 <_vfiprintf_r+0x24c>)
 8009794:	f7f6 fd1c 	bl	80001d0 <memchr>
 8009798:	9a04      	ldr	r2, [sp, #16]
 800979a:	b9d8      	cbnz	r0, 80097d4 <_vfiprintf_r+0x12c>
 800979c:	06d1      	lsls	r1, r2, #27
 800979e:	bf44      	itt	mi
 80097a0:	2320      	movmi	r3, #32
 80097a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a6:	0713      	lsls	r3, r2, #28
 80097a8:	bf44      	itt	mi
 80097aa:	232b      	movmi	r3, #43	; 0x2b
 80097ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b0:	f89a 3000 	ldrb.w	r3, [sl]
 80097b4:	2b2a      	cmp	r3, #42	; 0x2a
 80097b6:	d015      	beq.n	80097e4 <_vfiprintf_r+0x13c>
 80097b8:	9a07      	ldr	r2, [sp, #28]
 80097ba:	4654      	mov	r4, sl
 80097bc:	2000      	movs	r0, #0
 80097be:	f04f 0c0a 	mov.w	ip, #10
 80097c2:	4621      	mov	r1, r4
 80097c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c8:	3b30      	subs	r3, #48	; 0x30
 80097ca:	2b09      	cmp	r3, #9
 80097cc:	d94e      	bls.n	800986c <_vfiprintf_r+0x1c4>
 80097ce:	b1b0      	cbz	r0, 80097fe <_vfiprintf_r+0x156>
 80097d0:	9207      	str	r2, [sp, #28]
 80097d2:	e014      	b.n	80097fe <_vfiprintf_r+0x156>
 80097d4:	eba0 0308 	sub.w	r3, r0, r8
 80097d8:	fa09 f303 	lsl.w	r3, r9, r3
 80097dc:	4313      	orrs	r3, r2
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	46a2      	mov	sl, r4
 80097e2:	e7d2      	b.n	800978a <_vfiprintf_r+0xe2>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	1d19      	adds	r1, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	9103      	str	r1, [sp, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfbb      	ittet	lt
 80097f0:	425b      	neglt	r3, r3
 80097f2:	f042 0202 	orrlt.w	r2, r2, #2
 80097f6:	9307      	strge	r3, [sp, #28]
 80097f8:	9307      	strlt	r3, [sp, #28]
 80097fa:	bfb8      	it	lt
 80097fc:	9204      	strlt	r2, [sp, #16]
 80097fe:	7823      	ldrb	r3, [r4, #0]
 8009800:	2b2e      	cmp	r3, #46	; 0x2e
 8009802:	d10c      	bne.n	800981e <_vfiprintf_r+0x176>
 8009804:	7863      	ldrb	r3, [r4, #1]
 8009806:	2b2a      	cmp	r3, #42	; 0x2a
 8009808:	d135      	bne.n	8009876 <_vfiprintf_r+0x1ce>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	9203      	str	r2, [sp, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfb8      	it	lt
 8009816:	f04f 33ff 	movlt.w	r3, #4294967295
 800981a:	3402      	adds	r4, #2
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009904 <_vfiprintf_r+0x25c>
 8009822:	7821      	ldrb	r1, [r4, #0]
 8009824:	2203      	movs	r2, #3
 8009826:	4650      	mov	r0, sl
 8009828:	f7f6 fcd2 	bl	80001d0 <memchr>
 800982c:	b140      	cbz	r0, 8009840 <_vfiprintf_r+0x198>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	eba0 000a 	sub.w	r0, r0, sl
 8009834:	fa03 f000 	lsl.w	r0, r3, r0
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	4303      	orrs	r3, r0
 800983c:	3401      	adds	r4, #1
 800983e:	9304      	str	r3, [sp, #16]
 8009840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009844:	482c      	ldr	r0, [pc, #176]	; (80098f8 <_vfiprintf_r+0x250>)
 8009846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984a:	2206      	movs	r2, #6
 800984c:	f7f6 fcc0 	bl	80001d0 <memchr>
 8009850:	2800      	cmp	r0, #0
 8009852:	d03f      	beq.n	80098d4 <_vfiprintf_r+0x22c>
 8009854:	4b29      	ldr	r3, [pc, #164]	; (80098fc <_vfiprintf_r+0x254>)
 8009856:	bb1b      	cbnz	r3, 80098a0 <_vfiprintf_r+0x1f8>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	3307      	adds	r3, #7
 800985c:	f023 0307 	bic.w	r3, r3, #7
 8009860:	3308      	adds	r3, #8
 8009862:	9303      	str	r3, [sp, #12]
 8009864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009866:	443b      	add	r3, r7
 8009868:	9309      	str	r3, [sp, #36]	; 0x24
 800986a:	e767      	b.n	800973c <_vfiprintf_r+0x94>
 800986c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009870:	460c      	mov	r4, r1
 8009872:	2001      	movs	r0, #1
 8009874:	e7a5      	b.n	80097c2 <_vfiprintf_r+0x11a>
 8009876:	2300      	movs	r3, #0
 8009878:	3401      	adds	r4, #1
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	4619      	mov	r1, r3
 800987e:	f04f 0c0a 	mov.w	ip, #10
 8009882:	4620      	mov	r0, r4
 8009884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009888:	3a30      	subs	r2, #48	; 0x30
 800988a:	2a09      	cmp	r2, #9
 800988c:	d903      	bls.n	8009896 <_vfiprintf_r+0x1ee>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0c5      	beq.n	800981e <_vfiprintf_r+0x176>
 8009892:	9105      	str	r1, [sp, #20]
 8009894:	e7c3      	b.n	800981e <_vfiprintf_r+0x176>
 8009896:	fb0c 2101 	mla	r1, ip, r1, r2
 800989a:	4604      	mov	r4, r0
 800989c:	2301      	movs	r3, #1
 800989e:	e7f0      	b.n	8009882 <_vfiprintf_r+0x1da>
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	462a      	mov	r2, r5
 80098a6:	4b16      	ldr	r3, [pc, #88]	; (8009900 <_vfiprintf_r+0x258>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	4630      	mov	r0, r6
 80098ac:	f3af 8000 	nop.w
 80098b0:	4607      	mov	r7, r0
 80098b2:	1c78      	adds	r0, r7, #1
 80098b4:	d1d6      	bne.n	8009864 <_vfiprintf_r+0x1bc>
 80098b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b8:	07d9      	lsls	r1, r3, #31
 80098ba:	d405      	bmi.n	80098c8 <_vfiprintf_r+0x220>
 80098bc:	89ab      	ldrh	r3, [r5, #12]
 80098be:	059a      	lsls	r2, r3, #22
 80098c0:	d402      	bmi.n	80098c8 <_vfiprintf_r+0x220>
 80098c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c4:	f000 fc35 	bl	800a132 <__retarget_lock_release_recursive>
 80098c8:	89ab      	ldrh	r3, [r5, #12]
 80098ca:	065b      	lsls	r3, r3, #25
 80098cc:	f53f af12 	bmi.w	80096f4 <_vfiprintf_r+0x4c>
 80098d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098d2:	e711      	b.n	80096f8 <_vfiprintf_r+0x50>
 80098d4:	ab03      	add	r3, sp, #12
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	462a      	mov	r2, r5
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <_vfiprintf_r+0x258>)
 80098dc:	a904      	add	r1, sp, #16
 80098de:	4630      	mov	r0, r6
 80098e0:	f000 f880 	bl	80099e4 <_printf_i>
 80098e4:	e7e4      	b.n	80098b0 <_vfiprintf_r+0x208>
 80098e6:	bf00      	nop
 80098e8:	0800c514 	.word	0x0800c514
 80098ec:	0800c534 	.word	0x0800c534
 80098f0:	0800c4f4 	.word	0x0800c4f4
 80098f4:	0800c4c1 	.word	0x0800c4c1
 80098f8:	0800c4cb 	.word	0x0800c4cb
 80098fc:	00000000 	.word	0x00000000
 8009900:	08009683 	.word	0x08009683
 8009904:	0800c4c7 	.word	0x0800c4c7

08009908 <_printf_common>:
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	4616      	mov	r6, r2
 800990e:	4699      	mov	r9, r3
 8009910:	688a      	ldr	r2, [r1, #8]
 8009912:	690b      	ldr	r3, [r1, #16]
 8009914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009918:	4293      	cmp	r3, r2
 800991a:	bfb8      	it	lt
 800991c:	4613      	movlt	r3, r2
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009924:	4607      	mov	r7, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b10a      	cbz	r2, 800992e <_printf_common+0x26>
 800992a:	3301      	adds	r3, #1
 800992c:	6033      	str	r3, [r6, #0]
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	0699      	lsls	r1, r3, #26
 8009932:	bf42      	ittt	mi
 8009934:	6833      	ldrmi	r3, [r6, #0]
 8009936:	3302      	addmi	r3, #2
 8009938:	6033      	strmi	r3, [r6, #0]
 800993a:	6825      	ldr	r5, [r4, #0]
 800993c:	f015 0506 	ands.w	r5, r5, #6
 8009940:	d106      	bne.n	8009950 <_printf_common+0x48>
 8009942:	f104 0a19 	add.w	sl, r4, #25
 8009946:	68e3      	ldr	r3, [r4, #12]
 8009948:	6832      	ldr	r2, [r6, #0]
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	42ab      	cmp	r3, r5
 800994e:	dc26      	bgt.n	800999e <_printf_common+0x96>
 8009950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009954:	1e13      	subs	r3, r2, #0
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	bf18      	it	ne
 800995a:	2301      	movne	r3, #1
 800995c:	0692      	lsls	r2, r2, #26
 800995e:	d42b      	bmi.n	80099b8 <_printf_common+0xb0>
 8009960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009964:	4649      	mov	r1, r9
 8009966:	4638      	mov	r0, r7
 8009968:	47c0      	blx	r8
 800996a:	3001      	adds	r0, #1
 800996c:	d01e      	beq.n	80099ac <_printf_common+0xa4>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	68e5      	ldr	r5, [r4, #12]
 8009972:	6832      	ldr	r2, [r6, #0]
 8009974:	f003 0306 	and.w	r3, r3, #6
 8009978:	2b04      	cmp	r3, #4
 800997a:	bf08      	it	eq
 800997c:	1aad      	subeq	r5, r5, r2
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	bf0c      	ite	eq
 8009984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009988:	2500      	movne	r5, #0
 800998a:	4293      	cmp	r3, r2
 800998c:	bfc4      	itt	gt
 800998e:	1a9b      	subgt	r3, r3, r2
 8009990:	18ed      	addgt	r5, r5, r3
 8009992:	2600      	movs	r6, #0
 8009994:	341a      	adds	r4, #26
 8009996:	42b5      	cmp	r5, r6
 8009998:	d11a      	bne.n	80099d0 <_printf_common+0xc8>
 800999a:	2000      	movs	r0, #0
 800999c:	e008      	b.n	80099b0 <_printf_common+0xa8>
 800999e:	2301      	movs	r3, #1
 80099a0:	4652      	mov	r2, sl
 80099a2:	4649      	mov	r1, r9
 80099a4:	4638      	mov	r0, r7
 80099a6:	47c0      	blx	r8
 80099a8:	3001      	adds	r0, #1
 80099aa:	d103      	bne.n	80099b4 <_printf_common+0xac>
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b4:	3501      	adds	r5, #1
 80099b6:	e7c6      	b.n	8009946 <_printf_common+0x3e>
 80099b8:	18e1      	adds	r1, r4, r3
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	2030      	movs	r0, #48	; 0x30
 80099be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099c2:	4422      	add	r2, r4
 80099c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099cc:	3302      	adds	r3, #2
 80099ce:	e7c7      	b.n	8009960 <_printf_common+0x58>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4622      	mov	r2, r4
 80099d4:	4649      	mov	r1, r9
 80099d6:	4638      	mov	r0, r7
 80099d8:	47c0      	blx	r8
 80099da:	3001      	adds	r0, #1
 80099dc:	d0e6      	beq.n	80099ac <_printf_common+0xa4>
 80099de:	3601      	adds	r6, #1
 80099e0:	e7d9      	b.n	8009996 <_printf_common+0x8e>
	...

080099e4 <_printf_i>:
 80099e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	4691      	mov	r9, r2
 80099ec:	7e27      	ldrb	r7, [r4, #24]
 80099ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099f0:	2f78      	cmp	r7, #120	; 0x78
 80099f2:	4680      	mov	r8, r0
 80099f4:	469a      	mov	sl, r3
 80099f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099fa:	d807      	bhi.n	8009a0c <_printf_i+0x28>
 80099fc:	2f62      	cmp	r7, #98	; 0x62
 80099fe:	d80a      	bhi.n	8009a16 <_printf_i+0x32>
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	f000 80d8 	beq.w	8009bb6 <_printf_i+0x1d2>
 8009a06:	2f58      	cmp	r7, #88	; 0x58
 8009a08:	f000 80a3 	beq.w	8009b52 <_printf_i+0x16e>
 8009a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a14:	e03a      	b.n	8009a8c <_printf_i+0xa8>
 8009a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a1a:	2b15      	cmp	r3, #21
 8009a1c:	d8f6      	bhi.n	8009a0c <_printf_i+0x28>
 8009a1e:	a001      	add	r0, pc, #4	; (adr r0, 8009a24 <_printf_i+0x40>)
 8009a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a24:	08009a7d 	.word	0x08009a7d
 8009a28:	08009a91 	.word	0x08009a91
 8009a2c:	08009a0d 	.word	0x08009a0d
 8009a30:	08009a0d 	.word	0x08009a0d
 8009a34:	08009a0d 	.word	0x08009a0d
 8009a38:	08009a0d 	.word	0x08009a0d
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	08009a0d 	.word	0x08009a0d
 8009a44:	08009a0d 	.word	0x08009a0d
 8009a48:	08009a0d 	.word	0x08009a0d
 8009a4c:	08009a0d 	.word	0x08009a0d
 8009a50:	08009b9d 	.word	0x08009b9d
 8009a54:	08009ac1 	.word	0x08009ac1
 8009a58:	08009b7f 	.word	0x08009b7f
 8009a5c:	08009a0d 	.word	0x08009a0d
 8009a60:	08009a0d 	.word	0x08009a0d
 8009a64:	08009bbf 	.word	0x08009bbf
 8009a68:	08009a0d 	.word	0x08009a0d
 8009a6c:	08009ac1 	.word	0x08009ac1
 8009a70:	08009a0d 	.word	0x08009a0d
 8009a74:	08009a0d 	.word	0x08009a0d
 8009a78:	08009b87 	.word	0x08009b87
 8009a7c:	680b      	ldr	r3, [r1, #0]
 8009a7e:	1d1a      	adds	r2, r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	600a      	str	r2, [r1, #0]
 8009a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0a3      	b.n	8009bd8 <_printf_i+0x1f4>
 8009a90:	6825      	ldr	r5, [r4, #0]
 8009a92:	6808      	ldr	r0, [r1, #0]
 8009a94:	062e      	lsls	r6, r5, #24
 8009a96:	f100 0304 	add.w	r3, r0, #4
 8009a9a:	d50a      	bpl.n	8009ab2 <_printf_i+0xce>
 8009a9c:	6805      	ldr	r5, [r0, #0]
 8009a9e:	600b      	str	r3, [r1, #0]
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	da03      	bge.n	8009aac <_printf_i+0xc8>
 8009aa4:	232d      	movs	r3, #45	; 0x2d
 8009aa6:	426d      	negs	r5, r5
 8009aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aac:	485e      	ldr	r0, [pc, #376]	; (8009c28 <_printf_i+0x244>)
 8009aae:	230a      	movs	r3, #10
 8009ab0:	e019      	b.n	8009ae6 <_printf_i+0x102>
 8009ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ab6:	6805      	ldr	r5, [r0, #0]
 8009ab8:	600b      	str	r3, [r1, #0]
 8009aba:	bf18      	it	ne
 8009abc:	b22d      	sxthne	r5, r5
 8009abe:	e7ef      	b.n	8009aa0 <_printf_i+0xbc>
 8009ac0:	680b      	ldr	r3, [r1, #0]
 8009ac2:	6825      	ldr	r5, [r4, #0]
 8009ac4:	1d18      	adds	r0, r3, #4
 8009ac6:	6008      	str	r0, [r1, #0]
 8009ac8:	0628      	lsls	r0, r5, #24
 8009aca:	d501      	bpl.n	8009ad0 <_printf_i+0xec>
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	e002      	b.n	8009ad6 <_printf_i+0xf2>
 8009ad0:	0669      	lsls	r1, r5, #25
 8009ad2:	d5fb      	bpl.n	8009acc <_printf_i+0xe8>
 8009ad4:	881d      	ldrh	r5, [r3, #0]
 8009ad6:	4854      	ldr	r0, [pc, #336]	; (8009c28 <_printf_i+0x244>)
 8009ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8009ada:	bf0c      	ite	eq
 8009adc:	2308      	moveq	r3, #8
 8009ade:	230a      	movne	r3, #10
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ae6:	6866      	ldr	r6, [r4, #4]
 8009ae8:	60a6      	str	r6, [r4, #8]
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	bfa2      	ittt	ge
 8009aee:	6821      	ldrge	r1, [r4, #0]
 8009af0:	f021 0104 	bicge.w	r1, r1, #4
 8009af4:	6021      	strge	r1, [r4, #0]
 8009af6:	b90d      	cbnz	r5, 8009afc <_printf_i+0x118>
 8009af8:	2e00      	cmp	r6, #0
 8009afa:	d04d      	beq.n	8009b98 <_printf_i+0x1b4>
 8009afc:	4616      	mov	r6, r2
 8009afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b02:	fb03 5711 	mls	r7, r3, r1, r5
 8009b06:	5dc7      	ldrb	r7, [r0, r7]
 8009b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b0c:	462f      	mov	r7, r5
 8009b0e:	42bb      	cmp	r3, r7
 8009b10:	460d      	mov	r5, r1
 8009b12:	d9f4      	bls.n	8009afe <_printf_i+0x11a>
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d10b      	bne.n	8009b30 <_printf_i+0x14c>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	07df      	lsls	r7, r3, #31
 8009b1c:	d508      	bpl.n	8009b30 <_printf_i+0x14c>
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	6861      	ldr	r1, [r4, #4]
 8009b22:	4299      	cmp	r1, r3
 8009b24:	bfde      	ittt	le
 8009b26:	2330      	movle	r3, #48	; 0x30
 8009b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b30:	1b92      	subs	r2, r2, r6
 8009b32:	6122      	str	r2, [r4, #16]
 8009b34:	f8cd a000 	str.w	sl, [sp]
 8009b38:	464b      	mov	r3, r9
 8009b3a:	aa03      	add	r2, sp, #12
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4640      	mov	r0, r8
 8009b40:	f7ff fee2 	bl	8009908 <_printf_common>
 8009b44:	3001      	adds	r0, #1
 8009b46:	d14c      	bne.n	8009be2 <_printf_i+0x1fe>
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	b004      	add	sp, #16
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	4835      	ldr	r0, [pc, #212]	; (8009c28 <_printf_i+0x244>)
 8009b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	680e      	ldr	r6, [r1, #0]
 8009b5c:	061f      	lsls	r7, r3, #24
 8009b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b62:	600e      	str	r6, [r1, #0]
 8009b64:	d514      	bpl.n	8009b90 <_printf_i+0x1ac>
 8009b66:	07d9      	lsls	r1, r3, #31
 8009b68:	bf44      	itt	mi
 8009b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b6e:	6023      	strmi	r3, [r4, #0]
 8009b70:	b91d      	cbnz	r5, 8009b7a <_printf_i+0x196>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	f023 0320 	bic.w	r3, r3, #32
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	2310      	movs	r3, #16
 8009b7c:	e7b0      	b.n	8009ae0 <_printf_i+0xfc>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f043 0320 	orr.w	r3, r3, #32
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	2378      	movs	r3, #120	; 0x78
 8009b88:	4828      	ldr	r0, [pc, #160]	; (8009c2c <_printf_i+0x248>)
 8009b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b8e:	e7e3      	b.n	8009b58 <_printf_i+0x174>
 8009b90:	065e      	lsls	r6, r3, #25
 8009b92:	bf48      	it	mi
 8009b94:	b2ad      	uxthmi	r5, r5
 8009b96:	e7e6      	b.n	8009b66 <_printf_i+0x182>
 8009b98:	4616      	mov	r6, r2
 8009b9a:	e7bb      	b.n	8009b14 <_printf_i+0x130>
 8009b9c:	680b      	ldr	r3, [r1, #0]
 8009b9e:	6826      	ldr	r6, [r4, #0]
 8009ba0:	6960      	ldr	r0, [r4, #20]
 8009ba2:	1d1d      	adds	r5, r3, #4
 8009ba4:	600d      	str	r5, [r1, #0]
 8009ba6:	0635      	lsls	r5, r6, #24
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	d501      	bpl.n	8009bb0 <_printf_i+0x1cc>
 8009bac:	6018      	str	r0, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <_printf_i+0x1d2>
 8009bb0:	0671      	lsls	r1, r6, #25
 8009bb2:	d5fb      	bpl.n	8009bac <_printf_i+0x1c8>
 8009bb4:	8018      	strh	r0, [r3, #0]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	4616      	mov	r6, r2
 8009bbc:	e7ba      	b.n	8009b34 <_printf_i+0x150>
 8009bbe:	680b      	ldr	r3, [r1, #0]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	600a      	str	r2, [r1, #0]
 8009bc4:	681e      	ldr	r6, [r3, #0]
 8009bc6:	6862      	ldr	r2, [r4, #4]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7f6 fb00 	bl	80001d0 <memchr>
 8009bd0:	b108      	cbz	r0, 8009bd6 <_printf_i+0x1f2>
 8009bd2:	1b80      	subs	r0, r0, r6
 8009bd4:	6060      	str	r0, [r4, #4]
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be0:	e7a8      	b.n	8009b34 <_printf_i+0x150>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0ab      	beq.n	8009b48 <_printf_i+0x164>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	079b      	lsls	r3, r3, #30
 8009bf4:	d413      	bmi.n	8009c1e <_printf_i+0x23a>
 8009bf6:	68e0      	ldr	r0, [r4, #12]
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	4298      	cmp	r0, r3
 8009bfc:	bfb8      	it	lt
 8009bfe:	4618      	movlt	r0, r3
 8009c00:	e7a4      	b.n	8009b4c <_printf_i+0x168>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4632      	mov	r2, r6
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	47d0      	blx	sl
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d09b      	beq.n	8009b48 <_printf_i+0x164>
 8009c10:	3501      	adds	r5, #1
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	9903      	ldr	r1, [sp, #12]
 8009c16:	1a5b      	subs	r3, r3, r1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dcf2      	bgt.n	8009c02 <_printf_i+0x21e>
 8009c1c:	e7eb      	b.n	8009bf6 <_printf_i+0x212>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f104 0619 	add.w	r6, r4, #25
 8009c24:	e7f5      	b.n	8009c12 <_printf_i+0x22e>
 8009c26:	bf00      	nop
 8009c28:	0800c4d2 	.word	0x0800c4d2
 8009c2c:	0800c4e3 	.word	0x0800c4e3

08009c30 <__swbuf_r>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	460e      	mov	r6, r1
 8009c34:	4614      	mov	r4, r2
 8009c36:	4605      	mov	r5, r0
 8009c38:	b118      	cbz	r0, 8009c42 <__swbuf_r+0x12>
 8009c3a:	6983      	ldr	r3, [r0, #24]
 8009c3c:	b90b      	cbnz	r3, 8009c42 <__swbuf_r+0x12>
 8009c3e:	f000 f9d9 	bl	8009ff4 <__sinit>
 8009c42:	4b21      	ldr	r3, [pc, #132]	; (8009cc8 <__swbuf_r+0x98>)
 8009c44:	429c      	cmp	r4, r3
 8009c46:	d12b      	bne.n	8009ca0 <__swbuf_r+0x70>
 8009c48:	686c      	ldr	r4, [r5, #4]
 8009c4a:	69a3      	ldr	r3, [r4, #24]
 8009c4c:	60a3      	str	r3, [r4, #8]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	071a      	lsls	r2, r3, #28
 8009c52:	d52f      	bpl.n	8009cb4 <__swbuf_r+0x84>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	b36b      	cbz	r3, 8009cb4 <__swbuf_r+0x84>
 8009c58:	6923      	ldr	r3, [r4, #16]
 8009c5a:	6820      	ldr	r0, [r4, #0]
 8009c5c:	1ac0      	subs	r0, r0, r3
 8009c5e:	6963      	ldr	r3, [r4, #20]
 8009c60:	b2f6      	uxtb	r6, r6
 8009c62:	4283      	cmp	r3, r0
 8009c64:	4637      	mov	r7, r6
 8009c66:	dc04      	bgt.n	8009c72 <__swbuf_r+0x42>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f92e 	bl	8009ecc <_fflush_r>
 8009c70:	bb30      	cbnz	r0, 8009cc0 <__swbuf_r+0x90>
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	6022      	str	r2, [r4, #0]
 8009c7e:	701e      	strb	r6, [r3, #0]
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	3001      	adds	r0, #1
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d004      	beq.n	8009c92 <__swbuf_r+0x62>
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	07db      	lsls	r3, r3, #31
 8009c8c:	d506      	bpl.n	8009c9c <__swbuf_r+0x6c>
 8009c8e:	2e0a      	cmp	r6, #10
 8009c90:	d104      	bne.n	8009c9c <__swbuf_r+0x6c>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 f919 	bl	8009ecc <_fflush_r>
 8009c9a:	b988      	cbnz	r0, 8009cc0 <__swbuf_r+0x90>
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <__swbuf_r+0x9c>)
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d101      	bne.n	8009caa <__swbuf_r+0x7a>
 8009ca6:	68ac      	ldr	r4, [r5, #8]
 8009ca8:	e7cf      	b.n	8009c4a <__swbuf_r+0x1a>
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <__swbuf_r+0xa0>)
 8009cac:	429c      	cmp	r4, r3
 8009cae:	bf08      	it	eq
 8009cb0:	68ec      	ldreq	r4, [r5, #12]
 8009cb2:	e7ca      	b.n	8009c4a <__swbuf_r+0x1a>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 f80c 	bl	8009cd4 <__swsetup_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d0cb      	beq.n	8009c58 <__swbuf_r+0x28>
 8009cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc4:	e7ea      	b.n	8009c9c <__swbuf_r+0x6c>
 8009cc6:	bf00      	nop
 8009cc8:	0800c514 	.word	0x0800c514
 8009ccc:	0800c534 	.word	0x0800c534
 8009cd0:	0800c4f4 	.word	0x0800c4f4

08009cd4 <__swsetup_r>:
 8009cd4:	4b32      	ldr	r3, [pc, #200]	; (8009da0 <__swsetup_r+0xcc>)
 8009cd6:	b570      	push	{r4, r5, r6, lr}
 8009cd8:	681d      	ldr	r5, [r3, #0]
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	b125      	cbz	r5, 8009cea <__swsetup_r+0x16>
 8009ce0:	69ab      	ldr	r3, [r5, #24]
 8009ce2:	b913      	cbnz	r3, 8009cea <__swsetup_r+0x16>
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f000 f985 	bl	8009ff4 <__sinit>
 8009cea:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <__swsetup_r+0xd0>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d10f      	bne.n	8009d10 <__swsetup_r+0x3c>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf8:	0719      	lsls	r1, r3, #28
 8009cfa:	d42c      	bmi.n	8009d56 <__swsetup_r+0x82>
 8009cfc:	06dd      	lsls	r5, r3, #27
 8009cfe:	d411      	bmi.n	8009d24 <__swsetup_r+0x50>
 8009d00:	2309      	movs	r3, #9
 8009d02:	6033      	str	r3, [r6, #0]
 8009d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	e03e      	b.n	8009d8e <__swsetup_r+0xba>
 8009d10:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <__swsetup_r+0xd4>)
 8009d12:	429c      	cmp	r4, r3
 8009d14:	d101      	bne.n	8009d1a <__swsetup_r+0x46>
 8009d16:	68ac      	ldr	r4, [r5, #8]
 8009d18:	e7eb      	b.n	8009cf2 <__swsetup_r+0x1e>
 8009d1a:	4b24      	ldr	r3, [pc, #144]	; (8009dac <__swsetup_r+0xd8>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	bf08      	it	eq
 8009d20:	68ec      	ldreq	r4, [r5, #12]
 8009d22:	e7e6      	b.n	8009cf2 <__swsetup_r+0x1e>
 8009d24:	0758      	lsls	r0, r3, #29
 8009d26:	d512      	bpl.n	8009d4e <__swsetup_r+0x7a>
 8009d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2a:	b141      	cbz	r1, 8009d3e <__swsetup_r+0x6a>
 8009d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d30:	4299      	cmp	r1, r3
 8009d32:	d002      	beq.n	8009d3a <__swsetup_r+0x66>
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff faad 	bl	8009294 <_free_r>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	2300      	movs	r3, #0
 8009d48:	6063      	str	r3, [r4, #4]
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f043 0308 	orr.w	r3, r3, #8
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	b94b      	cbnz	r3, 8009d6e <__swsetup_r+0x9a>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d64:	d003      	beq.n	8009d6e <__swsetup_r+0x9a>
 8009d66:	4621      	mov	r1, r4
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 fa07 	bl	800a17c <__smakebuf_r>
 8009d6e:	89a0      	ldrh	r0, [r4, #12]
 8009d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d74:	f010 0301 	ands.w	r3, r0, #1
 8009d78:	d00a      	beq.n	8009d90 <__swsetup_r+0xbc>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60a3      	str	r3, [r4, #8]
 8009d7e:	6963      	ldr	r3, [r4, #20]
 8009d80:	425b      	negs	r3, r3
 8009d82:	61a3      	str	r3, [r4, #24]
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	b943      	cbnz	r3, 8009d9a <__swsetup_r+0xc6>
 8009d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d8c:	d1ba      	bne.n	8009d04 <__swsetup_r+0x30>
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	0781      	lsls	r1, r0, #30
 8009d92:	bf58      	it	pl
 8009d94:	6963      	ldrpl	r3, [r4, #20]
 8009d96:	60a3      	str	r3, [r4, #8]
 8009d98:	e7f4      	b.n	8009d84 <__swsetup_r+0xb0>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e7f7      	b.n	8009d8e <__swsetup_r+0xba>
 8009d9e:	bf00      	nop
 8009da0:	2000002c 	.word	0x2000002c
 8009da4:	0800c514 	.word	0x0800c514
 8009da8:	0800c534 	.word	0x0800c534
 8009dac:	0800c4f4 	.word	0x0800c4f4

08009db0 <abort>:
 8009db0:	b508      	push	{r3, lr}
 8009db2:	2006      	movs	r0, #6
 8009db4:	f000 fa4a 	bl	800a24c <raise>
 8009db8:	2001      	movs	r0, #1
 8009dba:	f7f8 fb59 	bl	8002470 <_exit>
	...

08009dc0 <__sflush_r>:
 8009dc0:	898a      	ldrh	r2, [r1, #12]
 8009dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	0710      	lsls	r0, r2, #28
 8009dca:	460c      	mov	r4, r1
 8009dcc:	d458      	bmi.n	8009e80 <__sflush_r+0xc0>
 8009dce:	684b      	ldr	r3, [r1, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dc05      	bgt.n	8009de0 <__sflush_r+0x20>
 8009dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dc02      	bgt.n	8009de0 <__sflush_r+0x20>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d0f9      	beq.n	8009dda <__sflush_r+0x1a>
 8009de6:	2300      	movs	r3, #0
 8009de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dec:	682f      	ldr	r7, [r5, #0]
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	d032      	beq.n	8009e58 <__sflush_r+0x98>
 8009df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	075a      	lsls	r2, r3, #29
 8009df8:	d505      	bpl.n	8009e06 <__sflush_r+0x46>
 8009dfa:	6863      	ldr	r3, [r4, #4]
 8009dfc:	1ac0      	subs	r0, r0, r3
 8009dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e00:	b10b      	cbz	r3, 8009e06 <__sflush_r+0x46>
 8009e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	2300      	movs	r3, #0
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0c:	6a21      	ldr	r1, [r4, #32]
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b0      	blx	r6
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	d106      	bne.n	8009e26 <__sflush_r+0x66>
 8009e18:	6829      	ldr	r1, [r5, #0]
 8009e1a:	291d      	cmp	r1, #29
 8009e1c:	d82c      	bhi.n	8009e78 <__sflush_r+0xb8>
 8009e1e:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <__sflush_r+0x108>)
 8009e20:	40ca      	lsrs	r2, r1
 8009e22:	07d6      	lsls	r6, r2, #31
 8009e24:	d528      	bpl.n	8009e78 <__sflush_r+0xb8>
 8009e26:	2200      	movs	r2, #0
 8009e28:	6062      	str	r2, [r4, #4]
 8009e2a:	04d9      	lsls	r1, r3, #19
 8009e2c:	6922      	ldr	r2, [r4, #16]
 8009e2e:	6022      	str	r2, [r4, #0]
 8009e30:	d504      	bpl.n	8009e3c <__sflush_r+0x7c>
 8009e32:	1c42      	adds	r2, r0, #1
 8009e34:	d101      	bne.n	8009e3a <__sflush_r+0x7a>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b903      	cbnz	r3, 8009e3c <__sflush_r+0x7c>
 8009e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3e:	602f      	str	r7, [r5, #0]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d0ca      	beq.n	8009dda <__sflush_r+0x1a>
 8009e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	d002      	beq.n	8009e52 <__sflush_r+0x92>
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7ff fa21 	bl	8009294 <_free_r>
 8009e52:	2000      	movs	r0, #0
 8009e54:	6360      	str	r0, [r4, #52]	; 0x34
 8009e56:	e7c1      	b.n	8009ddc <__sflush_r+0x1c>
 8009e58:	6a21      	ldr	r1, [r4, #32]
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b0      	blx	r6
 8009e60:	1c41      	adds	r1, r0, #1
 8009e62:	d1c7      	bne.n	8009df4 <__sflush_r+0x34>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0c4      	beq.n	8009df4 <__sflush_r+0x34>
 8009e6a:	2b1d      	cmp	r3, #29
 8009e6c:	d001      	beq.n	8009e72 <__sflush_r+0xb2>
 8009e6e:	2b16      	cmp	r3, #22
 8009e70:	d101      	bne.n	8009e76 <__sflush_r+0xb6>
 8009e72:	602f      	str	r7, [r5, #0]
 8009e74:	e7b1      	b.n	8009dda <__sflush_r+0x1a>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	e7ad      	b.n	8009ddc <__sflush_r+0x1c>
 8009e80:	690f      	ldr	r7, [r1, #16]
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	d0a9      	beq.n	8009dda <__sflush_r+0x1a>
 8009e86:	0793      	lsls	r3, r2, #30
 8009e88:	680e      	ldr	r6, [r1, #0]
 8009e8a:	bf08      	it	eq
 8009e8c:	694b      	ldreq	r3, [r1, #20]
 8009e8e:	600f      	str	r7, [r1, #0]
 8009e90:	bf18      	it	ne
 8009e92:	2300      	movne	r3, #0
 8009e94:	eba6 0807 	sub.w	r8, r6, r7
 8009e98:	608b      	str	r3, [r1, #8]
 8009e9a:	f1b8 0f00 	cmp.w	r8, #0
 8009e9e:	dd9c      	ble.n	8009dda <__sflush_r+0x1a>
 8009ea0:	6a21      	ldr	r1, [r4, #32]
 8009ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b0      	blx	r6
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dc06      	bgt.n	8009ebe <__sflush_r+0xfe>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e78e      	b.n	8009ddc <__sflush_r+0x1c>
 8009ebe:	4407      	add	r7, r0
 8009ec0:	eba8 0800 	sub.w	r8, r8, r0
 8009ec4:	e7e9      	b.n	8009e9a <__sflush_r+0xda>
 8009ec6:	bf00      	nop
 8009ec8:	20400001 	.word	0x20400001

08009ecc <_fflush_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	690b      	ldr	r3, [r1, #16]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b913      	cbnz	r3, 8009edc <_fflush_r+0x10>
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	b118      	cbz	r0, 8009ee6 <_fflush_r+0x1a>
 8009ede:	6983      	ldr	r3, [r0, #24]
 8009ee0:	b90b      	cbnz	r3, 8009ee6 <_fflush_r+0x1a>
 8009ee2:	f000 f887 	bl	8009ff4 <__sinit>
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <_fflush_r+0x6c>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	d11b      	bne.n	8009f24 <_fflush_r+0x58>
 8009eec:	686c      	ldr	r4, [r5, #4]
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0ef      	beq.n	8009ed6 <_fflush_r+0xa>
 8009ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef8:	07d0      	lsls	r0, r2, #31
 8009efa:	d404      	bmi.n	8009f06 <_fflush_r+0x3a>
 8009efc:	0599      	lsls	r1, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_fflush_r+0x3a>
 8009f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f02:	f000 f915 	bl	800a130 <__retarget_lock_acquire_recursive>
 8009f06:	4628      	mov	r0, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f7ff ff59 	bl	8009dc0 <__sflush_r>
 8009f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f10:	07da      	lsls	r2, r3, #31
 8009f12:	4605      	mov	r5, r0
 8009f14:	d4e0      	bmi.n	8009ed8 <_fflush_r+0xc>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	d4dd      	bmi.n	8009ed8 <_fflush_r+0xc>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1e:	f000 f908 	bl	800a132 <__retarget_lock_release_recursive>
 8009f22:	e7d9      	b.n	8009ed8 <_fflush_r+0xc>
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <_fflush_r+0x70>)
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d101      	bne.n	8009f2e <_fflush_r+0x62>
 8009f2a:	68ac      	ldr	r4, [r5, #8]
 8009f2c:	e7df      	b.n	8009eee <_fflush_r+0x22>
 8009f2e:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <_fflush_r+0x74>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	bf08      	it	eq
 8009f34:	68ec      	ldreq	r4, [r5, #12]
 8009f36:	e7da      	b.n	8009eee <_fflush_r+0x22>
 8009f38:	0800c514 	.word	0x0800c514
 8009f3c:	0800c534 	.word	0x0800c534
 8009f40:	0800c4f4 	.word	0x0800c4f4

08009f44 <std>:
 8009f44:	2300      	movs	r3, #0
 8009f46:	b510      	push	{r4, lr}
 8009f48:	4604      	mov	r4, r0
 8009f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f52:	6083      	str	r3, [r0, #8]
 8009f54:	8181      	strh	r1, [r0, #12]
 8009f56:	6643      	str	r3, [r0, #100]	; 0x64
 8009f58:	81c2      	strh	r2, [r0, #14]
 8009f5a:	6183      	str	r3, [r0, #24]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	2208      	movs	r2, #8
 8009f60:	305c      	adds	r0, #92	; 0x5c
 8009f62:	f7ff f98f 	bl	8009284 <memset>
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <std+0x38>)
 8009f68:	6263      	str	r3, [r4, #36]	; 0x24
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x3c>)
 8009f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x40>)
 8009f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x44>)
 8009f74:	6224      	str	r4, [r4, #32]
 8009f76:	6323      	str	r3, [r4, #48]	; 0x30
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0800a285 	.word	0x0800a285
 8009f80:	0800a2a7 	.word	0x0800a2a7
 8009f84:	0800a2df 	.word	0x0800a2df
 8009f88:	0800a303 	.word	0x0800a303

08009f8c <_cleanup_r>:
 8009f8c:	4901      	ldr	r1, [pc, #4]	; (8009f94 <_cleanup_r+0x8>)
 8009f8e:	f000 b8af 	b.w	800a0f0 <_fwalk_reent>
 8009f92:	bf00      	nop
 8009f94:	08009ecd 	.word	0x08009ecd

08009f98 <__sfmoreglue>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	1e4a      	subs	r2, r1, #1
 8009f9c:	2568      	movs	r5, #104	; 0x68
 8009f9e:	4355      	muls	r5, r2
 8009fa0:	460e      	mov	r6, r1
 8009fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fa6:	f7ff f9c5 	bl	8009334 <_malloc_r>
 8009faa:	4604      	mov	r4, r0
 8009fac:	b140      	cbz	r0, 8009fc0 <__sfmoreglue+0x28>
 8009fae:	2100      	movs	r1, #0
 8009fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8009fb4:	300c      	adds	r0, #12
 8009fb6:	60a0      	str	r0, [r4, #8]
 8009fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fbc:	f7ff f962 	bl	8009284 <memset>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}

08009fc4 <__sfp_lock_acquire>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sfp_lock_acquire+0x8>)
 8009fc6:	f000 b8b3 	b.w	800a130 <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	200008e8 	.word	0x200008e8

08009fd0 <__sfp_lock_release>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__sfp_lock_release+0x8>)
 8009fd2:	f000 b8ae 	b.w	800a132 <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	200008e8 	.word	0x200008e8

08009fdc <__sinit_lock_acquire>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__sinit_lock_acquire+0x8>)
 8009fde:	f000 b8a7 	b.w	800a130 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	200008e3 	.word	0x200008e3

08009fe8 <__sinit_lock_release>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__sinit_lock_release+0x8>)
 8009fea:	f000 b8a2 	b.w	800a132 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	200008e3 	.word	0x200008e3

08009ff4 <__sinit>:
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	f7ff fff0 	bl	8009fdc <__sinit_lock_acquire>
 8009ffc:	69a3      	ldr	r3, [r4, #24]
 8009ffe:	b11b      	cbz	r3, 800a008 <__sinit+0x14>
 800a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a004:	f7ff bff0 	b.w	8009fe8 <__sinit_lock_release>
 800a008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a00c:	6523      	str	r3, [r4, #80]	; 0x50
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <__sinit+0x68>)
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <__sinit+0x6c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	62a2      	str	r2, [r4, #40]	; 0x28
 800a016:	42a3      	cmp	r3, r4
 800a018:	bf04      	itt	eq
 800a01a:	2301      	moveq	r3, #1
 800a01c:	61a3      	streq	r3, [r4, #24]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f820 	bl	800a064 <__sfp>
 800a024:	6060      	str	r0, [r4, #4]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f81c 	bl	800a064 <__sfp>
 800a02c:	60a0      	str	r0, [r4, #8]
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 f818 	bl	800a064 <__sfp>
 800a034:	2200      	movs	r2, #0
 800a036:	60e0      	str	r0, [r4, #12]
 800a038:	2104      	movs	r1, #4
 800a03a:	6860      	ldr	r0, [r4, #4]
 800a03c:	f7ff ff82 	bl	8009f44 <std>
 800a040:	68a0      	ldr	r0, [r4, #8]
 800a042:	2201      	movs	r2, #1
 800a044:	2109      	movs	r1, #9
 800a046:	f7ff ff7d 	bl	8009f44 <std>
 800a04a:	68e0      	ldr	r0, [r4, #12]
 800a04c:	2202      	movs	r2, #2
 800a04e:	2112      	movs	r1, #18
 800a050:	f7ff ff78 	bl	8009f44 <std>
 800a054:	2301      	movs	r3, #1
 800a056:	61a3      	str	r3, [r4, #24]
 800a058:	e7d2      	b.n	800a000 <__sinit+0xc>
 800a05a:	bf00      	nop
 800a05c:	0800c308 	.word	0x0800c308
 800a060:	08009f8d 	.word	0x08009f8d

0800a064 <__sfp>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	4607      	mov	r7, r0
 800a068:	f7ff ffac 	bl	8009fc4 <__sfp_lock_acquire>
 800a06c:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <__sfp+0x84>)
 800a06e:	681e      	ldr	r6, [r3, #0]
 800a070:	69b3      	ldr	r3, [r6, #24]
 800a072:	b913      	cbnz	r3, 800a07a <__sfp+0x16>
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ffbd 	bl	8009ff4 <__sinit>
 800a07a:	3648      	adds	r6, #72	; 0x48
 800a07c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a080:	3b01      	subs	r3, #1
 800a082:	d503      	bpl.n	800a08c <__sfp+0x28>
 800a084:	6833      	ldr	r3, [r6, #0]
 800a086:	b30b      	cbz	r3, 800a0cc <__sfp+0x68>
 800a088:	6836      	ldr	r6, [r6, #0]
 800a08a:	e7f7      	b.n	800a07c <__sfp+0x18>
 800a08c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a090:	b9d5      	cbnz	r5, 800a0c8 <__sfp+0x64>
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <__sfp+0x88>)
 800a094:	60e3      	str	r3, [r4, #12]
 800a096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a09a:	6665      	str	r5, [r4, #100]	; 0x64
 800a09c:	f000 f847 	bl	800a12e <__retarget_lock_init_recursive>
 800a0a0:	f7ff ff96 	bl	8009fd0 <__sfp_lock_release>
 800a0a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0ac:	6025      	str	r5, [r4, #0]
 800a0ae:	61a5      	str	r5, [r4, #24]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0b8:	f7ff f8e4 	bl	8009284 <memset>
 800a0bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c8:	3468      	adds	r4, #104	; 0x68
 800a0ca:	e7d9      	b.n	800a080 <__sfp+0x1c>
 800a0cc:	2104      	movs	r1, #4
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7ff ff62 	bl	8009f98 <__sfmoreglue>
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	6030      	str	r0, [r6, #0]
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1d5      	bne.n	800a088 <__sfp+0x24>
 800a0dc:	f7ff ff78 	bl	8009fd0 <__sfp_lock_release>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	e7ee      	b.n	800a0c4 <__sfp+0x60>
 800a0e6:	bf00      	nop
 800a0e8:	0800c308 	.word	0x0800c308
 800a0ec:	ffff0001 	.word	0xffff0001

0800a0f0 <_fwalk_reent>:
 800a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	4688      	mov	r8, r1
 800a0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0fc:	2700      	movs	r7, #0
 800a0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a102:	f1b9 0901 	subs.w	r9, r9, #1
 800a106:	d505      	bpl.n	800a114 <_fwalk_reent+0x24>
 800a108:	6824      	ldr	r4, [r4, #0]
 800a10a:	2c00      	cmp	r4, #0
 800a10c:	d1f7      	bne.n	800a0fe <_fwalk_reent+0xe>
 800a10e:	4638      	mov	r0, r7
 800a110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a114:	89ab      	ldrh	r3, [r5, #12]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d907      	bls.n	800a12a <_fwalk_reent+0x3a>
 800a11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a11e:	3301      	adds	r3, #1
 800a120:	d003      	beq.n	800a12a <_fwalk_reent+0x3a>
 800a122:	4629      	mov	r1, r5
 800a124:	4630      	mov	r0, r6
 800a126:	47c0      	blx	r8
 800a128:	4307      	orrs	r7, r0
 800a12a:	3568      	adds	r5, #104	; 0x68
 800a12c:	e7e9      	b.n	800a102 <_fwalk_reent+0x12>

0800a12e <__retarget_lock_init_recursive>:
 800a12e:	4770      	bx	lr

0800a130 <__retarget_lock_acquire_recursive>:
 800a130:	4770      	bx	lr

0800a132 <__retarget_lock_release_recursive>:
 800a132:	4770      	bx	lr

0800a134 <__swhatbuf_r>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	460e      	mov	r6, r1
 800a138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13c:	2900      	cmp	r1, #0
 800a13e:	b096      	sub	sp, #88	; 0x58
 800a140:	4614      	mov	r4, r2
 800a142:	461d      	mov	r5, r3
 800a144:	da07      	bge.n	800a156 <__swhatbuf_r+0x22>
 800a146:	2300      	movs	r3, #0
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	89b3      	ldrh	r3, [r6, #12]
 800a14c:	061a      	lsls	r2, r3, #24
 800a14e:	d410      	bmi.n	800a172 <__swhatbuf_r+0x3e>
 800a150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a154:	e00e      	b.n	800a174 <__swhatbuf_r+0x40>
 800a156:	466a      	mov	r2, sp
 800a158:	f000 f8fa 	bl	800a350 <_fstat_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	dbf2      	blt.n	800a146 <__swhatbuf_r+0x12>
 800a160:	9a01      	ldr	r2, [sp, #4]
 800a162:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a166:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a16a:	425a      	negs	r2, r3
 800a16c:	415a      	adcs	r2, r3
 800a16e:	602a      	str	r2, [r5, #0]
 800a170:	e7ee      	b.n	800a150 <__swhatbuf_r+0x1c>
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	2000      	movs	r0, #0
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	b016      	add	sp, #88	; 0x58
 800a17a:	bd70      	pop	{r4, r5, r6, pc}

0800a17c <__smakebuf_r>:
 800a17c:	898b      	ldrh	r3, [r1, #12]
 800a17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a180:	079d      	lsls	r5, r3, #30
 800a182:	4606      	mov	r6, r0
 800a184:	460c      	mov	r4, r1
 800a186:	d507      	bpl.n	800a198 <__smakebuf_r+0x1c>
 800a188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	2301      	movs	r3, #1
 800a192:	6163      	str	r3, [r4, #20]
 800a194:	b002      	add	sp, #8
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	ab01      	add	r3, sp, #4
 800a19a:	466a      	mov	r2, sp
 800a19c:	f7ff ffca 	bl	800a134 <__swhatbuf_r>
 800a1a0:	9900      	ldr	r1, [sp, #0]
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff f8c5 	bl	8009334 <_malloc_r>
 800a1aa:	b948      	cbnz	r0, 800a1c0 <__smakebuf_r+0x44>
 800a1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b0:	059a      	lsls	r2, r3, #22
 800a1b2:	d4ef      	bmi.n	800a194 <__smakebuf_r+0x18>
 800a1b4:	f023 0303 	bic.w	r3, r3, #3
 800a1b8:	f043 0302 	orr.w	r3, r3, #2
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	e7e3      	b.n	800a188 <__smakebuf_r+0xc>
 800a1c0:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <__smakebuf_r+0x7c>)
 800a1c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	6020      	str	r0, [r4, #0]
 800a1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	6163      	str	r3, [r4, #20]
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	6120      	str	r0, [r4, #16]
 800a1d6:	b15b      	cbz	r3, 800a1f0 <__smakebuf_r+0x74>
 800a1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f000 f8c9 	bl	800a374 <_isatty_r>
 800a1e2:	b128      	cbz	r0, 800a1f0 <__smakebuf_r+0x74>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	f023 0303 	bic.w	r3, r3, #3
 800a1ea:	f043 0301 	orr.w	r3, r3, #1
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	89a0      	ldrh	r0, [r4, #12]
 800a1f2:	4305      	orrs	r5, r0
 800a1f4:	81a5      	strh	r5, [r4, #12]
 800a1f6:	e7cd      	b.n	800a194 <__smakebuf_r+0x18>
 800a1f8:	08009f8d 	.word	0x08009f8d

0800a1fc <_raise_r>:
 800a1fc:	291f      	cmp	r1, #31
 800a1fe:	b538      	push	{r3, r4, r5, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	d904      	bls.n	800a210 <_raise_r+0x14>
 800a206:	2316      	movs	r3, #22
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	f04f 30ff 	mov.w	r0, #4294967295
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a212:	b112      	cbz	r2, 800a21a <_raise_r+0x1e>
 800a214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a218:	b94b      	cbnz	r3, 800a22e <_raise_r+0x32>
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 f830 	bl	800a280 <_getpid_r>
 800a220:	462a      	mov	r2, r5
 800a222:	4601      	mov	r1, r0
 800a224:	4620      	mov	r0, r4
 800a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22a:	f000 b817 	b.w	800a25c <_kill_r>
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d00a      	beq.n	800a248 <_raise_r+0x4c>
 800a232:	1c59      	adds	r1, r3, #1
 800a234:	d103      	bne.n	800a23e <_raise_r+0x42>
 800a236:	2316      	movs	r3, #22
 800a238:	6003      	str	r3, [r0, #0]
 800a23a:	2001      	movs	r0, #1
 800a23c:	e7e7      	b.n	800a20e <_raise_r+0x12>
 800a23e:	2400      	movs	r4, #0
 800a240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a244:	4628      	mov	r0, r5
 800a246:	4798      	blx	r3
 800a248:	2000      	movs	r0, #0
 800a24a:	e7e0      	b.n	800a20e <_raise_r+0x12>

0800a24c <raise>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <raise+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f7ff bfd3 	b.w	800a1fc <_raise_r>
 800a256:	bf00      	nop
 800a258:	2000002c 	.word	0x2000002c

0800a25c <_kill_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	; (800a27c <_kill_r+0x20>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	4611      	mov	r1, r2
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	f7f8 f8f1 	bl	8002450 <_kill>
 800a26e:	1c43      	adds	r3, r0, #1
 800a270:	d102      	bne.n	800a278 <_kill_r+0x1c>
 800a272:	682b      	ldr	r3, [r5, #0]
 800a274:	b103      	cbz	r3, 800a278 <_kill_r+0x1c>
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	bd38      	pop	{r3, r4, r5, pc}
 800a27a:	bf00      	nop
 800a27c:	200008dc 	.word	0x200008dc

0800a280 <_getpid_r>:
 800a280:	f7f8 b8de 	b.w	8002440 <_getpid>

0800a284 <__sread>:
 800a284:	b510      	push	{r4, lr}
 800a286:	460c      	mov	r4, r1
 800a288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28c:	f000 f894 	bl	800a3b8 <_read_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	bfab      	itete	ge
 800a294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a296:	89a3      	ldrhlt	r3, [r4, #12]
 800a298:	181b      	addge	r3, r3, r0
 800a29a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a29e:	bfac      	ite	ge
 800a2a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2a2:	81a3      	strhlt	r3, [r4, #12]
 800a2a4:	bd10      	pop	{r4, pc}

0800a2a6 <__swrite>:
 800a2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	898b      	ldrh	r3, [r1, #12]
 800a2ae:	05db      	lsls	r3, r3, #23
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	d505      	bpl.n	800a2c4 <__swrite+0x1e>
 800a2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2bc:	2302      	movs	r3, #2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f000 f868 	bl	800a394 <_lseek_r>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ce:	81a3      	strh	r3, [r4, #12]
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2da:	f000 b817 	b.w	800a30c <_write_r>

0800a2de <__sseek>:
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e6:	f000 f855 	bl	800a394 <_lseek_r>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	bf15      	itete	ne
 800a2f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2fa:	81a3      	strheq	r3, [r4, #12]
 800a2fc:	bf18      	it	ne
 800a2fe:	81a3      	strhne	r3, [r4, #12]
 800a300:	bd10      	pop	{r4, pc}

0800a302 <__sclose>:
 800a302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a306:	f000 b813 	b.w	800a330 <_close_r>
	...

0800a30c <_write_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d07      	ldr	r5, [pc, #28]	; (800a32c <_write_r+0x20>)
 800a310:	4604      	mov	r4, r0
 800a312:	4608      	mov	r0, r1
 800a314:	4611      	mov	r1, r2
 800a316:	2200      	movs	r2, #0
 800a318:	602a      	str	r2, [r5, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	f7f8 f8cf 	bl	80024be <_write>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_write_r+0x1e>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	b103      	cbz	r3, 800a32a <_write_r+0x1e>
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	200008dc 	.word	0x200008dc

0800a330 <_close_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d06      	ldr	r5, [pc, #24]	; (800a34c <_close_r+0x1c>)
 800a334:	2300      	movs	r3, #0
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	f7f8 f8db 	bl	80024f6 <_close>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d102      	bne.n	800a34a <_close_r+0x1a>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	b103      	cbz	r3, 800a34a <_close_r+0x1a>
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	200008dc 	.word	0x200008dc

0800a350 <_fstat_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_fstat_r+0x20>)
 800a354:	2300      	movs	r3, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f7f8 f8d6 	bl	800250e <_fstat>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d102      	bne.n	800a36c <_fstat_r+0x1c>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	b103      	cbz	r3, 800a36c <_fstat_r+0x1c>
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	bf00      	nop
 800a370:	200008dc 	.word	0x200008dc

0800a374 <_isatty_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d06      	ldr	r5, [pc, #24]	; (800a390 <_isatty_r+0x1c>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	602b      	str	r3, [r5, #0]
 800a380:	f7f8 f8d5 	bl	800252e <_isatty>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_isatty_r+0x1a>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_isatty_r+0x1a>
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	200008dc 	.word	0x200008dc

0800a394 <_lseek_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4d07      	ldr	r5, [pc, #28]	; (800a3b4 <_lseek_r+0x20>)
 800a398:	4604      	mov	r4, r0
 800a39a:	4608      	mov	r0, r1
 800a39c:	4611      	mov	r1, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	602a      	str	r2, [r5, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f7f8 f8ce 	bl	8002544 <_lseek>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_lseek_r+0x1e>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_lseek_r+0x1e>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	200008dc 	.word	0x200008dc

0800a3b8 <_read_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_read_r+0x20>)
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4608      	mov	r0, r1
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	602a      	str	r2, [r5, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f7f8 f85c 	bl	8002484 <_read>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_read_r+0x1e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_read_r+0x1e>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	200008dc 	.word	0x200008dc
 800a3dc:	00000000 	.word	0x00000000

0800a3e0 <cos>:
 800a3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3e2:	ec53 2b10 	vmov	r2, r3, d0
 800a3e6:	4824      	ldr	r0, [pc, #144]	; (800a478 <cos+0x98>)
 800a3e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3ec:	4281      	cmp	r1, r0
 800a3ee:	dc06      	bgt.n	800a3fe <cos+0x1e>
 800a3f0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a470 <cos+0x90>
 800a3f4:	f001 f958 	bl	800b6a8 <__kernel_cos>
 800a3f8:	ec51 0b10 	vmov	r0, r1, d0
 800a3fc:	e007      	b.n	800a40e <cos+0x2e>
 800a3fe:	481f      	ldr	r0, [pc, #124]	; (800a47c <cos+0x9c>)
 800a400:	4281      	cmp	r1, r0
 800a402:	dd09      	ble.n	800a418 <cos+0x38>
 800a404:	ee10 0a10 	vmov	r0, s0
 800a408:	4619      	mov	r1, r3
 800a40a:	f7f5 ff35 	bl	8000278 <__aeabi_dsub>
 800a40e:	ec41 0b10 	vmov	d0, r0, r1
 800a412:	b005      	add	sp, #20
 800a414:	f85d fb04 	ldr.w	pc, [sp], #4
 800a418:	4668      	mov	r0, sp
 800a41a:	f000 fe85 	bl	800b128 <__ieee754_rem_pio2>
 800a41e:	f000 0003 	and.w	r0, r0, #3
 800a422:	2801      	cmp	r0, #1
 800a424:	d007      	beq.n	800a436 <cos+0x56>
 800a426:	2802      	cmp	r0, #2
 800a428:	d012      	beq.n	800a450 <cos+0x70>
 800a42a:	b9c0      	cbnz	r0, 800a45e <cos+0x7e>
 800a42c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a430:	ed9d 0b00 	vldr	d0, [sp]
 800a434:	e7de      	b.n	800a3f4 <cos+0x14>
 800a436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a43a:	ed9d 0b00 	vldr	d0, [sp]
 800a43e:	f001 fd3b 	bl	800beb8 <__kernel_sin>
 800a442:	ec53 2b10 	vmov	r2, r3, d0
 800a446:	ee10 0a10 	vmov	r0, s0
 800a44a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a44e:	e7de      	b.n	800a40e <cos+0x2e>
 800a450:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a454:	ed9d 0b00 	vldr	d0, [sp]
 800a458:	f001 f926 	bl	800b6a8 <__kernel_cos>
 800a45c:	e7f1      	b.n	800a442 <cos+0x62>
 800a45e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a462:	ed9d 0b00 	vldr	d0, [sp]
 800a466:	2001      	movs	r0, #1
 800a468:	f001 fd26 	bl	800beb8 <__kernel_sin>
 800a46c:	e7c4      	b.n	800a3f8 <cos+0x18>
 800a46e:	bf00      	nop
	...
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	7fefffff 	.word	0x7fefffff

0800a480 <floor>:
 800a480:	ec51 0b10 	vmov	r0, r1, d0
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a48c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a490:	2e13      	cmp	r6, #19
 800a492:	ee10 5a10 	vmov	r5, s0
 800a496:	ee10 8a10 	vmov	r8, s0
 800a49a:	460c      	mov	r4, r1
 800a49c:	dc32      	bgt.n	800a504 <floor+0x84>
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	da14      	bge.n	800a4cc <floor+0x4c>
 800a4a2:	a333      	add	r3, pc, #204	; (adr r3, 800a570 <floor+0xf0>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 fee8 	bl	800027c <__adddf3>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f7f6 fb2a 	bl	8000b08 <__aeabi_dcmpgt>
 800a4b4:	b138      	cbz	r0, 800a4c6 <floor+0x46>
 800a4b6:	2c00      	cmp	r4, #0
 800a4b8:	da57      	bge.n	800a56a <floor+0xea>
 800a4ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4be:	431d      	orrs	r5, r3
 800a4c0:	d001      	beq.n	800a4c6 <floor+0x46>
 800a4c2:	4c2d      	ldr	r4, [pc, #180]	; (800a578 <floor+0xf8>)
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e025      	b.n	800a518 <floor+0x98>
 800a4cc:	4f2b      	ldr	r7, [pc, #172]	; (800a57c <floor+0xfc>)
 800a4ce:	4137      	asrs	r7, r6
 800a4d0:	ea01 0307 	and.w	r3, r1, r7
 800a4d4:	4303      	orrs	r3, r0
 800a4d6:	d01f      	beq.n	800a518 <floor+0x98>
 800a4d8:	a325      	add	r3, pc, #148	; (adr r3, 800a570 <floor+0xf0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 fecd 	bl	800027c <__adddf3>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f7f6 fb0f 	bl	8000b08 <__aeabi_dcmpgt>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0eb      	beq.n	800a4c6 <floor+0x46>
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	bfbe      	ittt	lt
 800a4f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a4fa:	19a4      	addlt	r4, r4, r6
 800a4fc:	ea24 0407 	bic.w	r4, r4, r7
 800a500:	2500      	movs	r5, #0
 800a502:	e7e0      	b.n	800a4c6 <floor+0x46>
 800a504:	2e33      	cmp	r6, #51	; 0x33
 800a506:	dd0b      	ble.n	800a520 <floor+0xa0>
 800a508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a50c:	d104      	bne.n	800a518 <floor+0x98>
 800a50e:	ee10 2a10 	vmov	r2, s0
 800a512:	460b      	mov	r3, r1
 800a514:	f7f5 feb2 	bl	800027c <__adddf3>
 800a518:	ec41 0b10 	vmov	d0, r0, r1
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	fa23 f707 	lsr.w	r7, r3, r7
 800a52c:	4207      	tst	r7, r0
 800a52e:	d0f3      	beq.n	800a518 <floor+0x98>
 800a530:	a30f      	add	r3, pc, #60	; (adr r3, 800a570 <floor+0xf0>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fea1 	bl	800027c <__adddf3>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	f7f6 fae3 	bl	8000b08 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d0bf      	beq.n	800a4c6 <floor+0x46>
 800a546:	2c00      	cmp	r4, #0
 800a548:	da02      	bge.n	800a550 <floor+0xd0>
 800a54a:	2e14      	cmp	r6, #20
 800a54c:	d103      	bne.n	800a556 <floor+0xd6>
 800a54e:	3401      	adds	r4, #1
 800a550:	ea25 0507 	bic.w	r5, r5, r7
 800a554:	e7b7      	b.n	800a4c6 <floor+0x46>
 800a556:	2301      	movs	r3, #1
 800a558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a55c:	fa03 f606 	lsl.w	r6, r3, r6
 800a560:	4435      	add	r5, r6
 800a562:	4545      	cmp	r5, r8
 800a564:	bf38      	it	cc
 800a566:	18e4      	addcc	r4, r4, r3
 800a568:	e7f2      	b.n	800a550 <floor+0xd0>
 800a56a:	2500      	movs	r5, #0
 800a56c:	462c      	mov	r4, r5
 800a56e:	e7aa      	b.n	800a4c6 <floor+0x46>
 800a570:	8800759c 	.word	0x8800759c
 800a574:	7e37e43c 	.word	0x7e37e43c
 800a578:	bff00000 	.word	0xbff00000
 800a57c:	000fffff 	.word	0x000fffff

0800a580 <pow>:
 800a580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a584:	ec59 8b10 	vmov	r8, r9, d0
 800a588:	ec57 6b11 	vmov	r6, r7, d1
 800a58c:	f000 f8a8 	bl	800a6e0 <__ieee754_pow>
 800a590:	4b4e      	ldr	r3, [pc, #312]	; (800a6cc <pow+0x14c>)
 800a592:	f993 3000 	ldrsb.w	r3, [r3]
 800a596:	3301      	adds	r3, #1
 800a598:	ec55 4b10 	vmov	r4, r5, d0
 800a59c:	d015      	beq.n	800a5ca <pow+0x4a>
 800a59e:	4632      	mov	r2, r6
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	f7f6 fab9 	bl	8000b1c <__aeabi_dcmpun>
 800a5aa:	b970      	cbnz	r0, 800a5ca <pow+0x4a>
 800a5ac:	4642      	mov	r2, r8
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	f7f6 fab2 	bl	8000b1c <__aeabi_dcmpun>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	b148      	cbz	r0, 800a5d2 <pow+0x52>
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f6 fa79 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d17d      	bne.n	800a6c6 <pow+0x146>
 800a5ca:	ec45 4b10 	vmov	d0, r4, r5
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 fa6f 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5da:	b1e0      	cbz	r0, 800a616 <pow+0x96>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fa68 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d16c      	bne.n	800a6c6 <pow+0x146>
 800a5ec:	ec47 6b10 	vmov	d0, r6, r7
 800a5f0:	f001 fd29 	bl	800c046 <finite>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d0e8      	beq.n	800a5ca <pow+0x4a>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f6 fa64 	bl	8000acc <__aeabi_dcmplt>
 800a604:	2800      	cmp	r0, #0
 800a606:	d0e0      	beq.n	800a5ca <pow+0x4a>
 800a608:	f7fe fe02 	bl	8009210 <__errno>
 800a60c:	2321      	movs	r3, #33	; 0x21
 800a60e:	6003      	str	r3, [r0, #0]
 800a610:	2400      	movs	r4, #0
 800a612:	4d2f      	ldr	r5, [pc, #188]	; (800a6d0 <pow+0x150>)
 800a614:	e7d9      	b.n	800a5ca <pow+0x4a>
 800a616:	ec45 4b10 	vmov	d0, r4, r5
 800a61a:	f001 fd14 	bl	800c046 <finite>
 800a61e:	bbb8      	cbnz	r0, 800a690 <pow+0x110>
 800a620:	ec49 8b10 	vmov	d0, r8, r9
 800a624:	f001 fd0f 	bl	800c046 <finite>
 800a628:	b390      	cbz	r0, 800a690 <pow+0x110>
 800a62a:	ec47 6b10 	vmov	d0, r6, r7
 800a62e:	f001 fd0a 	bl	800c046 <finite>
 800a632:	b368      	cbz	r0, 800a690 <pow+0x110>
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f6 fa6e 	bl	8000b1c <__aeabi_dcmpun>
 800a640:	b160      	cbz	r0, 800a65c <pow+0xdc>
 800a642:	f7fe fde5 	bl	8009210 <__errno>
 800a646:	2321      	movs	r3, #33	; 0x21
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	f7f6 f8f3 	bl	800083c <__aeabi_ddiv>
 800a656:	4604      	mov	r4, r0
 800a658:	460d      	mov	r5, r1
 800a65a:	e7b6      	b.n	800a5ca <pow+0x4a>
 800a65c:	f7fe fdd8 	bl	8009210 <__errno>
 800a660:	2322      	movs	r3, #34	; 0x22
 800a662:	6003      	str	r3, [r0, #0]
 800a664:	2200      	movs	r2, #0
 800a666:	2300      	movs	r3, #0
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f6 fa2e 	bl	8000acc <__aeabi_dcmplt>
 800a670:	2400      	movs	r4, #0
 800a672:	b158      	cbz	r0, 800a68c <pow+0x10c>
 800a674:	ec47 6b10 	vmov	d0, r6, r7
 800a678:	f001 fcfa 	bl	800c070 <rint>
 800a67c:	4632      	mov	r2, r6
 800a67e:	ec51 0b10 	vmov	r0, r1, d0
 800a682:	463b      	mov	r3, r7
 800a684:	f7f6 fa18 	bl	8000ab8 <__aeabi_dcmpeq>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0c2      	beq.n	800a612 <pow+0x92>
 800a68c:	4d11      	ldr	r5, [pc, #68]	; (800a6d4 <pow+0x154>)
 800a68e:	e79c      	b.n	800a5ca <pow+0x4a>
 800a690:	2200      	movs	r2, #0
 800a692:	2300      	movs	r3, #0
 800a694:	4620      	mov	r0, r4
 800a696:	4629      	mov	r1, r5
 800a698:	f7f6 fa0e 	bl	8000ab8 <__aeabi_dcmpeq>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d094      	beq.n	800a5ca <pow+0x4a>
 800a6a0:	ec49 8b10 	vmov	d0, r8, r9
 800a6a4:	f001 fccf 	bl	800c046 <finite>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d08e      	beq.n	800a5ca <pow+0x4a>
 800a6ac:	ec47 6b10 	vmov	d0, r6, r7
 800a6b0:	f001 fcc9 	bl	800c046 <finite>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d088      	beq.n	800a5ca <pow+0x4a>
 800a6b8:	f7fe fdaa 	bl	8009210 <__errno>
 800a6bc:	2322      	movs	r3, #34	; 0x22
 800a6be:	6003      	str	r3, [r0, #0]
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	2500      	movs	r5, #0
 800a6c4:	e781      	b.n	800a5ca <pow+0x4a>
 800a6c6:	4d04      	ldr	r5, [pc, #16]	; (800a6d8 <pow+0x158>)
 800a6c8:	2400      	movs	r4, #0
 800a6ca:	e77e      	b.n	800a5ca <pow+0x4a>
 800a6cc:	20000090 	.word	0x20000090
 800a6d0:	fff00000 	.word	0xfff00000
 800a6d4:	7ff00000 	.word	0x7ff00000
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <__ieee754_pow>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ed2d 8b06 	vpush	{d8-d10}
 800a6e8:	b08d      	sub	sp, #52	; 0x34
 800a6ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a6ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a6f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a6f6:	ea56 0100 	orrs.w	r1, r6, r0
 800a6fa:	ec53 2b10 	vmov	r2, r3, d0
 800a6fe:	f000 84d1 	beq.w	800b0a4 <__ieee754_pow+0x9c4>
 800a702:	497f      	ldr	r1, [pc, #508]	; (800a900 <__ieee754_pow+0x220>)
 800a704:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a708:	428c      	cmp	r4, r1
 800a70a:	ee10 8a10 	vmov	r8, s0
 800a70e:	4699      	mov	r9, r3
 800a710:	dc09      	bgt.n	800a726 <__ieee754_pow+0x46>
 800a712:	d103      	bne.n	800a71c <__ieee754_pow+0x3c>
 800a714:	b97a      	cbnz	r2, 800a736 <__ieee754_pow+0x56>
 800a716:	42a6      	cmp	r6, r4
 800a718:	dd02      	ble.n	800a720 <__ieee754_pow+0x40>
 800a71a:	e00c      	b.n	800a736 <__ieee754_pow+0x56>
 800a71c:	428e      	cmp	r6, r1
 800a71e:	dc02      	bgt.n	800a726 <__ieee754_pow+0x46>
 800a720:	428e      	cmp	r6, r1
 800a722:	d110      	bne.n	800a746 <__ieee754_pow+0x66>
 800a724:	b178      	cbz	r0, 800a746 <__ieee754_pow+0x66>
 800a726:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a72a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a72e:	ea54 0308 	orrs.w	r3, r4, r8
 800a732:	f000 84b7 	beq.w	800b0a4 <__ieee754_pow+0x9c4>
 800a736:	4873      	ldr	r0, [pc, #460]	; (800a904 <__ieee754_pow+0x224>)
 800a738:	b00d      	add	sp, #52	; 0x34
 800a73a:	ecbd 8b06 	vpop	{d8-d10}
 800a73e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a742:	f001 bc8d 	b.w	800c060 <nan>
 800a746:	f1b9 0f00 	cmp.w	r9, #0
 800a74a:	da36      	bge.n	800a7ba <__ieee754_pow+0xda>
 800a74c:	496e      	ldr	r1, [pc, #440]	; (800a908 <__ieee754_pow+0x228>)
 800a74e:	428e      	cmp	r6, r1
 800a750:	dc51      	bgt.n	800a7f6 <__ieee754_pow+0x116>
 800a752:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a756:	428e      	cmp	r6, r1
 800a758:	f340 84af 	ble.w	800b0ba <__ieee754_pow+0x9da>
 800a75c:	1531      	asrs	r1, r6, #20
 800a75e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a762:	2914      	cmp	r1, #20
 800a764:	dd0f      	ble.n	800a786 <__ieee754_pow+0xa6>
 800a766:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a76a:	fa20 fc01 	lsr.w	ip, r0, r1
 800a76e:	fa0c f101 	lsl.w	r1, ip, r1
 800a772:	4281      	cmp	r1, r0
 800a774:	f040 84a1 	bne.w	800b0ba <__ieee754_pow+0x9da>
 800a778:	f00c 0c01 	and.w	ip, ip, #1
 800a77c:	f1cc 0102 	rsb	r1, ip, #2
 800a780:	9100      	str	r1, [sp, #0]
 800a782:	b180      	cbz	r0, 800a7a6 <__ieee754_pow+0xc6>
 800a784:	e059      	b.n	800a83a <__ieee754_pow+0x15a>
 800a786:	2800      	cmp	r0, #0
 800a788:	d155      	bne.n	800a836 <__ieee754_pow+0x156>
 800a78a:	f1c1 0114 	rsb	r1, r1, #20
 800a78e:	fa46 fc01 	asr.w	ip, r6, r1
 800a792:	fa0c f101 	lsl.w	r1, ip, r1
 800a796:	42b1      	cmp	r1, r6
 800a798:	f040 848c 	bne.w	800b0b4 <__ieee754_pow+0x9d4>
 800a79c:	f00c 0c01 	and.w	ip, ip, #1
 800a7a0:	f1cc 0102 	rsb	r1, ip, #2
 800a7a4:	9100      	str	r1, [sp, #0]
 800a7a6:	4959      	ldr	r1, [pc, #356]	; (800a90c <__ieee754_pow+0x22c>)
 800a7a8:	428e      	cmp	r6, r1
 800a7aa:	d12d      	bne.n	800a808 <__ieee754_pow+0x128>
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	da79      	bge.n	800a8a4 <__ieee754_pow+0x1c4>
 800a7b0:	4956      	ldr	r1, [pc, #344]	; (800a90c <__ieee754_pow+0x22c>)
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	f7f6 f842 	bl	800083c <__aeabi_ddiv>
 800a7b8:	e016      	b.n	800a7e8 <__ieee754_pow+0x108>
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	9100      	str	r1, [sp, #0]
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d13b      	bne.n	800a83a <__ieee754_pow+0x15a>
 800a7c2:	494f      	ldr	r1, [pc, #316]	; (800a900 <__ieee754_pow+0x220>)
 800a7c4:	428e      	cmp	r6, r1
 800a7c6:	d1ee      	bne.n	800a7a6 <__ieee754_pow+0xc6>
 800a7c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a7cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7d0:	ea53 0308 	orrs.w	r3, r3, r8
 800a7d4:	f000 8466 	beq.w	800b0a4 <__ieee754_pow+0x9c4>
 800a7d8:	4b4d      	ldr	r3, [pc, #308]	; (800a910 <__ieee754_pow+0x230>)
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	dd0d      	ble.n	800a7fa <__ieee754_pow+0x11a>
 800a7de:	2f00      	cmp	r7, #0
 800a7e0:	f280 8464 	bge.w	800b0ac <__ieee754_pow+0x9cc>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ec:	b00d      	add	sp, #52	; 0x34
 800a7ee:	ecbd 8b06 	vpop	{d8-d10}
 800a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f6:	2102      	movs	r1, #2
 800a7f8:	e7e0      	b.n	800a7bc <__ieee754_pow+0xdc>
 800a7fa:	2f00      	cmp	r7, #0
 800a7fc:	daf2      	bge.n	800a7e4 <__ieee754_pow+0x104>
 800a7fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a802:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a806:	e7ef      	b.n	800a7e8 <__ieee754_pow+0x108>
 800a808:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a80c:	d104      	bne.n	800a818 <__ieee754_pow+0x138>
 800a80e:	4610      	mov	r0, r2
 800a810:	4619      	mov	r1, r3
 800a812:	f7f5 fee9 	bl	80005e8 <__aeabi_dmul>
 800a816:	e7e7      	b.n	800a7e8 <__ieee754_pow+0x108>
 800a818:	493e      	ldr	r1, [pc, #248]	; (800a914 <__ieee754_pow+0x234>)
 800a81a:	428f      	cmp	r7, r1
 800a81c:	d10d      	bne.n	800a83a <__ieee754_pow+0x15a>
 800a81e:	f1b9 0f00 	cmp.w	r9, #0
 800a822:	db0a      	blt.n	800a83a <__ieee754_pow+0x15a>
 800a824:	ec43 2b10 	vmov	d0, r2, r3
 800a828:	b00d      	add	sp, #52	; 0x34
 800a82a:	ecbd 8b06 	vpop	{d8-d10}
 800a82e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a832:	f000 be83 	b.w	800b53c <__ieee754_sqrt>
 800a836:	2100      	movs	r1, #0
 800a838:	9100      	str	r1, [sp, #0]
 800a83a:	ec43 2b10 	vmov	d0, r2, r3
 800a83e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a842:	f001 fbf7 	bl	800c034 <fabs>
 800a846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a84a:	ec51 0b10 	vmov	r0, r1, d0
 800a84e:	f1b8 0f00 	cmp.w	r8, #0
 800a852:	d12a      	bne.n	800a8aa <__ieee754_pow+0x1ca>
 800a854:	b12c      	cbz	r4, 800a862 <__ieee754_pow+0x182>
 800a856:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a90c <__ieee754_pow+0x22c>
 800a85a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a85e:	45e6      	cmp	lr, ip
 800a860:	d123      	bne.n	800a8aa <__ieee754_pow+0x1ca>
 800a862:	2f00      	cmp	r7, #0
 800a864:	da05      	bge.n	800a872 <__ieee754_pow+0x192>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	2000      	movs	r0, #0
 800a86c:	4927      	ldr	r1, [pc, #156]	; (800a90c <__ieee754_pow+0x22c>)
 800a86e:	f7f5 ffe5 	bl	800083c <__aeabi_ddiv>
 800a872:	f1b9 0f00 	cmp.w	r9, #0
 800a876:	dab7      	bge.n	800a7e8 <__ieee754_pow+0x108>
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a87e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a882:	4323      	orrs	r3, r4
 800a884:	d108      	bne.n	800a898 <__ieee754_pow+0x1b8>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4610      	mov	r0, r2
 800a88c:	4619      	mov	r1, r3
 800a88e:	f7f5 fcf3 	bl	8000278 <__aeabi_dsub>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	e78d      	b.n	800a7b4 <__ieee754_pow+0xd4>
 800a898:	9b00      	ldr	r3, [sp, #0]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d1a4      	bne.n	800a7e8 <__ieee754_pow+0x108>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	e79e      	b.n	800a7e8 <__ieee754_pow+0x108>
 800a8aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a8ae:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a8b2:	950a      	str	r5, [sp, #40]	; 0x28
 800a8b4:	9d00      	ldr	r5, [sp, #0]
 800a8b6:	46ac      	mov	ip, r5
 800a8b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a8ba:	ea5c 0505 	orrs.w	r5, ip, r5
 800a8be:	d0e4      	beq.n	800a88a <__ieee754_pow+0x1aa>
 800a8c0:	4b15      	ldr	r3, [pc, #84]	; (800a918 <__ieee754_pow+0x238>)
 800a8c2:	429e      	cmp	r6, r3
 800a8c4:	f340 80fc 	ble.w	800aac0 <__ieee754_pow+0x3e0>
 800a8c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a8cc:	429e      	cmp	r6, r3
 800a8ce:	4b10      	ldr	r3, [pc, #64]	; (800a910 <__ieee754_pow+0x230>)
 800a8d0:	dd07      	ble.n	800a8e2 <__ieee754_pow+0x202>
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	dc0a      	bgt.n	800a8ec <__ieee754_pow+0x20c>
 800a8d6:	2f00      	cmp	r7, #0
 800a8d8:	da84      	bge.n	800a7e4 <__ieee754_pow+0x104>
 800a8da:	a307      	add	r3, pc, #28	; (adr r3, 800a8f8 <__ieee754_pow+0x218>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	e795      	b.n	800a80e <__ieee754_pow+0x12e>
 800a8e2:	429c      	cmp	r4, r3
 800a8e4:	dbf7      	blt.n	800a8d6 <__ieee754_pow+0x1f6>
 800a8e6:	4b09      	ldr	r3, [pc, #36]	; (800a90c <__ieee754_pow+0x22c>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	dd17      	ble.n	800a91c <__ieee754_pow+0x23c>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	dcf4      	bgt.n	800a8da <__ieee754_pow+0x1fa>
 800a8f0:	e778      	b.n	800a7e4 <__ieee754_pow+0x104>
 800a8f2:	bf00      	nop
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	8800759c 	.word	0x8800759c
 800a8fc:	7e37e43c 	.word	0x7e37e43c
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	0800c3bf 	.word	0x0800c3bf
 800a908:	433fffff 	.word	0x433fffff
 800a90c:	3ff00000 	.word	0x3ff00000
 800a910:	3fefffff 	.word	0x3fefffff
 800a914:	3fe00000 	.word	0x3fe00000
 800a918:	41e00000 	.word	0x41e00000
 800a91c:	4b64      	ldr	r3, [pc, #400]	; (800aab0 <__ieee754_pow+0x3d0>)
 800a91e:	2200      	movs	r2, #0
 800a920:	f7f5 fcaa 	bl	8000278 <__aeabi_dsub>
 800a924:	a356      	add	r3, pc, #344	; (adr r3, 800aa80 <__ieee754_pow+0x3a0>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	f7f5 fe5b 	bl	80005e8 <__aeabi_dmul>
 800a932:	a355      	add	r3, pc, #340	; (adr r3, 800aa88 <__ieee754_pow+0x3a8>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fe52 	bl	80005e8 <__aeabi_dmul>
 800a944:	4b5b      	ldr	r3, [pc, #364]	; (800aab4 <__ieee754_pow+0x3d4>)
 800a946:	4682      	mov	sl, r0
 800a948:	468b      	mov	fp, r1
 800a94a:	2200      	movs	r2, #0
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 fe4a 	bl	80005e8 <__aeabi_dmul>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	a14d      	add	r1, pc, #308	; (adr r1, 800aa90 <__ieee754_pow+0x3b0>)
 800a95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95e:	f7f5 fc8b 	bl	8000278 <__aeabi_dsub>
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	f7f5 fe3f 	bl	80005e8 <__aeabi_dmul>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	2000      	movs	r0, #0
 800a970:	4951      	ldr	r1, [pc, #324]	; (800aab8 <__ieee754_pow+0x3d8>)
 800a972:	f7f5 fc81 	bl	8000278 <__aeabi_dsub>
 800a976:	4622      	mov	r2, r4
 800a978:	4680      	mov	r8, r0
 800a97a:	4689      	mov	r9, r1
 800a97c:	462b      	mov	r3, r5
 800a97e:	4620      	mov	r0, r4
 800a980:	4629      	mov	r1, r5
 800a982:	f7f5 fe31 	bl	80005e8 <__aeabi_dmul>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f5 fe2b 	bl	80005e8 <__aeabi_dmul>
 800a992:	a341      	add	r3, pc, #260	; (adr r3, 800aa98 <__ieee754_pow+0x3b8>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fe26 	bl	80005e8 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	f7f5 fc68 	bl	8000278 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	f7f5 fc62 	bl	800027c <__adddf3>
 800a9b8:	2400      	movs	r4, #0
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	463b      	mov	r3, r7
 800a9be:	4620      	mov	r0, r4
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	f7f5 fc59 	bl	8000278 <__aeabi_dsub>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	f7f5 fc53 	bl	8000278 <__aeabi_dsub>
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	4682      	mov	sl, r0
 800a9dc:	468b      	mov	fp, r1
 800a9de:	f040 81f1 	bne.w	800adc4 <__ieee754_pow+0x6e4>
 800a9e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800aaa0 <__ieee754_pow+0x3c0>
 800a9e6:	eeb0 8a47 	vmov.f32	s16, s14
 800a9ea:	eef0 8a67 	vmov.f32	s17, s15
 800a9ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9fc:	f7f5 fc3c 	bl	8000278 <__aeabi_dsub>
 800aa00:	4622      	mov	r2, r4
 800aa02:	462b      	mov	r3, r5
 800aa04:	f7f5 fdf0 	bl	80005e8 <__aeabi_dmul>
 800aa08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	4650      	mov	r0, sl
 800aa12:	4659      	mov	r1, fp
 800aa14:	f7f5 fde8 	bl	80005e8 <__aeabi_dmul>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fc2c 	bl	800027c <__adddf3>
 800aa24:	4632      	mov	r2, r6
 800aa26:	463b      	mov	r3, r7
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4689      	mov	r9, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fdda 	bl	80005e8 <__aeabi_dmul>
 800aa34:	460b      	mov	r3, r1
 800aa36:	4604      	mov	r4, r0
 800aa38:	460d      	mov	r5, r1
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f7f5 fc1c 	bl	800027c <__adddf3>
 800aa44:	4b1d      	ldr	r3, [pc, #116]	; (800aabc <__ieee754_pow+0x3dc>)
 800aa46:	4299      	cmp	r1, r3
 800aa48:	ec45 4b19 	vmov	d9, r4, r5
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	468b      	mov	fp, r1
 800aa52:	f340 82fe 	ble.w	800b052 <__ieee754_pow+0x972>
 800aa56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa5e:	4303      	orrs	r3, r0
 800aa60:	f000 81f0 	beq.w	800ae44 <__ieee754_pow+0x764>
 800aa64:	a310      	add	r3, pc, #64	; (adr r3, 800aaa8 <__ieee754_pow+0x3c8>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	ec51 0b18 	vmov	r0, r1, d8
 800aa6e:	f7f5 fdbb 	bl	80005e8 <__aeabi_dmul>
 800aa72:	a30d      	add	r3, pc, #52	; (adr r3, 800aaa8 <__ieee754_pow+0x3c8>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	e6cb      	b.n	800a812 <__ieee754_pow+0x132>
 800aa7a:	bf00      	nop
 800aa7c:	f3af 8000 	nop.w
 800aa80:	60000000 	.word	0x60000000
 800aa84:	3ff71547 	.word	0x3ff71547
 800aa88:	f85ddf44 	.word	0xf85ddf44
 800aa8c:	3e54ae0b 	.word	0x3e54ae0b
 800aa90:	55555555 	.word	0x55555555
 800aa94:	3fd55555 	.word	0x3fd55555
 800aa98:	652b82fe 	.word	0x652b82fe
 800aa9c:	3ff71547 	.word	0x3ff71547
 800aaa0:	00000000 	.word	0x00000000
 800aaa4:	bff00000 	.word	0xbff00000
 800aaa8:	8800759c 	.word	0x8800759c
 800aaac:	7e37e43c 	.word	0x7e37e43c
 800aab0:	3ff00000 	.word	0x3ff00000
 800aab4:	3fd00000 	.word	0x3fd00000
 800aab8:	3fe00000 	.word	0x3fe00000
 800aabc:	408fffff 	.word	0x408fffff
 800aac0:	4bd7      	ldr	r3, [pc, #860]	; (800ae20 <__ieee754_pow+0x740>)
 800aac2:	ea03 0309 	and.w	r3, r3, r9
 800aac6:	2200      	movs	r2, #0
 800aac8:	b92b      	cbnz	r3, 800aad6 <__ieee754_pow+0x3f6>
 800aaca:	4bd6      	ldr	r3, [pc, #856]	; (800ae24 <__ieee754_pow+0x744>)
 800aacc:	f7f5 fd8c 	bl	80005e8 <__aeabi_dmul>
 800aad0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aad4:	460c      	mov	r4, r1
 800aad6:	1523      	asrs	r3, r4, #20
 800aad8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aadc:	4413      	add	r3, r2
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	4bd1      	ldr	r3, [pc, #836]	; (800ae28 <__ieee754_pow+0x748>)
 800aae2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aae6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aaea:	429c      	cmp	r4, r3
 800aaec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aaf0:	dd08      	ble.n	800ab04 <__ieee754_pow+0x424>
 800aaf2:	4bce      	ldr	r3, [pc, #824]	; (800ae2c <__ieee754_pow+0x74c>)
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	f340 8163 	ble.w	800adc0 <__ieee754_pow+0x6e0>
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	3301      	adds	r3, #1
 800aafe:	9309      	str	r3, [sp, #36]	; 0x24
 800ab00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ab04:	2400      	movs	r4, #0
 800ab06:	00e3      	lsls	r3, r4, #3
 800ab08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab0a:	4bc9      	ldr	r3, [pc, #804]	; (800ae30 <__ieee754_pow+0x750>)
 800ab0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab10:	ed93 7b00 	vldr	d7, [r3]
 800ab14:	4629      	mov	r1, r5
 800ab16:	ec53 2b17 	vmov	r2, r3, d7
 800ab1a:	eeb0 8a47 	vmov.f32	s16, s14
 800ab1e:	eef0 8a67 	vmov.f32	s17, s15
 800ab22:	4682      	mov	sl, r0
 800ab24:	f7f5 fba8 	bl	8000278 <__aeabi_dsub>
 800ab28:	4652      	mov	r2, sl
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	462b      	mov	r3, r5
 800ab30:	ec51 0b18 	vmov	r0, r1, d8
 800ab34:	f7f5 fba2 	bl	800027c <__adddf3>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	49bd      	ldr	r1, [pc, #756]	; (800ae34 <__ieee754_pow+0x754>)
 800ab40:	f7f5 fe7c 	bl	800083c <__aeabi_ddiv>
 800ab44:	ec41 0b19 	vmov	d9, r0, r1
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	4639      	mov	r1, r7
 800ab50:	f7f5 fd4a 	bl	80005e8 <__aeabi_dmul>
 800ab54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab60:	2300      	movs	r3, #0
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab68:	46ab      	mov	fp, r5
 800ab6a:	106d      	asrs	r5, r5, #1
 800ab6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab74:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461d      	mov	r5, r3
 800ab82:	f7f5 fd31 	bl	80005e8 <__aeabi_dmul>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fb73 	bl	8000278 <__aeabi_dsub>
 800ab92:	ec53 2b18 	vmov	r2, r3, d8
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7f5 fb6b 	bl	8000278 <__aeabi_dsub>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4650      	mov	r0, sl
 800aba8:	4659      	mov	r1, fp
 800abaa:	f7f5 fb65 	bl	8000278 <__aeabi_dsub>
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	f7f5 fd19 	bl	80005e8 <__aeabi_dmul>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4630      	mov	r0, r6
 800abbc:	4639      	mov	r1, r7
 800abbe:	f7f5 fb5b 	bl	8000278 <__aeabi_dsub>
 800abc2:	ec53 2b19 	vmov	r2, r3, d9
 800abc6:	f7f5 fd0f 	bl	80005e8 <__aeabi_dmul>
 800abca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abce:	ec41 0b18 	vmov	d8, r0, r1
 800abd2:	4610      	mov	r0, r2
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7f5 fd07 	bl	80005e8 <__aeabi_dmul>
 800abda:	a37d      	add	r3, pc, #500	; (adr r3, 800add0 <__ieee754_pow+0x6f0>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	f7f5 fd00 	bl	80005e8 <__aeabi_dmul>
 800abe8:	a37b      	add	r3, pc, #492	; (adr r3, 800add8 <__ieee754_pow+0x6f8>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 fb45 	bl	800027c <__adddf3>
 800abf2:	4622      	mov	r2, r4
 800abf4:	462b      	mov	r3, r5
 800abf6:	f7f5 fcf7 	bl	80005e8 <__aeabi_dmul>
 800abfa:	a379      	add	r3, pc, #484	; (adr r3, 800ade0 <__ieee754_pow+0x700>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb3c 	bl	800027c <__adddf3>
 800ac04:	4622      	mov	r2, r4
 800ac06:	462b      	mov	r3, r5
 800ac08:	f7f5 fcee 	bl	80005e8 <__aeabi_dmul>
 800ac0c:	a376      	add	r3, pc, #472	; (adr r3, 800ade8 <__ieee754_pow+0x708>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 fb33 	bl	800027c <__adddf3>
 800ac16:	4622      	mov	r2, r4
 800ac18:	462b      	mov	r3, r5
 800ac1a:	f7f5 fce5 	bl	80005e8 <__aeabi_dmul>
 800ac1e:	a374      	add	r3, pc, #464	; (adr r3, 800adf0 <__ieee754_pow+0x710>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb2a 	bl	800027c <__adddf3>
 800ac28:	4622      	mov	r2, r4
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	f7f5 fcdc 	bl	80005e8 <__aeabi_dmul>
 800ac30:	a371      	add	r3, pc, #452	; (adr r3, 800adf8 <__ieee754_pow+0x718>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	f7f5 fb21 	bl	800027c <__adddf3>
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	462b      	mov	r3, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7f5 fccf 	bl	80005e8 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fcc9 	bl	80005e8 <__aeabi_dmul>
 800ac56:	4642      	mov	r2, r8
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac62:	f7f5 fb0b 	bl	800027c <__adddf3>
 800ac66:	ec53 2b18 	vmov	r2, r3, d8
 800ac6a:	f7f5 fcbd 	bl	80005e8 <__aeabi_dmul>
 800ac6e:	4622      	mov	r2, r4
 800ac70:	462b      	mov	r3, r5
 800ac72:	f7f5 fb03 	bl	800027c <__adddf3>
 800ac76:	4642      	mov	r2, r8
 800ac78:	4682      	mov	sl, r0
 800ac7a:	468b      	mov	fp, r1
 800ac7c:	464b      	mov	r3, r9
 800ac7e:	4640      	mov	r0, r8
 800ac80:	4649      	mov	r1, r9
 800ac82:	f7f5 fcb1 	bl	80005e8 <__aeabi_dmul>
 800ac86:	4b6c      	ldr	r3, [pc, #432]	; (800ae38 <__ieee754_pow+0x758>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	f7f5 faf5 	bl	800027c <__adddf3>
 800ac92:	4652      	mov	r2, sl
 800ac94:	465b      	mov	r3, fp
 800ac96:	f7f5 faf1 	bl	800027c <__adddf3>
 800ac9a:	9c04      	ldr	r4, [sp, #16]
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	460b      	mov	r3, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 fc9f 	bl	80005e8 <__aeabi_dmul>
 800acaa:	4b63      	ldr	r3, [pc, #396]	; (800ae38 <__ieee754_pow+0x758>)
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	2200      	movs	r2, #0
 800acb2:	4620      	mov	r0, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	f7f5 fadf 	bl	8000278 <__aeabi_dsub>
 800acba:	4632      	mov	r2, r6
 800acbc:	463b      	mov	r3, r7
 800acbe:	f7f5 fadb 	bl	8000278 <__aeabi_dsub>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4650      	mov	r0, sl
 800acc8:	4659      	mov	r1, fp
 800acca:	f7f5 fad5 	bl	8000278 <__aeabi_dsub>
 800acce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acd2:	f7f5 fc89 	bl	80005e8 <__aeabi_dmul>
 800acd6:	4622      	mov	r2, r4
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	462b      	mov	r3, r5
 800acde:	ec51 0b18 	vmov	r0, r1, d8
 800ace2:	f7f5 fc81 	bl	80005e8 <__aeabi_dmul>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 fac5 	bl	800027c <__adddf3>
 800acf2:	4606      	mov	r6, r0
 800acf4:	460f      	mov	r7, r1
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fabd 	bl	800027c <__adddf3>
 800ad02:	9c04      	ldr	r4, [sp, #16]
 800ad04:	a33e      	add	r3, pc, #248	; (adr r3, 800ae00 <__ieee754_pow+0x720>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	f7f5 fc6b 	bl	80005e8 <__aeabi_dmul>
 800ad12:	4642      	mov	r2, r8
 800ad14:	ec41 0b18 	vmov	d8, r0, r1
 800ad18:	464b      	mov	r3, r9
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7f5 faab 	bl	8000278 <__aeabi_dsub>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 faa5 	bl	8000278 <__aeabi_dsub>
 800ad2e:	a336      	add	r3, pc, #216	; (adr r3, 800ae08 <__ieee754_pow+0x728>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 fc58 	bl	80005e8 <__aeabi_dmul>
 800ad38:	a335      	add	r3, pc, #212	; (adr r3, 800ae10 <__ieee754_pow+0x730>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	4620      	mov	r0, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 fc4f 	bl	80005e8 <__aeabi_dmul>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	f7f5 fa93 	bl	800027c <__adddf3>
 800ad56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad58:	4b38      	ldr	r3, [pc, #224]	; (800ae3c <__ieee754_pow+0x75c>)
 800ad5a:	4413      	add	r3, r2
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fa8c 	bl	800027c <__adddf3>
 800ad64:	4682      	mov	sl, r0
 800ad66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad68:	468b      	mov	fp, r1
 800ad6a:	f7f5 fbd3 	bl	8000514 <__aeabi_i2d>
 800ad6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad70:	4b33      	ldr	r3, [pc, #204]	; (800ae40 <__ieee754_pow+0x760>)
 800ad72:	4413      	add	r3, r2
 800ad74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	465b      	mov	r3, fp
 800ad80:	ec51 0b18 	vmov	r0, r1, d8
 800ad84:	f7f5 fa7a 	bl	800027c <__adddf3>
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	f7f5 fa76 	bl	800027c <__adddf3>
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	f7f5 fa72 	bl	800027c <__adddf3>
 800ad98:	9c04      	ldr	r4, [sp, #16]
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	4620      	mov	r0, r4
 800ada0:	460d      	mov	r5, r1
 800ada2:	f7f5 fa69 	bl	8000278 <__aeabi_dsub>
 800ada6:	4642      	mov	r2, r8
 800ada8:	464b      	mov	r3, r9
 800adaa:	f7f5 fa65 	bl	8000278 <__aeabi_dsub>
 800adae:	ec53 2b18 	vmov	r2, r3, d8
 800adb2:	f7f5 fa61 	bl	8000278 <__aeabi_dsub>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4650      	mov	r0, sl
 800adbc:	4659      	mov	r1, fp
 800adbe:	e606      	b.n	800a9ce <__ieee754_pow+0x2ee>
 800adc0:	2401      	movs	r4, #1
 800adc2:	e6a0      	b.n	800ab06 <__ieee754_pow+0x426>
 800adc4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ae18 <__ieee754_pow+0x738>
 800adc8:	e60d      	b.n	800a9e6 <__ieee754_pow+0x306>
 800adca:	bf00      	nop
 800adcc:	f3af 8000 	nop.w
 800add0:	4a454eef 	.word	0x4a454eef
 800add4:	3fca7e28 	.word	0x3fca7e28
 800add8:	93c9db65 	.word	0x93c9db65
 800addc:	3fcd864a 	.word	0x3fcd864a
 800ade0:	a91d4101 	.word	0xa91d4101
 800ade4:	3fd17460 	.word	0x3fd17460
 800ade8:	518f264d 	.word	0x518f264d
 800adec:	3fd55555 	.word	0x3fd55555
 800adf0:	db6fabff 	.word	0xdb6fabff
 800adf4:	3fdb6db6 	.word	0x3fdb6db6
 800adf8:	33333303 	.word	0x33333303
 800adfc:	3fe33333 	.word	0x3fe33333
 800ae00:	e0000000 	.word	0xe0000000
 800ae04:	3feec709 	.word	0x3feec709
 800ae08:	dc3a03fd 	.word	0xdc3a03fd
 800ae0c:	3feec709 	.word	0x3feec709
 800ae10:	145b01f5 	.word	0x145b01f5
 800ae14:	be3e2fe0 	.word	0xbe3e2fe0
 800ae18:	00000000 	.word	0x00000000
 800ae1c:	3ff00000 	.word	0x3ff00000
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	43400000 	.word	0x43400000
 800ae28:	0003988e 	.word	0x0003988e
 800ae2c:	000bb679 	.word	0x000bb679
 800ae30:	0800c558 	.word	0x0800c558
 800ae34:	3ff00000 	.word	0x3ff00000
 800ae38:	40080000 	.word	0x40080000
 800ae3c:	0800c578 	.word	0x0800c578
 800ae40:	0800c568 	.word	0x0800c568
 800ae44:	a3b5      	add	r3, pc, #724	; (adr r3, 800b11c <__ieee754_pow+0xa3c>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	f7f5 fa15 	bl	800027c <__adddf3>
 800ae52:	4622      	mov	r2, r4
 800ae54:	ec41 0b1a 	vmov	d10, r0, r1
 800ae58:	462b      	mov	r3, r5
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	f7f5 fa0b 	bl	8000278 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	ec51 0b1a 	vmov	r0, r1, d10
 800ae6a:	f7f5 fe4d 	bl	8000b08 <__aeabi_dcmpgt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f47f adf8 	bne.w	800aa64 <__ieee754_pow+0x384>
 800ae74:	4aa4      	ldr	r2, [pc, #656]	; (800b108 <__ieee754_pow+0xa28>)
 800ae76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	f340 810b 	ble.w	800b096 <__ieee754_pow+0x9b6>
 800ae80:	151b      	asrs	r3, r3, #20
 800ae82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae8a:	fa4a f303 	asr.w	r3, sl, r3
 800ae8e:	445b      	add	r3, fp
 800ae90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae94:	4e9d      	ldr	r6, [pc, #628]	; (800b10c <__ieee754_pow+0xa2c>)
 800ae96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae9a:	4116      	asrs	r6, r2
 800ae9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aea0:	2000      	movs	r0, #0
 800aea2:	ea23 0106 	bic.w	r1, r3, r6
 800aea6:	f1c2 0214 	rsb	r2, r2, #20
 800aeaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aeae:	fa4a fa02 	asr.w	sl, sl, r2
 800aeb2:	f1bb 0f00 	cmp.w	fp, #0
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	bfb8      	it	lt
 800aec0:	f1ca 0a00 	rsblt	sl, sl, #0
 800aec4:	f7f5 f9d8 	bl	8000278 <__aeabi_dsub>
 800aec8:	ec41 0b19 	vmov	d9, r0, r1
 800aecc:	4642      	mov	r2, r8
 800aece:	464b      	mov	r3, r9
 800aed0:	ec51 0b19 	vmov	r0, r1, d9
 800aed4:	f7f5 f9d2 	bl	800027c <__adddf3>
 800aed8:	2400      	movs	r4, #0
 800aeda:	a379      	add	r3, pc, #484	; (adr r3, 800b0c0 <__ieee754_pow+0x9e0>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	4620      	mov	r0, r4
 800aee2:	460d      	mov	r5, r1
 800aee4:	f7f5 fb80 	bl	80005e8 <__aeabi_dmul>
 800aee8:	ec53 2b19 	vmov	r2, r3, d9
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	4620      	mov	r0, r4
 800aef2:	4629      	mov	r1, r5
 800aef4:	f7f5 f9c0 	bl	8000278 <__aeabi_dsub>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	4640      	mov	r0, r8
 800aefe:	4649      	mov	r1, r9
 800af00:	f7f5 f9ba 	bl	8000278 <__aeabi_dsub>
 800af04:	a370      	add	r3, pc, #448	; (adr r3, 800b0c8 <__ieee754_pow+0x9e8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 fb6d 	bl	80005e8 <__aeabi_dmul>
 800af0e:	a370      	add	r3, pc, #448	; (adr r3, 800b0d0 <__ieee754_pow+0x9f0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	4680      	mov	r8, r0
 800af16:	4689      	mov	r9, r1
 800af18:	4620      	mov	r0, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	f7f5 fb64 	bl	80005e8 <__aeabi_dmul>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4640      	mov	r0, r8
 800af26:	4649      	mov	r1, r9
 800af28:	f7f5 f9a8 	bl	800027c <__adddf3>
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 f9a0 	bl	800027c <__adddf3>
 800af3c:	4632      	mov	r2, r6
 800af3e:	463b      	mov	r3, r7
 800af40:	4680      	mov	r8, r0
 800af42:	4689      	mov	r9, r1
 800af44:	f7f5 f998 	bl	8000278 <__aeabi_dsub>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4620      	mov	r0, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	f7f5 f992 	bl	8000278 <__aeabi_dsub>
 800af54:	4642      	mov	r2, r8
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	464b      	mov	r3, r9
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 fb42 	bl	80005e8 <__aeabi_dmul>
 800af64:	a35c      	add	r3, pc, #368	; (adr r3, 800b0d8 <__ieee754_pow+0x9f8>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	4604      	mov	r4, r0
 800af6c:	460d      	mov	r5, r1
 800af6e:	f7f5 fb3b 	bl	80005e8 <__aeabi_dmul>
 800af72:	a35b      	add	r3, pc, #364	; (adr r3, 800b0e0 <__ieee754_pow+0xa00>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f7f5 f97e 	bl	8000278 <__aeabi_dsub>
 800af7c:	4622      	mov	r2, r4
 800af7e:	462b      	mov	r3, r5
 800af80:	f7f5 fb32 	bl	80005e8 <__aeabi_dmul>
 800af84:	a358      	add	r3, pc, #352	; (adr r3, 800b0e8 <__ieee754_pow+0xa08>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 f977 	bl	800027c <__adddf3>
 800af8e:	4622      	mov	r2, r4
 800af90:	462b      	mov	r3, r5
 800af92:	f7f5 fb29 	bl	80005e8 <__aeabi_dmul>
 800af96:	a356      	add	r3, pc, #344	; (adr r3, 800b0f0 <__ieee754_pow+0xa10>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f7f5 f96c 	bl	8000278 <__aeabi_dsub>
 800afa0:	4622      	mov	r2, r4
 800afa2:	462b      	mov	r3, r5
 800afa4:	f7f5 fb20 	bl	80005e8 <__aeabi_dmul>
 800afa8:	a353      	add	r3, pc, #332	; (adr r3, 800b0f8 <__ieee754_pow+0xa18>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 f965 	bl	800027c <__adddf3>
 800afb2:	4622      	mov	r2, r4
 800afb4:	462b      	mov	r3, r5
 800afb6:	f7f5 fb17 	bl	80005e8 <__aeabi_dmul>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 f959 	bl	8000278 <__aeabi_dsub>
 800afc6:	4604      	mov	r4, r0
 800afc8:	460d      	mov	r5, r1
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4640      	mov	r0, r8
 800afd0:	4649      	mov	r1, r9
 800afd2:	f7f5 fb09 	bl	80005e8 <__aeabi_dmul>
 800afd6:	2200      	movs	r2, #0
 800afd8:	ec41 0b19 	vmov	d9, r0, r1
 800afdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afe0:	4620      	mov	r0, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7f5 f948 	bl	8000278 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	ec51 0b19 	vmov	r0, r1, d9
 800aff0:	f7f5 fc24 	bl	800083c <__aeabi_ddiv>
 800aff4:	4632      	mov	r2, r6
 800aff6:	4604      	mov	r4, r0
 800aff8:	460d      	mov	r5, r1
 800affa:	463b      	mov	r3, r7
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 faf2 	bl	80005e8 <__aeabi_dmul>
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	f7f5 f938 	bl	800027c <__adddf3>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4620      	mov	r0, r4
 800b012:	4629      	mov	r1, r5
 800b014:	f7f5 f930 	bl	8000278 <__aeabi_dsub>
 800b018:	4642      	mov	r2, r8
 800b01a:	464b      	mov	r3, r9
 800b01c:	f7f5 f92c 	bl	8000278 <__aeabi_dsub>
 800b020:	460b      	mov	r3, r1
 800b022:	4602      	mov	r2, r0
 800b024:	493a      	ldr	r1, [pc, #232]	; (800b110 <__ieee754_pow+0xa30>)
 800b026:	2000      	movs	r0, #0
 800b028:	f7f5 f926 	bl	8000278 <__aeabi_dsub>
 800b02c:	e9cd 0100 	strd	r0, r1, [sp]
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b03a:	da2f      	bge.n	800b09c <__ieee754_pow+0x9bc>
 800b03c:	4650      	mov	r0, sl
 800b03e:	ed9d 0b00 	vldr	d0, [sp]
 800b042:	f001 f8a1 	bl	800c188 <scalbn>
 800b046:	ec51 0b10 	vmov	r0, r1, d0
 800b04a:	ec53 2b18 	vmov	r2, r3, d8
 800b04e:	f7ff bbe0 	b.w	800a812 <__ieee754_pow+0x132>
 800b052:	4b30      	ldr	r3, [pc, #192]	; (800b114 <__ieee754_pow+0xa34>)
 800b054:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b058:	429e      	cmp	r6, r3
 800b05a:	f77f af0b 	ble.w	800ae74 <__ieee754_pow+0x794>
 800b05e:	4b2e      	ldr	r3, [pc, #184]	; (800b118 <__ieee754_pow+0xa38>)
 800b060:	440b      	add	r3, r1
 800b062:	4303      	orrs	r3, r0
 800b064:	d00b      	beq.n	800b07e <__ieee754_pow+0x99e>
 800b066:	a326      	add	r3, pc, #152	; (adr r3, 800b100 <__ieee754_pow+0xa20>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	ec51 0b18 	vmov	r0, r1, d8
 800b070:	f7f5 faba 	bl	80005e8 <__aeabi_dmul>
 800b074:	a322      	add	r3, pc, #136	; (adr r3, 800b100 <__ieee754_pow+0xa20>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7ff bbca 	b.w	800a812 <__ieee754_pow+0x132>
 800b07e:	4622      	mov	r2, r4
 800b080:	462b      	mov	r3, r5
 800b082:	f7f5 f8f9 	bl	8000278 <__aeabi_dsub>
 800b086:	4642      	mov	r2, r8
 800b088:	464b      	mov	r3, r9
 800b08a:	f7f5 fd33 	bl	8000af4 <__aeabi_dcmpge>
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f aef0 	beq.w	800ae74 <__ieee754_pow+0x794>
 800b094:	e7e7      	b.n	800b066 <__ieee754_pow+0x986>
 800b096:	f04f 0a00 	mov.w	sl, #0
 800b09a:	e717      	b.n	800aecc <__ieee754_pow+0x7ec>
 800b09c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	e7d2      	b.n	800b04a <__ieee754_pow+0x96a>
 800b0a4:	491a      	ldr	r1, [pc, #104]	; (800b110 <__ieee754_pow+0xa30>)
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f7ff bb9e 	b.w	800a7e8 <__ieee754_pow+0x108>
 800b0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b0:	f7ff bb9a 	b.w	800a7e8 <__ieee754_pow+0x108>
 800b0b4:	9000      	str	r0, [sp, #0]
 800b0b6:	f7ff bb76 	b.w	800a7a6 <__ieee754_pow+0xc6>
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	f7ff bb60 	b.w	800a780 <__ieee754_pow+0xa0>
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	3fe62e43 	.word	0x3fe62e43
 800b0c8:	fefa39ef 	.word	0xfefa39ef
 800b0cc:	3fe62e42 	.word	0x3fe62e42
 800b0d0:	0ca86c39 	.word	0x0ca86c39
 800b0d4:	be205c61 	.word	0xbe205c61
 800b0d8:	72bea4d0 	.word	0x72bea4d0
 800b0dc:	3e663769 	.word	0x3e663769
 800b0e0:	c5d26bf1 	.word	0xc5d26bf1
 800b0e4:	3ebbbd41 	.word	0x3ebbbd41
 800b0e8:	af25de2c 	.word	0xaf25de2c
 800b0ec:	3f11566a 	.word	0x3f11566a
 800b0f0:	16bebd93 	.word	0x16bebd93
 800b0f4:	3f66c16c 	.word	0x3f66c16c
 800b0f8:	5555553e 	.word	0x5555553e
 800b0fc:	3fc55555 	.word	0x3fc55555
 800b100:	c2f8f359 	.word	0xc2f8f359
 800b104:	01a56e1f 	.word	0x01a56e1f
 800b108:	3fe00000 	.word	0x3fe00000
 800b10c:	000fffff 	.word	0x000fffff
 800b110:	3ff00000 	.word	0x3ff00000
 800b114:	4090cbff 	.word	0x4090cbff
 800b118:	3f6f3400 	.word	0x3f6f3400
 800b11c:	652b82fe 	.word	0x652b82fe
 800b120:	3c971547 	.word	0x3c971547
 800b124:	00000000 	.word	0x00000000

0800b128 <__ieee754_rem_pio2>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	ed2d 8b02 	vpush	{d8}
 800b130:	ec55 4b10 	vmov	r4, r5, d0
 800b134:	4bca      	ldr	r3, [pc, #808]	; (800b460 <__ieee754_rem_pio2+0x338>)
 800b136:	b08b      	sub	sp, #44	; 0x2c
 800b138:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b13c:	4598      	cmp	r8, r3
 800b13e:	4682      	mov	sl, r0
 800b140:	9502      	str	r5, [sp, #8]
 800b142:	dc08      	bgt.n	800b156 <__ieee754_rem_pio2+0x2e>
 800b144:	2200      	movs	r2, #0
 800b146:	2300      	movs	r3, #0
 800b148:	ed80 0b00 	vstr	d0, [r0]
 800b14c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b150:	f04f 0b00 	mov.w	fp, #0
 800b154:	e028      	b.n	800b1a8 <__ieee754_rem_pio2+0x80>
 800b156:	4bc3      	ldr	r3, [pc, #780]	; (800b464 <__ieee754_rem_pio2+0x33c>)
 800b158:	4598      	cmp	r8, r3
 800b15a:	dc78      	bgt.n	800b24e <__ieee754_rem_pio2+0x126>
 800b15c:	9b02      	ldr	r3, [sp, #8]
 800b15e:	4ec2      	ldr	r6, [pc, #776]	; (800b468 <__ieee754_rem_pio2+0x340>)
 800b160:	2b00      	cmp	r3, #0
 800b162:	ee10 0a10 	vmov	r0, s0
 800b166:	a3b0      	add	r3, pc, #704	; (adr r3, 800b428 <__ieee754_rem_pio2+0x300>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	4629      	mov	r1, r5
 800b16e:	dd39      	ble.n	800b1e4 <__ieee754_rem_pio2+0xbc>
 800b170:	f7f5 f882 	bl	8000278 <__aeabi_dsub>
 800b174:	45b0      	cmp	r8, r6
 800b176:	4604      	mov	r4, r0
 800b178:	460d      	mov	r5, r1
 800b17a:	d01b      	beq.n	800b1b4 <__ieee754_rem_pio2+0x8c>
 800b17c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b430 <__ieee754_rem_pio2+0x308>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f879 	bl	8000278 <__aeabi_dsub>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	e9ca 2300 	strd	r2, r3, [sl]
 800b18e:	4620      	mov	r0, r4
 800b190:	4629      	mov	r1, r5
 800b192:	f7f5 f871 	bl	8000278 <__aeabi_dsub>
 800b196:	a3a6      	add	r3, pc, #664	; (adr r3, 800b430 <__ieee754_rem_pio2+0x308>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f86c 	bl	8000278 <__aeabi_dsub>
 800b1a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b1a4:	f04f 0b01 	mov.w	fp, #1
 800b1a8:	4658      	mov	r0, fp
 800b1aa:	b00b      	add	sp, #44	; 0x2c
 800b1ac:	ecbd 8b02 	vpop	{d8}
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b438 <__ieee754_rem_pio2+0x310>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f5 f85d 	bl	8000278 <__aeabi_dsub>
 800b1be:	a3a0      	add	r3, pc, #640	; (adr r3, 800b440 <__ieee754_rem_pio2+0x318>)
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	f7f5 f856 	bl	8000278 <__aeabi_dsub>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	e9ca 2300 	strd	r2, r3, [sl]
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 f84e 	bl	8000278 <__aeabi_dsub>
 800b1dc:	a398      	add	r3, pc, #608	; (adr r3, 800b440 <__ieee754_rem_pio2+0x318>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	e7db      	b.n	800b19c <__ieee754_rem_pio2+0x74>
 800b1e4:	f7f5 f84a 	bl	800027c <__adddf3>
 800b1e8:	45b0      	cmp	r8, r6
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	d016      	beq.n	800b21e <__ieee754_rem_pio2+0xf6>
 800b1f0:	a38f      	add	r3, pc, #572	; (adr r3, 800b430 <__ieee754_rem_pio2+0x308>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f841 	bl	800027c <__adddf3>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9ca 2300 	strd	r2, r3, [sl]
 800b202:	4620      	mov	r0, r4
 800b204:	4629      	mov	r1, r5
 800b206:	f7f5 f837 	bl	8000278 <__aeabi_dsub>
 800b20a:	a389      	add	r3, pc, #548	; (adr r3, 800b430 <__ieee754_rem_pio2+0x308>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f834 	bl	800027c <__adddf3>
 800b214:	f04f 3bff 	mov.w	fp, #4294967295
 800b218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b21c:	e7c4      	b.n	800b1a8 <__ieee754_rem_pio2+0x80>
 800b21e:	a386      	add	r3, pc, #536	; (adr r3, 800b438 <__ieee754_rem_pio2+0x310>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f82a 	bl	800027c <__adddf3>
 800b228:	a385      	add	r3, pc, #532	; (adr r3, 800b440 <__ieee754_rem_pio2+0x318>)
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	4604      	mov	r4, r0
 800b230:	460d      	mov	r5, r1
 800b232:	f7f5 f823 	bl	800027c <__adddf3>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	e9ca 2300 	strd	r2, r3, [sl]
 800b23e:	4620      	mov	r0, r4
 800b240:	4629      	mov	r1, r5
 800b242:	f7f5 f819 	bl	8000278 <__aeabi_dsub>
 800b246:	a37e      	add	r3, pc, #504	; (adr r3, 800b440 <__ieee754_rem_pio2+0x318>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	e7e0      	b.n	800b210 <__ieee754_rem_pio2+0xe8>
 800b24e:	4b87      	ldr	r3, [pc, #540]	; (800b46c <__ieee754_rem_pio2+0x344>)
 800b250:	4598      	cmp	r8, r3
 800b252:	f300 80d9 	bgt.w	800b408 <__ieee754_rem_pio2+0x2e0>
 800b256:	f000 feed 	bl	800c034 <fabs>
 800b25a:	ec55 4b10 	vmov	r4, r5, d0
 800b25e:	ee10 0a10 	vmov	r0, s0
 800b262:	a379      	add	r3, pc, #484	; (adr r3, 800b448 <__ieee754_rem_pio2+0x320>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f9bd 	bl	80005e8 <__aeabi_dmul>
 800b26e:	4b80      	ldr	r3, [pc, #512]	; (800b470 <__ieee754_rem_pio2+0x348>)
 800b270:	2200      	movs	r2, #0
 800b272:	f7f5 f803 	bl	800027c <__adddf3>
 800b276:	f7f5 fc67 	bl	8000b48 <__aeabi_d2iz>
 800b27a:	4683      	mov	fp, r0
 800b27c:	f7f5 f94a 	bl	8000514 <__aeabi_i2d>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	ec43 2b18 	vmov	d8, r2, r3
 800b288:	a367      	add	r3, pc, #412	; (adr r3, 800b428 <__ieee754_rem_pio2+0x300>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f9ab 	bl	80005e8 <__aeabi_dmul>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f4 ffed 	bl	8000278 <__aeabi_dsub>
 800b29e:	a364      	add	r3, pc, #400	; (adr r3, 800b430 <__ieee754_rem_pio2+0x308>)
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	ec51 0b18 	vmov	r0, r1, d8
 800b2ac:	f7f5 f99c 	bl	80005e8 <__aeabi_dmul>
 800b2b0:	f1bb 0f1f 	cmp.w	fp, #31
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	460d      	mov	r5, r1
 800b2b8:	dc0d      	bgt.n	800b2d6 <__ieee754_rem_pio2+0x1ae>
 800b2ba:	4b6e      	ldr	r3, [pc, #440]	; (800b474 <__ieee754_rem_pio2+0x34c>)
 800b2bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	4543      	cmp	r3, r8
 800b2c6:	d006      	beq.n	800b2d6 <__ieee754_rem_pio2+0x1ae>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f4 ffd2 	bl	8000278 <__aeabi_dsub>
 800b2d4:	e00f      	b.n	800b2f6 <__ieee754_rem_pio2+0x1ce>
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4630      	mov	r0, r6
 800b2dc:	4639      	mov	r1, r7
 800b2de:	f7f4 ffcb 	bl	8000278 <__aeabi_dsub>
 800b2e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b2e6:	9303      	str	r3, [sp, #12]
 800b2e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b2ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b2f0:	f1b8 0f10 	cmp.w	r8, #16
 800b2f4:	dc02      	bgt.n	800b2fc <__ieee754_rem_pio2+0x1d4>
 800b2f6:	e9ca 0100 	strd	r0, r1, [sl]
 800b2fa:	e039      	b.n	800b370 <__ieee754_rem_pio2+0x248>
 800b2fc:	a34e      	add	r3, pc, #312	; (adr r3, 800b438 <__ieee754_rem_pio2+0x310>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	ec51 0b18 	vmov	r0, r1, d8
 800b306:	f7f5 f96f 	bl	80005e8 <__aeabi_dmul>
 800b30a:	4604      	mov	r4, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f4 ffaf 	bl	8000278 <__aeabi_dsub>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	4680      	mov	r8, r0
 800b320:	4689      	mov	r9, r1
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f4 ffa7 	bl	8000278 <__aeabi_dsub>
 800b32a:	4622      	mov	r2, r4
 800b32c:	462b      	mov	r3, r5
 800b32e:	f7f4 ffa3 	bl	8000278 <__aeabi_dsub>
 800b332:	a343      	add	r3, pc, #268	; (adr r3, 800b440 <__ieee754_rem_pio2+0x318>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	ec51 0b18 	vmov	r0, r1, d8
 800b340:	f7f5 f952 	bl	80005e8 <__aeabi_dmul>
 800b344:	4622      	mov	r2, r4
 800b346:	462b      	mov	r3, r5
 800b348:	f7f4 ff96 	bl	8000278 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4604      	mov	r4, r0
 800b352:	460d      	mov	r5, r1
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	f7f4 ff8e 	bl	8000278 <__aeabi_dsub>
 800b35c:	9a03      	ldr	r2, [sp, #12]
 800b35e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	2b31      	cmp	r3, #49	; 0x31
 800b366:	dc24      	bgt.n	800b3b2 <__ieee754_rem_pio2+0x28a>
 800b368:	e9ca 0100 	strd	r0, r1, [sl]
 800b36c:	4646      	mov	r6, r8
 800b36e:	464f      	mov	r7, r9
 800b370:	e9da 8900 	ldrd	r8, r9, [sl]
 800b374:	4630      	mov	r0, r6
 800b376:	4642      	mov	r2, r8
 800b378:	464b      	mov	r3, r9
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f4 ff7c 	bl	8000278 <__aeabi_dsub>
 800b380:	462b      	mov	r3, r5
 800b382:	4622      	mov	r2, r4
 800b384:	f7f4 ff78 	bl	8000278 <__aeabi_dsub>
 800b388:	9b02      	ldr	r3, [sp, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b390:	f6bf af0a 	bge.w	800b1a8 <__ieee754_rem_pio2+0x80>
 800b394:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b398:	f8ca 3004 	str.w	r3, [sl, #4]
 800b39c:	f8ca 8000 	str.w	r8, [sl]
 800b3a0:	f8ca 0008 	str.w	r0, [sl, #8]
 800b3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b3ac:	f1cb 0b00 	rsb	fp, fp, #0
 800b3b0:	e6fa      	b.n	800b1a8 <__ieee754_rem_pio2+0x80>
 800b3b2:	a327      	add	r3, pc, #156	; (adr r3, 800b450 <__ieee754_rem_pio2+0x328>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	ec51 0b18 	vmov	r0, r1, d8
 800b3bc:	f7f5 f914 	bl	80005e8 <__aeabi_dmul>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	f7f4 ff54 	bl	8000278 <__aeabi_dsub>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f4 ff4c 	bl	8000278 <__aeabi_dsub>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f4 ff48 	bl	8000278 <__aeabi_dsub>
 800b3e8:	a31b      	add	r3, pc, #108	; (adr r3, 800b458 <__ieee754_rem_pio2+0x330>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	ec51 0b18 	vmov	r0, r1, d8
 800b3f6:	f7f5 f8f7 	bl	80005e8 <__aeabi_dmul>
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	f7f4 ff3b 	bl	8000278 <__aeabi_dsub>
 800b402:	4604      	mov	r4, r0
 800b404:	460d      	mov	r5, r1
 800b406:	e75f      	b.n	800b2c8 <__ieee754_rem_pio2+0x1a0>
 800b408:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <__ieee754_rem_pio2+0x350>)
 800b40a:	4598      	cmp	r8, r3
 800b40c:	dd36      	ble.n	800b47c <__ieee754_rem_pio2+0x354>
 800b40e:	ee10 2a10 	vmov	r2, s0
 800b412:	462b      	mov	r3, r5
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f4 ff2e 	bl	8000278 <__aeabi_dsub>
 800b41c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b420:	e9ca 0100 	strd	r0, r1, [sl]
 800b424:	e694      	b.n	800b150 <__ieee754_rem_pio2+0x28>
 800b426:	bf00      	nop
 800b428:	54400000 	.word	0x54400000
 800b42c:	3ff921fb 	.word	0x3ff921fb
 800b430:	1a626331 	.word	0x1a626331
 800b434:	3dd0b461 	.word	0x3dd0b461
 800b438:	1a600000 	.word	0x1a600000
 800b43c:	3dd0b461 	.word	0x3dd0b461
 800b440:	2e037073 	.word	0x2e037073
 800b444:	3ba3198a 	.word	0x3ba3198a
 800b448:	6dc9c883 	.word	0x6dc9c883
 800b44c:	3fe45f30 	.word	0x3fe45f30
 800b450:	2e000000 	.word	0x2e000000
 800b454:	3ba3198a 	.word	0x3ba3198a
 800b458:	252049c1 	.word	0x252049c1
 800b45c:	397b839a 	.word	0x397b839a
 800b460:	3fe921fb 	.word	0x3fe921fb
 800b464:	4002d97b 	.word	0x4002d97b
 800b468:	3ff921fb 	.word	0x3ff921fb
 800b46c:	413921fb 	.word	0x413921fb
 800b470:	3fe00000 	.word	0x3fe00000
 800b474:	0800c588 	.word	0x0800c588
 800b478:	7fefffff 	.word	0x7fefffff
 800b47c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b480:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b484:	ee10 0a10 	vmov	r0, s0
 800b488:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b48c:	ee10 6a10 	vmov	r6, s0
 800b490:	460f      	mov	r7, r1
 800b492:	f7f5 fb59 	bl	8000b48 <__aeabi_d2iz>
 800b496:	f7f5 f83d 	bl	8000514 <__aeabi_i2d>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4a6:	f7f4 fee7 	bl	8000278 <__aeabi_dsub>
 800b4aa:	4b22      	ldr	r3, [pc, #136]	; (800b534 <__ieee754_rem_pio2+0x40c>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f7f5 f89b 	bl	80005e8 <__aeabi_dmul>
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	f7f5 fb47 	bl	8000b48 <__aeabi_d2iz>
 800b4ba:	f7f5 f82b 	bl	8000514 <__aeabi_i2d>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4ca:	f7f4 fed5 	bl	8000278 <__aeabi_dsub>
 800b4ce:	4b19      	ldr	r3, [pc, #100]	; (800b534 <__ieee754_rem_pio2+0x40c>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f889 	bl	80005e8 <__aeabi_dmul>
 800b4d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4da:	ad04      	add	r5, sp, #16
 800b4dc:	f04f 0803 	mov.w	r8, #3
 800b4e0:	46a9      	mov	r9, r5
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	2700      	movs	r7, #0
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b4ee:	46c3      	mov	fp, r8
 800b4f0:	3d08      	subs	r5, #8
 800b4f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4f6:	f7f5 fadf 	bl	8000ab8 <__aeabi_dcmpeq>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1f3      	bne.n	800b4e6 <__ieee754_rem_pio2+0x3be>
 800b4fe:	4b0e      	ldr	r3, [pc, #56]	; (800b538 <__ieee754_rem_pio2+0x410>)
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	2302      	movs	r3, #2
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	4622      	mov	r2, r4
 800b508:	465b      	mov	r3, fp
 800b50a:	4651      	mov	r1, sl
 800b50c:	4648      	mov	r0, r9
 800b50e:	f000 f993 	bl	800b838 <__kernel_rem_pio2>
 800b512:	9b02      	ldr	r3, [sp, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	4683      	mov	fp, r0
 800b518:	f6bf ae46 	bge.w	800b1a8 <__ieee754_rem_pio2+0x80>
 800b51c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b520:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b524:	f8ca 3004 	str.w	r3, [sl, #4]
 800b528:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b52c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b530:	e73a      	b.n	800b3a8 <__ieee754_rem_pio2+0x280>
 800b532:	bf00      	nop
 800b534:	41700000 	.word	0x41700000
 800b538:	0800c608 	.word	0x0800c608

0800b53c <__ieee754_sqrt>:
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	ec55 4b10 	vmov	r4, r5, d0
 800b544:	4e56      	ldr	r6, [pc, #344]	; (800b6a0 <__ieee754_sqrt+0x164>)
 800b546:	43ae      	bics	r6, r5
 800b548:	ee10 0a10 	vmov	r0, s0
 800b54c:	ee10 3a10 	vmov	r3, s0
 800b550:	4629      	mov	r1, r5
 800b552:	462a      	mov	r2, r5
 800b554:	d110      	bne.n	800b578 <__ieee754_sqrt+0x3c>
 800b556:	ee10 2a10 	vmov	r2, s0
 800b55a:	462b      	mov	r3, r5
 800b55c:	f7f5 f844 	bl	80005e8 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4620      	mov	r0, r4
 800b566:	4629      	mov	r1, r5
 800b568:	f7f4 fe88 	bl	800027c <__adddf3>
 800b56c:	4604      	mov	r4, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	ec45 4b10 	vmov	d0, r4, r5
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	2d00      	cmp	r5, #0
 800b57a:	dc10      	bgt.n	800b59e <__ieee754_sqrt+0x62>
 800b57c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b580:	4330      	orrs	r0, r6
 800b582:	d0f5      	beq.n	800b570 <__ieee754_sqrt+0x34>
 800b584:	b15d      	cbz	r5, 800b59e <__ieee754_sqrt+0x62>
 800b586:	ee10 2a10 	vmov	r2, s0
 800b58a:	462b      	mov	r3, r5
 800b58c:	ee10 0a10 	vmov	r0, s0
 800b590:	f7f4 fe72 	bl	8000278 <__aeabi_dsub>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	f7f5 f950 	bl	800083c <__aeabi_ddiv>
 800b59c:	e7e6      	b.n	800b56c <__ieee754_sqrt+0x30>
 800b59e:	1509      	asrs	r1, r1, #20
 800b5a0:	d076      	beq.n	800b690 <__ieee754_sqrt+0x154>
 800b5a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b5a6:	07ce      	lsls	r6, r1, #31
 800b5a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b5ac:	bf5e      	ittt	pl
 800b5ae:	0fda      	lsrpl	r2, r3, #31
 800b5b0:	005b      	lslpl	r3, r3, #1
 800b5b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b5b6:	0fda      	lsrs	r2, r3, #31
 800b5b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b5bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	106d      	asrs	r5, r5, #1
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	f04f 0e16 	mov.w	lr, #22
 800b5ca:	4684      	mov	ip, r0
 800b5cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5d0:	eb0c 0401 	add.w	r4, ip, r1
 800b5d4:	4294      	cmp	r4, r2
 800b5d6:	bfde      	ittt	le
 800b5d8:	1b12      	suble	r2, r2, r4
 800b5da:	eb04 0c01 	addle.w	ip, r4, r1
 800b5de:	1840      	addle	r0, r0, r1
 800b5e0:	0052      	lsls	r2, r2, #1
 800b5e2:	f1be 0e01 	subs.w	lr, lr, #1
 800b5e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b5ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5f2:	d1ed      	bne.n	800b5d0 <__ieee754_sqrt+0x94>
 800b5f4:	4671      	mov	r1, lr
 800b5f6:	2720      	movs	r7, #32
 800b5f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b5fc:	4562      	cmp	r2, ip
 800b5fe:	eb04 060e 	add.w	r6, r4, lr
 800b602:	dc02      	bgt.n	800b60a <__ieee754_sqrt+0xce>
 800b604:	d113      	bne.n	800b62e <__ieee754_sqrt+0xf2>
 800b606:	429e      	cmp	r6, r3
 800b608:	d811      	bhi.n	800b62e <__ieee754_sqrt+0xf2>
 800b60a:	2e00      	cmp	r6, #0
 800b60c:	eb06 0e04 	add.w	lr, r6, r4
 800b610:	da43      	bge.n	800b69a <__ieee754_sqrt+0x15e>
 800b612:	f1be 0f00 	cmp.w	lr, #0
 800b616:	db40      	blt.n	800b69a <__ieee754_sqrt+0x15e>
 800b618:	f10c 0801 	add.w	r8, ip, #1
 800b61c:	eba2 020c 	sub.w	r2, r2, ip
 800b620:	429e      	cmp	r6, r3
 800b622:	bf88      	it	hi
 800b624:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b628:	1b9b      	subs	r3, r3, r6
 800b62a:	4421      	add	r1, r4
 800b62c:	46c4      	mov	ip, r8
 800b62e:	0052      	lsls	r2, r2, #1
 800b630:	3f01      	subs	r7, #1
 800b632:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b636:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b63a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b63e:	d1dd      	bne.n	800b5fc <__ieee754_sqrt+0xc0>
 800b640:	4313      	orrs	r3, r2
 800b642:	d006      	beq.n	800b652 <__ieee754_sqrt+0x116>
 800b644:	1c4c      	adds	r4, r1, #1
 800b646:	bf13      	iteet	ne
 800b648:	3101      	addne	r1, #1
 800b64a:	3001      	addeq	r0, #1
 800b64c:	4639      	moveq	r1, r7
 800b64e:	f021 0101 	bicne.w	r1, r1, #1
 800b652:	1043      	asrs	r3, r0, #1
 800b654:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b658:	0849      	lsrs	r1, r1, #1
 800b65a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b65e:	07c2      	lsls	r2, r0, #31
 800b660:	bf48      	it	mi
 800b662:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b666:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b66a:	460c      	mov	r4, r1
 800b66c:	463d      	mov	r5, r7
 800b66e:	e77f      	b.n	800b570 <__ieee754_sqrt+0x34>
 800b670:	0ada      	lsrs	r2, r3, #11
 800b672:	3815      	subs	r0, #21
 800b674:	055b      	lsls	r3, r3, #21
 800b676:	2a00      	cmp	r2, #0
 800b678:	d0fa      	beq.n	800b670 <__ieee754_sqrt+0x134>
 800b67a:	02d7      	lsls	r7, r2, #11
 800b67c:	d50a      	bpl.n	800b694 <__ieee754_sqrt+0x158>
 800b67e:	f1c1 0420 	rsb	r4, r1, #32
 800b682:	fa23 f404 	lsr.w	r4, r3, r4
 800b686:	1e4d      	subs	r5, r1, #1
 800b688:	408b      	lsls	r3, r1
 800b68a:	4322      	orrs	r2, r4
 800b68c:	1b41      	subs	r1, r0, r5
 800b68e:	e788      	b.n	800b5a2 <__ieee754_sqrt+0x66>
 800b690:	4608      	mov	r0, r1
 800b692:	e7f0      	b.n	800b676 <__ieee754_sqrt+0x13a>
 800b694:	0052      	lsls	r2, r2, #1
 800b696:	3101      	adds	r1, #1
 800b698:	e7ef      	b.n	800b67a <__ieee754_sqrt+0x13e>
 800b69a:	46e0      	mov	r8, ip
 800b69c:	e7be      	b.n	800b61c <__ieee754_sqrt+0xe0>
 800b69e:	bf00      	nop
 800b6a0:	7ff00000 	.word	0x7ff00000
 800b6a4:	00000000 	.word	0x00000000

0800b6a8 <__kernel_cos>:
 800b6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	ec57 6b10 	vmov	r6, r7, d0
 800b6b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b6b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b6b8:	ed8d 1b00 	vstr	d1, [sp]
 800b6bc:	da07      	bge.n	800b6ce <__kernel_cos+0x26>
 800b6be:	ee10 0a10 	vmov	r0, s0
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 fa40 	bl	8000b48 <__aeabi_d2iz>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	f000 8088 	beq.w	800b7de <__kernel_cos+0x136>
 800b6ce:	4632      	mov	r2, r6
 800b6d0:	463b      	mov	r3, r7
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	f7f4 ff87 	bl	80005e8 <__aeabi_dmul>
 800b6da:	4b51      	ldr	r3, [pc, #324]	; (800b820 <__kernel_cos+0x178>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	f7f4 ff81 	bl	80005e8 <__aeabi_dmul>
 800b6e6:	a340      	add	r3, pc, #256	; (adr r3, 800b7e8 <__kernel_cos+0x140>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	468b      	mov	fp, r1
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	f7f4 ff78 	bl	80005e8 <__aeabi_dmul>
 800b6f8:	a33d      	add	r3, pc, #244	; (adr r3, 800b7f0 <__kernel_cos+0x148>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fdbd 	bl	800027c <__adddf3>
 800b702:	4622      	mov	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f7f4 ff6f 	bl	80005e8 <__aeabi_dmul>
 800b70a:	a33b      	add	r3, pc, #236	; (adr r3, 800b7f8 <__kernel_cos+0x150>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fdb2 	bl	8000278 <__aeabi_dsub>
 800b714:	4622      	mov	r2, r4
 800b716:	462b      	mov	r3, r5
 800b718:	f7f4 ff66 	bl	80005e8 <__aeabi_dmul>
 800b71c:	a338      	add	r3, pc, #224	; (adr r3, 800b800 <__kernel_cos+0x158>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f7f4 fdab 	bl	800027c <__adddf3>
 800b726:	4622      	mov	r2, r4
 800b728:	462b      	mov	r3, r5
 800b72a:	f7f4 ff5d 	bl	80005e8 <__aeabi_dmul>
 800b72e:	a336      	add	r3, pc, #216	; (adr r3, 800b808 <__kernel_cos+0x160>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 fda0 	bl	8000278 <__aeabi_dsub>
 800b738:	4622      	mov	r2, r4
 800b73a:	462b      	mov	r3, r5
 800b73c:	f7f4 ff54 	bl	80005e8 <__aeabi_dmul>
 800b740:	a333      	add	r3, pc, #204	; (adr r3, 800b810 <__kernel_cos+0x168>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 fd99 	bl	800027c <__adddf3>
 800b74a:	4622      	mov	r2, r4
 800b74c:	462b      	mov	r3, r5
 800b74e:	f7f4 ff4b 	bl	80005e8 <__aeabi_dmul>
 800b752:	4622      	mov	r2, r4
 800b754:	462b      	mov	r3, r5
 800b756:	f7f4 ff47 	bl	80005e8 <__aeabi_dmul>
 800b75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f4 ff3f 	bl	80005e8 <__aeabi_dmul>
 800b76a:	460b      	mov	r3, r1
 800b76c:	4602      	mov	r2, r0
 800b76e:	4629      	mov	r1, r5
 800b770:	4620      	mov	r0, r4
 800b772:	f7f4 fd81 	bl	8000278 <__aeabi_dsub>
 800b776:	4b2b      	ldr	r3, [pc, #172]	; (800b824 <__kernel_cos+0x17c>)
 800b778:	4598      	cmp	r8, r3
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	dc10      	bgt.n	800b7a2 <__kernel_cos+0xfa>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4650      	mov	r0, sl
 800b786:	4659      	mov	r1, fp
 800b788:	f7f4 fd76 	bl	8000278 <__aeabi_dsub>
 800b78c:	460b      	mov	r3, r1
 800b78e:	4926      	ldr	r1, [pc, #152]	; (800b828 <__kernel_cos+0x180>)
 800b790:	4602      	mov	r2, r0
 800b792:	2000      	movs	r0, #0
 800b794:	f7f4 fd70 	bl	8000278 <__aeabi_dsub>
 800b798:	ec41 0b10 	vmov	d0, r0, r1
 800b79c:	b003      	add	sp, #12
 800b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a2:	4b22      	ldr	r3, [pc, #136]	; (800b82c <__kernel_cos+0x184>)
 800b7a4:	4920      	ldr	r1, [pc, #128]	; (800b828 <__kernel_cos+0x180>)
 800b7a6:	4598      	cmp	r8, r3
 800b7a8:	bfcc      	ite	gt
 800b7aa:	4d21      	ldrgt	r5, [pc, #132]	; (800b830 <__kernel_cos+0x188>)
 800b7ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b7b0:	2400      	movs	r4, #0
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	f7f4 fd5e 	bl	8000278 <__aeabi_dsub>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	4680      	mov	r8, r0
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	4650      	mov	r0, sl
 800b7c6:	4659      	mov	r1, fp
 800b7c8:	f7f4 fd56 	bl	8000278 <__aeabi_dsub>
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	f7f4 fd52 	bl	8000278 <__aeabi_dsub>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	e7da      	b.n	800b794 <__kernel_cos+0xec>
 800b7de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b818 <__kernel_cos+0x170>
 800b7e2:	e7db      	b.n	800b79c <__kernel_cos+0xf4>
 800b7e4:	f3af 8000 	nop.w
 800b7e8:	be8838d4 	.word	0xbe8838d4
 800b7ec:	bda8fae9 	.word	0xbda8fae9
 800b7f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b7f4:	3e21ee9e 	.word	0x3e21ee9e
 800b7f8:	809c52ad 	.word	0x809c52ad
 800b7fc:	3e927e4f 	.word	0x3e927e4f
 800b800:	19cb1590 	.word	0x19cb1590
 800b804:	3efa01a0 	.word	0x3efa01a0
 800b808:	16c15177 	.word	0x16c15177
 800b80c:	3f56c16c 	.word	0x3f56c16c
 800b810:	5555554c 	.word	0x5555554c
 800b814:	3fa55555 	.word	0x3fa55555
 800b818:	00000000 	.word	0x00000000
 800b81c:	3ff00000 	.word	0x3ff00000
 800b820:	3fe00000 	.word	0x3fe00000
 800b824:	3fd33332 	.word	0x3fd33332
 800b828:	3ff00000 	.word	0x3ff00000
 800b82c:	3fe90000 	.word	0x3fe90000
 800b830:	3fd20000 	.word	0x3fd20000
 800b834:	00000000 	.word	0x00000000

0800b838 <__kernel_rem_pio2>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	ed2d 8b02 	vpush	{d8}
 800b840:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b844:	f112 0f14 	cmn.w	r2, #20
 800b848:	9308      	str	r3, [sp, #32]
 800b84a:	9101      	str	r1, [sp, #4]
 800b84c:	4bc6      	ldr	r3, [pc, #792]	; (800bb68 <__kernel_rem_pio2+0x330>)
 800b84e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b850:	9009      	str	r0, [sp, #36]	; 0x24
 800b852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	9b08      	ldr	r3, [sp, #32]
 800b85a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b85e:	bfa8      	it	ge
 800b860:	1ed4      	subge	r4, r2, #3
 800b862:	9306      	str	r3, [sp, #24]
 800b864:	bfb2      	itee	lt
 800b866:	2400      	movlt	r4, #0
 800b868:	2318      	movge	r3, #24
 800b86a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b86e:	f06f 0317 	mvn.w	r3, #23
 800b872:	fb04 3303 	mla	r3, r4, r3, r3
 800b876:	eb03 0a02 	add.w	sl, r3, r2
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	9a06      	ldr	r2, [sp, #24]
 800b87e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bb58 <__kernel_rem_pio2+0x320>
 800b882:	eb03 0802 	add.w	r8, r3, r2
 800b886:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b888:	1aa7      	subs	r7, r4, r2
 800b88a:	ae20      	add	r6, sp, #128	; 0x80
 800b88c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b890:	2500      	movs	r5, #0
 800b892:	4545      	cmp	r5, r8
 800b894:	dd18      	ble.n	800b8c8 <__kernel_rem_pio2+0x90>
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b89c:	aa20      	add	r2, sp, #128	; 0x80
 800b89e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800bb58 <__kernel_rem_pio2+0x320>
 800b8a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b8a6:	f1c3 0301 	rsb	r3, r3, #1
 800b8aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b8ae:	9307      	str	r3, [sp, #28]
 800b8b0:	9b07      	ldr	r3, [sp, #28]
 800b8b2:	9a04      	ldr	r2, [sp, #16]
 800b8b4:	4443      	add	r3, r8
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	db2f      	blt.n	800b91a <__kernel_rem_pio2+0xe2>
 800b8ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b8be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b8c2:	462f      	mov	r7, r5
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	e01b      	b.n	800b900 <__kernel_rem_pio2+0xc8>
 800b8c8:	42ef      	cmn	r7, r5
 800b8ca:	d407      	bmi.n	800b8dc <__kernel_rem_pio2+0xa4>
 800b8cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b8d0:	f7f4 fe20 	bl	8000514 <__aeabi_i2d>
 800b8d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b8d8:	3501      	adds	r5, #1
 800b8da:	e7da      	b.n	800b892 <__kernel_rem_pio2+0x5a>
 800b8dc:	ec51 0b18 	vmov	r0, r1, d8
 800b8e0:	e7f8      	b.n	800b8d4 <__kernel_rem_pio2+0x9c>
 800b8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b8ea:	f7f4 fe7d 	bl	80005e8 <__aeabi_dmul>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f6:	f7f4 fcc1 	bl	800027c <__adddf3>
 800b8fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8fe:	3601      	adds	r6, #1
 800b900:	9b06      	ldr	r3, [sp, #24]
 800b902:	429e      	cmp	r6, r3
 800b904:	f1a7 0708 	sub.w	r7, r7, #8
 800b908:	ddeb      	ble.n	800b8e2 <__kernel_rem_pio2+0xaa>
 800b90a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b90e:	3508      	adds	r5, #8
 800b910:	ecab 7b02 	vstmia	fp!, {d7}
 800b914:	f108 0801 	add.w	r8, r8, #1
 800b918:	e7ca      	b.n	800b8b0 <__kernel_rem_pio2+0x78>
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	aa0c      	add	r2, sp, #48	; 0x30
 800b91e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b922:	930b      	str	r3, [sp, #44]	; 0x2c
 800b924:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b926:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b92a:	9c04      	ldr	r4, [sp, #16]
 800b92c:	930a      	str	r3, [sp, #40]	; 0x28
 800b92e:	ab98      	add	r3, sp, #608	; 0x260
 800b930:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b934:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b938:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b93c:	f8cd b008 	str.w	fp, [sp, #8]
 800b940:	4625      	mov	r5, r4
 800b942:	2d00      	cmp	r5, #0
 800b944:	dc78      	bgt.n	800ba38 <__kernel_rem_pio2+0x200>
 800b946:	ec47 6b10 	vmov	d0, r6, r7
 800b94a:	4650      	mov	r0, sl
 800b94c:	f000 fc1c 	bl	800c188 <scalbn>
 800b950:	ec57 6b10 	vmov	r6, r7, d0
 800b954:	2200      	movs	r2, #0
 800b956:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b95a:	ee10 0a10 	vmov	r0, s0
 800b95e:	4639      	mov	r1, r7
 800b960:	f7f4 fe42 	bl	80005e8 <__aeabi_dmul>
 800b964:	ec41 0b10 	vmov	d0, r0, r1
 800b968:	f7fe fd8a 	bl	800a480 <floor>
 800b96c:	4b7f      	ldr	r3, [pc, #508]	; (800bb6c <__kernel_rem_pio2+0x334>)
 800b96e:	ec51 0b10 	vmov	r0, r1, d0
 800b972:	2200      	movs	r2, #0
 800b974:	f7f4 fe38 	bl	80005e8 <__aeabi_dmul>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4630      	mov	r0, r6
 800b97e:	4639      	mov	r1, r7
 800b980:	f7f4 fc7a 	bl	8000278 <__aeabi_dsub>
 800b984:	460f      	mov	r7, r1
 800b986:	4606      	mov	r6, r0
 800b988:	f7f5 f8de 	bl	8000b48 <__aeabi_d2iz>
 800b98c:	9007      	str	r0, [sp, #28]
 800b98e:	f7f4 fdc1 	bl	8000514 <__aeabi_i2d>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	f7f4 fc6d 	bl	8000278 <__aeabi_dsub>
 800b99e:	f1ba 0f00 	cmp.w	sl, #0
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	dd70      	ble.n	800ba8a <__kernel_rem_pio2+0x252>
 800b9a8:	1e62      	subs	r2, r4, #1
 800b9aa:	ab0c      	add	r3, sp, #48	; 0x30
 800b9ac:	9d07      	ldr	r5, [sp, #28]
 800b9ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b9b2:	f1ca 0118 	rsb	r1, sl, #24
 800b9b6:	fa40 f301 	asr.w	r3, r0, r1
 800b9ba:	441d      	add	r5, r3
 800b9bc:	408b      	lsls	r3, r1
 800b9be:	1ac0      	subs	r0, r0, r3
 800b9c0:	ab0c      	add	r3, sp, #48	; 0x30
 800b9c2:	9507      	str	r5, [sp, #28]
 800b9c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b9c8:	f1ca 0317 	rsb	r3, sl, #23
 800b9cc:	fa40 f303 	asr.w	r3, r0, r3
 800b9d0:	9302      	str	r3, [sp, #8]
 800b9d2:	9b02      	ldr	r3, [sp, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dd66      	ble.n	800baa6 <__kernel_rem_pio2+0x26e>
 800b9d8:	9b07      	ldr	r3, [sp, #28]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	3301      	adds	r3, #1
 800b9de:	9307      	str	r3, [sp, #28]
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b9e6:	4294      	cmp	r4, r2
 800b9e8:	f300 8099 	bgt.w	800bb1e <__kernel_rem_pio2+0x2e6>
 800b9ec:	f1ba 0f00 	cmp.w	sl, #0
 800b9f0:	dd07      	ble.n	800ba02 <__kernel_rem_pio2+0x1ca>
 800b9f2:	f1ba 0f01 	cmp.w	sl, #1
 800b9f6:	f000 80a5 	beq.w	800bb44 <__kernel_rem_pio2+0x30c>
 800b9fa:	f1ba 0f02 	cmp.w	sl, #2
 800b9fe:	f000 80c1 	beq.w	800bb84 <__kernel_rem_pio2+0x34c>
 800ba02:	9b02      	ldr	r3, [sp, #8]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d14e      	bne.n	800baa6 <__kernel_rem_pio2+0x26e>
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	4958      	ldr	r1, [pc, #352]	; (800bb70 <__kernel_rem_pio2+0x338>)
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7f4 fc32 	bl	8000278 <__aeabi_dsub>
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	d044      	beq.n	800baa6 <__kernel_rem_pio2+0x26e>
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bb60 <__kernel_rem_pio2+0x328>
 800ba22:	f000 fbb1 	bl	800c188 <scalbn>
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	ec53 2b10 	vmov	r2, r3, d0
 800ba2e:	f7f4 fc23 	bl	8000278 <__aeabi_dsub>
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	e036      	b.n	800baa6 <__kernel_rem_pio2+0x26e>
 800ba38:	4b4e      	ldr	r3, [pc, #312]	; (800bb74 <__kernel_rem_pio2+0x33c>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fdd2 	bl	80005e8 <__aeabi_dmul>
 800ba44:	f7f5 f880 	bl	8000b48 <__aeabi_d2iz>
 800ba48:	f7f4 fd64 	bl	8000514 <__aeabi_i2d>
 800ba4c:	4b4a      	ldr	r3, [pc, #296]	; (800bb78 <__kernel_rem_pio2+0x340>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4680      	mov	r8, r0
 800ba52:	4689      	mov	r9, r1
 800ba54:	f7f4 fdc8 	bl	80005e8 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fc0a 	bl	8000278 <__aeabi_dsub>
 800ba64:	f7f5 f870 	bl	8000b48 <__aeabi_d2iz>
 800ba68:	9b02      	ldr	r3, [sp, #8]
 800ba6a:	f843 0b04 	str.w	r0, [r3], #4
 800ba6e:	3d01      	subs	r5, #1
 800ba70:	9302      	str	r3, [sp, #8]
 800ba72:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	4649      	mov	r1, r9
 800ba80:	f7f4 fbfc 	bl	800027c <__adddf3>
 800ba84:	4606      	mov	r6, r0
 800ba86:	460f      	mov	r7, r1
 800ba88:	e75b      	b.n	800b942 <__kernel_rem_pio2+0x10a>
 800ba8a:	d105      	bne.n	800ba98 <__kernel_rem_pio2+0x260>
 800ba8c:	1e63      	subs	r3, r4, #1
 800ba8e:	aa0c      	add	r2, sp, #48	; 0x30
 800ba90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba94:	15c3      	asrs	r3, r0, #23
 800ba96:	e79b      	b.n	800b9d0 <__kernel_rem_pio2+0x198>
 800ba98:	4b38      	ldr	r3, [pc, #224]	; (800bb7c <__kernel_rem_pio2+0x344>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f7f5 f82a 	bl	8000af4 <__aeabi_dcmpge>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d139      	bne.n	800bb18 <__kernel_rem_pio2+0x2e0>
 800baa4:	9002      	str	r0, [sp, #8]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2300      	movs	r3, #0
 800baaa:	4630      	mov	r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	f7f5 f803 	bl	8000ab8 <__aeabi_dcmpeq>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f000 80b4 	beq.w	800bc20 <__kernel_rem_pio2+0x3e8>
 800bab8:	f104 3bff 	add.w	fp, r4, #4294967295
 800babc:	465b      	mov	r3, fp
 800babe:	2200      	movs	r2, #0
 800bac0:	9904      	ldr	r1, [sp, #16]
 800bac2:	428b      	cmp	r3, r1
 800bac4:	da65      	bge.n	800bb92 <__kernel_rem_pio2+0x35a>
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d07b      	beq.n	800bbc2 <__kernel_rem_pio2+0x38a>
 800baca:	ab0c      	add	r3, sp, #48	; 0x30
 800bacc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bad0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 80a0 	beq.w	800bc1a <__kernel_rem_pio2+0x3e2>
 800bada:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bb60 <__kernel_rem_pio2+0x328>
 800bade:	4650      	mov	r0, sl
 800bae0:	f000 fb52 	bl	800c188 <scalbn>
 800bae4:	4f23      	ldr	r7, [pc, #140]	; (800bb74 <__kernel_rem_pio2+0x33c>)
 800bae6:	ec55 4b10 	vmov	r4, r5, d0
 800baea:	46d8      	mov	r8, fp
 800baec:	2600      	movs	r6, #0
 800baee:	f1b8 0f00 	cmp.w	r8, #0
 800baf2:	f280 80cf 	bge.w	800bc94 <__kernel_rem_pio2+0x45c>
 800baf6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800bb58 <__kernel_rem_pio2+0x320>
 800bafa:	465f      	mov	r7, fp
 800bafc:	f04f 0800 	mov.w	r8, #0
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	f2c0 80fd 	blt.w	800bd00 <__kernel_rem_pio2+0x4c8>
 800bb06:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb08:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bb80 <__kernel_rem_pio2+0x348>
 800bb0c:	ec55 4b18 	vmov	r4, r5, d8
 800bb10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bb14:	2600      	movs	r6, #0
 800bb16:	e0e5      	b.n	800bce4 <__kernel_rem_pio2+0x4ac>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	9302      	str	r3, [sp, #8]
 800bb1c:	e75c      	b.n	800b9d8 <__kernel_rem_pio2+0x1a0>
 800bb1e:	f8db 3000 	ldr.w	r3, [fp]
 800bb22:	b955      	cbnz	r5, 800bb3a <__kernel_rem_pio2+0x302>
 800bb24:	b123      	cbz	r3, 800bb30 <__kernel_rem_pio2+0x2f8>
 800bb26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bb2a:	f8cb 3000 	str.w	r3, [fp]
 800bb2e:	2301      	movs	r3, #1
 800bb30:	3201      	adds	r2, #1
 800bb32:	f10b 0b04 	add.w	fp, fp, #4
 800bb36:	461d      	mov	r5, r3
 800bb38:	e755      	b.n	800b9e6 <__kernel_rem_pio2+0x1ae>
 800bb3a:	1acb      	subs	r3, r1, r3
 800bb3c:	f8cb 3000 	str.w	r3, [fp]
 800bb40:	462b      	mov	r3, r5
 800bb42:	e7f5      	b.n	800bb30 <__kernel_rem_pio2+0x2f8>
 800bb44:	1e62      	subs	r2, r4, #1
 800bb46:	ab0c      	add	r3, sp, #48	; 0x30
 800bb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bb50:	a90c      	add	r1, sp, #48	; 0x30
 800bb52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bb56:	e754      	b.n	800ba02 <__kernel_rem_pio2+0x1ca>
	...
 800bb64:	3ff00000 	.word	0x3ff00000
 800bb68:	0800c750 	.word	0x0800c750
 800bb6c:	40200000 	.word	0x40200000
 800bb70:	3ff00000 	.word	0x3ff00000
 800bb74:	3e700000 	.word	0x3e700000
 800bb78:	41700000 	.word	0x41700000
 800bb7c:	3fe00000 	.word	0x3fe00000
 800bb80:	0800c710 	.word	0x0800c710
 800bb84:	1e62      	subs	r2, r4, #1
 800bb86:	ab0c      	add	r3, sp, #48	; 0x30
 800bb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bb90:	e7de      	b.n	800bb50 <__kernel_rem_pio2+0x318>
 800bb92:	a90c      	add	r1, sp, #48	; 0x30
 800bb94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	e790      	b.n	800bac0 <__kernel_rem_pio2+0x288>
 800bb9e:	3301      	adds	r3, #1
 800bba0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bba4:	2900      	cmp	r1, #0
 800bba6:	d0fa      	beq.n	800bb9e <__kernel_rem_pio2+0x366>
 800bba8:	9a08      	ldr	r2, [sp, #32]
 800bbaa:	18e3      	adds	r3, r4, r3
 800bbac:	18a6      	adds	r6, r4, r2
 800bbae:	aa20      	add	r2, sp, #128	; 0x80
 800bbb0:	1c65      	adds	r5, r4, #1
 800bbb2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bbb6:	9302      	str	r3, [sp, #8]
 800bbb8:	9b02      	ldr	r3, [sp, #8]
 800bbba:	42ab      	cmp	r3, r5
 800bbbc:	da04      	bge.n	800bbc8 <__kernel_rem_pio2+0x390>
 800bbbe:	461c      	mov	r4, r3
 800bbc0:	e6b5      	b.n	800b92e <__kernel_rem_pio2+0xf6>
 800bbc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e7eb      	b.n	800bba0 <__kernel_rem_pio2+0x368>
 800bbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbce:	f7f4 fca1 	bl	8000514 <__aeabi_i2d>
 800bbd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd8:	46b3      	mov	fp, r6
 800bbda:	461c      	mov	r4, r3
 800bbdc:	2700      	movs	r7, #0
 800bbde:	f04f 0800 	mov.w	r8, #0
 800bbe2:	f04f 0900 	mov.w	r9, #0
 800bbe6:	9b06      	ldr	r3, [sp, #24]
 800bbe8:	429f      	cmp	r7, r3
 800bbea:	dd06      	ble.n	800bbfa <__kernel_rem_pio2+0x3c2>
 800bbec:	ab70      	add	r3, sp, #448	; 0x1c0
 800bbee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bbf2:	e9c3 8900 	strd	r8, r9, [r3]
 800bbf6:	3501      	adds	r5, #1
 800bbf8:	e7de      	b.n	800bbb8 <__kernel_rem_pio2+0x380>
 800bbfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bbfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bc02:	f7f4 fcf1 	bl	80005e8 <__aeabi_dmul>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	f7f4 fb35 	bl	800027c <__adddf3>
 800bc12:	3701      	adds	r7, #1
 800bc14:	4680      	mov	r8, r0
 800bc16:	4689      	mov	r9, r1
 800bc18:	e7e5      	b.n	800bbe6 <__kernel_rem_pio2+0x3ae>
 800bc1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc1e:	e754      	b.n	800baca <__kernel_rem_pio2+0x292>
 800bc20:	ec47 6b10 	vmov	d0, r6, r7
 800bc24:	f1ca 0000 	rsb	r0, sl, #0
 800bc28:	f000 faae 	bl	800c188 <scalbn>
 800bc2c:	ec57 6b10 	vmov	r6, r7, d0
 800bc30:	4b9f      	ldr	r3, [pc, #636]	; (800beb0 <__kernel_rem_pio2+0x678>)
 800bc32:	ee10 0a10 	vmov	r0, s0
 800bc36:	2200      	movs	r2, #0
 800bc38:	4639      	mov	r1, r7
 800bc3a:	f7f4 ff5b 	bl	8000af4 <__aeabi_dcmpge>
 800bc3e:	b300      	cbz	r0, 800bc82 <__kernel_rem_pio2+0x44a>
 800bc40:	4b9c      	ldr	r3, [pc, #624]	; (800beb4 <__kernel_rem_pio2+0x67c>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	4630      	mov	r0, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	f7f4 fcce 	bl	80005e8 <__aeabi_dmul>
 800bc4c:	f7f4 ff7c 	bl	8000b48 <__aeabi_d2iz>
 800bc50:	4605      	mov	r5, r0
 800bc52:	f7f4 fc5f 	bl	8000514 <__aeabi_i2d>
 800bc56:	4b96      	ldr	r3, [pc, #600]	; (800beb0 <__kernel_rem_pio2+0x678>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f7f4 fcc5 	bl	80005e8 <__aeabi_dmul>
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4602      	mov	r2, r0
 800bc62:	4639      	mov	r1, r7
 800bc64:	4630      	mov	r0, r6
 800bc66:	f7f4 fb07 	bl	8000278 <__aeabi_dsub>
 800bc6a:	f7f4 ff6d 	bl	8000b48 <__aeabi_d2iz>
 800bc6e:	f104 0b01 	add.w	fp, r4, #1
 800bc72:	ab0c      	add	r3, sp, #48	; 0x30
 800bc74:	f10a 0a18 	add.w	sl, sl, #24
 800bc78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc7c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800bc80:	e72b      	b.n	800bada <__kernel_rem_pio2+0x2a2>
 800bc82:	4630      	mov	r0, r6
 800bc84:	4639      	mov	r1, r7
 800bc86:	f7f4 ff5f 	bl	8000b48 <__aeabi_d2iz>
 800bc8a:	ab0c      	add	r3, sp, #48	; 0x30
 800bc8c:	46a3      	mov	fp, r4
 800bc8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc92:	e722      	b.n	800bada <__kernel_rem_pio2+0x2a2>
 800bc94:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc96:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800bc9a:	ab0c      	add	r3, sp, #48	; 0x30
 800bc9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bca0:	f7f4 fc38 	bl	8000514 <__aeabi_i2d>
 800bca4:	4622      	mov	r2, r4
 800bca6:	462b      	mov	r3, r5
 800bca8:	f7f4 fc9e 	bl	80005e8 <__aeabi_dmul>
 800bcac:	4632      	mov	r2, r6
 800bcae:	e9c9 0100 	strd	r0, r1, [r9]
 800bcb2:	463b      	mov	r3, r7
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f7f4 fc96 	bl	80005e8 <__aeabi_dmul>
 800bcbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	e713      	b.n	800baee <__kernel_rem_pio2+0x2b6>
 800bcc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bcca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bcce:	f7f4 fc8b 	bl	80005e8 <__aeabi_dmul>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 facf 	bl	800027c <__adddf3>
 800bcde:	3601      	adds	r6, #1
 800bce0:	4604      	mov	r4, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	429e      	cmp	r6, r3
 800bce8:	dc01      	bgt.n	800bcee <__kernel_rem_pio2+0x4b6>
 800bcea:	45b0      	cmp	r8, r6
 800bcec:	daeb      	bge.n	800bcc6 <__kernel_rem_pio2+0x48e>
 800bcee:	ab48      	add	r3, sp, #288	; 0x120
 800bcf0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcf4:	e9c3 4500 	strd	r4, r5, [r3]
 800bcf8:	3f01      	subs	r7, #1
 800bcfa:	f108 0801 	add.w	r8, r8, #1
 800bcfe:	e6ff      	b.n	800bb00 <__kernel_rem_pio2+0x2c8>
 800bd00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	dc0b      	bgt.n	800bd1e <__kernel_rem_pio2+0x4e6>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dc6e      	bgt.n	800bde8 <__kernel_rem_pio2+0x5b0>
 800bd0a:	d045      	beq.n	800bd98 <__kernel_rem_pio2+0x560>
 800bd0c:	9b07      	ldr	r3, [sp, #28]
 800bd0e:	f003 0007 	and.w	r0, r3, #7
 800bd12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bd16:	ecbd 8b02 	vpop	{d8}
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d1f3      	bne.n	800bd0c <__kernel_rem_pio2+0x4d4>
 800bd24:	ab48      	add	r3, sp, #288	; 0x120
 800bd26:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bd2a:	46d0      	mov	r8, sl
 800bd2c:	46d9      	mov	r9, fp
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	f1a8 0808 	sub.w	r8, r8, #8
 800bd36:	dc64      	bgt.n	800be02 <__kernel_rem_pio2+0x5ca>
 800bd38:	465c      	mov	r4, fp
 800bd3a:	2c01      	cmp	r4, #1
 800bd3c:	f1aa 0a08 	sub.w	sl, sl, #8
 800bd40:	dc7e      	bgt.n	800be40 <__kernel_rem_pio2+0x608>
 800bd42:	2000      	movs	r0, #0
 800bd44:	2100      	movs	r1, #0
 800bd46:	f1bb 0f01 	cmp.w	fp, #1
 800bd4a:	f300 8097 	bgt.w	800be7c <__kernel_rem_pio2+0x644>
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bd54:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f040 8099 	bne.w	800be90 <__kernel_rem_pio2+0x658>
 800bd5e:	9b01      	ldr	r3, [sp, #4]
 800bd60:	e9c3 5600 	strd	r5, r6, [r3]
 800bd64:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bd68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bd6c:	e7ce      	b.n	800bd0c <__kernel_rem_pio2+0x4d4>
 800bd6e:	ab48      	add	r3, sp, #288	; 0x120
 800bd70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 fa80 	bl	800027c <__adddf3>
 800bd7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd80:	f1bb 0f00 	cmp.w	fp, #0
 800bd84:	daf3      	bge.n	800bd6e <__kernel_rem_pio2+0x536>
 800bd86:	9b02      	ldr	r3, [sp, #8]
 800bd88:	b113      	cbz	r3, 800bd90 <__kernel_rem_pio2+0x558>
 800bd8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd8e:	4619      	mov	r1, r3
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	e9c3 0100 	strd	r0, r1, [r3]
 800bd96:	e7b9      	b.n	800bd0c <__kernel_rem_pio2+0x4d4>
 800bd98:	2000      	movs	r0, #0
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	e7f0      	b.n	800bd80 <__kernel_rem_pio2+0x548>
 800bd9e:	ab48      	add	r3, sp, #288	; 0x120
 800bda0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa68 	bl	800027c <__adddf3>
 800bdac:	3c01      	subs	r4, #1
 800bdae:	2c00      	cmp	r4, #0
 800bdb0:	daf5      	bge.n	800bd9e <__kernel_rem_pio2+0x566>
 800bdb2:	9b02      	ldr	r3, [sp, #8]
 800bdb4:	b1e3      	cbz	r3, 800bdf0 <__kernel_rem_pio2+0x5b8>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdbc:	9c01      	ldr	r4, [sp, #4]
 800bdbe:	e9c4 2300 	strd	r2, r3, [r4]
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bdca:	f7f4 fa55 	bl	8000278 <__aeabi_dsub>
 800bdce:	ad4a      	add	r5, sp, #296	; 0x128
 800bdd0:	2401      	movs	r4, #1
 800bdd2:	45a3      	cmp	fp, r4
 800bdd4:	da0f      	bge.n	800bdf6 <__kernel_rem_pio2+0x5be>
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	b113      	cbz	r3, 800bde0 <__kernel_rem_pio2+0x5a8>
 800bdda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdde:	4619      	mov	r1, r3
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bde6:	e791      	b.n	800bd0c <__kernel_rem_pio2+0x4d4>
 800bde8:	465c      	mov	r4, fp
 800bdea:	2000      	movs	r0, #0
 800bdec:	2100      	movs	r1, #0
 800bdee:	e7de      	b.n	800bdae <__kernel_rem_pio2+0x576>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	e7e2      	b.n	800bdbc <__kernel_rem_pio2+0x584>
 800bdf6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bdfa:	f7f4 fa3f 	bl	800027c <__adddf3>
 800bdfe:	3401      	adds	r4, #1
 800be00:	e7e7      	b.n	800bdd2 <__kernel_rem_pio2+0x59a>
 800be02:	e9d8 4500 	ldrd	r4, r5, [r8]
 800be06:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800be0a:	4620      	mov	r0, r4
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	4629      	mov	r1, r5
 800be12:	f7f4 fa33 	bl	800027c <__adddf3>
 800be16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fa29 	bl	8000278 <__aeabi_dsub>
 800be26:	4632      	mov	r2, r6
 800be28:	463b      	mov	r3, r7
 800be2a:	f7f4 fa27 	bl	800027c <__adddf3>
 800be2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be32:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800be36:	ed88 7b00 	vstr	d7, [r8]
 800be3a:	f109 39ff 	add.w	r9, r9, #4294967295
 800be3e:	e776      	b.n	800bd2e <__kernel_rem_pio2+0x4f6>
 800be40:	e9da 8900 	ldrd	r8, r9, [sl]
 800be44:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800be48:	4640      	mov	r0, r8
 800be4a:	4632      	mov	r2, r6
 800be4c:	463b      	mov	r3, r7
 800be4e:	4649      	mov	r1, r9
 800be50:	f7f4 fa14 	bl	800027c <__adddf3>
 800be54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4640      	mov	r0, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	f7f4 fa0a 	bl	8000278 <__aeabi_dsub>
 800be64:	4632      	mov	r2, r6
 800be66:	463b      	mov	r3, r7
 800be68:	f7f4 fa08 	bl	800027c <__adddf3>
 800be6c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be74:	ed8a 7b00 	vstr	d7, [sl]
 800be78:	3c01      	subs	r4, #1
 800be7a:	e75e      	b.n	800bd3a <__kernel_rem_pio2+0x502>
 800be7c:	ab48      	add	r3, sp, #288	; 0x120
 800be7e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 f9f9 	bl	800027c <__adddf3>
 800be8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be8e:	e75a      	b.n	800bd46 <__kernel_rem_pio2+0x50e>
 800be90:	9b01      	ldr	r3, [sp, #4]
 800be92:	9a01      	ldr	r2, [sp, #4]
 800be94:	601d      	str	r5, [r3, #0]
 800be96:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800be9a:	605c      	str	r4, [r3, #4]
 800be9c:	609f      	str	r7, [r3, #8]
 800be9e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bea2:	60d3      	str	r3, [r2, #12]
 800bea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bea8:	6110      	str	r0, [r2, #16]
 800beaa:	6153      	str	r3, [r2, #20]
 800beac:	e72e      	b.n	800bd0c <__kernel_rem_pio2+0x4d4>
 800beae:	bf00      	nop
 800beb0:	41700000 	.word	0x41700000
 800beb4:	3e700000 	.word	0x3e700000

0800beb8 <__kernel_sin>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	ed2d 8b04 	vpush	{d8-d9}
 800bec0:	eeb0 8a41 	vmov.f32	s16, s2
 800bec4:	eef0 8a61 	vmov.f32	s17, s3
 800bec8:	ec55 4b10 	vmov	r4, r5, d0
 800becc:	b083      	sub	sp, #12
 800bece:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bed2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bed6:	9001      	str	r0, [sp, #4]
 800bed8:	da06      	bge.n	800bee8 <__kernel_sin+0x30>
 800beda:	ee10 0a10 	vmov	r0, s0
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 fe32 	bl	8000b48 <__aeabi_d2iz>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d051      	beq.n	800bf8c <__kernel_sin+0xd4>
 800bee8:	4622      	mov	r2, r4
 800beea:	462b      	mov	r3, r5
 800beec:	4620      	mov	r0, r4
 800beee:	4629      	mov	r1, r5
 800bef0:	f7f4 fb7a 	bl	80005e8 <__aeabi_dmul>
 800bef4:	4682      	mov	sl, r0
 800bef6:	468b      	mov	fp, r1
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 fb72 	bl	80005e8 <__aeabi_dmul>
 800bf04:	a341      	add	r3, pc, #260	; (adr r3, 800c00c <__kernel_sin+0x154>)
 800bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	4650      	mov	r0, sl
 800bf10:	4659      	mov	r1, fp
 800bf12:	f7f4 fb69 	bl	80005e8 <__aeabi_dmul>
 800bf16:	a33f      	add	r3, pc, #252	; (adr r3, 800c014 <__kernel_sin+0x15c>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 f9ac 	bl	8000278 <__aeabi_dsub>
 800bf20:	4652      	mov	r2, sl
 800bf22:	465b      	mov	r3, fp
 800bf24:	f7f4 fb60 	bl	80005e8 <__aeabi_dmul>
 800bf28:	a33c      	add	r3, pc, #240	; (adr r3, 800c01c <__kernel_sin+0x164>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 f9a5 	bl	800027c <__adddf3>
 800bf32:	4652      	mov	r2, sl
 800bf34:	465b      	mov	r3, fp
 800bf36:	f7f4 fb57 	bl	80005e8 <__aeabi_dmul>
 800bf3a:	a33a      	add	r3, pc, #232	; (adr r3, 800c024 <__kernel_sin+0x16c>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 f99a 	bl	8000278 <__aeabi_dsub>
 800bf44:	4652      	mov	r2, sl
 800bf46:	465b      	mov	r3, fp
 800bf48:	f7f4 fb4e 	bl	80005e8 <__aeabi_dmul>
 800bf4c:	a337      	add	r3, pc, #220	; (adr r3, 800c02c <__kernel_sin+0x174>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 f993 	bl	800027c <__adddf3>
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	4606      	mov	r6, r0
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	b9eb      	cbnz	r3, 800bf9a <__kernel_sin+0xe2>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	4650      	mov	r0, sl
 800bf64:	4659      	mov	r1, fp
 800bf66:	f7f4 fb3f 	bl	80005e8 <__aeabi_dmul>
 800bf6a:	a325      	add	r3, pc, #148	; (adr r3, 800c000 <__kernel_sin+0x148>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 f982 	bl	8000278 <__aeabi_dsub>
 800bf74:	4642      	mov	r2, r8
 800bf76:	464b      	mov	r3, r9
 800bf78:	f7f4 fb36 	bl	80005e8 <__aeabi_dmul>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7f4 f97a 	bl	800027c <__adddf3>
 800bf88:	4604      	mov	r4, r0
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	ec45 4b10 	vmov	d0, r4, r5
 800bf90:	b003      	add	sp, #12
 800bf92:	ecbd 8b04 	vpop	{d8-d9}
 800bf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9a:	4b1b      	ldr	r3, [pc, #108]	; (800c008 <__kernel_sin+0x150>)
 800bf9c:	ec51 0b18 	vmov	r0, r1, d8
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f7f4 fb21 	bl	80005e8 <__aeabi_dmul>
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	ec41 0b19 	vmov	d9, r0, r1
 800bfac:	463b      	mov	r3, r7
 800bfae:	4640      	mov	r0, r8
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	f7f4 fb19 	bl	80005e8 <__aeabi_dmul>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	ec51 0b19 	vmov	r0, r1, d9
 800bfbe:	f7f4 f95b 	bl	8000278 <__aeabi_dsub>
 800bfc2:	4652      	mov	r2, sl
 800bfc4:	465b      	mov	r3, fp
 800bfc6:	f7f4 fb0f 	bl	80005e8 <__aeabi_dmul>
 800bfca:	ec53 2b18 	vmov	r2, r3, d8
 800bfce:	f7f4 f953 	bl	8000278 <__aeabi_dsub>
 800bfd2:	a30b      	add	r3, pc, #44	; (adr r3, 800c000 <__kernel_sin+0x148>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	4606      	mov	r6, r0
 800bfda:	460f      	mov	r7, r1
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	f7f4 fb02 	bl	80005e8 <__aeabi_dmul>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 f946 	bl	800027c <__adddf3>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f4 f93e 	bl	8000278 <__aeabi_dsub>
 800bffc:	e7c4      	b.n	800bf88 <__kernel_sin+0xd0>
 800bffe:	bf00      	nop
 800c000:	55555549 	.word	0x55555549
 800c004:	3fc55555 	.word	0x3fc55555
 800c008:	3fe00000 	.word	0x3fe00000
 800c00c:	5acfd57c 	.word	0x5acfd57c
 800c010:	3de5d93a 	.word	0x3de5d93a
 800c014:	8a2b9ceb 	.word	0x8a2b9ceb
 800c018:	3e5ae5e6 	.word	0x3e5ae5e6
 800c01c:	57b1fe7d 	.word	0x57b1fe7d
 800c020:	3ec71de3 	.word	0x3ec71de3
 800c024:	19c161d5 	.word	0x19c161d5
 800c028:	3f2a01a0 	.word	0x3f2a01a0
 800c02c:	1110f8a6 	.word	0x1110f8a6
 800c030:	3f811111 	.word	0x3f811111

0800c034 <fabs>:
 800c034:	ec51 0b10 	vmov	r0, r1, d0
 800c038:	ee10 2a10 	vmov	r2, s0
 800c03c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c040:	ec43 2b10 	vmov	d0, r2, r3
 800c044:	4770      	bx	lr

0800c046 <finite>:
 800c046:	b082      	sub	sp, #8
 800c048:	ed8d 0b00 	vstr	d0, [sp]
 800c04c:	9801      	ldr	r0, [sp, #4]
 800c04e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c052:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c056:	0fc0      	lsrs	r0, r0, #31
 800c058:	b002      	add	sp, #8
 800c05a:	4770      	bx	lr
 800c05c:	0000      	movs	r0, r0
	...

0800c060 <nan>:
 800c060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c068 <nan+0x8>
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	00000000 	.word	0x00000000
 800c06c:	7ff80000 	.word	0x7ff80000

0800c070 <rint>:
 800c070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c072:	ec51 0b10 	vmov	r0, r1, d0
 800c076:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c07a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c07e:	2e13      	cmp	r6, #19
 800c080:	ee10 4a10 	vmov	r4, s0
 800c084:	460b      	mov	r3, r1
 800c086:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c08a:	dc58      	bgt.n	800c13e <rint+0xce>
 800c08c:	2e00      	cmp	r6, #0
 800c08e:	da2b      	bge.n	800c0e8 <rint+0x78>
 800c090:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c094:	4302      	orrs	r2, r0
 800c096:	d023      	beq.n	800c0e0 <rint+0x70>
 800c098:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c09c:	4302      	orrs	r2, r0
 800c09e:	4254      	negs	r4, r2
 800c0a0:	4314      	orrs	r4, r2
 800c0a2:	0c4b      	lsrs	r3, r1, #17
 800c0a4:	0b24      	lsrs	r4, r4, #12
 800c0a6:	045b      	lsls	r3, r3, #17
 800c0a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c0ac:	ea44 0103 	orr.w	r1, r4, r3
 800c0b0:	4b32      	ldr	r3, [pc, #200]	; (800c17c <rint+0x10c>)
 800c0b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 f8db 	bl	800027c <__adddf3>
 800c0c6:	e9cd 0100 	strd	r0, r1, [sp]
 800c0ca:	463b      	mov	r3, r7
 800c0cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	f7f4 f8d1 	bl	8000278 <__aeabi_dsub>
 800c0d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c0de:	4639      	mov	r1, r7
 800c0e0:	ec41 0b10 	vmov	d0, r0, r1
 800c0e4:	b003      	add	sp, #12
 800c0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e8:	4a25      	ldr	r2, [pc, #148]	; (800c180 <rint+0x110>)
 800c0ea:	4132      	asrs	r2, r6
 800c0ec:	ea01 0702 	and.w	r7, r1, r2
 800c0f0:	4307      	orrs	r7, r0
 800c0f2:	d0f5      	beq.n	800c0e0 <rint+0x70>
 800c0f4:	0851      	lsrs	r1, r2, #1
 800c0f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c0fa:	4314      	orrs	r4, r2
 800c0fc:	d00c      	beq.n	800c118 <rint+0xa8>
 800c0fe:	ea23 0201 	bic.w	r2, r3, r1
 800c102:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c106:	2e13      	cmp	r6, #19
 800c108:	fa43 f606 	asr.w	r6, r3, r6
 800c10c:	bf0c      	ite	eq
 800c10e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c112:	2400      	movne	r4, #0
 800c114:	ea42 0306 	orr.w	r3, r2, r6
 800c118:	4918      	ldr	r1, [pc, #96]	; (800c17c <rint+0x10c>)
 800c11a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c11e:	4622      	mov	r2, r4
 800c120:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c124:	4620      	mov	r0, r4
 800c126:	4629      	mov	r1, r5
 800c128:	f7f4 f8a8 	bl	800027c <__adddf3>
 800c12c:	e9cd 0100 	strd	r0, r1, [sp]
 800c130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c134:	4622      	mov	r2, r4
 800c136:	462b      	mov	r3, r5
 800c138:	f7f4 f89e 	bl	8000278 <__aeabi_dsub>
 800c13c:	e7d0      	b.n	800c0e0 <rint+0x70>
 800c13e:	2e33      	cmp	r6, #51	; 0x33
 800c140:	dd07      	ble.n	800c152 <rint+0xe2>
 800c142:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c146:	d1cb      	bne.n	800c0e0 <rint+0x70>
 800c148:	ee10 2a10 	vmov	r2, s0
 800c14c:	f7f4 f896 	bl	800027c <__adddf3>
 800c150:	e7c6      	b.n	800c0e0 <rint+0x70>
 800c152:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c156:	f04f 36ff 	mov.w	r6, #4294967295
 800c15a:	40d6      	lsrs	r6, r2
 800c15c:	4230      	tst	r0, r6
 800c15e:	d0bf      	beq.n	800c0e0 <rint+0x70>
 800c160:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c164:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c168:	bf1f      	itttt	ne
 800c16a:	ea24 0101 	bicne.w	r1, r4, r1
 800c16e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c172:	fa44 f202 	asrne.w	r2, r4, r2
 800c176:	ea41 0402 	orrne.w	r4, r1, r2
 800c17a:	e7cd      	b.n	800c118 <rint+0xa8>
 800c17c:	0800c760 	.word	0x0800c760
 800c180:	000fffff 	.word	0x000fffff
 800c184:	00000000 	.word	0x00000000

0800c188 <scalbn>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	ec55 4b10 	vmov	r4, r5, d0
 800c18e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c192:	4606      	mov	r6, r0
 800c194:	462b      	mov	r3, r5
 800c196:	b99a      	cbnz	r2, 800c1c0 <scalbn+0x38>
 800c198:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c19c:	4323      	orrs	r3, r4
 800c19e:	d036      	beq.n	800c20e <scalbn+0x86>
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <scalbn+0x100>)
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	ee10 0a10 	vmov	r0, s0
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f7f4 fa1d 	bl	80005e8 <__aeabi_dmul>
 800c1ae:	4b37      	ldr	r3, [pc, #220]	; (800c28c <scalbn+0x104>)
 800c1b0:	429e      	cmp	r6, r3
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	da10      	bge.n	800c1da <scalbn+0x52>
 800c1b8:	a32b      	add	r3, pc, #172	; (adr r3, 800c268 <scalbn+0xe0>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	e03a      	b.n	800c236 <scalbn+0xae>
 800c1c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1c4:	428a      	cmp	r2, r1
 800c1c6:	d10c      	bne.n	800c1e2 <scalbn+0x5a>
 800c1c8:	ee10 2a10 	vmov	r2, s0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f854 	bl	800027c <__adddf3>
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	e019      	b.n	800c20e <scalbn+0x86>
 800c1da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1de:	460b      	mov	r3, r1
 800c1e0:	3a36      	subs	r2, #54	; 0x36
 800c1e2:	4432      	add	r2, r6
 800c1e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1e8:	428a      	cmp	r2, r1
 800c1ea:	dd08      	ble.n	800c1fe <scalbn+0x76>
 800c1ec:	2d00      	cmp	r5, #0
 800c1ee:	a120      	add	r1, pc, #128	; (adr r1, 800c270 <scalbn+0xe8>)
 800c1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f4:	da1c      	bge.n	800c230 <scalbn+0xa8>
 800c1f6:	a120      	add	r1, pc, #128	; (adr r1, 800c278 <scalbn+0xf0>)
 800c1f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1fc:	e018      	b.n	800c230 <scalbn+0xa8>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	dd08      	ble.n	800c214 <scalbn+0x8c>
 800c202:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c206:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c20a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c20e:	ec45 4b10 	vmov	d0, r4, r5
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c218:	da19      	bge.n	800c24e <scalbn+0xc6>
 800c21a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c21e:	429e      	cmp	r6, r3
 800c220:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c224:	dd0a      	ble.n	800c23c <scalbn+0xb4>
 800c226:	a112      	add	r1, pc, #72	; (adr r1, 800c270 <scalbn+0xe8>)
 800c228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1e2      	bne.n	800c1f6 <scalbn+0x6e>
 800c230:	a30f      	add	r3, pc, #60	; (adr r3, 800c270 <scalbn+0xe8>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 f9d7 	bl	80005e8 <__aeabi_dmul>
 800c23a:	e7cb      	b.n	800c1d4 <scalbn+0x4c>
 800c23c:	a10a      	add	r1, pc, #40	; (adr r1, 800c268 <scalbn+0xe0>)
 800c23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0b8      	beq.n	800c1b8 <scalbn+0x30>
 800c246:	a10e      	add	r1, pc, #56	; (adr r1, 800c280 <scalbn+0xf8>)
 800c248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24c:	e7b4      	b.n	800c1b8 <scalbn+0x30>
 800c24e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c252:	3236      	adds	r2, #54	; 0x36
 800c254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c258:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c25c:	4620      	mov	r0, r4
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <scalbn+0x108>)
 800c260:	2200      	movs	r2, #0
 800c262:	e7e8      	b.n	800c236 <scalbn+0xae>
 800c264:	f3af 8000 	nop.w
 800c268:	c2f8f359 	.word	0xc2f8f359
 800c26c:	01a56e1f 	.word	0x01a56e1f
 800c270:	8800759c 	.word	0x8800759c
 800c274:	7e37e43c 	.word	0x7e37e43c
 800c278:	8800759c 	.word	0x8800759c
 800c27c:	fe37e43c 	.word	0xfe37e43c
 800c280:	c2f8f359 	.word	0xc2f8f359
 800c284:	81a56e1f 	.word	0x81a56e1f
 800c288:	43500000 	.word	0x43500000
 800c28c:	ffff3cb0 	.word	0xffff3cb0
 800c290:	3c900000 	.word	0x3c900000

0800c294 <_init>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	bf00      	nop
 800c298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29a:	bc08      	pop	{r3}
 800c29c:	469e      	mov	lr, r3
 800c29e:	4770      	bx	lr

0800c2a0 <_fini>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	bf00      	nop
 800c2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a6:	bc08      	pop	{r3}
 800c2a8:	469e      	mov	lr, r3
 800c2aa:	4770      	bx	lr
