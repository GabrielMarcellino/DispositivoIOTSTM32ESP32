
STM32Bulb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800dc48  0800dc48  0001dc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0d0  0800e0d0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0d0  0800e0d0  0001e0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0d8  0800e0d8  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0d8  0800e0d8  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0dc  0800e0dc  0001e0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800e0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000474c  200000cc  0800e1ac  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004818  0800e1ac  00024818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fb2  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000482b  00000000  00000000  000450ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000498e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001880  00000000  00000000  0004b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268ef  00000000  00000000  0004cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021317  00000000  00000000  0007344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f12  00000000  00000000  00094766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ef0  00000000  00000000  0016c6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc2c 	.word	0x0800dc2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800dc2c 	.word	0x0800dc2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f001 f9af 	bl	8002298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f8bf 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa93 	bl	8001468 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f42:	f000 f93d 	bl	80011c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f46:	f000 f969 	bl	800121c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f4a:	f000 f997 	bl	800127c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f4e:	f009 fb1f 	bl	800a590 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000f52:	f000 f9c9 	bl	80012e8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fa5d 	bl	8001414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initializes all PWM for all LEDs
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	484f      	ldr	r0, [pc, #316]	; (800109c <main+0x16c>)
 8000f5e:	f004 ffc5 	bl	8005eec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f62:	2104      	movs	r1, #4
 8000f64:	484d      	ldr	r0, [pc, #308]	; (800109c <main+0x16c>)
 8000f66:	f004 ffc1 	bl	8005eec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	484b      	ldr	r0, [pc, #300]	; (800109c <main+0x16c>)
 8000f6e:	f004 ffbd 	bl	8005eec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f72:	210c      	movs	r1, #12
 8000f74:	4849      	ldr	r0, [pc, #292]	; (800109c <main+0x16c>)
 8000f76:	f004 ffb9 	bl	8005eec <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Calls configuration function for default initialization setup
  DeserializeConfiguration(configString, &yellow, &orange, &red, &blue);
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <main+0x170>)
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <main+0x174>)
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <main+0x178>)
 8000f82:	494a      	ldr	r1, [pc, #296]	; (80010ac <main+0x17c>)
 8000f84:	484a      	ldr	r0, [pc, #296]	; (80010b0 <main+0x180>)
 8000f86:	f000 fb8d 	bl	80016a4 <DeserializeConfiguration>

  // Variables responsible for phase delay in wave functions
  int yellowPhase, orangePhase, redPhase, bluePhase;
  int globalCounter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]

  // Setup interrupt reception for UART1 port
  // (Calls for handling after reception is completed)
  HAL_UART_Receive_IT(&huart2, configString, 55);
 8000f8e:	2237      	movs	r2, #55	; 0x37
 8000f90:	4947      	ldr	r1, [pc, #284]	; (80010b0 <main+0x180>)
 8000f92:	4848      	ldr	r0, [pc, #288]	; (80010b4 <main+0x184>)
 8000f94:	f005 fdd5 	bl	8006b42 <HAL_UART_Receive_IT>

  while (1)
  {
	// Counter to keep general samples to be split among phases
	globalCounter++;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]

	// Phase for each wave considering the respective phase delays for each function
	yellowPhase = floor((globalCounter+yellow.phase)%yellow.samples);
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <main+0x17c>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a41      	ldr	r2, [pc, #260]	; (80010ac <main+0x17c>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fae:	fb02 f201 	mul.w	r2, r2, r1
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff faad 	bl	8000514 <__aeabi_i2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fdc1 	bl	8000b48 <__aeabi_d2iz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	613b      	str	r3, [r7, #16]
	orangePhase = floor((globalCounter+orange.phase)%orange.samples);
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <main+0x178>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a35      	ldr	r2, [pc, #212]	; (80010a8 <main+0x178>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fda:	fb02 f201 	mul.w	r2, r2, r1
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa97 	bl	8000514 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fdab 	bl	8000b48 <__aeabi_d2iz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
	redPhase = floor((globalCounter+red.phase)%red.samples);
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <main+0x174>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <main+0x174>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	fb93 f1f2 	sdiv	r1, r3, r2
 8001006:	fb02 f201 	mul.w	r2, r2, r1
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa81 	bl	8000514 <__aeabi_i2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd95 	bl	8000b48 <__aeabi_d2iz>
 800101e:	4603      	mov	r3, r0
 8001020:	60bb      	str	r3, [r7, #8]
	bluePhase = floor((globalCounter+blue.phase)%blue.samples);
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0x170>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <main+0x170>)
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001032:	fb02 f201 	mul.w	r2, r2, r1
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa6b 	bl	8000514 <__aeabi_i2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd7f 	bl	8000b48 <__aeabi_d2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	607b      	str	r3, [r7, #4]

	// Setting up each PWM level for each LED
	TIM4->CCR1 = yellow.shape[yellowPhase];
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <main+0x17c>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <main+0x188>)
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = orange.shape[orangePhase];
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <main+0x178>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <main+0x188>)
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = red.shape[redPhase];
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <main+0x174>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3302      	adds	r3, #2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <main+0x188>)
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = blue.shape[bluePhase];
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <main+0x170>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3302      	adds	r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <main+0x188>)
 800108c:	641a      	str	r2, [r3, #64]	; 0x40

	// Setup the pace for the execution
	HAL_Delay(5);
 800108e:	2005      	movs	r0, #5
 8001090:	f001 f974 	bl	800237c <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001094:	f009 faa2 	bl	800a5dc <MX_USB_HOST_Process>
	globalCounter++;
 8001098:	e77e      	b.n	8000f98 <main+0x68>
 800109a:	bf00      	nop
 800109c:	200010a4 	.word	0x200010a4
 80010a0:	200000f8 	.word	0x200000f8
 80010a4:	20003098 	.word	0x20003098
 80010a8:	200010ec 	.word	0x200010ec
 80010ac:	200020ec 	.word	0x200020ec
 80010b0:	20000000 	.word	0x20000000
 80010b4:	2000409c 	.word	0x2000409c
 80010b8:	40000800 	.word	0x40000800

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b098      	sub	sp, #96	; 0x60
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fda6 	bl	800ac1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <SystemClock_Config+0xfc>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <SystemClock_Config+0xfc>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <SystemClock_Config+0xfc>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <SystemClock_Config+0x100>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <SystemClock_Config+0x100>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SystemClock_Config+0x100>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001126:	2301      	movs	r3, #1
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800113e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001148:	2307      	movs	r3, #7
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001150:	4618      	mov	r0, r3
 8001152:	f003 ffe5 	bl	8005120 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800115c:	f000 fd84 	bl	8001c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2105      	movs	r1, #5
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fa46 	bl	8005610 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800118a:	f000 fd6d 	bl	8001c68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001192:	23c0      	movs	r3, #192	; 0xc0
 8001194:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fc32 	bl	8005a08 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011aa:	f000 fd5d 	bl	8001c68 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3760      	adds	r7, #96	; 0x60
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_I2C1_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_I2C1_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_I2C1_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2C1_Init+0x50>)
 80011fe:	f003 f9ab 	bl	8004558 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 fd2e 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20002098 	.word	0x20002098
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_I2S3_Init+0x54>)
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <MX_I2S3_Init+0x58>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2S3_Init+0x54>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_I2S3_Init+0x54>)
 800123c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001240:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_I2S3_Init+0x54>)
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <MX_I2S3_Init+0x5c>)
 8001246:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_I2S3_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_I2S3_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_I2S3_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_I2S3_Init+0x54>)
 800125c:	f003 fac0 	bl	80047e0 <HAL_I2S_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001266:	f000 fcff 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200040e0 	.word	0x200040e0
 8001274:	40003c00 	.word	0x40003c00
 8001278:	00017700 	.word	0x00017700

0800127c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_SPI1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012ce:	f004 fcdb 	bl	8005c88 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 fcc6 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20004044 	.word	0x20004044
 80012e4:	40013000 	.word	0x40013000

080012e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <MX_TIM4_Init+0x124>)
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <MX_TIM4_Init+0x128>)
 800131c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <MX_TIM4_Init+0x124>)
 8001320:	2208      	movs	r2, #8
 8001322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <MX_TIM4_Init+0x124>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <MX_TIM4_Init+0x124>)
 800132c:	2264      	movs	r2, #100	; 0x64
 800132e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_TIM4_Init+0x124>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <MX_TIM4_Init+0x124>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800133c:	4833      	ldr	r0, [pc, #204]	; (800140c <MX_TIM4_Init+0x124>)
 800133e:	f004 fd2c 	bl	8005d9a <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001348:	f000 fc8e 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <MX_TIM4_Init+0x124>)
 800135a:	f004 ff51 	bl	8006200 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001364:	f000 fc80 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <MX_TIM4_Init+0x124>)
 800136a:	f004 fd65 	bl	8005e38 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 fc78 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4619      	mov	r1, r3
 8001386:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM4_Init+0x124>)
 8001388:	f005 fb12 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001392:	f000 fc69 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013a2:	2304      	movs	r3, #4
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <MX_TIM4_Init+0x124>)
 80013ae:	f004 fe65 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80013b8:	f000 fc56 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4812      	ldr	r0, [pc, #72]	; (800140c <MX_TIM4_Init+0x124>)
 80013c4:	f004 fe5a 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80013ce:	f000 fc4b 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2208      	movs	r2, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_TIM4_Init+0x124>)
 80013da:	f004 fe4f 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80013e4:	f000 fc40 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	220c      	movs	r2, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM4_Init+0x124>)
 80013f0:	f004 fe44 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80013fa:	f000 fc35 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM4_Init+0x124>)
 8001400:	f000 fd7a 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200010a4 	.word	0x200010a4
 8001410:	40000800 	.word	0x40000800

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f005 fb2c 	bl	8006aa8 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 fc07 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000409c 	.word	0x2000409c
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a70      	ldr	r2, [pc, #448]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a69      	ldr	r2, [pc, #420]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a62      	ldr	r2, [pc, #392]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b60      	ldr	r3, [pc, #384]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b55      	ldr	r3, [pc, #340]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a54      	ldr	r2, [pc, #336]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <MX_GPIO_Init+0x1e0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2108      	movs	r1, #8
 800152a:	4848      	ldr	r0, [pc, #288]	; (800164c <MX_GPIO_Init+0x1e4>)
 800152c:	f001 fa8a 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2101      	movs	r1, #1
 8001534:	4846      	ldr	r0, [pc, #280]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001536:	f001 fa85 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2110      	movs	r1, #16
 800153e:	4845      	ldr	r0, [pc, #276]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001540:	f001 fa80 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001544:	2308      	movs	r3, #8
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	483c      	ldr	r0, [pc, #240]	; (800164c <MX_GPIO_Init+0x1e4>)
 800155c:	f001 f8d6 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4836      	ldr	r0, [pc, #216]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001578:	f001 f8c8 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800157c:	2308      	movs	r3, #8
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158c:	2305      	movs	r3, #5
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001598:	f001 f8b8 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4829      	ldr	r0, [pc, #164]	; (8001658 <MX_GPIO_Init+0x1f0>)
 80015b2:	f001 f8ab 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015b6:	2304      	movs	r3, #4
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4824      	ldr	r0, [pc, #144]	; (800165c <MX_GPIO_Init+0x1f4>)
 80015ca:	f001 f89f 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e0:	2305      	movs	r3, #5
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_GPIO_Init+0x1f4>)
 80015ec:	f001 f88e 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80015f0:	2310      	movs	r3, #16
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001608:	f001 f880 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800160c:	2320      	movs	r3, #32
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001620:	f001 f874 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001628:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0x1e4>)
 800163a:	f001 f867 	bl	800270c <HAL_GPIO_Init>

}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40021000 	.word	0x40021000
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// Called by the end of UART interruption. Deserializes the received string
// and resets reception again
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
	// Calls configuration function for default initialization setup for
	// the received string
	DeserializeConfiguration(configString, &yellow, &orange, &red, &blue);
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_UART_RxCpltCallback+0x2c>)
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_UART_RxCpltCallback+0x30>)
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_UART_RxCpltCallback+0x34>)
 8001670:	4909      	ldr	r1, [pc, #36]	; (8001698 <HAL_UART_RxCpltCallback+0x38>)
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <HAL_UART_RxCpltCallback+0x3c>)
 8001674:	f000 f816 	bl	80016a4 <DeserializeConfiguration>
	// Setup reception
	HAL_UART_Receive_IT(&huart2, configString, 55);
 8001678:	2237      	movs	r2, #55	; 0x37
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <HAL_UART_RxCpltCallback+0x3c>)
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <HAL_UART_RxCpltCallback+0x40>)
 800167e:	f005 fa60 	bl	8006b42 <HAL_UART_Receive_IT>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000f8 	.word	0x200000f8
 8001690:	20003098 	.word	0x20003098
 8001694:	200010ec 	.word	0x200010ec
 8001698:	200020ec 	.word	0x200020ec
 800169c:	20000000 	.word	0x20000000
 80016a0:	2000409c 	.word	0x2000409c

080016a4 <DeserializeConfiguration>:

// Handles configuration string and passes the parameters for
// the wave generator to the respective LEDs
void DeserializeConfiguration(uint8_t *configurationString, LEDBehavior *yellow, LEDBehavior *orange, LEDBehavior *red, LEDBehavior *blue){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
	// This value was found empirically, if the value is greater than this
	// there are no visible differences in behavior
	int maximumAmplitude = 65535/512;
 80016b2:	237f      	movs	r3, #127	; 0x7f
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
	// Variables to hold the parameters while the string is being parsed
	char* ledConfiguration[4];
	char* configurationParameters[4];

	// Tokens for the string split
	char* token = strtok((char *)configurationString, "@");
 80016b6:	4942      	ldr	r1, [pc, #264]	; (80017c0 <DeserializeConfiguration+0x11c>)
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f009 fb71 	bl	800ada0 <strtok>
 80016be:	6478      	str	r0, [r7, #68]	; 0x44
	ledConfiguration[0] = token;
 80016c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24

	// Splitting the string
	for(int index = 1; token != NULL; index++){
 80016c4:	2301      	movs	r3, #1
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
 80016c8:	e00f      	b.n	80016ea <DeserializeConfiguration+0x46>
		token = strtok(NULL, "@");
 80016ca:	493d      	ldr	r1, [pc, #244]	; (80017c0 <DeserializeConfiguration+0x11c>)
 80016cc:	2000      	movs	r0, #0
 80016ce:	f009 fb67 	bl	800ada0 <strtok>
 80016d2:	6478      	str	r0, [r7, #68]	; 0x44
		ledConfiguration[index] = token;
 80016d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016dc:	4413      	add	r3, r2
 80016de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016e0:	f843 2c24 	str.w	r2, [r3, #-36]
	for(int index = 1; token != NULL; index++){
 80016e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e6:	3301      	adds	r3, #1
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
 80016ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ec      	bne.n	80016ca <DeserializeConfiguration+0x26>
	}

	// Splitting the string and passing the parameters to the function
	// that setups the values in the LED structure.
	for(int index = 0; index < 4; index++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f4:	e05b      	b.n	80017ae <DeserializeConfiguration+0x10a>
		// Splitting the string
		token = strtok(ledConfiguration[index], "-");
 80016f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016fe:	4413      	add	r3, r2
 8001700:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001704:	492f      	ldr	r1, [pc, #188]	; (80017c4 <DeserializeConfiguration+0x120>)
 8001706:	4618      	mov	r0, r3
 8001708:	f009 fb4a 	bl	800ada0 <strtok>
 800170c:	6478      	str	r0, [r7, #68]	; 0x44
		configurationParameters[0] = token;
 800170e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001710:	617b      	str	r3, [r7, #20]
		for(int indexIn = 1; token != NULL; indexIn++){
 8001712:	2301      	movs	r3, #1
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
 8001716:	e00f      	b.n	8001738 <DeserializeConfiguration+0x94>
			token = strtok(NULL, "-");
 8001718:	492a      	ldr	r1, [pc, #168]	; (80017c4 <DeserializeConfiguration+0x120>)
 800171a:	2000      	movs	r0, #0
 800171c:	f009 fb40 	bl	800ada0 <strtok>
 8001720:	6478      	str	r0, [r7, #68]	; 0x44
			configurationParameters[indexIn] = token;
 8001722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800172a:	4413      	add	r3, r2
 800172c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800172e:	f843 2c34 	str.w	r2, [r3, #-52]
		for(int indexIn = 1; token != NULL; indexIn++){
 8001732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001734:	3301      	adds	r3, #1
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
 8001738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ec      	bne.n	8001718 <DeserializeConfiguration+0x74>
		}

		// Yellow LED
		if (*configurationParameters[0] == 'Y'){
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b59      	cmp	r3, #89	; 0x59
 8001744:	d109      	bne.n	800175a <DeserializeConfiguration+0xb6>
			WaveSetup(&yellow, configurationParameters[1], configurationParameters[2], maximumAmplitude, configurationParameters[3]);
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f107 0008 	add.w	r0, r7, #8
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	f000 f838 	bl	80017c8 <WaveSetup>
 8001758:	e026      	b.n	80017a8 <DeserializeConfiguration+0x104>
		}
		// Orange LED
		else if (*configurationParameters[0] == 'O'){
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b4f      	cmp	r3, #79	; 0x4f
 8001760:	d108      	bne.n	8001774 <DeserializeConfiguration+0xd0>
			WaveSetup(&orange, configurationParameters[1], configurationParameters[2], maximumAmplitude, configurationParameters[3]);
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	1d38      	adds	r0, r7, #4
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	f000 f82b 	bl	80017c8 <WaveSetup>
 8001772:	e019      	b.n	80017a8 <DeserializeConfiguration+0x104>
		}
		// Red LED
		else if (*configurationParameters[0] == 'R'){
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b52      	cmp	r3, #82	; 0x52
 800177a:	d108      	bne.n	800178e <DeserializeConfiguration+0xea>
			WaveSetup(&red, configurationParameters[1], configurationParameters[2], maximumAmplitude, configurationParameters[3]);
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	4638      	mov	r0, r7
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001788:	f000 f81e 	bl	80017c8 <WaveSetup>
 800178c:	e00c      	b.n	80017a8 <DeserializeConfiguration+0x104>
		}
		// Blue LED
		else if (*configurationParameters[0] == 'B'){
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b42      	cmp	r3, #66	; 0x42
 8001794:	d108      	bne.n	80017a8 <DeserializeConfiguration+0x104>
			WaveSetup(&blue, configurationParameters[1], configurationParameters[2], maximumAmplitude, configurationParameters[3]);
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80017a4:	f000 f810 	bl	80017c8 <WaveSetup>
	for(int index = 0; index < 4; index++){
 80017a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017aa:	3301      	adds	r3, #1
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	dda0      	ble.n	80016f6 <DeserializeConfiguration+0x52>
		}
	}
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3748      	adds	r7, #72	; 0x48
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800dc48 	.word	0x0800dc48
 80017c4:	0800dc4c 	.word	0x0800dc4c

080017c8 <WaveSetup>:

// Converts the received parameters and store them in the received structure
void WaveSetup(LEDBehavior *led, char *samples, char *phase, int maximum, char *shape){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
	// Number of samples
	led->samples = atoi(samples);
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f009 f9e2 	bl	800aba0 <atoi>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]
	// Samples Delay
	led->phase = atoi(phase);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f009 f9dc 	bl	800aba0 <atoi>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]
	// Maximum value
	led->maximum = maximum;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	609a      	str	r2, [r3, #8]
	// Cosine wave
	if (*shape == 'C'){
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b43      	cmp	r3, #67	; 0x43
 80017fa:	d10a      	bne.n	8001812 <WaveSetup+0x4a>
		GenerateCossine(led->shape, led->samples, maximum, led->phase);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f103 000c 	add.w	r0, r3, #12
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	f000 f850 	bl	80018b0 <GenerateCossine>
	}
	// Square wave
	else if (*shape == 'S'){
		GenerateSquare(led->shape, led->samples, maximum, led->phase);
	}
}
 8001810:	e049      	b.n	80018a6 <WaveSetup+0xde>
	else if (*shape == 'H'){
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b48      	cmp	r3, #72	; 0x48
 8001818:	d10a      	bne.n	8001830 <WaveSetup+0x68>
		GenerateHigh(led->shape, led->samples, maximum, led->phase);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f103 000c 	add.w	r0, r3, #12
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f000 f8ab 	bl	8001984 <GenerateHigh>
}
 800182e:	e03a      	b.n	80018a6 <WaveSetup+0xde>
	else if (*shape == 'L'){
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b4c      	cmp	r3, #76	; 0x4c
 8001836:	d10a      	bne.n	800184e <WaveSetup+0x86>
		GenerateLow(led->shape, led->samples, maximum, led->phase);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f103 000c 	add.w	r0, r3, #12
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	f000 f8c1 	bl	80019ce <GenerateLow>
}
 800184c:	e02b      	b.n	80018a6 <WaveSetup+0xde>
	else if (*shape == 'P'){
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b50      	cmp	r3, #80	; 0x50
 8001854:	d10a      	bne.n	800186c <WaveSetup+0xa4>
		GenerateParabola(led->shape, led->samples, maximum, led->phase);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f103 000c 	add.w	r0, r3, #12
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	f000 f95b 	bl	8001b20 <GenerateParabola>
}
 800186a:	e01c      	b.n	80018a6 <WaveSetup+0xde>
	else if (*shape == 'R'){
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b52      	cmp	r3, #82	; 0x52
 8001872:	d10a      	bne.n	800188a <WaveSetup+0xc2>
		GenerateRamp(led->shape, led->samples, maximum, led->phase);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f103 000c 	add.w	r0, r3, #12
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	f000 f8c1 	bl	8001a0a <GenerateRamp>
}
 8001888:	e00d      	b.n	80018a6 <WaveSetup+0xde>
	else if (*shape == 'S'){
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b53      	cmp	r3, #83	; 0x53
 8001890:	d109      	bne.n	80018a6 <WaveSetup+0xde>
		GenerateSquare(led->shape, led->samples, maximum, led->phase);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f103 000c 	add.w	r0, r3, #12
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	f000 f8f3 	bl	8001a8c <GenerateSquare>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <GenerateCossine>:

// Generates cosine wave according to the received parameters
void GenerateCossine(int *cosinusoid, int samples, int maximum, int delay){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
	float theta;
	float phases = 6.28/samples;
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f7fe fe28 	bl	8000514 <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	a12c      	add	r1, pc, #176	; (adr r1, 800197c <GenerateCossine+0xcc>)
 80018ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018ce:	f7fe ffb5 	bl	800083c <__aeabi_ddiv>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f95d 	bl	8000b98 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < samples; i++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e03c      	b.n	8001962 <GenerateCossine+0xb2>
		theta = phases * i;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	edc7 7a05 	vstr	s15, [r7, #20]
		cosinusoid[i] = floor(maximum*(cos(theta)+1));
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7fe fe08 	bl	8000514 <__aeabi_i2d>
 8001904:	4604      	mov	r4, r0
 8001906:	460d      	mov	r5, r1
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7fe fe15 	bl	8000538 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b10 	vmov	d0, r2, r3
 8001916:	f00a fa2f 	bl	800bd78 <cos>
 800191a:	ec51 0b10 	vmov	r0, r1, d0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <GenerateCossine+0xc8>)
 8001924:	f7fe fcaa 	bl	800027c <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fe5a 	bl	80005e8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b17 	vmov	d7, r2, r3
 800193c:	eeb0 0a47 	vmov.f32	s0, s14
 8001940:	eef0 0a67 	vmov.f32	s1, s15
 8001944:	f00a fa68 	bl	800be18 <floor>
 8001948:	ec51 0b10 	vmov	r0, r1, d0
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	18d4      	adds	r4, r2, r3
 8001954:	f7ff f8f8 	bl	8000b48 <__aeabi_d2iz>
 8001958:	4603      	mov	r3, r0
 800195a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbbe      	blt.n	80018e8 <GenerateCossine+0x38>
	}
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	3ff00000 	.word	0x3ff00000
 800197c:	51eb851f 	.word	0x51eb851f
 8001980:	40191eb8 	.word	0x40191eb8

08001984 <GenerateHigh>:

// Generates constant high according to the received parameters
void GenerateHigh(int *fixed, int samples, int maximum, int delay){
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < samples; i++){
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e011      	b.n	80019bc <GenerateHigh+0x38>
		fixed[i] = floor(maximum);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7fe fdbb 	bl	8000514 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	0089      	lsls	r1, r1, #2
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	1844      	adds	r4, r0, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f8cb 	bl	8000b48 <__aeabi_d2iz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbe9      	blt.n	8001998 <GenerateHigh+0x14>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd90      	pop	{r4, r7, pc}

080019ce <GenerateLow>:

// Generates constant low according to the received parameters
void GenerateLow(int *fixed, int samples, int maximum, int delay){
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < samples; i++){
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e008      	b.n	80019f4 <GenerateLow+0x26>
		fixed[i] = 0;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < samples; i++){
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf2      	blt.n	80019e2 <GenerateLow+0x14>
	}
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <GenerateRamp>:

// Generates ramp wave according to the received parameters
void GenerateRamp(int *ramp, int samples, int maximum, int delay){
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
	float theta = maximum/(float)samples;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e01f      	b.n	8001a7a <GenerateRamp+0x70>
		ramp[i] = floor(i*theta);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd72 	bl	8000538 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f00a f9dc 	bl	800be18 <floor>
 8001a60:	ec51 0b10 	vmov	r0, r1, d0
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	18d4      	adds	r4, r2, r3
 8001a6c:	f7ff f86c 	bl	8000b48 <__aeabi_d2iz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbdb      	blt.n	8001a3a <GenerateRamp+0x30>
	}
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <GenerateSquare>:

// Generates square wave according to the received parameters
void GenerateSquare(int *square, int samples, int maximum, int delay){
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < floor(samples/2); i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e008      	b.n	8001ab2 <GenerateSquare+0x26>
		square[i] = maximum;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < floor(samples/2); i++){
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7fe fd2e 	bl	8000514 <__aeabi_i2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0fda      	lsrs	r2, r3, #31
 8001ac0:	4413      	add	r3, r2
 8001ac2:	105b      	asrs	r3, r3, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd25 	bl	8000514 <__aeabi_i2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fffb 	bl	8000acc <__aeabi_dcmplt>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e1      	bne.n	8001aa0 <GenerateSquare+0x14>
	}
	for (int i = floor(samples/2); i < samples; i++){
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0fda      	lsrs	r2, r3, #31
 8001ae0:	4413      	add	r3, r2
 8001ae2:	105b      	asrs	r3, r3, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd15 	bl	8000514 <__aeabi_i2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f829 	bl	8000b48 <__aeabi_d2iz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e008      	b.n	8001b0e <GenerateSquare+0x82>
		square[i] = 0;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
	for (int i = floor(samples/2); i < samples; i++){
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf2      	blt.n	8001afc <GenerateSquare+0x70>
	}
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}

08001b20 <GenerateParabola>:

// Generates parabola wave according to the received parameters
void GenerateParabola(int *parabola, int samples, int maximum, int delay){
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
	float a = (4*maximum)/(pow(samples,2));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcee 	bl	8000514 <__aeabi_i2d>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	460d      	mov	r5, r1
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	f7fe fce9 	bl	8000514 <__aeabi_i2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001c60 <GenerateParabola+0x140>
 8001b4a:	ec43 2b10 	vmov	d0, r2, r3
 8001b4e:	f00a f9e3 	bl	800bf18 <pow>
 8001b52:	ec53 2b10 	vmov	r2, r3, d0
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fe6f 	bl	800083c <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f817 	bl	8000b98 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
	float b = -(4*maximum)/(float)samples;
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	079b      	lsls	r3, r3, #30
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8e:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = maximum;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	e050      	b.n	8001c48 <GenerateParabola+0x128>
		parabola[i] = floor(a*pow(i,2) + b*i + c);
 8001ba6:	69b8      	ldr	r0, [r7, #24]
 8001ba8:	f7fe fcc6 	bl	8000538 <__aeabi_f2d>
 8001bac:	4604      	mov	r4, r0
 8001bae:	460d      	mov	r5, r1
 8001bb0:	69f8      	ldr	r0, [r7, #28]
 8001bb2:	f7fe fcaf 	bl	8000514 <__aeabi_i2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001c60 <GenerateParabola+0x140>
 8001bbe:	ec43 2b10 	vmov	d0, r2, r3
 8001bc2:	f00a f9a9 	bl	800bf18 <pow>
 8001bc6:	ec53 2b10 	vmov	r2, r3, d0
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fd0b 	bl	80005e8 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	461d      	mov	r5, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	ee17 0a90 	vmov	r0, s15
 8001bf0:	f7fe fca2 	bl	8000538 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb3e 	bl	800027c <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	6938      	ldr	r0, [r7, #16]
 8001c0a:	f7fe fc95 	bl	8000538 <__aeabi_f2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4620      	mov	r0, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	f7fe fb31 	bl	800027c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	ec43 2b17 	vmov	d7, r2, r3
 8001c22:	eeb0 0a47 	vmov.f32	s0, s14
 8001c26:	eef0 0a67 	vmov.f32	s1, s15
 8001c2a:	f00a f8f5 	bl	800be18 <floor>
 8001c2e:	ec51 0b10 	vmov	r0, r1, d0
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	18d4      	adds	r4, r2, r3
 8001c3a:	f7fe ff85 	bl	8000b48 <__aeabi_d2iz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbaa      	blt.n	8001ba6 <GenerateParabola+0x86>
	}
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	f3af 8000 	nop.w
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40000000 	.word	0x40000000

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <Error_Handler+0x8>
	...

08001c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb2:	2007      	movs	r0, #7
 8001cb4:	f000 fc56 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_I2C_MspInit+0x84>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12c      	bne.n	8001d40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d14:	2304      	movs	r3, #4
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <HAL_I2C_MspInit+0x8c>)
 8001d20:	f000 fcf4 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400

08001d54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a28      	ldr	r2, [pc, #160]	; (8001e14 <HAL_I2S_MspInit+0xc0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d14a      	bne.n	8001e0c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_I2S_MspInit+0xc4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001dca:	2310      	movs	r3, #16
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dda:	2306      	movs	r3, #6
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <HAL_I2S_MspInit+0xc8>)
 8001de6:	f000 fc91 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001dea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <HAL_I2S_MspInit+0xcc>)
 8001e08:	f000 fc80 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40003c00 	.word	0x40003c00
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020800 	.word	0x40020800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_SPI_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e7e:	23e0      	movs	r3, #224	; 0xe0
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_SPI_MspInit+0x8c>)
 8001e9a:	f000 fc37 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40013000 	.word	0x40013000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_Base_MspInit+0x40>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_TIM_Base_MspInit+0x40>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_TIM_Base_MspInit+0x40>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_TIM_MspPostInit+0x68>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d11e      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_TIM_MspPostInit+0x6c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_TIM_MspPostInit+0x6c>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_TIM_MspPostInit+0x6c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <HAL_TIM_MspPostInit+0x70>)
 8001f54:	f000 fbda 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020c00 	.word	0x40020c00

08001f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_UART_MspInit+0x94>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d133      	bne.n	8001ff6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_UART_MspInit+0x98>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <HAL_UART_MspInit+0x9c>)
 8001fe2:	f000 fb93 	bl	800270c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2026      	movs	r0, #38	; 0x26
 8001fec:	f000 fac5 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ff0:	2026      	movs	r0, #38	; 0x26
 8001ff2:	f000 fade 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40004400 	.word	0x40004400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8002016:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <MemManage_Handler+0x4>

08002028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <BusFault_Handler+0x4>

0800202e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002062:	f000 f96b 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <USART2_IRQHandler+0x10>)
 8002072:	f004 fd97 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000409c 	.word	0x2000409c

08002080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <OTG_FS_IRQHandler+0x10>)
 8002086:	f000 ff61 	bl	8002f4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20004504 	.word	0x20004504

08002094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
	return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_kill>:

int _kill(int pid, int sig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020ae:	f008 fd7b 	bl	800aba8 <__errno>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2216      	movs	r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
	return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_exit>:

void _exit (int status)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffe7 	bl	80020a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020d6:	e7fe      	b.n	80020d6 <_exit+0x12>

080020d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00a      	b.n	8002100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ea:	f3af 8000 	nop.w
 80020ee:	4601      	mov	r1, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	60ba      	str	r2, [r7, #8]
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf0      	blt.n	80020ea <_read+0x12>
	}

return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e009      	b.n	8002138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <_write+0x12>
	}
	return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002172:	605a      	str	r2, [r3, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_isatty>:

int _isatty(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return 1;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f008 fce0 	bl	800aba8 <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20020000 	.word	0x20020000
 8002214:	00000400 	.word	0x00000400
 8002218:	200000e8 	.word	0x200000e8
 800221c:	20004818 	.word	0x20004818

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800224a:	490e      	ldr	r1, [pc, #56]	; (8002284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002260:	4c0b      	ldr	r4, [pc, #44]	; (8002290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800226e:	f7ff ffd7 	bl	8002220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f008 fc9f 	bl	800abb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f7fe fe5b 	bl	8000f30 <main>
  bx  lr    
 800227a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800227c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002288:	0800e0e0 	.word	0x0800e0e0
  ldr r2, =_sbss
 800228c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002290:	20004818 	.word	0x20004818

08002294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC_IRQHandler>
	...

08002298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <HAL_Init+0x40>)
 80022a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_Init+0x40>)
 80022ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x40>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f94f 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fcd2 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023c00 	.word	0x40023c00

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f967 	bl	80025ce <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f000 f92f 	bl	800257a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000038 	.word	0x20000038
 8002334:	20000040 	.word	0x20000040
 8002338:	2000003c 	.word	0x2000003c

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000040 	.word	0x20000040
 8002360:	20004128 	.word	0x20004128

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20004128 	.word	0x20004128

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000040 	.word	0x20000040

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff feb6 	bl	8002364 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d008      	beq.n	8002618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e052      	b.n	80026be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0216 	bic.w	r2, r2, #22
 8002626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d103      	bne.n	8002648 <HAL_DMA_Abort+0x62>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0208 	bic.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	e013      	b.n	8002692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266a:	f7ff fe7b 	bl	8002364 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b05      	cmp	r3, #5
 8002676:	d90c      	bls.n	8002692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e015      	b.n	80026be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e4      	bne.n	800266a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e00c      	b.n	80026fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e16b      	b.n	8002a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 815a 	bne.w	80029fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d005      	beq.n	800275e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	2b02      	cmp	r3, #2
 800275c:	d130      	bne.n	80027c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0201 	and.w	r2, r3, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d017      	beq.n	80027fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80b4 	beq.w	80029fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a5b      	ldr	r2, [pc, #364]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_GPIO_Init+0x314>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02b      	beq.n	8002932 <HAL_GPIO_Init+0x226>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a51      	ldr	r2, [pc, #324]	; (8002a24 <HAL_GPIO_Init+0x318>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d025      	beq.n	800292e <HAL_GPIO_Init+0x222>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <HAL_GPIO_Init+0x31c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01f      	beq.n	800292a <HAL_GPIO_Init+0x21e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_GPIO_Init+0x320>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x21a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_GPIO_Init+0x324>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x216>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4d      	ldr	r2, [pc, #308]	; (8002a34 <HAL_GPIO_Init+0x328>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x212>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x20a>
 8002912:	2307      	movs	r3, #7
 8002914:	e00e      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002916:	2308      	movs	r3, #8
 8002918:	e00c      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800291a:	2306      	movs	r3, #6
 800291c:	e00a      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800291e:	2305      	movs	r3, #5
 8002920:	e008      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002922:	2304      	movs	r3, #4
 8002924:	e006      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002926:	2303      	movs	r3, #3
 8002928:	e004      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800292a:	2302      	movs	r3, #2
 800292c:	e002      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002932:	2300      	movs	r3, #0
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	f002 0203 	and.w	r2, r2, #3
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	4093      	lsls	r3, r2
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002944:	4935      	ldr	r1, [pc, #212]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_GPIO_Init+0x334>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002976:	4a32      	ldr	r2, [pc, #200]	; (8002a40 <HAL_GPIO_Init+0x334>)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_GPIO_Init+0x334>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	f67f ae90 	bls.w	8002728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40020400 	.word	0x40020400
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020c00 	.word	0x40020c00
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40021400 	.word	0x40021400
 8002a38:	40021800 	.word	0x40021800
 8002a3c:	40021c00 	.word	0x40021c00
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a60:	e003      	b.n	8002a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a78:	b08f      	sub	sp, #60	; 0x3c
 8002a7a:	af0a      	add	r7, sp, #40	; 0x28
 8002a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e054      	b.n	8002b32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f007 fdd2 	bl	800a64c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 ff28 	bl	800791c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	687e      	ldr	r6, [r7, #4]
 8002ad4:	466d      	mov	r5, sp
 8002ad6:	f106 0410 	add.w	r4, r6, #16
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aea:	1d33      	adds	r3, r6, #4
 8002aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f004 fea2 	bl	8007838 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 ff1f 	bl	800793e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	687e      	ldr	r6, [r7, #4]
 8002b08:	466d      	mov	r5, sp
 8002b0a:	f106 0410 	add.w	r4, r6, #16
 8002b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1e:	1d33      	adds	r3, r6, #4
 8002b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	f005 f886 	bl	8007c34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b089      	sub	sp, #36	; 0x24
 8002b3e:	af04      	add	r7, sp, #16
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	4608      	mov	r0, r1
 8002b44:	4611      	mov	r1, r2
 8002b46:	461a      	mov	r2, r3
 8002b48:	4603      	mov	r3, r0
 8002b4a:	70fb      	strb	r3, [r7, #3]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70bb      	strb	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_HCD_HC_Init+0x28>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e076      	b.n	8002c50 <HAL_HCD_HC_Init+0x116>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	333d      	adds	r3, #61	; 0x3d
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3338      	adds	r3, #56	; 0x38
 8002b8a:	787a      	ldrb	r2, [r7, #1]
 8002b8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3339      	adds	r3, #57	; 0x39
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333f      	adds	r3, #63	; 0x3f
 8002bc0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	78ba      	ldrb	r2, [r7, #2]
 8002bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bce:	b2d0      	uxtb	r0, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333a      	adds	r3, #58	; 0x3a
 8002bdc:	4602      	mov	r2, r0
 8002bde:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da09      	bge.n	8002bfc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	333b      	adds	r3, #59	; 0x3b
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e008      	b.n	8002c0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	333b      	adds	r3, #59	; 0x3b
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333c      	adds	r3, #60	; 0x3c
 8002c1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	787c      	ldrb	r4, [r7, #1]
 8002c28:	78ba      	ldrb	r2, [r7, #2]
 8002c2a:	78f9      	ldrb	r1, [r7, #3]
 8002c2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	f005 f973 	bl	8007f28 <USB_HC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd90      	pop	{r4, r7, pc}

08002c58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_HCD_HC_Halt+0x1e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e00f      	b.n	8002c96 <HAL_HCD_HC_Halt+0x3e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 fbaf 	bl	80083ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	70fb      	strb	r3, [r7, #3]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	70bb      	strb	r3, [r7, #2]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	333b      	adds	r3, #59	; 0x3b
 8002cc8:	78ba      	ldrb	r2, [r7, #2]
 8002cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	333f      	adds	r3, #63	; 0x3f
 8002cda:	787a      	ldrb	r2, [r7, #1]
 8002cdc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cde:	7c3b      	ldrb	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d112      	bne.n	8002d0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3342      	adds	r3, #66	; 0x42
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	333d      	adds	r3, #61	; 0x3d
 8002d04:	7f3a      	ldrb	r2, [r7, #28]
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e008      	b.n	8002d1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3342      	adds	r3, #66	; 0x42
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	f200 80c6 	bhi.w	8002eb0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002e9d 	.word	0x08002e9d
 8002d34:	08002da1 	.word	0x08002da1
 8002d38:	08002e1f 	.word	0x08002e1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d3c:	7c3b      	ldrb	r3, [r7, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 80b8 	bne.w	8002eb4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 80b4 	bne.w	8002eb4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d4c:	8b3b      	ldrh	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3355      	adds	r3, #85	; 0x55
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3355      	adds	r3, #85	; 0x55
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3342      	adds	r3, #66	; 0x42
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d8a:	e093      	b.n	8002eb4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3342      	adds	r3, #66	; 0x42
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
      break;
 8002d9e:	e089      	b.n	8002eb4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002da0:	78bb      	ldrb	r3, [r7, #2]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11d      	bne.n	8002de2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3355      	adds	r3, #85	; 0x55
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3342      	adds	r3, #66	; 0x42
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002dcc:	e073      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3342      	adds	r3, #66	; 0x42
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
      break;
 8002de0:	e069      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3354      	adds	r3, #84	; 0x54
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3342      	adds	r3, #66	; 0x42
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
      break;
 8002e08:	e055      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3342      	adds	r3, #66	; 0x42
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
      break;
 8002e1c:	e04b      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e1e:	78bb      	ldrb	r3, [r7, #2]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11d      	bne.n	8002e60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3355      	adds	r3, #85	; 0x55
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3342      	adds	r3, #66	; 0x42
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e4a:	e034      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3342      	adds	r3, #66	; 0x42
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	e02a      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3354      	adds	r3, #84	; 0x54
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3342      	adds	r3, #66	; 0x42
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
      break;
 8002e86:	e016      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3342      	adds	r3, #66	; 0x42
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
      break;
 8002e9a:	e00c      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3342      	adds	r3, #66	; 0x42
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e000      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002eb4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3344      	adds	r3, #68	; 0x44
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	8b3a      	ldrh	r2, [r7, #24]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	fb00 f303 	mul.w	r3, r0, r3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334c      	adds	r3, #76	; 0x4c
 8002ed8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3360      	adds	r3, #96	; 0x60
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3350      	adds	r3, #80	; 0x50
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3339      	adds	r3, #57	; 0x39
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3361      	adds	r3, #97	; 0x61
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	222c      	movs	r2, #44	; 0x2c
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	3338      	adds	r3, #56	; 0x38
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	18d1      	adds	r1, r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f005 f902 	bl	8008144 <USB_HC_StartXfer>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 fe25 	bl	8007bb2 <USB_GetMode>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	f040 80f6 	bne.w	800315c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 fe09 	bl	8007b8c <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80ec 	beq.w	800315a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fe00 	bl	8007b8c <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f96:	d104      	bne.n	8002fa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fdf0 	bl	8007b8c <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d104      	bne.n	8002fc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fde0 	bl	8007b8c <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd6:	d104      	bne.n	8002fe2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fdd0 	bl	8007b8c <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d103      	bne.n	8002ffe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fdc2 	bl	8007b8c <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003012:	d11c      	bne.n	800304e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800301c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800302e:	2110      	movs	r1, #16
 8003030:	6938      	ldr	r0, [r7, #16]
 8003032:	f004 fcd1 	bl	80079d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003036:	6938      	ldr	r0, [r7, #16]
 8003038:	f004 fcf2 	bl	8007a20 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f004 feaa 	bl	8007d9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f007 fb7d 	bl	800a748 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fd9a 	bl	8007b8c <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003062:	d102      	bne.n	800306a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f001 fa03 	bl	8004470 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fd8c 	bl	8007b8c <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d106      	bne.n	800308c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f007 fb46 	bl	800a710 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f004 fd7b 	bl	8007b8c <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d101      	bne.n	80030a4 <HAL_HCD_IRQHandler+0x158>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_HCD_IRQHandler+0x15a>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0210 	bic.w	r2, r2, #16
 80030b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f001 f906 	bl	80042cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0210 	orr.w	r2, r2, #16
 80030ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 fd59 	bl	8007b8c <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030e4:	d13a      	bne.n	800315c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f005 f96c 	bl	80083c8 <USB_HC_ReadInterrupt>
 80030f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e025      	b.n	8003144 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d106      	bne.n	8003132 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8ab 	bl	8003286 <HCD_HC_IN_IRQHandler>
 8003130:	e005      	b.n	800313e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fcc6 	bl	8003aca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3d4      	bcc.n	80030f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003156:	615a      	str	r2, [r3, #20]
 8003158:	e000      	b.n	800315c <HAL_HCD_IRQHandler+0x210>
      return;
 800315a:	bf00      	nop
    }
  }
}
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_HCD_Start+0x16>
 8003174:	2302      	movs	r3, #2
 8003176:	e013      	b.n	80031a0 <HAL_HCD_Start+0x3e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fe6c 	bl	8007e64 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fbb2 	bl	80078fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_HCD_Stop+0x16>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00d      	b.n	80031da <HAL_HCD_Stop+0x32>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fa66 	bl	800869c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fe0e 	bl	8007e10 <USB_ResetPort>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	781b      	ldrb	r3, [r3, #0]
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3350      	adds	r3, #80	; 0x50
 8003240:	681b      	ldr	r3, [r3, #0]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fe52 	bl	8007f04 <USB_GetCurrentFrame>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fe2d 	bl	8007ed6 <USB_GetHostSpeed>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d119      	bne.n	80032ea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2304      	movs	r3, #4
 80032c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
 80032e8:	e101      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d12b      	bne.n	800335a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003314:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3361      	adds	r3, #97	; 0x61
 8003324:	2207      	movs	r2, #7
 8003326:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	440a      	add	r2, r1
 800333e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f005 f849 	bl	80083ea <USB_HC_Halt>
 8003358:	e0c9      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b20      	cmp	r3, #32
 800336e:	d109      	bne.n	8003384 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	461a      	mov	r2, r3
 800337e:	2320      	movs	r3, #32
 8003380:	6093      	str	r3, [r2, #8]
 8003382:	e0b4      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b08      	cmp	r3, #8
 8003398:	d133      	bne.n	8003402 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3361      	adds	r3, #97	; 0x61
 80033c8:	2205      	movs	r2, #5
 80033ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	461a      	mov	r2, r3
 80033da:	2310      	movs	r3, #16
 80033dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	461a      	mov	r2, r3
 80033ec:	2308      	movs	r3, #8
 80033ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 fff5 	bl	80083ea <USB_HC_Halt>
 8003400:	e075      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d134      	bne.n	8003484 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	440a      	add	r2, r1
 8003430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3361      	adds	r3, #97	; 0x61
 8003448:	2208      	movs	r2, #8
 800344a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2310      	movs	r3, #16
 800345c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003470:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f004 ffb4 	bl	80083ea <USB_HC_Halt>
 8003482:	e034      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d129      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3361      	adds	r3, #97	; 0x61
 80034c8:	2206      	movs	r2, #6
 80034ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 ff87 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d122      	bne.n	800354c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	0151      	lsls	r1, r2, #5
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	440a      	add	r2, r1
 800351c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f004 ff5a 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003548:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800354a:	e2ba      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	f040 811b 	bne.w	800379a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d019      	beq.n	80035a0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3348      	adds	r3, #72	; 0x48
 800357a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	440b      	add	r3, r1
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	202c      	movs	r0, #44	; 0x2c
 8003596:	fb00 f303 	mul.w	r3, r0, r3
 800359a:	440b      	add	r3, r1
 800359c:	3350      	adds	r3, #80	; 0x50
 800359e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3361      	adds	r3, #97	; 0x61
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2301      	movs	r3, #1
 80035d4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	333f      	adds	r3, #63	; 0x3f
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	333f      	adds	r3, #63	; 0x3f
 80035f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d121      	bne.n	8003642 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f004 fede 	bl	80083ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2310      	movs	r3, #16
 800363e:	6093      	str	r3, [r2, #8]
 8003640:	e066      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	333f      	adds	r3, #63	; 0x3f
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d127      	bne.n	80036a6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	0151      	lsls	r1, r2, #5
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	440a      	add	r2, r1
 800366c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003674:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3360      	adds	r3, #96	; 0x60
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	b2d9      	uxtb	r1, r3
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	202c      	movs	r0, #44	; 0x2c
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	4413      	add	r3, r2
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f007 f860 	bl	800a764 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036a4:	e034      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	333f      	adds	r3, #63	; 0x3f
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d12a      	bne.n	8003710 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3360      	adds	r3, #96	; 0x60
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3354      	adds	r3, #84	; 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3354      	adds	r3, #84	; 0x54
 80036f0:	4602      	mov	r2, r0
 80036f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	b2d9      	uxtb	r1, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	202c      	movs	r0, #44	; 0x2c
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	4413      	add	r3, r2
 8003704:	3360      	adds	r3, #96	; 0x60
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f007 f82a 	bl	800a764 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d12b      	bne.n	8003770 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	202c      	movs	r0, #44	; 0x2c
 800372e:	fb00 f202 	mul.w	r2, r0, r2
 8003732:	440a      	add	r2, r1
 8003734:	3240      	adds	r2, #64	; 0x40
 8003736:	8812      	ldrh	r2, [r2, #0]
 8003738:	fbb3 f3f2 	udiv	r3, r3, r2
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 81be 	beq.w	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	3354      	adds	r3, #84	; 0x54
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	f083 0301 	eor.w	r3, r3, #1
 800375a:	b2d8      	uxtb	r0, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3354      	adds	r3, #84	; 0x54
 800376a:	4602      	mov	r2, r0
 800376c:	701a      	strb	r2, [r3, #0]
}
 800376e:	e1a8      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	3354      	adds	r3, #84	; 0x54
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2d8      	uxtb	r0, r3
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	3354      	adds	r3, #84	; 0x54
 8003794:	4602      	mov	r2, r0
 8003796:	701a      	strb	r2, [r3, #0]
}
 8003798:	e193      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	f040 8106 	bne.w	80039be <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037cc:	f023 0302 	bic.w	r3, r3, #2
 80037d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3361      	adds	r3, #97	; 0x61
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d109      	bne.n	80037fa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e0c9      	b.n	800398e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3361      	adds	r3, #97	; 0x61
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d109      	bne.n	8003822 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3360      	adds	r3, #96	; 0x60
 800381c:	2205      	movs	r2, #5
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e0b5      	b.n	800398e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	3361      	adds	r3, #97	; 0x61
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d009      	beq.n	800384a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	3361      	adds	r3, #97	; 0x61
 8003844:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003846:	2b08      	cmp	r3, #8
 8003848:	d150      	bne.n	80038ec <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	335c      	adds	r3, #92	; 0x5c
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	202c      	movs	r0, #44	; 0x2c
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	440b      	add	r3, r1
 8003868:	335c      	adds	r3, #92	; 0x5c
 800386a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	335c      	adds	r3, #92	; 0x5c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d912      	bls.n	80038a6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	212c      	movs	r1, #44	; 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	; 0x60
 80038a0:	2204      	movs	r2, #4
 80038a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038a4:	e073      	b.n	800398e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3360      	adds	r3, #96	; 0x60
 80038b4:	2202      	movs	r2, #2
 80038b6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ce:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038ea:	e050      	b.n	800398e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3361      	adds	r3, #97	; 0x61
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d122      	bne.n	8003946 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3360      	adds	r3, #96	; 0x60
 800390e:	2202      	movs	r2, #2
 8003910:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003928:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003930:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e023      	b.n	800398e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3361      	adds	r3, #97	; 0x61
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d119      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	335c      	adds	r3, #92	; 0x5c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	202c      	movs	r0, #44	; 0x2c
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	440b      	add	r3, r1
 8003978:	335c      	adds	r3, #92	; 0x5c
 800397a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3360      	adds	r3, #96	; 0x60
 800398a:	2204      	movs	r2, #4
 800398c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2302      	movs	r3, #2
 800399e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	b2d9      	uxtb	r1, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	202c      	movs	r0, #44	; 0x2c
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f006 fed4 	bl	800a764 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039bc:	e081      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d176      	bne.n	8003ac2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	333f      	adds	r3, #63	; 0x3f
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d121      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	335c      	adds	r3, #92	; 0x5c
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fce0 	bl	80083ea <USB_HC_Halt>
 8003a2a:	e041      	b.n	8003ab0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	333f      	adds	r3, #63	; 0x3f
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	333f      	adds	r3, #63	; 0x3f
 8003a4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d12d      	bne.n	8003ab0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	335c      	adds	r3, #92	; 0x5c
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d120      	bne.n	8003ab0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	3361      	adds	r3, #97	; 0x61
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fc9d 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	2310      	movs	r3, #16
 8003ac0:	6093      	str	r3, [r2, #8]
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b088      	sub	sp, #32
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d119      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2304      	movs	r3, #4
 8003b0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b26:	f043 0302 	orr.w	r3, r3, #2
 8003b2a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003b2c:	e3ca      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d13e      	bne.n	8003bc2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b50:	461a      	mov	r2, r3
 8003b52:	2320      	movs	r3, #32
 8003b54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	333d      	adds	r3, #61	; 0x3d
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	f040 83ac 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	333d      	adds	r3, #61	; 0x3d
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3360      	adds	r3, #96	; 0x60
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 fc15 	bl	80083ea <USB_HC_Halt>
}
 8003bc0:	e380      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d122      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fbf0 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c1c:	6093      	str	r3, [r2, #8]
}
 8003c1e:	e351      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d150      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d111      	bne.n	8003c82 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333d      	adds	r3, #61	; 0x3d
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f004 fb9c 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3361      	adds	r3, #97	; 0x61
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
}
 8003cd6:	e2f5      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d13c      	bne.n	8003d68 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3361      	adds	r3, #97	; 0x61
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	333d      	adds	r3, #61	; 0x3d
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	335c      	adds	r3, #92	; 0x5c
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fb4b 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	461a      	mov	r2, r3
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	6093      	str	r3, [r2, #8]
}
 8003d66:	e2ad      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d12a      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fb15 	bl	80083ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	2205      	movs	r2, #5
 8003dd0:	701a      	strb	r2, [r3, #0]
}
 8003dd2:	e277      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d150      	bne.n	8003e8c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	335c      	adds	r3, #92	; 0x5c
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3361      	adds	r3, #97	; 0x61
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	333d      	adds	r3, #61	; 0x3d
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d112      	bne.n	8003e48 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	333c      	adds	r3, #60	; 0x3c
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	333d      	adds	r3, #61	; 0x3d
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f004 fab9 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2310      	movs	r3, #16
 8003e88:	6093      	str	r3, [r2, #8]
}
 8003e8a:	e21b      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d174      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d121      	bne.n	8003eee <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3361      	adds	r3, #97	; 0x61
 8003eb8:	2206      	movs	r2, #6
 8003eba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 fa7f 	bl	80083ea <USB_HC_Halt>
 8003eec:	e044      	b.n	8003f78 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	335c      	adds	r3, #92	; 0x5c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	202c      	movs	r0, #44	; 0x2c
 8003f06:	fb00 f303 	mul.w	r3, r0, r3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	335c      	adds	r3, #92	; 0x5c
 8003f0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	335c      	adds	r3, #92	; 0x5c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d920      	bls.n	8003f66 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	335c      	adds	r3, #92	; 0x5c
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3360      	adds	r3, #96	; 0x60
 8003f44:	2204      	movs	r2, #4
 8003f46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	b2d9      	uxtb	r1, r3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	202c      	movs	r0, #44	; 0x2c
 8003f52:	fb00 f303 	mul.w	r3, r0, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3360      	adds	r3, #96	; 0x60
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f006 fc00 	bl	800a764 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f64:	e008      	b.n	8003f78 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	3360      	adds	r3, #96	; 0x60
 8003f74:	2202      	movs	r2, #2
 8003f76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f84:	461a      	mov	r2, r3
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	6093      	str	r3, [r2, #8]
}
 8003f8a:	e19b      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d134      	bne.n	800400e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 fa0b 	bl	80083ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3361      	adds	r3, #97	; 0x61
 8004008:	2208      	movs	r2, #8
 800400a:	701a      	strb	r2, [r3, #0]
}
 800400c:	e15a      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	f040 814f 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004040:	f023 0302 	bic.w	r3, r3, #2
 8004044:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3361      	adds	r3, #97	; 0x61
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d17d      	bne.n	8004156 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3360      	adds	r3, #96	; 0x60
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	333f      	adds	r3, #63	; 0x3f
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d00a      	beq.n	8004096 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	333f      	adds	r3, #63	; 0x3f
 800408e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004090:	2b03      	cmp	r3, #3
 8004092:	f040 8100 	bne.w	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3355      	adds	r3, #85	; 0x55
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2d8      	uxtb	r0, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3355      	adds	r3, #85	; 0x55
 80040c2:	4602      	mov	r2, r0
 80040c4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	f040 80e3 	bne.w	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	334c      	adds	r3, #76	; 0x4c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80d8 	beq.w	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	334c      	adds	r3, #76	; 0x4c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	202c      	movs	r0, #44	; 0x2c
 80040fc:	fb00 f202 	mul.w	r2, r0, r2
 8004100:	440a      	add	r2, r1
 8004102:	3240      	adds	r2, #64	; 0x40
 8004104:	8812      	ldrh	r2, [r2, #0]
 8004106:	4413      	add	r3, r2
 8004108:	3b01      	subs	r3, #1
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	202c      	movs	r0, #44	; 0x2c
 8004110:	fb00 f202 	mul.w	r2, r0, r2
 8004114:	440a      	add	r2, r1
 8004116:	3240      	adds	r2, #64	; 0x40
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	fbb3 f3f2 	udiv	r3, r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80b5 	beq.w	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3355      	adds	r3, #85	; 0x55
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f083 0301 	eor.w	r3, r3, #1
 8004140:	b2d8      	uxtb	r0, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3355      	adds	r3, #85	; 0x55
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e09f      	b.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3361      	adds	r3, #97	; 0x61
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d109      	bne.n	800417e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	3360      	adds	r3, #96	; 0x60
 8004178:	2202      	movs	r2, #2
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e08b      	b.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3361      	adds	r3, #97	; 0x61
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d109      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3360      	adds	r3, #96	; 0x60
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e077      	b.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	3361      	adds	r3, #97	; 0x61
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d109      	bne.n	80041ce <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3360      	adds	r3, #96	; 0x60
 80041c8:	2205      	movs	r2, #5
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e063      	b.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3361      	adds	r3, #97	; 0x61
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d009      	beq.n	80041f6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3361      	adds	r3, #97	; 0x61
 80041f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d14f      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	335c      	adds	r3, #92	; 0x5c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	202c      	movs	r0, #44	; 0x2c
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	440b      	add	r3, r1
 8004214:	335c      	adds	r3, #92	; 0x5c
 8004216:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	335c      	adds	r3, #92	; 0x5c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d912      	bls.n	8004252 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	335c      	adds	r3, #92	; 0x5c
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	3360      	adds	r3, #96	; 0x60
 800424c:	2204      	movs	r2, #4
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e021      	b.n	8004296 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	3360      	adds	r3, #96	; 0x60
 8004260:	2202      	movs	r2, #2
 8004262:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800427a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004282:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	461a      	mov	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2302      	movs	r3, #2
 80042a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	202c      	movs	r0, #44	; 0x2c
 80042b2:	fb00 f303 	mul.w	r3, r0, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3360      	adds	r3, #96	; 0x60
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f006 fa50 	bl	800a764 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042c4:	bf00      	nop
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	0c5b      	lsrs	r3, r3, #17
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004300:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d004      	beq.n	8004312 <HCD_RXQLVL_IRQHandler+0x46>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b05      	cmp	r3, #5
 800430c:	f000 80a9 	beq.w	8004462 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004310:	e0aa      	b.n	8004468 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a6 	beq.w	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3344      	adds	r3, #68	; 0x44
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 809b 	beq.w	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	3350      	adds	r3, #80	; 0x50
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	441a      	add	r2, r3
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	202c      	movs	r0, #44	; 0x2c
 800434a:	fb00 f303 	mul.w	r3, r0, r3
 800434e:	440b      	add	r3, r1
 8004350:	334c      	adds	r3, #76	; 0x4c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d87a      	bhi.n	800444e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3344      	adds	r3, #68	; 0x44
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	b292      	uxth	r2, r2
 8004370:	4619      	mov	r1, r3
 8004372:	f003 fbb3 	bl	8007adc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	3344      	adds	r3, #68	; 0x44
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	441a      	add	r2, r3
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	202c      	movs	r0, #44	; 0x2c
 8004390:	fb00 f303 	mul.w	r3, r0, r3
 8004394:	440b      	add	r3, r1
 8004396:	3344      	adds	r3, #68	; 0x44
 8004398:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3350      	adds	r3, #80	; 0x50
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	441a      	add	r2, r3
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	202c      	movs	r0, #44	; 0x2c
 80043b4:	fb00 f303 	mul.w	r3, r0, r3
 80043b8:	440b      	add	r3, r1
 80043ba:	3350      	adds	r3, #80	; 0x50
 80043bc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	0cdb      	lsrs	r3, r3, #19
 80043ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3340      	adds	r3, #64	; 0x40
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d13c      	bne.n	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d039      	beq.n	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004408:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004410:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3354      	adds	r3, #84	; 0x54
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	f083 0301 	eor.w	r3, r3, #1
 8004438:	b2d8      	uxtb	r0, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	3354      	adds	r3, #84	; 0x54
 8004448:	4602      	mov	r2, r0
 800444a:	701a      	strb	r2, [r3, #0]
      break;
 800444c:	e00b      	b.n	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3360      	adds	r3, #96	; 0x60
 800445c:	2204      	movs	r2, #4
 800445e:	701a      	strb	r2, [r3, #0]
      break;
 8004460:	e001      	b.n	8004466 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004466:	bf00      	nop
  }
}
 8004468:	bf00      	nop
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800449c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d10b      	bne.n	80044c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f006 f93a 	bl	800a72c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f043 0302 	orr.w	r3, r3, #2
 80044be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d132      	bne.n	8004530 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d126      	bne.n	800452a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d113      	bne.n	800450c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ee:	d106      	bne.n	80044fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 fc50 	bl	8007d9c <USB_InitFSLSPClkSel>
 80044fc:	e011      	b.n	8004522 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f003 fc49 	bl	8007d9c <USB_InitFSLSPClkSel>
 800450a:	e00a      	b.n	8004522 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d106      	bne.n	8004522 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451a:	461a      	mov	r2, r3
 800451c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004520:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f006 f92c 	bl	800a780 <HAL_HCD_PortEnabled_Callback>
 8004528:	e002      	b.n	8004530 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f006 f936 	bl	800a79c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d103      	bne.n	8004542 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6013      	str	r3, [r2, #0]
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e12b      	b.n	80047c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd fba0 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045bc:	f001 f9fc 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 80045c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a81      	ldr	r2, [pc, #516]	; (80047cc <HAL_I2C_Init+0x274>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d807      	bhi.n	80045dc <HAL_I2C_Init+0x84>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <HAL_I2C_Init+0x278>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bf94      	ite	ls
 80045d4:	2301      	movls	r3, #1
 80045d6:	2300      	movhi	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e006      	b.n	80045ea <HAL_I2C_Init+0x92>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a7d      	ldr	r2, [pc, #500]	; (80047d4 <HAL_I2C_Init+0x27c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0e7      	b.n	80047c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a78      	ldr	r2, [pc, #480]	; (80047d8 <HAL_I2C_Init+0x280>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0c9b      	lsrs	r3, r3, #18
 80045fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <HAL_I2C_Init+0x274>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d802      	bhi.n	800462c <HAL_I2C_Init+0xd4>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	e009      	b.n	8004640 <HAL_I2C_Init+0xe8>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	4a69      	ldr	r2, [pc, #420]	; (80047dc <HAL_I2C_Init+0x284>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	3301      	adds	r3, #1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	430b      	orrs	r3, r1
 8004646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	495c      	ldr	r1, [pc, #368]	; (80047cc <HAL_I2C_Init+0x274>)
 800465c:	428b      	cmp	r3, r1
 800465e:	d819      	bhi.n	8004694 <HAL_I2C_Init+0x13c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e59      	subs	r1, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fbb1 f3f3 	udiv	r3, r1, r3
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004674:	400b      	ands	r3, r1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_I2C_Init+0x138>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e59      	subs	r1, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fbb1 f3f3 	udiv	r3, r1, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	e051      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004690:	2304      	movs	r3, #4
 8004692:	e04f      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d111      	bne.n	80046c0 <HAL_I2C_Init+0x168>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e012      	b.n	80046e6 <HAL_I2C_Init+0x18e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Init+0x196>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e022      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10e      	bne.n	8004714 <HAL_I2C_Init+0x1bc>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1e58      	subs	r0, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	440b      	add	r3, r1
 8004704:	fbb0 f3f3 	udiv	r3, r0, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	e00f      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1e58      	subs	r0, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	0099      	lsls	r1, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	6809      	ldr	r1, [r1, #0]
 8004738:	4313      	orrs	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6911      	ldr	r1, [r2, #16]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68d2      	ldr	r2, [r2, #12]
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	000186a0 	.word	0x000186a0
 80047d0:	001e847f 	.word	0x001e847f
 80047d4:	003d08ff 	.word	0x003d08ff
 80047d8:	431bde83 	.word	0x431bde83
 80047dc:	10624dd3 	.word	0x10624dd3

080047e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e128      	b.n	8004a44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a90      	ldr	r2, [pc, #576]	; (8004a4c <HAL_I2S_Init+0x26c>)
 800480a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fd faa1 	bl	8001d54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004828:	f023 030f 	bic.w	r3, r3, #15
 800482c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2202      	movs	r2, #2
 8004834:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d060      	beq.n	8004900 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004846:	2310      	movs	r3, #16
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e001      	b.n	8004850 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b20      	cmp	r3, #32
 8004856:	d802      	bhi.n	800485e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800485e:	2001      	movs	r0, #1
 8004860:	f001 f9b4 	bl	8005bcc <HAL_RCCEx_GetPeriphCLKFreq>
 8004864:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486e:	d125      	bne.n	80048bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	3305      	adds	r3, #5
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e01f      	b.n	80048da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	3305      	adds	r3, #5
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e00e      	b.n	80048da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	3305      	adds	r3, #5
 80048d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4a5c      	ldr	r2, [pc, #368]	; (8004a50 <HAL_I2S_Init+0x270>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004900:	2302      	movs	r3, #2
 8004902:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d902      	bls.n	8004914 <HAL_I2S_Init+0x134>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	d907      	bls.n	8004924 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e08f      	b.n	8004a44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	ea42 0103 	orr.w	r1, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	430a      	orrs	r2, r1
 8004936:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6851      	ldr	r1, [r2, #4]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	4311      	orrs	r1, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	4311      	orrs	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6992      	ldr	r2, [r2, #24]
 800495a:	430a      	orrs	r2, r1
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004966:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d161      	bne.n	8004a34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_I2S_Init+0x274>)
 8004974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <HAL_I2S_Init+0x278>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <HAL_I2S_Init+0x1a4>
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <HAL_I2S_Init+0x27c>)
 8004982:	e001      	b.n	8004988 <HAL_I2S_Init+0x1a8>
 8004984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4932      	ldr	r1, [pc, #200]	; (8004a58 <HAL_I2S_Init+0x278>)
 8004990:	428a      	cmp	r2, r1
 8004992:	d101      	bne.n	8004998 <HAL_I2S_Init+0x1b8>
 8004994:	4a31      	ldr	r2, [pc, #196]	; (8004a5c <HAL_I2S_Init+0x27c>)
 8004996:	e001      	b.n	800499c <HAL_I2S_Init+0x1bc>
 8004998:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800499c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049a0:	f023 030f 	bic.w	r3, r3, #15
 80049a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <HAL_I2S_Init+0x278>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_I2S_Init+0x1d4>
 80049b0:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <HAL_I2S_Init+0x27c>)
 80049b2:	e001      	b.n	80049b8 <HAL_I2S_Init+0x1d8>
 80049b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b8:	2202      	movs	r2, #2
 80049ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <HAL_I2S_Init+0x278>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_I2S_Init+0x1ea>
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <HAL_I2S_Init+0x27c>)
 80049c8:	e001      	b.n	80049ce <HAL_I2S_Init+0x1ee>
 80049ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049da:	d003      	beq.n	80049e4 <HAL_I2S_Init+0x204>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80049e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e001      	b.n	80049f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a04:	4313      	orrs	r3, r2
 8004a06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a0d      	ldr	r2, [pc, #52]	; (8004a58 <HAL_I2S_Init+0x278>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_I2S_Init+0x24c>
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_I2S_Init+0x27c>)
 8004a2a:	e001      	b.n	8004a30 <HAL_I2S_Init+0x250>
 8004a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a30:	897a      	ldrh	r2, [r7, #10]
 8004a32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	08004b57 	.word	0x08004b57
 8004a50:	cccccccd 	.word	0xcccccccd
 8004a54:	08004c6d 	.word	0x08004c6d
 8004a58:	40003800 	.word	0x40003800
 8004a5c:	40003400 	.word	0x40003400

08004a60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10e      	bne.n	8004af0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ae0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffb8 	bl	8004a60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10e      	bne.n	8004b4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff93 	bl	8004a74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d13a      	bne.n	8004be8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d109      	bne.n	8004b90 <I2S_IRQHandler+0x3a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d102      	bne.n	8004b90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ffb4 	bl	8004af8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d126      	bne.n	8004be8 <I2S_IRQHandler+0x92>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d11f      	bne.n	8004be8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0202 	orr.w	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff50 	bl	8004a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d136      	bne.n	8004c62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d109      	bne.n	8004c12 <I2S_IRQHandler+0xbc>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d102      	bne.n	8004c12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff45 	bl	8004a9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d122      	bne.n	8004c62 <I2S_IRQHandler+0x10c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d11b      	bne.n	8004c62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f043 0204 	orr.w	r2, r3, #4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff13 	bl	8004a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4aa2      	ldr	r2, [pc, #648]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d101      	bne.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c86:	4ba2      	ldr	r3, [pc, #648]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c88:	e001      	b.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a9b      	ldr	r2, [pc, #620]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ca4:	4b9a      	ldr	r3, [pc, #616]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca6:	e001      	b.n	8004cac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d004      	beq.n	8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 8099 	bne.w	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d107      	bne.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f925 	bl	8004f28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9c8 	bl	8005088 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d13a      	bne.n	8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d035      	beq.n	8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a7e      	ldr	r2, [pc, #504]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d16:	4b7e      	ldr	r3, [pc, #504]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d18:	e001      	b.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4979      	ldr	r1, [pc, #484]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d101      	bne.n	8004d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004d2a:	4b79      	ldr	r3, [pc, #484]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d2c:	e001      	b.n	8004d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	f043 0202 	orr.w	r2, r3, #2
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fe88 	bl	8004a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	f040 80be 	bne.w	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80b8 	beq.w	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a59      	ldr	r2, [pc, #356]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004daa:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dac:	e001      	b.n	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4954      	ldr	r1, [pc, #336]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dba:	428b      	cmp	r3, r1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004dbe:	4b54      	ldr	r3, [pc, #336]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dc0:	e001      	b.n	8004dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fe4a 	bl	8004a88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004df4:	e084      	b.n	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d107      	bne.n	8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8be 	bl	8004f8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8fd 	bl	8005024 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d12f      	bne.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02a      	beq.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2e      	ldr	r2, [pc, #184]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e58:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e5a:	e001      	b.n	8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4929      	ldr	r1, [pc, #164]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	d101      	bne.n	8004e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e6e:	e001      	b.n	8004e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fdfa 	bl	8004a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d131      	bne.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02c      	beq.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eb4:	e001      	b.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4912      	ldr	r1, [pc, #72]	; (8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ec2:	428b      	cmp	r3, r1
 8004ec4:	d101      	bne.n	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ec8:	e001      	b.n	8004ece <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ed2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fdc5 	bl	8004a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004efe:	e000      	b.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f00:	bf00      	nop
}
 8004f02:	bf00      	nop
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40003800 	.word	0x40003800
 8004f10:	40003400 	.word	0x40003400

08004f14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c99      	adds	r1, r3, #2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6251      	str	r1, [r2, #36]	; 0x24
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffc9 	bl	8004f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	1c99      	adds	r1, r3, #2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6251      	str	r1, [r2, #36]	; 0x24
 8004f9e:	8819      	ldrh	r1, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <I2SEx_TxISR_I2SExt+0x90>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <I2SEx_TxISR_I2SExt+0x22>
 8004faa:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <I2SEx_TxISR_I2SExt+0x94>)
 8004fac:	e001      	b.n	8004fb2 <I2SEx_TxISR_I2SExt+0x26>
 8004fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d121      	bne.n	8005012 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <I2SEx_TxISR_I2SExt+0x90>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <I2SEx_TxISR_I2SExt+0x50>
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <I2SEx_TxISR_I2SExt+0x94>)
 8004fda:	e001      	b.n	8004fe0 <I2SEx_TxISR_I2SExt+0x54>
 8004fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	490d      	ldr	r1, [pc, #52]	; (800501c <I2SEx_TxISR_I2SExt+0x90>)
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	d101      	bne.n	8004ff0 <I2SEx_TxISR_I2SExt+0x64>
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <I2SEx_TxISR_I2SExt+0x94>)
 8004fee:	e001      	b.n	8004ff4 <I2SEx_TxISR_I2SExt+0x68>
 8004ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ff8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff81 	bl	8004f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40003800 	.word	0x40003800
 8005020:	40003400 	.word	0x40003400

08005024 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68d8      	ldr	r0, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	1c99      	adds	r1, r3, #2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800503c:	b282      	uxth	r2, r0
 800503e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d113      	bne.n	8005080 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005066:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ff4a 	bl	8004f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <I2SEx_RxISR_I2SExt+0x90>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <I2SEx_RxISR_I2SExt+0x16>
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <I2SEx_RxISR_I2SExt+0x94>)
 800509c:	e001      	b.n	80050a2 <I2SEx_RxISR_I2SExt+0x1a>
 800509e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a2:	68d8      	ldr	r0, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	1c99      	adds	r1, r3, #2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050ae:	b282      	uxth	r2, r0
 80050b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d121      	bne.n	800510e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <I2SEx_RxISR_I2SExt+0x90>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <I2SEx_RxISR_I2SExt+0x50>
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <I2SEx_RxISR_I2SExt+0x94>)
 80050d6:	e001      	b.n	80050dc <I2SEx_RxISR_I2SExt+0x54>
 80050d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	490d      	ldr	r1, [pc, #52]	; (8005118 <I2SEx_RxISR_I2SExt+0x90>)
 80050e4:	428b      	cmp	r3, r1
 80050e6:	d101      	bne.n	80050ec <I2SEx_RxISR_I2SExt+0x64>
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <I2SEx_RxISR_I2SExt+0x94>)
 80050ea:	e001      	b.n	80050f0 <I2SEx_RxISR_I2SExt+0x68>
 80050ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff03 	bl	8004f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40003800 	.word	0x40003800
 800511c:	40003400 	.word	0x40003400

08005120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e264      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d075      	beq.n	800522a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800513e:	4ba3      	ldr	r3, [pc, #652]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b04      	cmp	r3, #4
 8005148:	d00c      	beq.n	8005164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800514a:	4ba0      	ldr	r3, [pc, #640]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005152:	2b08      	cmp	r3, #8
 8005154:	d112      	bne.n	800517c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005156:	4b9d      	ldr	r3, [pc, #628]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005162:	d10b      	bne.n	800517c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	4b99      	ldr	r3, [pc, #612]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05b      	beq.n	8005228 <HAL_RCC_OscConfig+0x108>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d157      	bne.n	8005228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e23f      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005184:	d106      	bne.n	8005194 <HAL_RCC_OscConfig+0x74>
 8005186:	4b91      	ldr	r3, [pc, #580]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a90      	ldr	r2, [pc, #576]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e01d      	b.n	80051d0 <HAL_RCC_OscConfig+0xb0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x98>
 800519e:	4b8b      	ldr	r3, [pc, #556]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a8a      	ldr	r2, [pc, #552]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b88      	ldr	r3, [pc, #544]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a87      	ldr	r2, [pc, #540]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_OscConfig+0xb0>
 80051b8:	4b84      	ldr	r3, [pc, #528]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a83      	ldr	r2, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b81      	ldr	r3, [pc, #516]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a80      	ldr	r2, [pc, #512]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d013      	beq.n	8005200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fd f8c4 	bl	8002364 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e0:	f7fd f8c0 	bl	8002364 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e204      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	4b76      	ldr	r3, [pc, #472]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0xc0>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fd f8b0 	bl	8002364 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005208:	f7fd f8ac 	bl	8002364 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1f0      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521a:	4b6c      	ldr	r3, [pc, #432]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0xe8>
 8005226:	e000      	b.n	800522a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d063      	beq.n	80052fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005236:	4b65      	ldr	r3, [pc, #404]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005242:	4b62      	ldr	r3, [pc, #392]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800524a:	2b08      	cmp	r3, #8
 800524c:	d11c      	bne.n	8005288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524e:	4b5f      	ldr	r3, [pc, #380]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d116      	bne.n	8005288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525a:	4b5c      	ldr	r3, [pc, #368]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_RCC_OscConfig+0x152>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e1c4      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005272:	4b56      	ldr	r3, [pc, #344]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4952      	ldr	r1, [pc, #328]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005282:	4313      	orrs	r3, r2
 8005284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005286:	e03a      	b.n	80052fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d020      	beq.n	80052d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005290:	4b4f      	ldr	r3, [pc, #316]	; (80053d0 <HAL_RCC_OscConfig+0x2b0>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fd f865 	bl	8002364 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800529e:	f7fd f861 	bl	8002364 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e1a5      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b0:	4b46      	ldr	r3, [pc, #280]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052bc:	4b43      	ldr	r3, [pc, #268]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4940      	ldr	r1, [pc, #256]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
 80052d0:	e015      	b.n	80052fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d2:	4b3f      	ldr	r3, [pc, #252]	; (80053d0 <HAL_RCC_OscConfig+0x2b0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd f844 	bl	8002364 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fd f840 	bl	8002364 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e184      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d030      	beq.n	800536c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005312:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <HAL_RCC_OscConfig+0x2b4>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fd f824 	bl	8002364 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005320:	f7fd f820 	bl	8002364 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e164      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x200>
 800533e:	e015      	b.n	800536c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_OscConfig+0x2b4>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005346:	f7fd f80d 	bl	8002364 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534e:	f7fd f809 	bl	8002364 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e14d      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80a0 	beq.w	80054ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537a:	2300      	movs	r3, #0
 800537c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10f      	bne.n	80053aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 8005394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005398:	6413      	str	r3, [r2, #64]	; 0x40
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_RCC_OscConfig+0x2ac>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_OscConfig+0x2b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d121      	bne.n	80053fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_RCC_OscConfig+0x2b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <HAL_RCC_OscConfig+0x2b8>)
 80053bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c2:	f7fc ffcf 	bl	8002364 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c8:	e011      	b.n	80053ee <HAL_RCC_OscConfig+0x2ce>
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	42470000 	.word	0x42470000
 80053d4:	42470e80 	.word	0x42470e80
 80053d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053dc:	f7fc ffc2 	bl	8002364 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e106      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ee:	4b85      	ldr	r3, [pc, #532]	; (8005604 <HAL_RCC_OscConfig+0x4e4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x2f0>
 8005402:	4b81      	ldr	r3, [pc, #516]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a80      	ldr	r2, [pc, #512]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
 800540e:	e01c      	b.n	800544a <HAL_RCC_OscConfig+0x32a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b05      	cmp	r3, #5
 8005416:	d10c      	bne.n	8005432 <HAL_RCC_OscConfig+0x312>
 8005418:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	4a7a      	ldr	r2, [pc, #488]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	6713      	str	r3, [r2, #112]	; 0x70
 8005424:	4b78      	ldr	r3, [pc, #480]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a77      	ldr	r2, [pc, #476]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	e00b      	b.n	800544a <HAL_RCC_OscConfig+0x32a>
 8005432:	4b75      	ldr	r3, [pc, #468]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	4a74      	ldr	r2, [pc, #464]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	6713      	str	r3, [r2, #112]	; 0x70
 800543e:	4b72      	ldr	r3, [pc, #456]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a71      	ldr	r2, [pc, #452]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d015      	beq.n	800547e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fc ff87 	bl	8002364 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc ff83 	bl	8002364 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0c5      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCC_OscConfig+0x33a>
 800547c:	e014      	b.n	80054a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547e:	f7fc ff71 	bl	8002364 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005484:	e00a      	b.n	800549c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fc ff6d 	bl	8002364 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	; 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0af      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549c:	4b5a      	ldr	r3, [pc, #360]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ee      	bne.n	8005486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ae:	4b56      	ldr	r3, [pc, #344]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	4a55      	ldr	r2, [pc, #340]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 809b 	beq.w	80055fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054c4:	4b50      	ldr	r3, [pc, #320]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d05c      	beq.n	800558a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d141      	bne.n	800555c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCC_OscConfig+0x4ec>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fc ff41 	bl	8002364 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fc ff3d 	bl	8002364 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e081      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f8:	4b43      	ldr	r3, [pc, #268]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	019b      	lsls	r3, r3, #6
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	3b01      	subs	r3, #1
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	4937      	ldr	r1, [pc, #220]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <HAL_RCC_OscConfig+0x4ec>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fc ff16 	bl	8002364 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553c:	f7fc ff12 	bl	8002364 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e056      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554e:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x41c>
 800555a:	e04e      	b.n	80055fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCC_OscConfig+0x4ec>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fc feff 	bl	8002364 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800556a:	f7fc fefb 	bl	8002364 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e03f      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x44a>
 8005588:	e037      	b.n	80055fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e032      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005596:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d028      	beq.n	80055f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d121      	bne.n	80055f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d11a      	bne.n	80055f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d001      	beq.n	80055fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40007000 	.word	0x40007000
 8005608:	40023800 	.word	0x40023800
 800560c:	42470060 	.word	0x42470060

08005610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0cc      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005624:	4b68      	ldr	r3, [pc, #416]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d90c      	bls.n	800564c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b63      	ldr	r3, [pc, #396]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e0b8      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005664:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4a58      	ldr	r2, [pc, #352]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800566e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800567c:	4b53      	ldr	r3, [pc, #332]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4a52      	ldr	r2, [pc, #328]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005688:	4b50      	ldr	r3, [pc, #320]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	494d      	ldr	r1, [pc, #308]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d044      	beq.n	8005730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d107      	bne.n	80056be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	4b47      	ldr	r3, [pc, #284]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d119      	bne.n	80056ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e07f      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d003      	beq.n	80056ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ce:	4b3f      	ldr	r3, [pc, #252]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e06f      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056de:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e067      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 0203 	bic.w	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4934      	ldr	r1, [pc, #208]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005700:	f7fc fe30 	bl	8002364 <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	e00a      	b.n	800571e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005708:	f7fc fe2c 	bl	8002364 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	; 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e04f      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 020c 	and.w	r2, r3, #12
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	429a      	cmp	r2, r3
 800572e:	d1eb      	bne.n	8005708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005730:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20c      	bcs.n	8005758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e032      	b.n	80057be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4916      	ldr	r1, [pc, #88]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	490e      	ldr	r1, [pc, #56]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005796:	f000 f821 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 800579a:	4602      	mov	r2, r0
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	091b      	lsrs	r3, r3, #4
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	490a      	ldr	r1, [pc, #40]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 80057a8:	5ccb      	ldrb	r3, [r1, r3]
 80057aa:	fa22 f303 	lsr.w	r3, r2, r3
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <HAL_RCC_ClockConfig+0x1c8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fc fd90 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023c00 	.word	0x40023c00
 80057cc:	40023800 	.word	0x40023800
 80057d0:	0800dc54 	.word	0x0800dc54
 80057d4:	20000038 	.word	0x20000038
 80057d8:	2000003c 	.word	0x2000003c

080057dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	2300      	movs	r3, #0
 80057ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f4:	4b67      	ldr	r3, [pc, #412]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d00d      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x40>
 8005800:	2b08      	cmp	r3, #8
 8005802:	f200 80bd 	bhi.w	8005980 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x34>
 800580a:	2b04      	cmp	r3, #4
 800580c:	d003      	beq.n	8005816 <HAL_RCC_GetSysClockFreq+0x3a>
 800580e:	e0b7      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005810:	4b61      	ldr	r3, [pc, #388]	; (8005998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005812:	60bb      	str	r3, [r7, #8]
       break;
 8005814:	e0b7      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005816:	4b61      	ldr	r3, [pc, #388]	; (800599c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005818:	60bb      	str	r3, [r7, #8]
      break;
 800581a:	e0b4      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800581c:	4b5d      	ldr	r3, [pc, #372]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005824:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04d      	beq.n	80058ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	099b      	lsrs	r3, r3, #6
 8005838:	461a      	mov	r2, r3
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	ea02 0800 	and.w	r8, r2, r0
 800584a:	ea03 0901 	and.w	r9, r3, r1
 800584e:	4640      	mov	r0, r8
 8005850:	4649      	mov	r1, r9
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	014b      	lsls	r3, r1, #5
 800585c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005860:	0142      	lsls	r2, r0, #5
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	ebb0 0008 	subs.w	r0, r0, r8
 800586a:	eb61 0109 	sbc.w	r1, r1, r9
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	018b      	lsls	r3, r1, #6
 8005878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800587c:	0182      	lsls	r2, r0, #6
 800587e:	1a12      	subs	r2, r2, r0
 8005880:	eb63 0301 	sbc.w	r3, r3, r1
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	00d9      	lsls	r1, r3, #3
 800588e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005892:	00d0      	lsls	r0, r2, #3
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	eb12 0208 	adds.w	r2, r2, r8
 800589c:	eb43 0309 	adc.w	r3, r3, r9
 80058a0:	f04f 0000 	mov.w	r0, #0
 80058a4:	f04f 0100 	mov.w	r1, #0
 80058a8:	0259      	lsls	r1, r3, #9
 80058aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ae:	0250      	lsls	r0, r2, #9
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	f7fb f9ba 	bl	8000c38 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e04a      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	ea02 0400 	and.w	r4, r2, r0
 80058e6:	ea03 0501 	and.w	r5, r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	014b      	lsls	r3, r1, #5
 80058f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058fc:	0142      	lsls	r2, r0, #5
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	1b00      	subs	r0, r0, r4
 8005904:	eb61 0105 	sbc.w	r1, r1, r5
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	018b      	lsls	r3, r1, #6
 8005912:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005916:	0182      	lsls	r2, r0, #6
 8005918:	1a12      	subs	r2, r2, r0
 800591a:	eb63 0301 	sbc.w	r3, r3, r1
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	00d9      	lsls	r1, r3, #3
 8005928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592c:	00d0      	lsls	r0, r2, #3
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	1912      	adds	r2, r2, r4
 8005934:	eb45 0303 	adc.w	r3, r5, r3
 8005938:	f04f 0000 	mov.w	r0, #0
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	0299      	lsls	r1, r3, #10
 8005942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005946:	0290      	lsls	r0, r2, #10
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	461a      	mov	r2, r3
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	f7fb f96e 	bl	8000c38 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4613      	mov	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	3301      	adds	r3, #1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	60bb      	str	r3, [r7, #8]
      break;
 800597e:	e002      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005982:	60bb      	str	r3, [r7, #8]
      break;
 8005984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005986:	68bb      	ldr	r3, [r7, #8]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005992:	bf00      	nop
 8005994:	40023800 	.word	0x40023800
 8005998:	00f42400 	.word	0x00f42400
 800599c:	007a1200 	.word	0x007a1200

080059a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000038 	.word	0x20000038

080059b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059bc:	f7ff fff0 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0a9b      	lsrs	r3, r3, #10
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	4903      	ldr	r1, [pc, #12]	; (80059dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ce:	5ccb      	ldrb	r3, [r1, r3]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	0800dc64 	.word	0x0800dc64

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059e4:	f7ff ffdc 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0b5b      	lsrs	r3, r3, #13
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4903      	ldr	r1, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800dc64 	.word	0x0800dc64

08005a08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d035      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a30:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a36:	f7fc fc95 	bl	8002364 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a3e:	f7fc fc91 	bl	8002364 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0b0      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a50:	4b5b      	ldr	r3, [pc, #364]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	019a      	lsls	r2, r3, #6
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	071b      	lsls	r3, r3, #28
 8005a68:	4955      	ldr	r1, [pc, #340]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a70:	4b52      	ldr	r3, [pc, #328]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a76:	f7fc fc75 	bl	8002364 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a7e:	f7fc fc71 	bl	8002364 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e090      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a90:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8083 	beq.w	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	4b44      	ldr	r3, [pc, #272]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	4a43      	ldr	r2, [pc, #268]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aba:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ac6:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3e      	ldr	r2, [pc, #248]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ad2:	f7fc fc47 	bl	8002364 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ada:	f7fc fc43 	bl	8002364 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e062      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005aec:	4b35      	ldr	r3, [pc, #212]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005af8:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02f      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d028      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b16:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b26:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b2c:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b32:	4b23      	ldr	r3, [pc, #140]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d114      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b3e:	f7fc fc11 	bl	8002364 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fc fc0d 	bl	8002364 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e02a      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ee      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b74:	d10d      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b76:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	490d      	ldr	r1, [pc, #52]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]
 8005b90:	e005      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005baa:	4905      	ldr	r1, [pc, #20]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	42470068 	.word	0x42470068
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	42470e40 	.word	0x42470e40

08005bcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d13e      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d12f      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c02:	617b      	str	r3, [r7, #20]
          break;
 8005c04:	e02f      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c06:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c12:	d108      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	e007      	b.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	0f1b      	lsrs	r3, r3, #28
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]
          break;
 8005c5e:	e002      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
          break;
 8005c64:	bf00      	nop
        }
      }
      break;
 8005c66:	bf00      	nop
    }
  }
  return frequency;
 8005c68:	697b      	ldr	r3, [r7, #20]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00bb8000 	.word	0x00bb8000
 8005c80:	007a1200 	.word	0x007a1200
 8005c84:	00f42400 	.word	0x00f42400

08005c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e07b      	b.n	8005d92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005caa:	d009      	beq.n	8005cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	61da      	str	r2, [r3, #28]
 8005cb2:	e005      	b.n	8005cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc f8a2 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	ea42 0103 	orr.w	r1, r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	f003 0104 	and.w	r1, r3, #4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f003 0210 	and.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e041      	b.n	8005e30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fc f877 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 fad9 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e041      	b.n	8005ece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f839 	bl	8005ed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fa8a 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x24>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e022      	b.n	8005f56 <HAL_TIM_PWM_Start+0x6a>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d109      	bne.n	8005f2a <HAL_TIM_PWM_Start+0x3e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e015      	b.n	8005f56 <HAL_TIM_PWM_Start+0x6a>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d109      	bne.n	8005f44 <HAL_TIM_PWM_Start+0x58>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e008      	b.n	8005f56 <HAL_TIM_PWM_Start+0x6a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	bf14      	ite	ne
 8005f50:	2301      	movne	r3, #1
 8005f52:	2300      	moveq	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e07c      	b.n	8006058 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x82>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	e013      	b.n	8005f96 <HAL_TIM_PWM_Start+0xaa>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x92>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7c:	e00b      	b.n	8005f96 <HAL_TIM_PWM_Start+0xaa>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_PWM_Start+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f8c:	e003      	b.n	8005f96 <HAL_TIM_PWM_Start+0xaa>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fce0 	bl	8006964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2d      	ldr	r2, [pc, #180]	; (8006060 <HAL_TIM_PWM_Start+0x174>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_TIM_PWM_Start+0xcc>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2c      	ldr	r2, [pc, #176]	; (8006064 <HAL_TIM_PWM_Start+0x178>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIM_PWM_Start+0xd0>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <HAL_TIM_PWM_Start+0xd2>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_TIM_PWM_Start+0x174>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d022      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe4:	d01d      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_TIM_PWM_Start+0x17c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d018      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	; (800606c <HAL_TIM_PWM_Start+0x180>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_TIM_PWM_Start+0x184>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00e      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <HAL_TIM_PWM_Start+0x178>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_TIM_PWM_Start+0x188>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d004      	beq.n	8006022 <HAL_TIM_PWM_Start+0x136>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a16      	ldr	r2, [pc, #88]	; (8006078 <HAL_TIM_PWM_Start+0x18c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d111      	bne.n	8006046 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b06      	cmp	r3, #6
 8006032:	d010      	beq.n	8006056 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	e007      	b.n	8006056 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40010000 	.word	0x40010000
 8006064:	40010400 	.word	0x40010400
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800

0800607c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006096:	2302      	movs	r3, #2
 8006098:	e0ae      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	f200 809f 	bhi.w	80061e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080061e9 	.word	0x080061e9
 80060b8:	080061e9 	.word	0x080061e9
 80060bc:	080061e9 	.word	0x080061e9
 80060c0:	08006125 	.word	0x08006125
 80060c4:	080061e9 	.word	0x080061e9
 80060c8:	080061e9 	.word	0x080061e9
 80060cc:	080061e9 	.word	0x080061e9
 80060d0:	08006167 	.word	0x08006167
 80060d4:	080061e9 	.word	0x080061e9
 80060d8:	080061e9 	.word	0x080061e9
 80060dc:	080061e9 	.word	0x080061e9
 80060e0:	080061a7 	.word	0x080061a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f9f0 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e064      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fa40 	bl	80065b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e043      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fa95 	bl	800669c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e023      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fae9 	bl	8006784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e002      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      break;
 80061ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIM_ConfigClockSource+0x1c>
 8006218:	2302      	movs	r3, #2
 800621a:	e0b4      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x186>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800623a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006254:	d03e      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625a:	f200 8087 	bhi.w	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006262:	f000 8086 	beq.w	8006372 <HAL_TIM_ConfigClockSource+0x172>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d87f      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b70      	cmp	r3, #112	; 0x70
 800626e:	d01a      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006270:	2b70      	cmp	r3, #112	; 0x70
 8006272:	d87b      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b60      	cmp	r3, #96	; 0x60
 8006276:	d050      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x11a>
 8006278:	2b60      	cmp	r3, #96	; 0x60
 800627a:	d877      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b50      	cmp	r3, #80	; 0x50
 800627e:	d03c      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0xfa>
 8006280:	2b50      	cmp	r3, #80	; 0x50
 8006282:	d873      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d058      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x13a>
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d86f      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b30      	cmp	r3, #48	; 0x30
 800628e:	d064      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 8006290:	2b30      	cmp	r3, #48	; 0x30
 8006292:	d86b      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d060      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	2b20      	cmp	r3, #32
 800629a:	d867      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d05c      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d05a      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 80062a4:	e062      	b.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6899      	ldr	r1, [r3, #8]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f000 fb35 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	609a      	str	r2, [r3, #8]
      break;
 80062d2:	e04f      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f000 fb1e 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062f6:	609a      	str	r2, [r3, #8]
      break;
 80062f8:	e03c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fa92 	bl	8006830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2150      	movs	r1, #80	; 0x50
 8006312:	4618      	mov	r0, r3
 8006314:	f000 faeb 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 8006318:	e02c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	461a      	mov	r2, r3
 8006328:	f000 fab1 	bl	800688e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2160      	movs	r1, #96	; 0x60
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fadb 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 8006338:	e01c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	461a      	mov	r2, r3
 8006348:	f000 fa72 	bl	8006830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2140      	movs	r1, #64	; 0x40
 8006352:	4618      	mov	r0, r3
 8006354:	f000 facb 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 8006358:	e00c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fac2 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 800636a:	e003      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e000      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a40      	ldr	r2, [pc, #256]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3d      	ldr	r2, [pc, #244]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3c      	ldr	r2, [pc, #240]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3b      	ldr	r2, [pc, #236]	; (80064b0 <TIM_Base_SetConfig+0x120>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3a      	ldr	r2, [pc, #232]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2f      	ldr	r2, [pc, #188]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d02b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f0:	d027      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2c      	ldr	r2, [pc, #176]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d023      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2b      	ldr	r2, [pc, #172]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01f      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <TIM_Base_SetConfig+0x120>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a29      	ldr	r2, [pc, #164]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d017      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <TIM_Base_SetConfig+0x128>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a27      	ldr	r2, [pc, #156]	; (80064bc <TIM_Base_SetConfig+0x12c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00f      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <TIM_Base_SetConfig+0x130>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a25      	ldr	r2, [pc, #148]	; (80064c4 <TIM_Base_SetConfig+0x134>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <TIM_Base_SetConfig+0x138>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a23      	ldr	r2, [pc, #140]	; (80064cc <TIM_Base_SetConfig+0x13c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40010400 	.word	0x40010400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800
 80064c4:	40001800 	.word	0x40001800
 80064c8:	40001c00 	.word	0x40001c00
 80064cc:	40002000 	.word	0x40002000

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC1_SetConfig+0x64>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <TIM_OC1_SetConfig+0xdc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0308 	bic.w	r3, r3, #8
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC1_SetConfig+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC1_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d111      	bne.n	8006582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0210 	bic.w	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a22      	ldr	r2, [pc, #136]	; (8006694 <TIM_OC2_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0x68>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a17      	ldr	r2, [pc, #92]	; (8006694 <TIM_OC2_SetConfig+0xe4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0x94>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400

0800669c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a21      	ldr	r2, [pc, #132]	; (800677c <TIM_OC3_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC3_SetConfig+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a20      	ldr	r2, [pc, #128]	; (8006780 <TIM_OC3_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10d      	bne.n	800671e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <TIM_OC3_SetConfig+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x92>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <TIM_OC3_SetConfig+0xe4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d113      	bne.n	8006756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	621a      	str	r2, [r3, #32]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40010000 	.word	0x40010000
 8006780:	40010400 	.word	0x40010400

08006784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <TIM_OC4_SetConfig+0xa4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC4_SetConfig+0x68>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a11      	ldr	r2, [pc, #68]	; (800682c <TIM_OC4_SetConfig+0xa8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d109      	bne.n	8006800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800685a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f023 030a 	bic.w	r3, r3, #10
 800686c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688e:	b480      	push	{r7}
 8006890:	b087      	sub	sp, #28
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0210 	bic.w	r2, r3, #16
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	031b      	lsls	r3, r3, #12
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	f043 0307 	orr.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2201      	movs	r2, #1
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	43db      	mvns	r3, r3
 8006986:	401a      	ands	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e05a      	b.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a21      	ldr	r2, [pc, #132]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a14:	d01d      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d10c      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40001800 	.word	0x40001800

08006aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e03f      	b.n	8006b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fb fa4c 	bl	8001f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcdb 	bl	80074a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d11d      	bne.n	8006b98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <HAL_UART_Receive_IT+0x26>
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e016      	b.n	8006b9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_UART_Receive_IT+0x38>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e00f      	b.n	8006b9a <HAL_UART_Receive_IT+0x58>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fab6 	bl	8007100 <UART_Start_Receive_IT>
 8006b94:	4603      	mov	r3, r0
 8006b96:	e000      	b.n	8006b9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b98:	2302      	movs	r3, #2
  }
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b0ba      	sub	sp, #232	; 0xe8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_UART_IRQHandler+0x66>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fb95 	bl	8007332 <UART_Receive_IT>
      return;
 8006c08:	e256      	b.n	80070b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80de 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x22c>
 8006c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d106      	bne.n	8006c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80d1 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <HAL_UART_IRQHandler+0xae>
 8006c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_UART_IRQHandler+0xd2>
 8006c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f043 0202 	orr.w	r2, r3, #2
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_UART_IRQHandler+0xf6>
 8006c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0204 	orr.w	r2, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <HAL_UART_IRQHandler+0x126>
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f043 0208 	orr.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 81ed 	beq.w	80070ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x14e>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb20 	bl	8007332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	bf0c      	ite	eq
 8006d00:	2301      	moveq	r3, #1
 8006d02:	2300      	movne	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <HAL_UART_IRQHandler+0x17a>
 8006d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d04f      	beq.n	8006dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa28 	bl	8007174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d141      	bne.n	8006db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1d9      	bne.n	8006d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d013      	beq.n	8006dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	4a7d      	ldr	r2, [pc, #500]	; (8006f80 <HAL_UART_IRQHandler+0x3dc>)
 8006d8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fb fc97 	bl	80026c6 <HAL_DMA_Abort_IT>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006da8:	4610      	mov	r0, r2
 8006daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	e00e      	b.n	8006dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f990 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e00a      	b.n	8006dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f98c 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	e006      	b.n	8006dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f988 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dca:	e170      	b.n	80070ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	bf00      	nop
    return;
 8006dce:	e16e      	b.n	80070ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 814a 	bne.w	800706e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8143 	beq.w	800706e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 813c 	beq.w	800706e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	f040 80b4 	bne.w	8006f84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8140 	beq.w	80070b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	f080 8139 	bcs.w	80070b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e52:	f000 8088 	beq.w	8006f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1d9      	bne.n	8006e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e1      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e3      	bne.n	8006ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f36:	f023 0310 	bic.w	r3, r3, #16
 8006f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f48:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e3      	bne.n	8006f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fb fb40 	bl	80025e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8b6 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f7c:	e099      	b.n	80070b2 <HAL_UART_IRQHandler+0x50e>
 8006f7e:	bf00      	nop
 8006f80:	0800723b 	.word	0x0800723b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 808b 	beq.w	80070b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8086 	beq.w	80070b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	330c      	adds	r3, #12
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fce:	647a      	str	r2, [r7, #68]	; 0x44
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e3      	bne.n	8006faa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3314      	adds	r3, #20
 8007002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007006:	633a      	str	r2, [r7, #48]	; 0x30
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e3      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	330c      	adds	r3, #12
 800702e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	60fb      	str	r3, [r7, #12]
   return(result);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0310 	bic.w	r3, r3, #16
 800703e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800704c:	61fa      	str	r2, [r7, #28]
 800704e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	617b      	str	r3, [r7, #20]
   return(result);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e3      	bne.n	8007028 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f83e 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800706c:	e023      	b.n	80070b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <HAL_UART_IRQHandler+0x4ea>
 800707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8eb 	bl	8007262 <UART_Transmit_IT>
    return;
 800708c:	e014      	b.n	80070b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00e      	beq.n	80070b8 <HAL_UART_IRQHandler+0x514>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f92b 	bl	8007302 <UART_EndTransmit_IT>
    return;
 80070ac:	e004      	b.n	80070b8 <HAL_UART_IRQHandler+0x514>
    return;
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <HAL_UART_IRQHandler+0x514>
      return;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_UART_IRQHandler+0x514>
      return;
 80070b6:	bf00      	nop
  }
}
 80070b8:	37e8      	adds	r7, #232	; 0xe8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2222      	movs	r2, #34	; 0x22
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007144:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695a      	ldr	r2, [r3, #20]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0220 	orr.w	r2, r2, #32
 8007164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b095      	sub	sp, #84	; 0x54
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800719c:	643a      	str	r2, [r7, #64]	; 0x40
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e5      	bne.n	80071b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d119      	bne.n	8007220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	647b      	str	r3, [r7, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800720c:	61ba      	str	r2, [r7, #24]
 800720e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	613b      	str	r3, [r7, #16]
   return(result);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800722e:	bf00      	nop
 8007230:	3754      	adds	r7, #84	; 0x54
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff ff3d 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b21      	cmp	r3, #33	; 0x21
 8007274:	d13e      	bne.n	80072f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727e:	d114      	bne.n	80072aa <UART_Transmit_IT+0x48>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d110      	bne.n	80072aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	1c9a      	adds	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	621a      	str	r2, [r3, #32]
 80072a8:	e008      	b.n	80072bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	1c59      	adds	r1, r3, #1
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6211      	str	r1, [r2, #32]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4619      	mov	r1, r3
 80072ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10f      	bne.n	80072f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e000      	b.n	80072f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fecc 	bl	80070c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b08c      	sub	sp, #48	; 0x30
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b22      	cmp	r3, #34	; 0x22
 8007344:	f040 80ab 	bne.w	800749e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007350:	d117      	bne.n	8007382 <UART_Receive_IT+0x50>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d113      	bne.n	8007382 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007370:	b29a      	uxth	r2, r3
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28
 8007380:	e026      	b.n	80073d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007394:	d007      	beq.n	80073a6 <UART_Receive_IT+0x74>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <UART_Receive_IT+0x82>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	e008      	b.n	80073c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4619      	mov	r1, r3
 80073de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d15a      	bne.n	800749a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0220 	bic.w	r2, r2, #32
 80073f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	2b01      	cmp	r3, #1
 8007422:	d135      	bne.n	8007490 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	613b      	str	r3, [r7, #16]
   return(result);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	623a      	str	r2, [r7, #32]
 800744c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	69f9      	ldr	r1, [r7, #28]
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	61bb      	str	r3, [r7, #24]
   return(result);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b10      	cmp	r3, #16
 800746a:	d10a      	bne.n	8007482 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fe2d 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
 800748e:	e002      	b.n	8007496 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7fa f8e5 	bl	8001660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e002      	b.n	80074a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e000      	b.n	80074a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3730      	adds	r7, #48	; 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b09f      	sub	sp, #124	; 0x7c
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	68d9      	ldr	r1, [r3, #12]
 80074c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	ea40 0301 	orr.w	r3, r0, r1
 80074c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	431a      	orrs	r2, r3
 80074da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	4313      	orrs	r3, r2
 80074e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074ec:	f021 010c 	bic.w	r1, r1, #12
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074f6:	430b      	orrs	r3, r1
 80074f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007506:	6999      	ldr	r1, [r3, #24]
 8007508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	ea40 0301 	orr.w	r3, r0, r1
 8007510:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4bc5      	ldr	r3, [pc, #788]	; (800782c <UART_SetConfig+0x384>)
 8007518:	429a      	cmp	r2, r3
 800751a:	d004      	beq.n	8007526 <UART_SetConfig+0x7e>
 800751c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4bc3      	ldr	r3, [pc, #780]	; (8007830 <UART_SetConfig+0x388>)
 8007522:	429a      	cmp	r2, r3
 8007524:	d103      	bne.n	800752e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007526:	f7fe fa5b 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 800752a:	6778      	str	r0, [r7, #116]	; 0x74
 800752c:	e002      	b.n	8007534 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800752e:	f7fe fa43 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 8007532:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800753c:	f040 80b6 	bne.w	80076ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007542:	461c      	mov	r4, r3
 8007544:	f04f 0500 	mov.w	r5, #0
 8007548:	4622      	mov	r2, r4
 800754a:	462b      	mov	r3, r5
 800754c:	1891      	adds	r1, r2, r2
 800754e:	6439      	str	r1, [r7, #64]	; 0x40
 8007550:	415b      	adcs	r3, r3
 8007552:	647b      	str	r3, [r7, #68]	; 0x44
 8007554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007558:	1912      	adds	r2, r2, r4
 800755a:	eb45 0303 	adc.w	r3, r5, r3
 800755e:	f04f 0000 	mov.w	r0, #0
 8007562:	f04f 0100 	mov.w	r1, #0
 8007566:	00d9      	lsls	r1, r3, #3
 8007568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800756c:	00d0      	lsls	r0, r2, #3
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	1911      	adds	r1, r2, r4
 8007574:	6639      	str	r1, [r7, #96]	; 0x60
 8007576:	416b      	adcs	r3, r5
 8007578:	667b      	str	r3, [r7, #100]	; 0x64
 800757a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	461a      	mov	r2, r3
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	1891      	adds	r1, r2, r2
 8007586:	63b9      	str	r1, [r7, #56]	; 0x38
 8007588:	415b      	adcs	r3, r3
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800758c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007590:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007594:	f7f9 fb50 	bl	8000c38 <__aeabi_uldivmod>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4ba5      	ldr	r3, [pc, #660]	; (8007834 <UART_SetConfig+0x38c>)
 800759e:	fba3 2302 	umull	r2, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	011e      	lsls	r6, r3, #4
 80075a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a8:	461c      	mov	r4, r3
 80075aa:	f04f 0500 	mov.w	r5, #0
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	1891      	adds	r1, r2, r2
 80075b4:	6339      	str	r1, [r7, #48]	; 0x30
 80075b6:	415b      	adcs	r3, r3
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075be:	1912      	adds	r2, r2, r4
 80075c0:	eb45 0303 	adc.w	r3, r5, r3
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	f04f 0100 	mov.w	r1, #0
 80075cc:	00d9      	lsls	r1, r3, #3
 80075ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075d2:	00d0      	lsls	r0, r2, #3
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	1911      	adds	r1, r2, r4
 80075da:	65b9      	str	r1, [r7, #88]	; 0x58
 80075dc:	416b      	adcs	r3, r5
 80075de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	1891      	adds	r1, r2, r2
 80075ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80075ee:	415b      	adcs	r3, r3
 80075f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075fa:	f7f9 fb1d 	bl	8000c38 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4b8c      	ldr	r3, [pc, #560]	; (8007834 <UART_SetConfig+0x38c>)
 8007604:	fba3 1302 	umull	r1, r3, r3, r2
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	2164      	movs	r1, #100	; 0x64
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	3332      	adds	r3, #50	; 0x32
 8007616:	4a87      	ldr	r2, [pc, #540]	; (8007834 <UART_SetConfig+0x38c>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007624:	441e      	add	r6, r3
 8007626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007628:	4618      	mov	r0, r3
 800762a:	f04f 0100 	mov.w	r1, #0
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	1894      	adds	r4, r2, r2
 8007634:	623c      	str	r4, [r7, #32]
 8007636:	415b      	adcs	r3, r3
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800763e:	1812      	adds	r2, r2, r0
 8007640:	eb41 0303 	adc.w	r3, r1, r3
 8007644:	f04f 0400 	mov.w	r4, #0
 8007648:	f04f 0500 	mov.w	r5, #0
 800764c:	00dd      	lsls	r5, r3, #3
 800764e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007652:	00d4      	lsls	r4, r2, #3
 8007654:	4622      	mov	r2, r4
 8007656:	462b      	mov	r3, r5
 8007658:	1814      	adds	r4, r2, r0
 800765a:	653c      	str	r4, [r7, #80]	; 0x50
 800765c:	414b      	adcs	r3, r1
 800765e:	657b      	str	r3, [r7, #84]	; 0x54
 8007660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	461a      	mov	r2, r3
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	1891      	adds	r1, r2, r2
 800766c:	61b9      	str	r1, [r7, #24]
 800766e:	415b      	adcs	r3, r3
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007676:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800767a:	f7f9 fadd 	bl	8000c38 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4b6c      	ldr	r3, [pc, #432]	; (8007834 <UART_SetConfig+0x38c>)
 8007684:	fba3 1302 	umull	r1, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	2164      	movs	r1, #100	; 0x64
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	3332      	adds	r3, #50	; 0x32
 8007696:	4a67      	ldr	r2, [pc, #412]	; (8007834 <UART_SetConfig+0x38c>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f003 0207 	and.w	r2, r3, #7
 80076a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4432      	add	r2, r6
 80076a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076aa:	e0b9      	b.n	8007820 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ae:	461c      	mov	r4, r3
 80076b0:	f04f 0500 	mov.w	r5, #0
 80076b4:	4622      	mov	r2, r4
 80076b6:	462b      	mov	r3, r5
 80076b8:	1891      	adds	r1, r2, r2
 80076ba:	6139      	str	r1, [r7, #16]
 80076bc:	415b      	adcs	r3, r3
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076c4:	1912      	adds	r2, r2, r4
 80076c6:	eb45 0303 	adc.w	r3, r5, r3
 80076ca:	f04f 0000 	mov.w	r0, #0
 80076ce:	f04f 0100 	mov.w	r1, #0
 80076d2:	00d9      	lsls	r1, r3, #3
 80076d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076d8:	00d0      	lsls	r0, r2, #3
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	eb12 0804 	adds.w	r8, r2, r4
 80076e2:	eb43 0905 	adc.w	r9, r3, r5
 80076e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f04f 0100 	mov.w	r1, #0
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	008b      	lsls	r3, r1, #2
 80076fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076fe:	0082      	lsls	r2, r0, #2
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f9 fa98 	bl	8000c38 <__aeabi_uldivmod>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4b49      	ldr	r3, [pc, #292]	; (8007834 <UART_SetConfig+0x38c>)
 800770e:	fba3 2302 	umull	r2, r3, r3, r2
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	011e      	lsls	r6, r3, #4
 8007716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007718:	4618      	mov	r0, r3
 800771a:	f04f 0100 	mov.w	r1, #0
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	1894      	adds	r4, r2, r2
 8007724:	60bc      	str	r4, [r7, #8]
 8007726:	415b      	adcs	r3, r3
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772e:	1812      	adds	r2, r2, r0
 8007730:	eb41 0303 	adc.w	r3, r1, r3
 8007734:	f04f 0400 	mov.w	r4, #0
 8007738:	f04f 0500 	mov.w	r5, #0
 800773c:	00dd      	lsls	r5, r3, #3
 800773e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007742:	00d4      	lsls	r4, r2, #3
 8007744:	4622      	mov	r2, r4
 8007746:	462b      	mov	r3, r5
 8007748:	1814      	adds	r4, r2, r0
 800774a:	64bc      	str	r4, [r7, #72]	; 0x48
 800774c:	414b      	adcs	r3, r1
 800774e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	f04f 0100 	mov.w	r1, #0
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007768:	0082      	lsls	r2, r0, #2
 800776a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800776e:	f7f9 fa63 	bl	8000c38 <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <UART_SetConfig+0x38c>)
 8007778:	fba3 1302 	umull	r1, r3, r3, r2
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	2164      	movs	r1, #100	; 0x64
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	3332      	adds	r3, #50	; 0x32
 800778a:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <UART_SetConfig+0x38c>)
 800778c:	fba2 2303 	umull	r2, r3, r2, r3
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007796:	441e      	add	r6, r3
 8007798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779a:	4618      	mov	r0, r3
 800779c:	f04f 0100 	mov.w	r1, #0
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	1894      	adds	r4, r2, r2
 80077a6:	603c      	str	r4, [r7, #0]
 80077a8:	415b      	adcs	r3, r3
 80077aa:	607b      	str	r3, [r7, #4]
 80077ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b0:	1812      	adds	r2, r2, r0
 80077b2:	eb41 0303 	adc.w	r3, r1, r3
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	f04f 0500 	mov.w	r5, #0
 80077be:	00dd      	lsls	r5, r3, #3
 80077c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077c4:	00d4      	lsls	r4, r2, #3
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	eb12 0a00 	adds.w	sl, r2, r0
 80077ce:	eb43 0b01 	adc.w	fp, r3, r1
 80077d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f04f 0100 	mov.w	r1, #0
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	008b      	lsls	r3, r1, #2
 80077e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077ea:	0082      	lsls	r2, r0, #2
 80077ec:	4650      	mov	r0, sl
 80077ee:	4659      	mov	r1, fp
 80077f0:	f7f9 fa22 	bl	8000c38 <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <UART_SetConfig+0x38c>)
 80077fa:	fba3 1302 	umull	r1, r3, r3, r2
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2164      	movs	r1, #100	; 0x64
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	3332      	adds	r3, #50	; 0x32
 800780c:	4a09      	ldr	r2, [pc, #36]	; (8007834 <UART_SetConfig+0x38c>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4432      	add	r2, r6
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	377c      	adds	r7, #124	; 0x7c
 8007824:	46bd      	mov	sp, r7
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	bf00      	nop
 800782c:	40011000 	.word	0x40011000
 8007830:	40011400 	.word	0x40011400
 8007834:	51eb851f 	.word	0x51eb851f

08007838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007838:	b084      	sub	sp, #16
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	f107 001c 	add.w	r0, r7, #28
 8007846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	2b01      	cmp	r3, #1
 800784e:	d122      	bne.n	8007896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d105      	bne.n	800788a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9a0 	bl	8007bd0 <USB_CoreReset>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	e01a      	b.n	80078cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f994 	bl	8007bd0 <USB_CoreReset>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
 80078be:	e005      	b.n	80078cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d10b      	bne.n	80078ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f043 0206 	orr.w	r2, r3, #6
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f6:	b004      	add	sp, #16
 80078f8:	4770      	bx	lr

080078fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f043 0201 	orr.w	r2, r3, #1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f023 0201 	bic.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d115      	bne.n	800798c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800796c:	2001      	movs	r0, #1
 800796e:	f7fa fd05 	bl	800237c <HAL_Delay>
      ms++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f91a 	bl	8007bb2 <USB_GetMode>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d01e      	beq.n	80079c2 <USB_SetCurrentMode+0x84>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b31      	cmp	r3, #49	; 0x31
 8007988:	d9f0      	bls.n	800796c <USB_SetCurrentMode+0x2e>
 800798a:	e01a      	b.n	80079c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d115      	bne.n	80079be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800799e:	2001      	movs	r0, #1
 80079a0:	f7fa fcec 	bl	800237c <HAL_Delay>
      ms++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f901 	bl	8007bb2 <USB_GetMode>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <USB_SetCurrentMode+0x84>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b31      	cmp	r3, #49	; 0x31
 80079ba:	d9f0      	bls.n	800799e <USB_SetCurrentMode+0x60>
 80079bc:	e001      	b.n	80079c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e005      	b.n	80079ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b32      	cmp	r3, #50	; 0x32
 80079c6:	d101      	bne.n	80079cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	019b      	lsls	r3, r3, #6
 80079ea:	f043 0220 	orr.w	r2, r3, #32
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <USB_FlushTxFifo+0x44>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e006      	b.n	8007a10 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d0f1      	beq.n	80079f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	00030d40 	.word	0x00030d40

08007a20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <USB_FlushRxFifo+0x3c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d901      	bls.n	8007a42 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e006      	b.n	8007a50 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d0f1      	beq.n	8007a32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	00030d40 	.word	0x00030d40

08007a60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	460b      	mov	r3, r1
 8007a70:	71fb      	strb	r3, [r7, #7]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d123      	bne.n	8007ace <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a86:	88bb      	ldrh	r3, [r7, #4]
 8007a88:	3303      	adds	r3, #3
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	e018      	b.n	8007ac6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	031a      	lsls	r2, r3, #12
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	3301      	adds	r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d3e2      	bcc.n	8007a94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3724      	adds	r7, #36	; 0x24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b08b      	sub	sp, #44	; 0x2c
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	089b      	lsrs	r3, r3, #2
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	623b      	str	r3, [r7, #32]
 8007b06:	e014      	b.n	8007b32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	3301      	adds	r3, #1
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	3301      	adds	r3, #1
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	3301      	adds	r3, #1
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	6a3a      	ldr	r2, [r7, #32]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d3e6      	bcc.n	8007b08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b3a:	8bfb      	ldrh	r3, [r7, #30]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01e      	beq.n	8007b7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f107 0310 	add.w	r3, r7, #16
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	701a      	strb	r2, [r3, #0]
      i++;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	3301      	adds	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b72:	8bfb      	ldrh	r3, [r7, #30]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b78:	8bfb      	ldrh	r3, [r7, #30]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1ea      	bne.n	8007b54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	372c      	adds	r7, #44	; 0x2c
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <USB_CoreReset+0x60>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d901      	bls.n	8007bec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e01a      	b.n	8007c22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	daf3      	bge.n	8007bdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f043 0201 	orr.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <USB_CoreReset+0x60>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d901      	bls.n	8007c14 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e006      	b.n	8007c22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d0f1      	beq.n	8007c04 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	00030d40 	.word	0x00030d40

08007c34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c34:	b084      	sub	sp, #16
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	f107 001c 	add.w	r0, r7, #28
 8007c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c50:	461a      	mov	r2, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d018      	beq.n	8007cb8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d10a      	bne.n	8007ca2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c9a:	f043 0304 	orr.w	r3, r3, #4
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	e014      	b.n	8007ccc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cb0:	f023 0304 	bic.w	r3, r3, #4
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	e009      	b.n	8007ccc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007ccc:	2110      	movs	r1, #16
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff fe82 	bl	80079d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fea3 	bl	8007a20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e015      	b.n	8007d0c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d00:	461a      	mov	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d3e5      	bcc.n	8007ce0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d20:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <USB_HostInit+0x154>)
 8007d3a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <USB_HostInit+0x158>)
 8007d40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d44:	e009      	b.n	8007d5a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2280      	movs	r2, #128	; 0x80
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a10      	ldr	r2, [pc, #64]	; (8007d90 <USB_HostInit+0x15c>)
 8007d50:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a0f      	ldr	r2, [pc, #60]	; (8007d94 <USB_HostInit+0x160>)
 8007d56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f043 0210 	orr.w	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699a      	ldr	r2, [r3, #24]
 8007d70:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <USB_HostInit+0x164>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d84:	b004      	add	sp, #16
 8007d86:	4770      	bx	lr
 8007d88:	01000200 	.word	0x01000200
 8007d8c:	00e00300 	.word	0x00e00300
 8007d90:	00600080 	.word	0x00600080
 8007d94:	004000e0 	.word	0x004000e0
 8007d98:	a3200008 	.word	0xa3200008

08007d9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d107      	bne.n	8007dee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de4:	461a      	mov	r2, r3
 8007de6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007dea:	6053      	str	r3, [r2, #4]
 8007dec:	e009      	b.n	8007e02 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d106      	bne.n	8007e02 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e00:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e40:	2064      	movs	r0, #100	; 0x64
 8007e42:	f7fa fa9b 	bl	800237c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e52:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e54:	200a      	movs	r0, #10
 8007e56:	f7fa fa91 	bl	800237c <HAL_Delay>

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e88:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d109      	bne.n	8007ea8 <USB_DriveVbus+0x44>
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d106      	bne.n	8007ea8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ea2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ea6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb2:	d109      	bne.n	8007ec8 <USB_DriveVbus+0x64>
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	0c5b      	lsrs	r3, r3, #17
 8007ef4:	f003 0303 	and.w	r3, r3, #3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	b29b      	uxth	r3, r3
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	4608      	mov	r0, r1
 8007f32:	4611      	mov	r1, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	70fb      	strb	r3, [r7, #3]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70bb      	strb	r3, [r7, #2]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d87e      	bhi.n	8008064 <USB_HC_Init+0x13c>
 8007f66:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <USB_HC_Init+0x44>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08008027 	.word	0x08008027
 8007f74:	08007f7d 	.word	0x08007f7d
 8007f78:	08007fe9 	.word	0x08007fe9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da10      	bge.n	8007fba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007fb8:	e057      	b.n	800806a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d051      	beq.n	800806a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007fe4:	60d3      	str	r3, [r2, #12]
      break;
 8007fe6:	e040      	b.n	800806a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f240 639d 	movw	r3, #1693	; 0x69d
 8007ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da34      	bge.n	800806e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	440a      	add	r2, r1
 800801a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800801e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008022:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008024:	e023      	b.n	800806e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008032:	461a      	mov	r2, r3
 8008034:	f240 2325 	movw	r3, #549	; 0x225
 8008038:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800803a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da17      	bge.n	8008072 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	440a      	add	r2, r1
 8008058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008060:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008062:	e006      	b.n	8008072 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	77fb      	strb	r3, [r7, #31]
      break;
 8008068:	e004      	b.n	8008074 <USB_HC_Init+0x14c>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <USB_HC_Init+0x14c>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <USB_HC_Init+0x14c>
      break;
 8008072:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	2101      	movs	r1, #1
 8008084:	fa01 f303 	lsl.w	r3, r1, r3
 8008088:	6939      	ldr	r1, [r7, #16]
 800808a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800808e:	4313      	orrs	r3, r2
 8008090:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800809e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da03      	bge.n	80080ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80080a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	e001      	b.n	80080b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ff0f 	bl	8007ed6 <USB_GetHostSpeed>
 80080b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80080ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d106      	bne.n	80080d0 <USB_HC_Init+0x1a8>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d003      	beq.n	80080d0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80080c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e001      	b.n	80080d4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080d4:	787b      	ldrb	r3, [r7, #1]
 80080d6:	059b      	lsls	r3, r3, #22
 80080d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080dc:	78bb      	ldrb	r3, [r7, #2]
 80080de:	02db      	lsls	r3, r3, #11
 80080e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ea:	049b      	lsls	r3, r3, #18
 80080ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	440b      	add	r3, r1
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008110:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008112:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008116:	2b03      	cmp	r3, #3
 8008118:	d10f      	bne.n	800813a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	440a      	add	r2, r1
 8008130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008138:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800813a:	7ffb      	ldrb	r3, [r7, #31]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3720      	adds	r7, #32
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08c      	sub	sp, #48	; 0x30
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800815c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008160:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	2b00      	cmp	r3, #0
 800816c:	d02d      	beq.n	80081ca <USB_HC_StartXfer+0x86>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	791b      	ldrb	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d129      	bne.n	80081ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d117      	bne.n	80081ac <USB_HC_StartXfer+0x68>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	79db      	ldrb	r3, [r3, #7]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <USB_HC_StartXfer+0x48>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	79db      	ldrb	r3, [r3, #7]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d10f      	bne.n	80081ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	4413      	add	r3, r2
 8008194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	6a3a      	ldr	r2, [r7, #32]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <USB_HC_StartXfer+0x86>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	795b      	ldrb	r3, [r3, #5]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d107      	bne.n	80081ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	4619      	mov	r1, r3
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fa2f 	bl	8008624 <USB_DoPing>
      return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e0f8      	b.n	80083bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d018      	beq.n	8008204 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	8912      	ldrh	r2, [r2, #8]
 80081da:	4413      	add	r3, r2
 80081dc:	3b01      	subs	r3, #1
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	8912      	ldrh	r2, [r2, #8]
 80081e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80081e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081ea:	8b7b      	ldrh	r3, [r7, #26]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d90b      	bls.n	8008208 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80081f0:	8b7b      	ldrh	r3, [r7, #26]
 80081f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	8912      	ldrh	r2, [r2, #8]
 80081fa:	fb02 f203 	mul.w	r2, r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	611a      	str	r2, [r3, #16]
 8008202:	e001      	b.n	8008208 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008204:	2301      	movs	r3, #1
 8008206:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	78db      	ldrb	r3, [r3, #3]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	8912      	ldrh	r2, [r2, #8]
 8008216:	fb02 f203 	mul.w	r2, r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	611a      	str	r2, [r3, #16]
 800821e:	e003      	b.n	8008228 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	695a      	ldr	r2, [r3, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008232:	04d9      	lsls	r1, r3, #19
 8008234:	4b63      	ldr	r3, [pc, #396]	; (80083c4 <USB_HC_StartXfer+0x280>)
 8008236:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008238:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	7a9b      	ldrb	r3, [r3, #10]
 800823e:	075b      	lsls	r3, r3, #29
 8008240:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008244:	69f9      	ldr	r1, [r7, #28]
 8008246:	0148      	lsls	r0, r1, #5
 8008248:	6a39      	ldr	r1, [r7, #32]
 800824a:	4401      	add	r1, r0
 800824c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008250:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008252:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	68d9      	ldr	r1, [r3, #12]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826a:	460a      	mov	r2, r1
 800826c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	bf0c      	ite	eq
 800827e:	2301      	moveq	r3, #1
 8008280:	2300      	movne	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	440a      	add	r2, r1
 800829c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	7e7b      	ldrb	r3, [r7, #25]
 80082b6:	075b      	lsls	r3, r3, #29
 80082b8:	69f9      	ldr	r1, [r7, #28]
 80082ba:	0148      	lsls	r0, r1, #5
 80082bc:	6a39      	ldr	r1, [r7, #32]
 80082be:	4401      	add	r1, r0
 80082c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80082c4:	4313      	orrs	r3, r2
 80082c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	e003      	b.n	80082fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008300:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	4413      	add	r3, r2
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	461a      	mov	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e04e      	b.n	80083bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	78db      	ldrb	r3, [r3, #3]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d149      	bne.n	80083ba <USB_HC_StartXfer+0x276>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d045      	beq.n	80083ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	79db      	ldrb	r3, [r3, #7]
 8008332:	2b03      	cmp	r3, #3
 8008334:	d830      	bhi.n	8008398 <USB_HC_StartXfer+0x254>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USB_HC_StartXfer+0x1f8>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800834d 	.word	0x0800834d
 8008340:	08008371 	.word	0x08008371
 8008344:	0800834d 	.word	0x0800834d
 8008348:	08008371 	.word	0x08008371
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	3303      	adds	r3, #3
 8008352:	089b      	lsrs	r3, r3, #2
 8008354:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008356:	8afa      	ldrh	r2, [r7, #22]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	b29b      	uxth	r3, r3
 800835e:	429a      	cmp	r2, r3
 8008360:	d91c      	bls.n	800839c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	619a      	str	r2, [r3, #24]
        }
        break;
 800836e:	e015      	b.n	800839c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	3303      	adds	r3, #3
 8008376:	089b      	lsrs	r3, r3, #2
 8008378:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800837a:	8afa      	ldrh	r2, [r7, #22]
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	b29b      	uxth	r3, r3
 8008386:	429a      	cmp	r2, r3
 8008388:	d90a      	bls.n	80083a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	619a      	str	r2, [r3, #24]
        }
        break;
 8008396:	e003      	b.n	80083a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008398:	bf00      	nop
 800839a:	e002      	b.n	80083a2 <USB_HC_StartXfer+0x25e>
        break;
 800839c:	bf00      	nop
 800839e:	e000      	b.n	80083a2 <USB_HC_StartXfer+0x25e>
        break;
 80083a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68d9      	ldr	r1, [r3, #12]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	785a      	ldrb	r2, [r3, #1]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2000      	movs	r0, #0
 80083b2:	9000      	str	r0, [sp, #0]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fb53 	bl	8007a60 <USB_WritePacket>
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3728      	adds	r7, #40	; 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	1ff80000 	.word	0x1ff80000

080083c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	b29b      	uxth	r3, r3
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b089      	sub	sp, #36	; 0x24
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	4413      	add	r3, r2
 800840a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	0c9b      	lsrs	r3, r3, #18
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	0fdb      	lsrs	r3, r3, #31
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b20      	cmp	r3, #32
 8008438:	d104      	bne.n	8008444 <USB_HC_Halt+0x5a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e0e8      	b.n	8008616 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <USB_HC_Halt+0x66>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d173      	bne.n	8008538 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	440a      	add	r2, r1
 8008466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800846e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 80cb 	bne.w	8008614 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d143      	bne.n	8008512 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084e8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	3301      	adds	r3, #1
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084f6:	d81d      	bhi.n	8008534 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800850a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800850e:	d0ec      	beq.n	80084ea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008510:	e080      	b.n	8008614 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	440a      	add	r2, r1
 8008528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800852c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008530:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008532:	e06f      	b.n	8008614 <USB_HC_Halt+0x22a>
            break;
 8008534:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008536:	e06d      	b.n	8008614 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	4413      	add	r3, r2
 8008540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	440a      	add	r2, r1
 800854e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008556:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d143      	bne.n	80085f0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	4413      	add	r3, r2
 8008570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	440a      	add	r2, r1
 800857e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008586:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	4413      	add	r3, r2
 8008590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	440a      	add	r2, r1
 800859e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d4:	d81d      	bhi.n	8008612 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ec:	d0ec      	beq.n	80085c8 <USB_HC_Halt+0x1de>
 80085ee:	e011      	b.n	8008614 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	440a      	add	r2, r1
 8008606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e000      	b.n	8008614 <USB_HC_Halt+0x22a>
          break;
 8008612:	bf00      	nop
    }
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3724      	adds	r7, #36	; 0x24
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008638:	2301      	movs	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	04da      	lsls	r2, r3, #19
 8008640:	4b15      	ldr	r3, [pc, #84]	; (8008698 <USB_DoPing+0x74>)
 8008642:	4013      	ands	r3, r2
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	440a      	add	r2, r1
 800864c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008654:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800866c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008674:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008682:	461a      	mov	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	1ff80000 	.word	0x1ff80000

0800869c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff f935 	bl	800791c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80086b2:	2110      	movs	r1, #16
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff f98f 	bl	80079d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff f9b0 	bl	8007a20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	e01f      	b.n	8008706 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	461a      	mov	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3301      	adds	r3, #1
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d9dc      	bls.n	80086c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	e034      	b.n	800877c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008728:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008730:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008738:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008758:	d80c      	bhi.n	8008774 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800876c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008770:	d0ec      	beq.n	800874c <USB_StopHost+0xb0>
 8008772:	e000      	b.n	8008776 <USB_StopHost+0xda>
        break;
 8008774:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d9c7      	bls.n	8008712 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008788:	461a      	mov	r2, r3
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f04f 32ff 	mov.w	r2, #4294967295
 8008796:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff f8ae 	bl	80078fa <USB_EnableGlobalInt>

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087a8:	b590      	push	{r4, r7, lr}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80087b0:	2301      	movs	r3, #1
 80087b2:	2202      	movs	r2, #2
 80087b4:	2102      	movs	r1, #2
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc66 	bl	8009088 <USBH_FindInterface>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2bff      	cmp	r3, #255	; 0xff
 80087c4:	d002      	beq.n	80087cc <USBH_CDC_InterfaceInit+0x24>
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d901      	bls.n	80087d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80087cc:	2302      	movs	r3, #2
 80087ce:	e13d      	b.n	8008a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fc3b 	bl	8009050 <USBH_SelectInterface>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80087e4:	2302      	movs	r3, #2
 80087e6:	e131      	b.n	8008a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80087ee:	2050      	movs	r0, #80	; 0x50
 80087f0:	f002 fa04 	bl	800abfc <malloc>
 80087f4:	4603      	mov	r3, r0
 80087f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	e11f      	b.n	8008a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800880c:	2250      	movs	r2, #80	; 0x50
 800880e:	2100      	movs	r1, #0
 8008810:	68b8      	ldr	r0, [r7, #8]
 8008812:	f002 fa03 	bl	800ac1c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	211a      	movs	r1, #26
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	4413      	add	r3, r2
 8008822:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b25b      	sxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	da15      	bge.n	800885a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	211a      	movs	r1, #26
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	4413      	add	r3, r2
 800883a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	211a      	movs	r1, #26
 800884a:	fb01 f303 	mul.w	r3, r1, r3
 800884e:	4413      	add	r3, r2
 8008850:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008854:	881a      	ldrh	r2, [r3, #0]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fe32 	bl	800a4ca <USBH_AllocPipe>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	7819      	ldrb	r1, [r3, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	7858      	ldrb	r0, [r3, #1]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	8952      	ldrh	r2, [r2, #10]
 8008886:	9202      	str	r2, [sp, #8]
 8008888:	2203      	movs	r2, #3
 800888a:	9201      	str	r2, [sp, #4]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4623      	mov	r3, r4
 8008890:	4602      	mov	r2, r0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fdea 	bl	800a46c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 f8f9 	bl	800aa98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80088a6:	2300      	movs	r3, #0
 80088a8:	2200      	movs	r2, #0
 80088aa:	210a      	movs	r1, #10
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fbeb 	bl	8009088 <USBH_FindInterface>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2bff      	cmp	r3, #255	; 0xff
 80088ba:	d002      	beq.n	80088c2 <USBH_CDC_InterfaceInit+0x11a>
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d901      	bls.n	80088c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088c2:	2302      	movs	r3, #2
 80088c4:	e0c2      	b.n	8008a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	211a      	movs	r1, #26
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	b25b      	sxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da16      	bge.n	800890c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	211a      	movs	r1, #26
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	4413      	add	r3, r2
 80088ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	211a      	movs	r1, #26
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008904:	881a      	ldrh	r2, [r3, #0]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	835a      	strh	r2, [r3, #26]
 800890a:	e015      	b.n	8008938 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	211a      	movs	r1, #26
 8008912:	fb01 f303 	mul.w	r3, r1, r3
 8008916:	4413      	add	r3, r2
 8008918:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	211a      	movs	r1, #26
 8008928:	fb01 f303 	mul.w	r3, r1, r3
 800892c:	4413      	add	r3, r2
 800892e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	211a      	movs	r1, #26
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b25b      	sxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	da16      	bge.n	800897e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	211a      	movs	r1, #26
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	211a      	movs	r1, #26
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008976:	881a      	ldrh	r2, [r3, #0]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	835a      	strh	r2, [r3, #26]
 800897c:	e015      	b.n	80089aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	211a      	movs	r1, #26
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	4413      	add	r3, r2
 800898a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	211a      	movs	r1, #26
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	4413      	add	r3, r2
 80089a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089a4:	881a      	ldrh	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	7b9b      	ldrb	r3, [r3, #14]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fd8a 	bl	800a4ca <USBH_AllocPipe>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	7bdb      	ldrb	r3, [r3, #15]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fd80 	bl	800a4ca <USBH_AllocPipe>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	7b59      	ldrb	r1, [r3, #13]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	7b98      	ldrb	r0, [r3, #14]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	8b12      	ldrh	r2, [r2, #24]
 80089ea:	9202      	str	r2, [sp, #8]
 80089ec:	2202      	movs	r2, #2
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4623      	mov	r3, r4
 80089f4:	4602      	mov	r2, r0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 fd38 	bl	800a46c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	7b19      	ldrb	r1, [r3, #12]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	7bd8      	ldrb	r0, [r3, #15]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	8b52      	ldrh	r2, [r2, #26]
 8008a14:	9202      	str	r2, [sp, #8]
 8008a16:	2202      	movs	r2, #2
 8008a18:	9201      	str	r2, [sp, #4]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fd23 	bl	800a46c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	7b5b      	ldrb	r3, [r3, #13]
 8008a32:	2200      	movs	r2, #0
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f002 f82e 	bl	800aa98 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	7b1b      	ldrb	r3, [r3, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f002 f827 	bl	800aa98 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd90      	pop	{r4, r7, pc}

08008a54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fd18 	bl	800a4aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fd43 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7b1b      	ldrb	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00e      	beq.n	8008ab2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	7b1b      	ldrb	r3, [r3, #12]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fd05 	bl	800a4aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	7b1b      	ldrb	r3, [r3, #12]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fd30 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	7b5b      	ldrb	r3, [r3, #13]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00e      	beq.n	8008ad8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	7b5b      	ldrb	r3, [r3, #13]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fcf2 	bl	800a4aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	7b5b      	ldrb	r3, [r3, #13]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fd1d 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f002 f88d 	bl	800ac0c <free>
    phost->pActiveClass->pData = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008af8:	2200      	movs	r2, #0
 8008afa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3340      	adds	r3, #64	; 0x40
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8b1 	bl	8008c86 <GetLineCoding>
 8008b24:	4603      	mov	r3, r0
 8008b26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d105      	bne.n	8008b3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b34:	2102      	movs	r1, #2
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d877      	bhi.n	8008c58 <USBH_CDC_Process+0x114>
 8008b68:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <USBH_CDC_Process+0x2c>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b85 	.word	0x08008b85
 8008b74:	08008b8b 	.word	0x08008b8b
 8008b78:	08008bbb 	.word	0x08008bbb
 8008b7c:	08008c2f 	.word	0x08008c2f
 8008b80:	08008c3d 	.word	0x08008c3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	e06d      	b.n	8008c66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f897 	bl	8008cc4 <SetLineCoding>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ba8:	e058      	b.n	8008c5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d055      	beq.n	8008c5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bb8:	e050      	b.n	8008c5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	3340      	adds	r3, #64	; 0x40
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f860 	bl	8008c86 <GetLineCoding>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d126      	bne.n	8008c1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be2:	791b      	ldrb	r3, [r3, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d13b      	bne.n	8008c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d133      	bne.n	8008c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d12b      	bne.n	8008c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d124      	bne.n	8008c60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f958 	bl	8008ecc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c1c:	e020      	b.n	8008c60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d01d      	beq.n	8008c60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2204      	movs	r2, #4
 8008c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c2c:	e018      	b.n	8008c60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f867 	bl	8008d02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f8da 	bl	8008dee <CDC_ProcessReception>
      break;
 8008c3a:	e014      	b.n	8008c66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 ffe3 	bl	8009c0a <USBH_ClrFeature>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c56:	e005      	b.n	8008c64 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c58:	bf00      	nop
 8008c5a:	e004      	b.n	8008c66 <USBH_CDC_Process+0x122>
      break;
 8008c5c:	bf00      	nop
 8008c5e:	e002      	b.n	8008c66 <USBH_CDC_Process+0x122>
      break;
 8008c60:	bf00      	nop
 8008c62:	e000      	b.n	8008c66 <USBH_CDC_Process+0x122>
      break;
 8008c64:	bf00      	nop

  }

  return status;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	22a1      	movs	r2, #161	; 0xa1
 8008c94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2221      	movs	r2, #33	; 0x21
 8008c9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2207      	movs	r2, #7
 8008cac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f988 	bl	8009fca <USBH_CtlReq>
 8008cba:	4603      	mov	r3, r0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2221      	movs	r2, #33	; 0x21
 8008cd2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2207      	movs	r2, #7
 8008cea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2207      	movs	r2, #7
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f969 	bl	8009fca <USBH_CtlReq>
 8008cf8:	4603      	mov	r3, r0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af02      	add	r7, sp, #8
 8008d08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d002      	beq.n	8008d28 <CDC_ProcessTransmission+0x26>
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d023      	beq.n	8008d6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008d26:	e05e      	b.n	8008de6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	8b12      	ldrh	r2, [r2, #24]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d90b      	bls.n	8008d4c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	69d9      	ldr	r1, [r3, #28]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8b1a      	ldrh	r2, [r3, #24]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	7b5b      	ldrb	r3, [r3, #13]
 8008d40:	2001      	movs	r0, #1
 8008d42:	9000      	str	r0, [sp, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 fb4e 	bl	800a3e6 <USBH_BulkSendData>
 8008d4a:	e00b      	b.n	8008d64 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	7b5b      	ldrb	r3, [r3, #13]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	9000      	str	r0, [sp, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fb41 	bl	800a3e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d6c:	e03b      	b.n	8008de6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	7b5b      	ldrb	r3, [r3, #13]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fe65 	bl	800aa44 <USBH_LL_GetURBState>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d128      	bne.n	8008dd6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	8b12      	ldrh	r2, [r2, #24]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d90e      	bls.n	8008dae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	8b12      	ldrh	r2, [r2, #24]
 8008d98:	1a9a      	subs	r2, r3, r2
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	8b12      	ldrh	r2, [r2, #24]
 8008da6:	441a      	add	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	61da      	str	r2, [r3, #28]
 8008dac:	e002      	b.n	8008db4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008dc4:	e00e      	b.n	8008de4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f868 	bl	8008ea4 <USBH_CDC_TransmitCallback>
      break;
 8008dd4:	e006      	b.n	8008de4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d103      	bne.n	8008de4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008de4:	bf00      	nop
  }
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d002      	beq.n	8008e14 <CDC_ProcessReception+0x26>
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d00e      	beq.n	8008e30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e12:	e043      	b.n	8008e9c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	6a19      	ldr	r1, [r3, #32]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	8b5a      	ldrh	r2, [r3, #26]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	7b1b      	ldrb	r3, [r3, #12]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 fb05 	bl	800a430 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e2e:	e035      	b.n	8008e9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	7b1b      	ldrb	r3, [r3, #12]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fe04 	bl	800aa44 <USBH_LL_GetURBState>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e40:	7cfb      	ldrb	r3, [r7, #19]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d129      	bne.n	8008e9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	7b1b      	ldrb	r3, [r3, #12]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 fd67 	bl	800a920 <USBH_LL_GetLastXferSize>
 8008e52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d016      	beq.n	8008e8c <CDC_ProcessReception+0x9e>
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	8b5b      	ldrh	r3, [r3, #26]
 8008e62:	461a      	mov	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d910      	bls.n	8008e8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad2      	subs	r2, r2, r3
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	6a1a      	ldr	r2, [r3, #32]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	441a      	add	r2, r3
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2203      	movs	r2, #3
 8008e86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e8a:	e006      	b.n	8008e9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f80f 	bl	8008eb8 <USBH_CDC_ReceiveCallback>
      break;
 8008e9a:	bf00      	nop
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e029      	b.n	8008f4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	79fa      	ldrb	r2, [r7, #7]
 8008efc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f81f 	bl	8008f54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f001 fc37 	bl	800a7b8 <USBH_LL_Init>

  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e009      	b.n	8008f7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	33e0      	adds	r3, #224	; 0xe0
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3301      	adds	r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b0e      	cmp	r3, #14
 8008f7e:	d9f2      	bls.n	8008f66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e009      	b.n	8008f9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa0:	d3f1      	bcc.n	8008f86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2240      	movs	r2, #64	; 0x40
 8008fc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d016      	beq.n	800903e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10e      	bne.n	8009038 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009020:	1c59      	adds	r1, r3, #1
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	33de      	adds	r3, #222	; 0xde
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
 8009036:	e004      	b.n	8009042 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009038:	2302      	movs	r3, #2
 800903a:	73fb      	strb	r3, [r7, #15]
 800903c:	e001      	b.n	8009042 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	429a      	cmp	r2, r3
 800906a:	d204      	bcs.n	8009076 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009074:	e001      	b.n	800907a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	461a      	mov	r2, r3
 8009096:	4603      	mov	r3, r0
 8009098:	70fb      	strb	r3, [r7, #3]
 800909a:	460b      	mov	r3, r1
 800909c:	70bb      	strb	r3, [r7, #2]
 800909e:	4613      	mov	r3, r2
 80090a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80090b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090b2:	e025      	b.n	8009100 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	221a      	movs	r2, #26
 80090b8:	fb02 f303 	mul.w	r3, r2, r3
 80090bc:	3308      	adds	r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	3302      	adds	r3, #2
 80090c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	795b      	ldrb	r3, [r3, #5]
 80090ca:	78fa      	ldrb	r2, [r7, #3]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d002      	beq.n	80090d6 <USBH_FindInterface+0x4e>
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	2bff      	cmp	r3, #255	; 0xff
 80090d4:	d111      	bne.n	80090fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090da:	78ba      	ldrb	r2, [r7, #2]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d002      	beq.n	80090e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090e0:	78bb      	ldrb	r3, [r7, #2]
 80090e2:	2bff      	cmp	r3, #255	; 0xff
 80090e4:	d109      	bne.n	80090fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090ea:	787a      	ldrb	r2, [r7, #1]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d002      	beq.n	80090f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090f0:	787b      	ldrb	r3, [r7, #1]
 80090f2:	2bff      	cmp	r3, #255	; 0xff
 80090f4:	d101      	bne.n	80090fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	e006      	b.n	8009108 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	3301      	adds	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d9d6      	bls.n	80090b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009106:	23ff      	movs	r3, #255	; 0xff
}
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fb87 	bl	800a830 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009122:	2101      	movs	r1, #1
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fca0 	bl	800aa6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af04      	add	r7, sp, #16
 800913a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800913c:	2302      	movs	r3, #2
 800913e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d102      	bne.n	8009156 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2203      	movs	r2, #3
 8009154:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b0b      	cmp	r3, #11
 800915e:	f200 81b3 	bhi.w	80094c8 <USBH_Process+0x394>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <USBH_Process+0x34>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	08009199 	.word	0x08009199
 800916c:	080091cb 	.word	0x080091cb
 8009170:	08009233 	.word	0x08009233
 8009174:	08009463 	.word	0x08009463
 8009178:	080094c9 	.word	0x080094c9
 800917c:	080092d7 	.word	0x080092d7
 8009180:	08009409 	.word	0x08009409
 8009184:	0800930d 	.word	0x0800930d
 8009188:	0800932d 	.word	0x0800932d
 800918c:	0800934d 	.word	0x0800934d
 8009190:	0800937b 	.word	0x0800937b
 8009194:	0800944b 	.word	0x0800944b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 8193 	beq.w	80094cc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80091ac:	20c8      	movs	r0, #200	; 0xc8
 80091ae:	f001 fca3 	bl	800aaf8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fb99 	bl	800a8ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80091c8:	e180      	b.n	80094cc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d107      	bne.n	80091e4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091e2:	e182      	b.n	80094ea <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ee:	d914      	bls.n	800921a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80091f6:	3301      	adds	r3, #1
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009206:	2b03      	cmp	r3, #3
 8009208:	d903      	bls.n	8009212 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220d      	movs	r2, #13
 800920e:	701a      	strb	r2, [r3, #0]
      break;
 8009210:	e16b      	b.n	80094ea <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
      break;
 8009218:	e167      	b.n	80094ea <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009220:	f103 020a 	add.w	r2, r3, #10
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800922a:	200a      	movs	r0, #10
 800922c:	f001 fc64 	bl	800aaf8 <USBH_Delay>
      break;
 8009230:	e15b      	b.n	80094ea <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009242:	2104      	movs	r1, #4
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009248:	2064      	movs	r0, #100	; 0x64
 800924a:	f001 fc55 	bl	800aaf8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fb24 	bl	800a89c <USBH_LL_GetSpeed>
 8009254:	4603      	mov	r3, r0
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2205      	movs	r2, #5
 8009262:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 f92f 	bl	800a4ca <USBH_AllocPipe>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009274:	2180      	movs	r1, #128	; 0x80
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f927 	bl	800a4ca <USBH_AllocPipe>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7919      	ldrb	r1, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009298:	b292      	uxth	r2, r2
 800929a:	9202      	str	r2, [sp, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	9201      	str	r2, [sp, #4]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	4603      	mov	r3, r0
 80092a4:	2280      	movs	r2, #128	; 0x80
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f8e0 	bl	800a46c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7959      	ldrb	r1, [r3, #5]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092c0:	b292      	uxth	r2, r2
 80092c2:	9202      	str	r2, [sp, #8]
 80092c4:	2200      	movs	r2, #0
 80092c6:	9201      	str	r2, [sp, #4]
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4603      	mov	r3, r0
 80092cc:	2200      	movs	r2, #0
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 f8cc 	bl	800a46c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80092d4:	e109      	b.n	80094ea <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f90c 	bl	80094f4 <USBH_HandleEnum>
 80092dc:	4603      	mov	r3, r0
 80092de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 80f3 	bne.w	80094d0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d103      	bne.n	8009304 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2208      	movs	r2, #8
 8009300:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009302:	e0e5      	b.n	80094d0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2207      	movs	r2, #7
 8009308:	701a      	strb	r2, [r3, #0]
      break;
 800930a:	e0e1      	b.n	80094d0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80de 	beq.w	80094d4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800931e:	2101      	movs	r1, #1
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2208      	movs	r2, #8
 8009328:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800932a:	e0d3      	b.n	80094d4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009332:	b29b      	uxth	r3, r3
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc20 	bl	8009b7c <USBH_SetCfg>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 80ca 	bne.w	80094d8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2209      	movs	r2, #9
 8009348:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800934a:	e0c5      	b.n	80094d8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800935a:	2101      	movs	r1, #1
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc30 	bl	8009bc2 <USBH_SetFeature>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	f040 80b9 	bne.w	80094dc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	220a      	movs	r2, #10
 800936e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009370:	e0b4      	b.n	80094dc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	220a      	movs	r2, #10
 8009376:	701a      	strb	r2, [r3, #0]
      break;
 8009378:	e0b0      	b.n	80094dc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80ad 	beq.w	80094e0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
 8009392:	e016      	b.n	80093c2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009394:	7bfa      	ldrb	r2, [r7, #15]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	32de      	adds	r2, #222	; 0xde
 800939a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939e:	791a      	ldrb	r2, [r3, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d108      	bne.n	80093bc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80093aa:	7bfa      	ldrb	r2, [r7, #15]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	32de      	adds	r2, #222	; 0xde
 80093b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80093ba:	e005      	b.n	80093c8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	3301      	adds	r3, #1
 80093c0:	73fb      	strb	r3, [r7, #15]
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0e5      	beq.n	8009394 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d016      	beq.n	8009400 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2206      	movs	r2, #6
 80093e8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093f0:	2103      	movs	r1, #3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093f6:	e073      	b.n	80094e0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	220d      	movs	r2, #13
 80093fc:	701a      	strb	r2, [r3, #0]
      break;
 80093fe:	e06f      	b.n	80094e0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	220d      	movs	r2, #13
 8009404:	701a      	strb	r2, [r3, #0]
      break;
 8009406:	e06b      	b.n	80094e0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d017      	beq.n	8009442 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220b      	movs	r2, #11
 800942e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009430:	e058      	b.n	80094e4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d154      	bne.n	80094e4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	220d      	movs	r2, #13
 800943e:	701a      	strb	r2, [r3, #0]
      break;
 8009440:	e050      	b.n	80094e4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	220d      	movs	r2, #13
 8009446:	701a      	strb	r2, [r3, #0]
      break;
 8009448:	e04c      	b.n	80094e4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d049      	beq.n	80094e8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
      }
      break;
 8009460:	e042      	b.n	80094e8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff fd72 	bl	8008f54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800949e:	2105      	movs	r1, #5
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d107      	bne.n	80094c0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fe2b 	bl	8009114 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094be:	e014      	b.n	80094ea <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 f9b5 	bl	800a830 <USBH_LL_Start>
      break;
 80094c6:	e010      	b.n	80094ea <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80094c8:	bf00      	nop
 80094ca:	e00e      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094cc:	bf00      	nop
 80094ce:	e00c      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094d0:	bf00      	nop
 80094d2:	e00a      	b.n	80094ea <USBH_Process+0x3b6>
    break;
 80094d4:	bf00      	nop
 80094d6:	e008      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094d8:	bf00      	nop
 80094da:	e006      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094dc:	bf00      	nop
 80094de:	e004      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094e0:	bf00      	nop
 80094e2:	e002      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <USBH_Process+0x3b6>
      break;
 80094e8:	bf00      	nop
  }
  return USBH_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af04      	add	r7, sp, #16
 80094fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009500:	2301      	movs	r3, #1
 8009502:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b07      	cmp	r3, #7
 800950a:	f200 81c1 	bhi.w	8009890 <USBH_HandleEnum+0x39c>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <USBH_HandleEnum+0x20>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009535 	.word	0x08009535
 8009518:	080095f3 	.word	0x080095f3
 800951c:	0800965d 	.word	0x0800965d
 8009520:	080096eb 	.word	0x080096eb
 8009524:	08009755 	.word	0x08009755
 8009528:	080097c5 	.word	0x080097c5
 800952c:	0800980b 	.word	0x0800980b
 8009530:	08009851 	.word	0x08009851
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009534:	2108      	movs	r1, #8
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa50 	bl	80099dc <USBH_Get_DevDesc>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d130      	bne.n	80095a8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7919      	ldrb	r1, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800956a:	b292      	uxth	r2, r2
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	2200      	movs	r2, #0
 8009570:	9201      	str	r2, [sp, #4]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4603      	mov	r3, r0
 8009576:	2280      	movs	r2, #128	; 0x80
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 ff77 	bl	800a46c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7959      	ldrb	r1, [r3, #5]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009592:	b292      	uxth	r2, r2
 8009594:	9202      	str	r2, [sp, #8]
 8009596:	2200      	movs	r2, #0
 8009598:	9201      	str	r2, [sp, #4]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	4603      	mov	r3, r0
 800959e:	2200      	movs	r2, #0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 ff63 	bl	800a46c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095a6:	e175      	b.n	8009894 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	f040 8172 	bne.w	8009894 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095b6:	3301      	adds	r3, #1
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d903      	bls.n	80095d2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	220d      	movs	r2, #13
 80095ce:	701a      	strb	r2, [r3, #0]
      break;
 80095d0:	e160      	b.n	8009894 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	795b      	ldrb	r3, [r3, #5]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 ff97 	bl	800a50c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	791b      	ldrb	r3, [r3, #4]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 ff91 	bl	800a50c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
      break;
 80095f0:	e150      	b.n	8009894 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80095f2:	2112      	movs	r1, #18
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f9f1 	bl	80099dc <USBH_Get_DevDesc>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800960a:	e145      	b.n	8009898 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	2b03      	cmp	r3, #3
 8009610:	f040 8142 	bne.w	8009898 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800961a:	3301      	adds	r3, #1
 800961c:	b2da      	uxtb	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800962a:	2b03      	cmp	r3, #3
 800962c:	d903      	bls.n	8009636 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	220d      	movs	r2, #13
 8009632:	701a      	strb	r2, [r3, #0]
      break;
 8009634:	e130      	b.n	8009898 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	795b      	ldrb	r3, [r3, #5]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 ff65 	bl	800a50c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	791b      	ldrb	r3, [r3, #4]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 ff5f 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
      break;
 800965a:	e11d      	b.n	8009898 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800965c:	2101      	movs	r1, #1
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fa68 	bl	8009b34 <USBH_SetAddress>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d132      	bne.n	80096d4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800966e:	2002      	movs	r0, #2
 8009670:	f001 fa42 	bl	800aaf8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2203      	movs	r2, #3
 8009680:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	7919      	ldrb	r1, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009696:	b292      	uxth	r2, r2
 8009698:	9202      	str	r2, [sp, #8]
 800969a:	2200      	movs	r2, #0
 800969c:	9201      	str	r2, [sp, #4]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4603      	mov	r3, r0
 80096a2:	2280      	movs	r2, #128	; 0x80
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fee1 	bl	800a46c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	7959      	ldrb	r1, [r3, #5]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096be:	b292      	uxth	r2, r2
 80096c0:	9202      	str	r2, [sp, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	9201      	str	r2, [sp, #4]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4603      	mov	r3, r0
 80096ca:	2200      	movs	r2, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fecd 	bl	800a46c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80096d2:	e0e3      	b.n	800989c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	f040 80e0 	bne.w	800989c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	220d      	movs	r2, #13
 80096e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	705a      	strb	r2, [r3, #1]
      break;
 80096e8:	e0d8      	b.n	800989c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80096ea:	2109      	movs	r1, #9
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f99d 	bl	8009a2c <USBH_Get_CfgDesc>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d103      	bne.n	8009704 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2204      	movs	r2, #4
 8009700:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009702:	e0cd      	b.n	80098a0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b03      	cmp	r3, #3
 8009708:	f040 80ca 	bne.w	80098a0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009712:	3301      	adds	r3, #1
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009722:	2b03      	cmp	r3, #3
 8009724:	d903      	bls.n	800972e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	220d      	movs	r2, #13
 800972a:	701a      	strb	r2, [r3, #0]
      break;
 800972c:	e0b8      	b.n	80098a0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	795b      	ldrb	r3, [r3, #5]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fee9 	bl	800a50c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	791b      	ldrb	r3, [r3, #4]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fee3 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]
      break;
 8009752:	e0a5      	b.n	80098a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f965 	bl	8009a2c <USBH_Get_CfgDesc>
 8009762:	4603      	mov	r3, r0
 8009764:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2205      	movs	r2, #5
 8009770:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009772:	e097      	b.n	80098a4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b03      	cmp	r3, #3
 8009778:	f040 8094 	bne.w	80098a4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009782:	3301      	adds	r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009792:	2b03      	cmp	r3, #3
 8009794:	d903      	bls.n	800979e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	220d      	movs	r2, #13
 800979a:	701a      	strb	r2, [r3, #0]
      break;
 800979c:	e082      	b.n	80098a4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	795b      	ldrb	r3, [r3, #5]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 feb1 	bl	800a50c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	791b      	ldrb	r3, [r3, #4]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 feab 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
      break;
 80097c2:	e06f      	b.n	80098a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d019      	beq.n	8009802 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097da:	23ff      	movs	r3, #255	; 0xff
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f949 	bl	8009a74 <USBH_Get_StringDesc>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2206      	movs	r2, #6
 80097f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80097f2:	e059      	b.n	80098a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d156      	bne.n	80098a8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2206      	movs	r2, #6
 80097fe:	705a      	strb	r2, [r3, #1]
      break;
 8009800:	e052      	b.n	80098a8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2206      	movs	r2, #6
 8009806:	705a      	strb	r2, [r3, #1]
      break;
 8009808:	e04e      	b.n	80098a8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009810:	2b00      	cmp	r3, #0
 8009812:	d019      	beq.n	8009848 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009820:	23ff      	movs	r3, #255	; 0xff
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f926 	bl	8009a74 <USBH_Get_StringDesc>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2207      	movs	r2, #7
 8009836:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009838:	e038      	b.n	80098ac <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	2b03      	cmp	r3, #3
 800983e:	d135      	bne.n	80098ac <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2207      	movs	r2, #7
 8009844:	705a      	strb	r2, [r3, #1]
      break;
 8009846:	e031      	b.n	80098ac <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2207      	movs	r2, #7
 800984c:	705a      	strb	r2, [r3, #1]
      break;
 800984e:	e02d      	b.n	80098ac <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009856:	2b00      	cmp	r3, #0
 8009858:	d017      	beq.n	800988a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009866:	23ff      	movs	r3, #255	; 0xff
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f903 	bl	8009a74 <USBH_Get_StringDesc>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800987c:	e018      	b.n	80098b0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d115      	bne.n	80098b0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
      break;
 8009888:	e012      	b.n	80098b0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]
      break;
 800988e:	e00f      	b.n	80098b0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009890:	bf00      	nop
 8009892:	e00e      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 8009894:	bf00      	nop
 8009896:	e00c      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 8009898:	bf00      	nop
 800989a:	e00a      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 800989c:	bf00      	nop
 800989e:	e008      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 80098a0:	bf00      	nop
 80098a2:	e006      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 80098a4:	bf00      	nop
 80098a6:	e004      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 80098a8:	bf00      	nop
 80098aa:	e002      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 80098ac:	bf00      	nop
 80098ae:	e000      	b.n	80098b2 <USBH_HandleEnum+0x3be>
      break;
 80098b0:	bf00      	nop
  }
  return Status;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f804 	bl	80098fe <USBH_HandleSof>
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b0b      	cmp	r3, #11
 800990e:	d10a      	bne.n	8009926 <USBH_HandleSof+0x28>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
  }
}
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800993e:	bf00      	nop
}
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800995a:	bf00      	nop
}
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 ff56 	bl	800a866 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	791b      	ldrb	r3, [r3, #4]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fda3 	bl	800a50c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	795b      	ldrb	r3, [r3, #5]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fd9d 	bl	800a50c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099fa:	2100      	movs	r1, #0
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f864 	bl	8009aca <USBH_GetDescriptor>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f000 f918 	bl	8009c52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	331c      	adds	r3, #28
 8009a3c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a3e:	887b      	ldrh	r3, [r7, #2]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f83d 	bl	8009aca <USBH_GetDescriptor>
 8009a50:	4603      	mov	r3, r0
 8009a52:	72fb      	strb	r3, [r7, #11]
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d107      	bne.n	8009a6a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a60:	887a      	ldrh	r2, [r7, #2]
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f964 	bl	8009d32 <USBH_ParseCfgDesc>
  }

  return status;
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	460b      	mov	r3, r1
 8009a82:	72fb      	strb	r3, [r7, #11]
 8009a84:	4613      	mov	r3, r2
 8009a86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009a88:	7afb      	ldrb	r3, [r7, #11]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a90:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a98:	893b      	ldrh	r3, [r7, #8]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f812 	bl	8009aca <USBH_GetDescriptor>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ab6:	893a      	ldrh	r2, [r7, #8]
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fa37 	bl	8009f2e <USBH_ParseStringDesc>
  }

  return status;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	72fb      	strb	r3, [r7, #11]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	789b      	ldrb	r3, [r3, #2]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d11c      	bne.n	8009b1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2206      	movs	r2, #6
 8009af4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	893a      	ldrh	r2, [r7, #8]
 8009afa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009afc:	893b      	ldrh	r3, [r7, #8]
 8009afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b06:	d104      	bne.n	8009b12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f240 4209 	movw	r2, #1033	; 0x409
 8009b0e:	829a      	strh	r2, [r3, #20]
 8009b10:	e002      	b.n	8009b18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8b3a      	ldrh	r2, [r7, #24]
 8009b1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b1e:	8b3b      	ldrh	r3, [r7, #24]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 fa50 	bl	8009fca <USBH_CtlReq>
 8009b2a:	4603      	mov	r3, r0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	789b      	ldrb	r3, [r3, #2]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d10f      	bne.n	8009b68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2205      	movs	r2, #5
 8009b52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa2c 	bl	8009fca <USBH_CtlReq>
 8009b72:	4603      	mov	r3, r0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	789b      	ldrb	r3, [r3, #2]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d10e      	bne.n	8009bae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2209      	movs	r2, #9
 8009b9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	887a      	ldrh	r2, [r7, #2]
 8009ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa09 	bl	8009fca <USBH_CtlReq>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	789b      	ldrb	r3, [r3, #2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d10f      	bne.n	8009bf6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2203      	movs	r2, #3
 8009be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f9e5 	bl	8009fca <USBH_CtlReq>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	789b      	ldrb	r3, [r3, #2]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d10f      	bne.n	8009c3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2100      	movs	r1, #0
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9c1 	bl	8009fca <USBH_CtlReq>
 8009c48:	4603      	mov	r3, r0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	785a      	ldrb	r2, [r3, #1]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3302      	adds	r3, #2
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	3303      	adds	r3, #3
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	791a      	ldrb	r2, [r3, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	795a      	ldrb	r2, [r3, #5]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	799a      	ldrb	r2, [r3, #6]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	79da      	ldrb	r2, [r3, #7]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	d939      	bls.n	8009d26 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	3309      	adds	r3, #9
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	330a      	adds	r3, #10
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	330b      	adds	r3, #11
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	330c      	adds	r3, #12
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	330d      	adds	r3, #13
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	7b9a      	ldrb	r2, [r3, #14]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	7bda      	ldrb	r2, [r3, #15]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	7c1a      	ldrb	r2, [r3, #16]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	7c5a      	ldrb	r2, [r3, #17]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	745a      	strb	r2, [r3, #17]
  }
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b08a      	sub	sp, #40	; 0x28
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	781a      	ldrb	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	785a      	ldrb	r2, [r3, #1]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	3302      	adds	r3, #2
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	3303      	adds	r3, #3
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	791a      	ldrb	r2, [r3, #4]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	795a      	ldrb	r2, [r3, #5]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	799a      	ldrb	r2, [r3, #6]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	79da      	ldrb	r2, [r3, #7]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	7a1a      	ldrb	r2, [r3, #8]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009da8:	88fb      	ldrh	r3, [r7, #6]
 8009daa:	2b09      	cmp	r3, #9
 8009dac:	d95f      	bls.n	8009e6e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009dae:	2309      	movs	r3, #9
 8009db0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009db6:	e051      	b.n	8009e5c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009db8:	f107 0316 	add.w	r3, r7, #22
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dc0:	f000 f8e8 	bl	8009f94 <USBH_GetNextDesc>
 8009dc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d146      	bne.n	8009e5c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dd2:	221a      	movs	r2, #26
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	3308      	adds	r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	3302      	adds	r3, #2
 8009de0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009de4:	69f8      	ldr	r0, [r7, #28]
 8009de6:	f000 f846 	bl	8009e76 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009df4:	e022      	b.n	8009e3c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009df6:	f107 0316 	add.w	r3, r7, #22
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dfe:	f000 f8c9 	bl	8009f94 <USBH_GetNextDesc>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b05      	cmp	r3, #5
 8009e0a:	d117      	bne.n	8009e3c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e14:	3201      	adds	r2, #1
 8009e16:	00d2      	lsls	r2, r2, #3
 8009e18:	211a      	movs	r1, #26
 8009e1a:	fb01 f303 	mul.w	r3, r1, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	3308      	adds	r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	3304      	adds	r3, #4
 8009e28:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e2c:	69b8      	ldr	r0, [r7, #24]
 8009e2e:	f000 f851 	bl	8009ed4 <USBH_ParseEPDesc>
            ep_ix++;
 8009e32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e36:	3301      	adds	r3, #1
 8009e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	791b      	ldrb	r3, [r3, #4]
 8009e40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d204      	bcs.n	8009e52 <USBH_ParseCfgDesc+0x120>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	885a      	ldrh	r2, [r3, #2]
 8009e4c:	8afb      	ldrh	r3, [r7, #22]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d8d1      	bhi.n	8009df6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e56:	3301      	adds	r3, #1
 8009e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d804      	bhi.n	8009e6e <USBH_ParseCfgDesc+0x13c>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	885a      	ldrh	r2, [r3, #2]
 8009e68:	8afb      	ldrh	r3, [r7, #22]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d8a4      	bhi.n	8009db8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009e6e:	bf00      	nop
 8009e70:	3728      	adds	r7, #40	; 0x28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	785a      	ldrb	r2, [r3, #1]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	789a      	ldrb	r2, [r3, #2]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	78da      	ldrb	r2, [r3, #3]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	791a      	ldrb	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	795a      	ldrb	r2, [r3, #5]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	799a      	ldrb	r2, [r3, #6]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	79da      	ldrb	r2, [r3, #7]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	7a1a      	ldrb	r2, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	721a      	strb	r2, [r3, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781a      	ldrb	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	785a      	ldrb	r2, [r3, #1]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	789a      	ldrb	r2, [r3, #2]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	78da      	ldrb	r2, [r3, #3]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	3304      	adds	r3, #4
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	3305      	adds	r3, #5
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	799a      	ldrb	r2, [r3, #6]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	719a      	strb	r2, [r3, #6]
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b087      	sub	sp, #28
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d120      	bne.n	8009f88 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	1e9a      	subs	r2, r3, #2
 8009f4c:	88fb      	ldrh	r3, [r7, #6]
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	bf28      	it	cs
 8009f52:	4613      	movcs	r3, r2
 8009f54:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3302      	adds	r3, #2
 8009f5a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	82fb      	strh	r3, [r7, #22]
 8009f60:	e00b      	b.n	8009f7a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f62:	8afb      	ldrh	r3, [r7, #22]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4413      	add	r3, r2
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f74:	8afb      	ldrh	r3, [r7, #22]
 8009f76:	3302      	adds	r3, #2
 8009f78:	82fb      	strh	r3, [r7, #22]
 8009f7a:	8afa      	ldrh	r2, [r7, #22]
 8009f7c:	8abb      	ldrh	r3, [r7, #20]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d3ef      	bcc.n	8009f62 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
  }
}
 8009f88:	bf00      	nop
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	881a      	ldrh	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4413      	add	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b086      	sub	sp, #24
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	789b      	ldrb	r3, [r3, #2]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d002      	beq.n	8009fea <USBH_CtlReq+0x20>
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d00f      	beq.n	800a008 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009fe8:	e027      	b.n	800a03a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	88fa      	ldrh	r2, [r7, #6]
 8009ff4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2202      	movs	r2, #2
 800a000:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
      break;
 800a006:	e018      	b.n	800a03a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f81b 	bl	800a044 <USBH_HandleControl>
 800a00e:	4603      	mov	r3, r0
 800a010:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <USBH_CtlReq+0x54>
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d106      	bne.n	800a02c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2201      	movs	r2, #1
 800a022:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	761a      	strb	r2, [r3, #24]
      break;
 800a02a:	e005      	b.n	800a038 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d102      	bne.n	800a038 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	709a      	strb	r2, [r3, #2]
      break;
 800a038:	bf00      	nop
  }
  return status;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af02      	add	r7, sp, #8
 800a04a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7e1b      	ldrb	r3, [r3, #24]
 800a058:	3b01      	subs	r3, #1
 800a05a:	2b0a      	cmp	r3, #10
 800a05c:	f200 8156 	bhi.w	800a30c <USBH_HandleControl+0x2c8>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USBH_HandleControl+0x24>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a095 	.word	0x0800a095
 800a06c:	0800a0af 	.word	0x0800a0af
 800a070:	0800a119 	.word	0x0800a119
 800a074:	0800a13f 	.word	0x0800a13f
 800a078:	0800a177 	.word	0x0800a177
 800a07c:	0800a1a1 	.word	0x0800a1a1
 800a080:	0800a1f3 	.word	0x0800a1f3
 800a084:	0800a215 	.word	0x0800a215
 800a088:	0800a251 	.word	0x0800a251
 800a08c:	0800a277 	.word	0x0800a277
 800a090:	0800a2b5 	.word	0x0800a2b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f103 0110 	add.w	r1, r3, #16
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	795b      	ldrb	r3, [r3, #5]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f943 	bl	800a32c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	761a      	strb	r2, [r3, #24]
      break;
 800a0ac:	e139      	b.n	800a322 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	795b      	ldrb	r3, [r3, #5]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fcc5 	bl	800aa44 <USBH_LL_GetURBState>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d11e      	bne.n	800a102 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	7c1b      	ldrb	r3, [r3, #16]
 800a0c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8adb      	ldrh	r3, [r3, #22]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a0d6:	7b7b      	ldrb	r3, [r7, #13]
 800a0d8:	2b80      	cmp	r3, #128	; 0x80
 800a0da:	d103      	bne.n	800a0e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0e2:	e115      	b.n	800a310 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2205      	movs	r2, #5
 800a0e8:	761a      	strb	r2, [r3, #24]
      break;
 800a0ea:	e111      	b.n	800a310 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a0ec:	7b7b      	ldrb	r3, [r7, #13]
 800a0ee:	2b80      	cmp	r3, #128	; 0x80
 800a0f0:	d103      	bne.n	800a0fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2209      	movs	r2, #9
 800a0f6:	761a      	strb	r2, [r3, #24]
      break;
 800a0f8:	e10a      	b.n	800a310 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2207      	movs	r2, #7
 800a0fe:	761a      	strb	r2, [r3, #24]
      break;
 800a100:	e106      	b.n	800a310 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b04      	cmp	r3, #4
 800a106:	d003      	beq.n	800a110 <USBH_HandleControl+0xcc>
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	f040 8100 	bne.w	800a310 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	220b      	movs	r2, #11
 800a114:	761a      	strb	r2, [r3, #24]
      break;
 800a116:	e0fb      	b.n	800a310 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6899      	ldr	r1, [r3, #8]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	899a      	ldrh	r2, [r3, #12]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f93a 	bl	800a3aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2204      	movs	r2, #4
 800a13a:	761a      	strb	r2, [r3, #24]
      break;
 800a13c:	e0f1      	b.n	800a322 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	791b      	ldrb	r3, [r3, #4]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fc7d 	bl	800aa44 <USBH_LL_GetURBState>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d102      	bne.n	800a15a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2209      	movs	r2, #9
 800a158:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	d102      	bne.n	800a166 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a160:	2303      	movs	r3, #3
 800a162:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a164:	e0d6      	b.n	800a314 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b04      	cmp	r3, #4
 800a16a:	f040 80d3 	bne.w	800a314 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	220b      	movs	r2, #11
 800a172:	761a      	strb	r2, [r3, #24]
      break;
 800a174:	e0ce      	b.n	800a314 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6899      	ldr	r1, [r3, #8]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	899a      	ldrh	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	795b      	ldrb	r3, [r3, #5]
 800a182:	2001      	movs	r0, #1
 800a184:	9000      	str	r0, [sp, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f8ea 	bl	800a360 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2206      	movs	r2, #6
 800a19c:	761a      	strb	r2, [r3, #24]
      break;
 800a19e:	e0c0      	b.n	800a322 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	795b      	ldrb	r3, [r3, #5]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fc4c 	bl	800aa44 <USBH_LL_GetURBState>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d103      	bne.n	800a1be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2207      	movs	r2, #7
 800a1ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1bc:	e0ac      	b.n	800a318 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	d105      	bne.n	800a1d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	220c      	movs	r2, #12
 800a1c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ce:	e0a3      	b.n	800a318 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d103      	bne.n	800a1de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2205      	movs	r2, #5
 800a1da:	761a      	strb	r2, [r3, #24]
      break;
 800a1dc:	e09c      	b.n	800a318 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	f040 8099 	bne.w	800a318 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	220b      	movs	r2, #11
 800a1ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f0:	e092      	b.n	800a318 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	791b      	ldrb	r3, [r3, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8d5 	bl	800a3aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2208      	movs	r2, #8
 800a210:	761a      	strb	r2, [r3, #24]

      break;
 800a212:	e086      	b.n	800a322 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	791b      	ldrb	r3, [r3, #4]
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fc12 	bl	800aa44 <USBH_LL_GetURBState>
 800a220:	4603      	mov	r3, r0
 800a222:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d105      	bne.n	800a236 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	220d      	movs	r2, #13
 800a22e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a234:	e072      	b.n	800a31c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d103      	bne.n	800a244 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	220b      	movs	r2, #11
 800a240:	761a      	strb	r2, [r3, #24]
      break;
 800a242:	e06b      	b.n	800a31c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b05      	cmp	r3, #5
 800a248:	d168      	bne.n	800a31c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a24a:	2303      	movs	r3, #3
 800a24c:	73fb      	strb	r3, [r7, #15]
      break;
 800a24e:	e065      	b.n	800a31c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	795b      	ldrb	r3, [r3, #5]
 800a254:	2201      	movs	r2, #1
 800a256:	9200      	str	r2, [sp, #0]
 800a258:	2200      	movs	r2, #0
 800a25a:	2100      	movs	r1, #0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f87f 	bl	800a360 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a268:	b29a      	uxth	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	220a      	movs	r2, #10
 800a272:	761a      	strb	r2, [r3, #24]
      break;
 800a274:	e055      	b.n	800a322 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	795b      	ldrb	r3, [r3, #5]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fbe1 	bl	800aa44 <USBH_LL_GetURBState>
 800a282:	4603      	mov	r3, r0
 800a284:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d105      	bne.n	800a298 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	220d      	movs	r2, #13
 800a294:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a296:	e043      	b.n	800a320 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d103      	bne.n	800a2a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2209      	movs	r2, #9
 800a2a2:	761a      	strb	r2, [r3, #24]
      break;
 800a2a4:	e03c      	b.n	800a320 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d139      	bne.n	800a320 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	220b      	movs	r2, #11
 800a2b0:	761a      	strb	r2, [r3, #24]
      break;
 800a2b2:	e035      	b.n	800a320 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7e5b      	ldrb	r3, [r3, #25]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	765a      	strb	r2, [r3, #25]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7e5b      	ldrb	r3, [r3, #25]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d806      	bhi.n	800a2d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2d4:	e025      	b.n	800a322 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2dc:	2106      	movs	r1, #6
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	795b      	ldrb	r3, [r3, #5]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f90c 	bl	800a50c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	791b      	ldrb	r3, [r3, #4]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f906 	bl	800a50c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a306:	2302      	movs	r3, #2
 800a308:	73fb      	strb	r3, [r7, #15]
      break;
 800a30a:	e00a      	b.n	800a322 <USBH_HandleControl+0x2de>

    default:
      break;
 800a30c:	bf00      	nop
 800a30e:	e008      	b.n	800a322 <USBH_HandleControl+0x2de>
      break;
 800a310:	bf00      	nop
 800a312:	e006      	b.n	800a322 <USBH_HandleControl+0x2de>
      break;
 800a314:	bf00      	nop
 800a316:	e004      	b.n	800a322 <USBH_HandleControl+0x2de>
      break;
 800a318:	bf00      	nop
 800a31a:	e002      	b.n	800a322 <USBH_HandleControl+0x2de>
      break;
 800a31c:	bf00      	nop
 800a31e:	e000      	b.n	800a322 <USBH_HandleControl+0x2de>
      break;
 800a320:	bf00      	nop
  }

  return status;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af04      	add	r7, sp, #16
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a33a:	79f9      	ldrb	r1, [r7, #7]
 800a33c:	2300      	movs	r3, #0
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	2308      	movs	r3, #8
 800a342:	9302      	str	r3, [sp, #8]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2300      	movs	r3, #0
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	2200      	movs	r2, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 fb46 	bl	800a9e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af04      	add	r7, sp, #16
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4611      	mov	r1, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	460b      	mov	r3, r1
 800a370:	80fb      	strh	r3, [r7, #6]
 800a372:	4613      	mov	r3, r2
 800a374:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a384:	7979      	ldrb	r1, [r7, #5]
 800a386:	7e3b      	ldrb	r3, [r7, #24]
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	2301      	movs	r3, #1
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2300      	movs	r3, #0
 800a398:	2200      	movs	r2, #0
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 fb21 	bl	800a9e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b088      	sub	sp, #32
 800a3ae:	af04      	add	r7, sp, #16
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	80fb      	strh	r3, [r7, #6]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3c0:	7979      	ldrb	r1, [r7, #5]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 fb03 	bl	800a9e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a3dc:	2300      	movs	r3, #0

}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af04      	add	r7, sp, #16
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	80fb      	strh	r3, [r7, #6]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a40a:	7979      	ldrb	r1, [r7, #5]
 800a40c:	7e3b      	ldrb	r3, [r7, #24]
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	88fb      	ldrh	r3, [r7, #6]
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	2301      	movs	r3, #1
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	2302      	movs	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 fade 	bl	800a9e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af04      	add	r7, sp, #16
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4611      	mov	r1, r2
 800a43c:	461a      	mov	r2, r3
 800a43e:	460b      	mov	r3, r1
 800a440:	80fb      	strh	r3, [r7, #6]
 800a442:	4613      	mov	r3, r2
 800a444:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a446:	7979      	ldrb	r1, [r7, #5]
 800a448:	2300      	movs	r3, #0
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	88fb      	ldrh	r3, [r7, #6]
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	2301      	movs	r3, #1
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2302      	movs	r3, #2
 800a45a:	2201      	movs	r2, #1
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 fac0 	bl	800a9e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af04      	add	r7, sp, #16
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	70fb      	strb	r3, [r7, #3]
 800a47e:	460b      	mov	r3, r1
 800a480:	70bb      	strb	r3, [r7, #2]
 800a482:	4613      	mov	r3, r2
 800a484:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a486:	7878      	ldrb	r0, [r7, #1]
 800a488:	78ba      	ldrb	r2, [r7, #2]
 800a48a:	78f9      	ldrb	r1, [r7, #3]
 800a48c:	8b3b      	ldrh	r3, [r7, #24]
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	7d3b      	ldrb	r3, [r7, #20]
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	7c3b      	ldrb	r3, [r7, #16]
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	4603      	mov	r3, r0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fa53 	bl	800a946 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa72 	bl	800a9a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f836 	bl	800a548 <USBH_GetFreePipe>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4e0:	89fb      	ldrh	r3, [r7, #14]
 800a4e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00a      	beq.n	800a500 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	33e0      	adds	r3, #224	; 0xe0
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	b2db      	uxtb	r3, r3
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	2b0a      	cmp	r3, #10
 800a51c:	d80d      	bhi.n	800a53a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	33e0      	adds	r3, #224	; 0xe0
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	33e0      	adds	r3, #224	; 0xe0
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]
 800a558:	e00f      	b.n	800a57a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	33e0      	adds	r3, #224	; 0xe0
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	b29b      	uxth	r3, r3
 800a572:	e007      	b.n	800a584 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	3301      	adds	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b0a      	cmp	r3, #10
 800a57e:	d9ec      	bls.n	800a55a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a580:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a594:	2201      	movs	r2, #1
 800a596:	490e      	ldr	r1, [pc, #56]	; (800a5d0 <MX_USB_HOST_Init+0x40>)
 800a598:	480e      	ldr	r0, [pc, #56]	; (800a5d4 <MX_USB_HOST_Init+0x44>)
 800a59a:	f7fe fca1 	bl	8008ee0 <USBH_Init>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5a4:	f7f7 fb60 	bl	8001c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5a8:	490b      	ldr	r1, [pc, #44]	; (800a5d8 <MX_USB_HOST_Init+0x48>)
 800a5aa:	480a      	ldr	r0, [pc, #40]	; (800a5d4 <MX_USB_HOST_Init+0x44>)
 800a5ac:	f7fe fd26 	bl	8008ffc <USBH_RegisterClass>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5b6:	f7f7 fb57 	bl	8001c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5ba:	4806      	ldr	r0, [pc, #24]	; (800a5d4 <MX_USB_HOST_Init+0x44>)
 800a5bc:	f7fe fdaa 	bl	8009114 <USBH_Start>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5c6:	f7f7 fb4f 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a5ca:	bf00      	nop
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	2000412c 	.word	0x2000412c
 800a5d8:	20000044 	.word	0x20000044

0800a5dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a5e0:	4802      	ldr	r0, [pc, #8]	; (800a5ec <MX_USB_HOST_Process+0x10>)
 800a5e2:	f7fe fda7 	bl	8009134 <USBH_Process>
}
 800a5e6:	bf00      	nop
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2000412c 	.word	0x2000412c

0800a5f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b04      	cmp	r3, #4
 800a602:	d819      	bhi.n	800a638 <USBH_UserProcess+0x48>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <USBH_UserProcess+0x1c>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a639 	.word	0x0800a639
 800a610:	0800a629 	.word	0x0800a629
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a621 	.word	0x0800a621
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <USBH_UserProcess+0x58>)
 800a622:	2203      	movs	r2, #3
 800a624:	701a      	strb	r2, [r3, #0]
  break;
 800a626:	e008      	b.n	800a63a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a628:	4b07      	ldr	r3, [pc, #28]	; (800a648 <USBH_UserProcess+0x58>)
 800a62a:	2202      	movs	r2, #2
 800a62c:	701a      	strb	r2, [r3, #0]
  break;
 800a62e:	e004      	b.n	800a63a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <USBH_UserProcess+0x58>)
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
  break;
 800a636:	e000      	b.n	800a63a <USBH_UserProcess+0x4a>

  default:
  break;
 800a638:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	200000ec 	.word	0x200000ec

0800a64c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	609a      	str	r2, [r3, #8]
 800a660:	60da      	str	r2, [r3, #12]
 800a662:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a66c:	d147      	bne.n	800a6fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a66e:	2300      	movs	r3, #0
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	4b25      	ldr	r3, [pc, #148]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a676:	4a24      	ldr	r2, [pc, #144]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	6313      	str	r3, [r2, #48]	; 0x30
 800a67e:	4b22      	ldr	r3, [pc, #136]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a68a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a690:	2300      	movs	r3, #0
 800a692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	4619      	mov	r1, r3
 800a69e:	481b      	ldr	r0, [pc, #108]	; (800a70c <HAL_HCD_MspInit+0xc0>)
 800a6a0:	f7f8 f834 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6ba:	f107 0314 	add.w	r3, r7, #20
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4812      	ldr	r0, [pc, #72]	; (800a70c <HAL_HCD_MspInit+0xc0>)
 800a6c2:	f7f8 f823 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6c6:	4b10      	ldr	r3, [pc, #64]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	4a0f      	ldr	r2, [pc, #60]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d0:	6353      	str	r3, [r2, #52]	; 0x34
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6da:	4a0b      	ldr	r2, [pc, #44]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a6dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <HAL_HCD_MspInit+0xbc>)
 800a6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	2043      	movs	r0, #67	; 0x43
 800a6f4:	f7f7 ff41 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6f8:	2043      	movs	r0, #67	; 0x43
 800a6fa:	f7f7 ff5a 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6fe:	bf00      	nop
 800a700:	3728      	adds	r7, #40	; 0x28
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	40023800 	.word	0x40023800
 800a70c:	40020000 	.word	0x40020000

0800a710 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff f8db 	bl	80098da <USBH_LL_IncTimer>
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff f913 	bl	8009966 <USBH_LL_Connect>
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f91c 	bl	8009994 <USBH_LL_Disconnect>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
 800a770:	4613      	mov	r3, r2
 800a772:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff f8cd 	bl	800992e <USBH_LL_PortEnabled>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff f8cd 	bl	800994a <USBH_LL_PortDisabled>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d12a      	bne.n	800a820 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a7ca:	4a18      	ldr	r2, [pc, #96]	; (800a82c <USBH_LL_Init+0x74>)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a15      	ldr	r2, [pc, #84]	; (800a82c <USBH_LL_Init+0x74>)
 800a7d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7da:	4b14      	ldr	r3, [pc, #80]	; (800a82c <USBH_LL_Init+0x74>)
 800a7dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a7e2:	4b12      	ldr	r3, [pc, #72]	; (800a82c <USBH_LL_Init+0x74>)
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a7e8:	4b10      	ldr	r3, [pc, #64]	; (800a82c <USBH_LL_Init+0x74>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <USBH_LL_Init+0x74>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a7f4:	4b0d      	ldr	r3, [pc, #52]	; (800a82c <USBH_LL_Init+0x74>)
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <USBH_LL_Init+0x74>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a800:	480a      	ldr	r0, [pc, #40]	; (800a82c <USBH_LL_Init+0x74>)
 800a802:	f7f8 f938 	bl	8002a76 <HAL_HCD_Init>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a80c:	f7f7 fa2c 	bl	8001c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a810:	4806      	ldr	r0, [pc, #24]	; (800a82c <USBH_LL_Init+0x74>)
 800a812:	f7f8 fd1c 	bl	800324e <HAL_HCD_GetCurrentFrame>
 800a816:	4603      	mov	r3, r0
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff f84e 	bl	80098bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20004504 	.word	0x20004504

0800a830 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a846:	4618      	mov	r0, r3
 800a848:	f7f8 fc8b 	bl	8003162 <HAL_HCD_Start>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f95c 	bl	800ab10 <USBH_Get_USB_Status>
 800a858:	4603      	mov	r3, r0
 800a85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f8 fc93 	bl	80031a8 <HAL_HCD_Stop>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 f941 	bl	800ab10 <USBH_Get_USB_Status>
 800a88e:	4603      	mov	r3, r0
 800a890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a892:	7bbb      	ldrb	r3, [r7, #14]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7f8 fcdb 	bl	800326a <HAL_HCD_GetCurrentSpeed>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d00c      	beq.n	800a8d4 <USBH_LL_GetSpeed+0x38>
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d80d      	bhi.n	800a8da <USBH_LL_GetSpeed+0x3e>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <USBH_LL_GetSpeed+0x2c>
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d003      	beq.n	800a8ce <USBH_LL_GetSpeed+0x32>
 800a8c6:	e008      	b.n	800a8da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a8cc:	e008      	b.n	800a8e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d2:	e005      	b.n	800a8e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d8:	e002      	b.n	800a8e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8de:	bf00      	nop
  }
  return  speed;
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a900:	4618      	mov	r0, r3
 800a902:	f7f8 fc6e 	bl	80031e2 <HAL_HCD_ResetPort>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 f8ff 	bl	800ab10 <USBH_Get_USB_Status>
 800a912:	4603      	mov	r3, r0
 800a914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a916:	7bbb      	ldrb	r3, [r7, #14]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a932:	78fa      	ldrb	r2, [r7, #3]
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f7f8 fc75 	bl	8003226 <HAL_HCD_HC_GetXferCount>
 800a93c:	4603      	mov	r3, r0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a946:	b590      	push	{r4, r7, lr}
 800a948:	b089      	sub	sp, #36	; 0x24
 800a94a:	af04      	add	r7, sp, #16
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	4608      	mov	r0, r1
 800a950:	4611      	mov	r1, r2
 800a952:	461a      	mov	r2, r3
 800a954:	4603      	mov	r3, r0
 800a956:	70fb      	strb	r3, [r7, #3]
 800a958:	460b      	mov	r3, r1
 800a95a:	70bb      	strb	r3, [r7, #2]
 800a95c:	4613      	mov	r3, r2
 800a95e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a96e:	787c      	ldrb	r4, [r7, #1]
 800a970:	78ba      	ldrb	r2, [r7, #2]
 800a972:	78f9      	ldrb	r1, [r7, #3]
 800a974:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	4623      	mov	r3, r4
 800a986:	f7f8 f8d8 	bl	8002b3a <HAL_HCD_HC_Init>
 800a98a:	4603      	mov	r3, r0
 800a98c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f8bd 	bl	800ab10 <USBH_Get_USB_Status>
 800a996:	4603      	mov	r3, r0
 800a998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd90      	pop	{r4, r7, pc}

0800a9a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f8 f948 	bl	8002c58 <HAL_HCD_HC_Halt>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f89e 	bl	800ab10 <USBH_Get_USB_Status>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a9e2:	b590      	push	{r4, r7, lr}
 800a9e4:	b089      	sub	sp, #36	; 0x24
 800a9e6:	af04      	add	r7, sp, #16
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	70fb      	strb	r3, [r7, #3]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70bb      	strb	r3, [r7, #2]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa0a:	787c      	ldrb	r4, [r7, #1]
 800aa0c:	78ba      	ldrb	r2, [r7, #2]
 800aa0e:	78f9      	ldrb	r1, [r7, #3]
 800aa10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa14:	9303      	str	r3, [sp, #12]
 800aa16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4623      	mov	r3, r4
 800aa26:	f7f8 f93b 	bl	8002ca0 <HAL_HCD_HC_SubmitRequest>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f86d 	bl	800ab10 <USBH_Get_USB_Status>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd90      	pop	{r4, r7, pc}

0800aa44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f8 fbcf 	bl	80031fe <HAL_HCD_HC_GetURBState>
 800aa60:	4603      	mov	r3, r0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d103      	bne.n	800aa88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f870 	bl	800ab68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa88:	20c8      	movs	r0, #200	; 0xc8
 800aa8a:	f7f7 fc77 	bl	800237c <HAL_Delay>
  return USBH_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	212c      	movs	r1, #44	; 0x2c
 800aab6:	fb01 f303 	mul.w	r3, r1, r3
 800aaba:	4413      	add	r3, r2
 800aabc:	333b      	adds	r3, #59	; 0x3b
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d009      	beq.n	800aad8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	212c      	movs	r1, #44	; 0x2c
 800aaca:	fb01 f303 	mul.w	r3, r1, r3
 800aace:	4413      	add	r3, r2
 800aad0:	3354      	adds	r3, #84	; 0x54
 800aad2:	78ba      	ldrb	r2, [r7, #2]
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	e008      	b.n	800aaea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	212c      	movs	r1, #44	; 0x2c
 800aade:	fb01 f303 	mul.w	r3, r1, r3
 800aae2:	4413      	add	r3, r2
 800aae4:	3355      	adds	r3, #85	; 0x55
 800aae6:	78ba      	ldrb	r2, [r7, #2]
 800aae8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7f7 fc3b 	bl	800237c <HAL_Delay>
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d817      	bhi.n	800ab54 <USBH_Get_USB_Status+0x44>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <USBH_Get_USB_Status+0x1c>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ab3d 	.word	0x0800ab3d
 800ab30:	0800ab43 	.word	0x0800ab43
 800ab34:	0800ab49 	.word	0x0800ab49
 800ab38:	0800ab4f 	.word	0x0800ab4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab40:	e00b      	b.n	800ab5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab42:	2302      	movs	r3, #2
 800ab44:	73fb      	strb	r3, [r7, #15]
    break;
 800ab46:	e008      	b.n	800ab5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4c:	e005      	b.n	800ab5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	73fb      	strb	r3, [r7, #15]
    break;
 800ab52:	e002      	b.n	800ab5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab54:	2302      	movs	r3, #2
 800ab56:	73fb      	strb	r3, [r7, #15]
    break;
 800ab58:	bf00      	nop
  }
  return usb_status;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab76:	79fb      	ldrb	r3, [r7, #7]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
 800ab80:	e001      	b.n	800ab86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ab82:	2300      	movs	r3, #0
 800ab84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	4803      	ldr	r0, [pc, #12]	; (800ab9c <MX_DriverVbusFS+0x34>)
 800ab8e:	f7f7 ff59 	bl	8002a44 <HAL_GPIO_WritePin>
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	40020800 	.word	0x40020800

0800aba0 <atoi>:
 800aba0:	220a      	movs	r2, #10
 800aba2:	2100      	movs	r1, #0
 800aba4:	f000 b9dc 	b.w	800af60 <strtol>

0800aba8 <__errno>:
 800aba8:	4b01      	ldr	r3, [pc, #4]	; (800abb0 <__errno+0x8>)
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20000064 	.word	0x20000064

0800abb4 <__libc_init_array>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4d0d      	ldr	r5, [pc, #52]	; (800abec <__libc_init_array+0x38>)
 800abb8:	4c0d      	ldr	r4, [pc, #52]	; (800abf0 <__libc_init_array+0x3c>)
 800abba:	1b64      	subs	r4, r4, r5
 800abbc:	10a4      	asrs	r4, r4, #2
 800abbe:	2600      	movs	r6, #0
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	d109      	bne.n	800abd8 <__libc_init_array+0x24>
 800abc4:	4d0b      	ldr	r5, [pc, #44]	; (800abf4 <__libc_init_array+0x40>)
 800abc6:	4c0c      	ldr	r4, [pc, #48]	; (800abf8 <__libc_init_array+0x44>)
 800abc8:	f003 f830 	bl	800dc2c <_init>
 800abcc:	1b64      	subs	r4, r4, r5
 800abce:	10a4      	asrs	r4, r4, #2
 800abd0:	2600      	movs	r6, #0
 800abd2:	42a6      	cmp	r6, r4
 800abd4:	d105      	bne.n	800abe2 <__libc_init_array+0x2e>
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abdc:	4798      	blx	r3
 800abde:	3601      	adds	r6, #1
 800abe0:	e7ee      	b.n	800abc0 <__libc_init_array+0xc>
 800abe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe6:	4798      	blx	r3
 800abe8:	3601      	adds	r6, #1
 800abea:	e7f2      	b.n	800abd2 <__libc_init_array+0x1e>
 800abec:	0800e0d8 	.word	0x0800e0d8
 800abf0:	0800e0d8 	.word	0x0800e0d8
 800abf4:	0800e0d8 	.word	0x0800e0d8
 800abf8:	0800e0dc 	.word	0x0800e0dc

0800abfc <malloc>:
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <malloc+0xc>)
 800abfe:	4601      	mov	r1, r0
 800ac00:	6818      	ldr	r0, [r3, #0]
 800ac02:	f000 b863 	b.w	800accc <_malloc_r>
 800ac06:	bf00      	nop
 800ac08:	20000064 	.word	0x20000064

0800ac0c <free>:
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <free+0xc>)
 800ac0e:	4601      	mov	r1, r0
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f000 b80b 	b.w	800ac2c <_free_r>
 800ac16:	bf00      	nop
 800ac18:	20000064 	.word	0x20000064

0800ac1c <memset>:
 800ac1c:	4402      	add	r2, r0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d100      	bne.n	800ac26 <memset+0xa>
 800ac24:	4770      	bx	lr
 800ac26:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2a:	e7f9      	b.n	800ac20 <memset+0x4>

0800ac2c <_free_r>:
 800ac2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2e:	2900      	cmp	r1, #0
 800ac30:	d048      	beq.n	800acc4 <_free_r+0x98>
 800ac32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac36:	9001      	str	r0, [sp, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac3e:	bfb8      	it	lt
 800ac40:	18e4      	addlt	r4, r4, r3
 800ac42:	f000 f9c7 	bl	800afd4 <__malloc_lock>
 800ac46:	4a20      	ldr	r2, [pc, #128]	; (800acc8 <_free_r+0x9c>)
 800ac48:	9801      	ldr	r0, [sp, #4]
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	b933      	cbnz	r3, 800ac5e <_free_r+0x32>
 800ac50:	6063      	str	r3, [r4, #4]
 800ac52:	6014      	str	r4, [r2, #0]
 800ac54:	b003      	add	sp, #12
 800ac56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac5a:	f000 b9c1 	b.w	800afe0 <__malloc_unlock>
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	d90b      	bls.n	800ac7a <_free_r+0x4e>
 800ac62:	6821      	ldr	r1, [r4, #0]
 800ac64:	1862      	adds	r2, r4, r1
 800ac66:	4293      	cmp	r3, r2
 800ac68:	bf04      	itt	eq
 800ac6a:	681a      	ldreq	r2, [r3, #0]
 800ac6c:	685b      	ldreq	r3, [r3, #4]
 800ac6e:	6063      	str	r3, [r4, #4]
 800ac70:	bf04      	itt	eq
 800ac72:	1852      	addeq	r2, r2, r1
 800ac74:	6022      	streq	r2, [r4, #0]
 800ac76:	602c      	str	r4, [r5, #0]
 800ac78:	e7ec      	b.n	800ac54 <_free_r+0x28>
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	b10b      	cbz	r3, 800ac84 <_free_r+0x58>
 800ac80:	42a3      	cmp	r3, r4
 800ac82:	d9fa      	bls.n	800ac7a <_free_r+0x4e>
 800ac84:	6811      	ldr	r1, [r2, #0]
 800ac86:	1855      	adds	r5, r2, r1
 800ac88:	42a5      	cmp	r5, r4
 800ac8a:	d10b      	bne.n	800aca4 <_free_r+0x78>
 800ac8c:	6824      	ldr	r4, [r4, #0]
 800ac8e:	4421      	add	r1, r4
 800ac90:	1854      	adds	r4, r2, r1
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	d1dd      	bne.n	800ac54 <_free_r+0x28>
 800ac98:	681c      	ldr	r4, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	6053      	str	r3, [r2, #4]
 800ac9e:	4421      	add	r1, r4
 800aca0:	6011      	str	r1, [r2, #0]
 800aca2:	e7d7      	b.n	800ac54 <_free_r+0x28>
 800aca4:	d902      	bls.n	800acac <_free_r+0x80>
 800aca6:	230c      	movs	r3, #12
 800aca8:	6003      	str	r3, [r0, #0]
 800acaa:	e7d3      	b.n	800ac54 <_free_r+0x28>
 800acac:	6825      	ldr	r5, [r4, #0]
 800acae:	1961      	adds	r1, r4, r5
 800acb0:	428b      	cmp	r3, r1
 800acb2:	bf04      	itt	eq
 800acb4:	6819      	ldreq	r1, [r3, #0]
 800acb6:	685b      	ldreq	r3, [r3, #4]
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	bf04      	itt	eq
 800acbc:	1949      	addeq	r1, r1, r5
 800acbe:	6021      	streq	r1, [r4, #0]
 800acc0:	6054      	str	r4, [r2, #4]
 800acc2:	e7c7      	b.n	800ac54 <_free_r+0x28>
 800acc4:	b003      	add	sp, #12
 800acc6:	bd30      	pop	{r4, r5, pc}
 800acc8:	200000f0 	.word	0x200000f0

0800accc <_malloc_r>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	1ccd      	adds	r5, r1, #3
 800acd0:	f025 0503 	bic.w	r5, r5, #3
 800acd4:	3508      	adds	r5, #8
 800acd6:	2d0c      	cmp	r5, #12
 800acd8:	bf38      	it	cc
 800acda:	250c      	movcc	r5, #12
 800acdc:	2d00      	cmp	r5, #0
 800acde:	4606      	mov	r6, r0
 800ace0:	db01      	blt.n	800ace6 <_malloc_r+0x1a>
 800ace2:	42a9      	cmp	r1, r5
 800ace4:	d903      	bls.n	800acee <_malloc_r+0x22>
 800ace6:	230c      	movs	r3, #12
 800ace8:	6033      	str	r3, [r6, #0]
 800acea:	2000      	movs	r0, #0
 800acec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acee:	f000 f971 	bl	800afd4 <__malloc_lock>
 800acf2:	4921      	ldr	r1, [pc, #132]	; (800ad78 <_malloc_r+0xac>)
 800acf4:	680a      	ldr	r2, [r1, #0]
 800acf6:	4614      	mov	r4, r2
 800acf8:	b99c      	cbnz	r4, 800ad22 <_malloc_r+0x56>
 800acfa:	4f20      	ldr	r7, [pc, #128]	; (800ad7c <_malloc_r+0xb0>)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	b923      	cbnz	r3, 800ad0a <_malloc_r+0x3e>
 800ad00:	4621      	mov	r1, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	f000 f83c 	bl	800ad80 <_sbrk_r>
 800ad08:	6038      	str	r0, [r7, #0]
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f000 f837 	bl	800ad80 <_sbrk_r>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d123      	bne.n	800ad5e <_malloc_r+0x92>
 800ad16:	230c      	movs	r3, #12
 800ad18:	6033      	str	r3, [r6, #0]
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 f960 	bl	800afe0 <__malloc_unlock>
 800ad20:	e7e3      	b.n	800acea <_malloc_r+0x1e>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	1b5b      	subs	r3, r3, r5
 800ad26:	d417      	bmi.n	800ad58 <_malloc_r+0x8c>
 800ad28:	2b0b      	cmp	r3, #11
 800ad2a:	d903      	bls.n	800ad34 <_malloc_r+0x68>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	441c      	add	r4, r3
 800ad30:	6025      	str	r5, [r4, #0]
 800ad32:	e004      	b.n	800ad3e <_malloc_r+0x72>
 800ad34:	6863      	ldr	r3, [r4, #4]
 800ad36:	42a2      	cmp	r2, r4
 800ad38:	bf0c      	ite	eq
 800ad3a:	600b      	streq	r3, [r1, #0]
 800ad3c:	6053      	strne	r3, [r2, #4]
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f000 f94e 	bl	800afe0 <__malloc_unlock>
 800ad44:	f104 000b 	add.w	r0, r4, #11
 800ad48:	1d23      	adds	r3, r4, #4
 800ad4a:	f020 0007 	bic.w	r0, r0, #7
 800ad4e:	1ac2      	subs	r2, r0, r3
 800ad50:	d0cc      	beq.n	800acec <_malloc_r+0x20>
 800ad52:	1a1b      	subs	r3, r3, r0
 800ad54:	50a3      	str	r3, [r4, r2]
 800ad56:	e7c9      	b.n	800acec <_malloc_r+0x20>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	6864      	ldr	r4, [r4, #4]
 800ad5c:	e7cc      	b.n	800acf8 <_malloc_r+0x2c>
 800ad5e:	1cc4      	adds	r4, r0, #3
 800ad60:	f024 0403 	bic.w	r4, r4, #3
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	d0e3      	beq.n	800ad30 <_malloc_r+0x64>
 800ad68:	1a21      	subs	r1, r4, r0
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 f808 	bl	800ad80 <_sbrk_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1dd      	bne.n	800ad30 <_malloc_r+0x64>
 800ad74:	e7cf      	b.n	800ad16 <_malloc_r+0x4a>
 800ad76:	bf00      	nop
 800ad78:	200000f0 	.word	0x200000f0
 800ad7c:	200000f4 	.word	0x200000f4

0800ad80 <_sbrk_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	; (800ad9c <_sbrk_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f7 fa12 	bl	80021b4 <_sbrk>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_sbrk_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_sbrk_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20004808 	.word	0x20004808

0800ada0 <strtok>:
 800ada0:	4b16      	ldr	r3, [pc, #88]	; (800adfc <strtok+0x5c>)
 800ada2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada4:	681e      	ldr	r6, [r3, #0]
 800ada6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ada8:	4605      	mov	r5, r0
 800adaa:	b9fc      	cbnz	r4, 800adec <strtok+0x4c>
 800adac:	2050      	movs	r0, #80	; 0x50
 800adae:	9101      	str	r1, [sp, #4]
 800adb0:	f7ff ff24 	bl	800abfc <malloc>
 800adb4:	9901      	ldr	r1, [sp, #4]
 800adb6:	65b0      	str	r0, [r6, #88]	; 0x58
 800adb8:	4602      	mov	r2, r0
 800adba:	b920      	cbnz	r0, 800adc6 <strtok+0x26>
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <strtok+0x60>)
 800adbe:	4811      	ldr	r0, [pc, #68]	; (800ae04 <strtok+0x64>)
 800adc0:	2157      	movs	r1, #87	; 0x57
 800adc2:	f000 f8d7 	bl	800af74 <__assert_func>
 800adc6:	e9c0 4400 	strd	r4, r4, [r0]
 800adca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800adce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800add2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800add6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800adda:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800adde:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ade2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ade6:	6184      	str	r4, [r0, #24]
 800ade8:	7704      	strb	r4, [r0, #28]
 800adea:	6244      	str	r4, [r0, #36]	; 0x24
 800adec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800adee:	2301      	movs	r3, #1
 800adf0:	4628      	mov	r0, r5
 800adf2:	b002      	add	sp, #8
 800adf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adf8:	f000 b806 	b.w	800ae08 <__strtok_r>
 800adfc:	20000064 	.word	0x20000064
 800ae00:	0800dc70 	.word	0x0800dc70
 800ae04:	0800dc87 	.word	0x0800dc87

0800ae08 <__strtok_r>:
 800ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0a:	b908      	cbnz	r0, 800ae10 <__strtok_r+0x8>
 800ae0c:	6810      	ldr	r0, [r2, #0]
 800ae0e:	b188      	cbz	r0, 800ae34 <__strtok_r+0x2c>
 800ae10:	4604      	mov	r4, r0
 800ae12:	4620      	mov	r0, r4
 800ae14:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae18:	460f      	mov	r7, r1
 800ae1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae1e:	b91e      	cbnz	r6, 800ae28 <__strtok_r+0x20>
 800ae20:	b965      	cbnz	r5, 800ae3c <__strtok_r+0x34>
 800ae22:	6015      	str	r5, [r2, #0]
 800ae24:	4628      	mov	r0, r5
 800ae26:	e005      	b.n	800ae34 <__strtok_r+0x2c>
 800ae28:	42b5      	cmp	r5, r6
 800ae2a:	d1f6      	bne.n	800ae1a <__strtok_r+0x12>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f0      	bne.n	800ae12 <__strtok_r+0xa>
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	7003      	strb	r3, [r0, #0]
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae36:	461c      	mov	r4, r3
 800ae38:	e00c      	b.n	800ae54 <__strtok_r+0x4c>
 800ae3a:	b915      	cbnz	r5, 800ae42 <__strtok_r+0x3a>
 800ae3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae40:	460e      	mov	r6, r1
 800ae42:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ae46:	42ab      	cmp	r3, r5
 800ae48:	d1f7      	bne.n	800ae3a <__strtok_r+0x32>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f3      	beq.n	800ae36 <__strtok_r+0x2e>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ae54:	6014      	str	r4, [r2, #0]
 800ae56:	e7ed      	b.n	800ae34 <__strtok_r+0x2c>

0800ae58 <_strtol_l.isra.0>:
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5e:	d001      	beq.n	800ae64 <_strtol_l.isra.0+0xc>
 800ae60:	2b24      	cmp	r3, #36	; 0x24
 800ae62:	d906      	bls.n	800ae72 <_strtol_l.isra.0+0x1a>
 800ae64:	f7ff fea0 	bl	800aba8 <__errno>
 800ae68:	2316      	movs	r3, #22
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae72:	4f3a      	ldr	r7, [pc, #232]	; (800af5c <_strtol_l.isra.0+0x104>)
 800ae74:	468e      	mov	lr, r1
 800ae76:	4676      	mov	r6, lr
 800ae78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ae7c:	5de5      	ldrb	r5, [r4, r7]
 800ae7e:	f015 0508 	ands.w	r5, r5, #8
 800ae82:	d1f8      	bne.n	800ae76 <_strtol_l.isra.0+0x1e>
 800ae84:	2c2d      	cmp	r4, #45	; 0x2d
 800ae86:	d134      	bne.n	800aef2 <_strtol_l.isra.0+0x9a>
 800ae88:	f89e 4000 	ldrb.w	r4, [lr]
 800ae8c:	f04f 0801 	mov.w	r8, #1
 800ae90:	f106 0e02 	add.w	lr, r6, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d05c      	beq.n	800af52 <_strtol_l.isra.0+0xfa>
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	d10c      	bne.n	800aeb6 <_strtol_l.isra.0+0x5e>
 800ae9c:	2c30      	cmp	r4, #48	; 0x30
 800ae9e:	d10a      	bne.n	800aeb6 <_strtol_l.isra.0+0x5e>
 800aea0:	f89e 4000 	ldrb.w	r4, [lr]
 800aea4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aea8:	2c58      	cmp	r4, #88	; 0x58
 800aeaa:	d14d      	bne.n	800af48 <_strtol_l.isra.0+0xf0>
 800aeac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800aeb0:	2310      	movs	r3, #16
 800aeb2:	f10e 0e02 	add.w	lr, lr, #2
 800aeb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800aeba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aebe:	2600      	movs	r6, #0
 800aec0:	fbbc f9f3 	udiv	r9, ip, r3
 800aec4:	4635      	mov	r5, r6
 800aec6:	fb03 ca19 	mls	sl, r3, r9, ip
 800aeca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aece:	2f09      	cmp	r7, #9
 800aed0:	d818      	bhi.n	800af04 <_strtol_l.isra.0+0xac>
 800aed2:	463c      	mov	r4, r7
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	dd24      	ble.n	800af22 <_strtol_l.isra.0+0xca>
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	db1f      	blt.n	800af1c <_strtol_l.isra.0+0xc4>
 800aedc:	45a9      	cmp	r9, r5
 800aede:	d31d      	bcc.n	800af1c <_strtol_l.isra.0+0xc4>
 800aee0:	d101      	bne.n	800aee6 <_strtol_l.isra.0+0x8e>
 800aee2:	45a2      	cmp	sl, r4
 800aee4:	db1a      	blt.n	800af1c <_strtol_l.isra.0+0xc4>
 800aee6:	fb05 4503 	mla	r5, r5, r3, r4
 800aeea:	2601      	movs	r6, #1
 800aeec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aef0:	e7eb      	b.n	800aeca <_strtol_l.isra.0+0x72>
 800aef2:	2c2b      	cmp	r4, #43	; 0x2b
 800aef4:	bf08      	it	eq
 800aef6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800aefa:	46a8      	mov	r8, r5
 800aefc:	bf08      	it	eq
 800aefe:	f106 0e02 	addeq.w	lr, r6, #2
 800af02:	e7c7      	b.n	800ae94 <_strtol_l.isra.0+0x3c>
 800af04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800af08:	2f19      	cmp	r7, #25
 800af0a:	d801      	bhi.n	800af10 <_strtol_l.isra.0+0xb8>
 800af0c:	3c37      	subs	r4, #55	; 0x37
 800af0e:	e7e1      	b.n	800aed4 <_strtol_l.isra.0+0x7c>
 800af10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800af14:	2f19      	cmp	r7, #25
 800af16:	d804      	bhi.n	800af22 <_strtol_l.isra.0+0xca>
 800af18:	3c57      	subs	r4, #87	; 0x57
 800af1a:	e7db      	b.n	800aed4 <_strtol_l.isra.0+0x7c>
 800af1c:	f04f 36ff 	mov.w	r6, #4294967295
 800af20:	e7e4      	b.n	800aeec <_strtol_l.isra.0+0x94>
 800af22:	2e00      	cmp	r6, #0
 800af24:	da05      	bge.n	800af32 <_strtol_l.isra.0+0xda>
 800af26:	2322      	movs	r3, #34	; 0x22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	4665      	mov	r5, ip
 800af2c:	b942      	cbnz	r2, 800af40 <_strtol_l.isra.0+0xe8>
 800af2e:	4628      	mov	r0, r5
 800af30:	e79d      	b.n	800ae6e <_strtol_l.isra.0+0x16>
 800af32:	f1b8 0f00 	cmp.w	r8, #0
 800af36:	d000      	beq.n	800af3a <_strtol_l.isra.0+0xe2>
 800af38:	426d      	negs	r5, r5
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	d0f7      	beq.n	800af2e <_strtol_l.isra.0+0xd6>
 800af3e:	b10e      	cbz	r6, 800af44 <_strtol_l.isra.0+0xec>
 800af40:	f10e 31ff 	add.w	r1, lr, #4294967295
 800af44:	6011      	str	r1, [r2, #0]
 800af46:	e7f2      	b.n	800af2e <_strtol_l.isra.0+0xd6>
 800af48:	2430      	movs	r4, #48	; 0x30
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1b3      	bne.n	800aeb6 <_strtol_l.isra.0+0x5e>
 800af4e:	2308      	movs	r3, #8
 800af50:	e7b1      	b.n	800aeb6 <_strtol_l.isra.0+0x5e>
 800af52:	2c30      	cmp	r4, #48	; 0x30
 800af54:	d0a4      	beq.n	800aea0 <_strtol_l.isra.0+0x48>
 800af56:	230a      	movs	r3, #10
 800af58:	e7ad      	b.n	800aeb6 <_strtol_l.isra.0+0x5e>
 800af5a:	bf00      	nop
 800af5c:	0800dd25 	.word	0x0800dd25

0800af60 <strtol>:
 800af60:	4613      	mov	r3, r2
 800af62:	460a      	mov	r2, r1
 800af64:	4601      	mov	r1, r0
 800af66:	4802      	ldr	r0, [pc, #8]	; (800af70 <strtol+0x10>)
 800af68:	6800      	ldr	r0, [r0, #0]
 800af6a:	f7ff bf75 	b.w	800ae58 <_strtol_l.isra.0>
 800af6e:	bf00      	nop
 800af70:	20000064 	.word	0x20000064

0800af74 <__assert_func>:
 800af74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af76:	4614      	mov	r4, r2
 800af78:	461a      	mov	r2, r3
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <__assert_func+0x2c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4605      	mov	r5, r0
 800af80:	68d8      	ldr	r0, [r3, #12]
 800af82:	b14c      	cbz	r4, 800af98 <__assert_func+0x24>
 800af84:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <__assert_func+0x30>)
 800af86:	9100      	str	r1, [sp, #0]
 800af88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af8c:	4906      	ldr	r1, [pc, #24]	; (800afa8 <__assert_func+0x34>)
 800af8e:	462b      	mov	r3, r5
 800af90:	f000 f80e 	bl	800afb0 <fiprintf>
 800af94:	f000 fbd8 	bl	800b748 <abort>
 800af98:	4b04      	ldr	r3, [pc, #16]	; (800afac <__assert_func+0x38>)
 800af9a:	461c      	mov	r4, r3
 800af9c:	e7f3      	b.n	800af86 <__assert_func+0x12>
 800af9e:	bf00      	nop
 800afa0:	20000064 	.word	0x20000064
 800afa4:	0800dce8 	.word	0x0800dce8
 800afa8:	0800dcf5 	.word	0x0800dcf5
 800afac:	0800dd23 	.word	0x0800dd23

0800afb0 <fiprintf>:
 800afb0:	b40e      	push	{r1, r2, r3}
 800afb2:	b503      	push	{r0, r1, lr}
 800afb4:	4601      	mov	r1, r0
 800afb6:	ab03      	add	r3, sp, #12
 800afb8:	4805      	ldr	r0, [pc, #20]	; (800afd0 <fiprintf+0x20>)
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	f000 f83d 	bl	800b040 <_vfiprintf_r>
 800afc6:	b002      	add	sp, #8
 800afc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afcc:	b003      	add	sp, #12
 800afce:	4770      	bx	lr
 800afd0:	20000064 	.word	0x20000064

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f000 bd77 	b.w	800bac8 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	20004810 	.word	0x20004810

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f000 bd72 	b.w	800baca <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	20004810 	.word	0x20004810

0800afec <__sfputc_r>:
 800afec:	6893      	ldr	r3, [r2, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	b410      	push	{r4}
 800aff4:	6093      	str	r3, [r2, #8]
 800aff6:	da08      	bge.n	800b00a <__sfputc_r+0x1e>
 800aff8:	6994      	ldr	r4, [r2, #24]
 800affa:	42a3      	cmp	r3, r4
 800affc:	db01      	blt.n	800b002 <__sfputc_r+0x16>
 800affe:	290a      	cmp	r1, #10
 800b000:	d103      	bne.n	800b00a <__sfputc_r+0x1e>
 800b002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b006:	f000 badf 	b.w	800b5c8 <__swbuf_r>
 800b00a:	6813      	ldr	r3, [r2, #0]
 800b00c:	1c58      	adds	r0, r3, #1
 800b00e:	6010      	str	r0, [r2, #0]
 800b010:	7019      	strb	r1, [r3, #0]
 800b012:	4608      	mov	r0, r1
 800b014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <__sfputs_r>:
 800b01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01c:	4606      	mov	r6, r0
 800b01e:	460f      	mov	r7, r1
 800b020:	4614      	mov	r4, r2
 800b022:	18d5      	adds	r5, r2, r3
 800b024:	42ac      	cmp	r4, r5
 800b026:	d101      	bne.n	800b02c <__sfputs_r+0x12>
 800b028:	2000      	movs	r0, #0
 800b02a:	e007      	b.n	800b03c <__sfputs_r+0x22>
 800b02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b030:	463a      	mov	r2, r7
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ffda 	bl	800afec <__sfputc_r>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d1f3      	bne.n	800b024 <__sfputs_r+0xa>
 800b03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b040 <_vfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	460d      	mov	r5, r1
 800b046:	b09d      	sub	sp, #116	; 0x74
 800b048:	4614      	mov	r4, r2
 800b04a:	4698      	mov	r8, r3
 800b04c:	4606      	mov	r6, r0
 800b04e:	b118      	cbz	r0, 800b058 <_vfiprintf_r+0x18>
 800b050:	6983      	ldr	r3, [r0, #24]
 800b052:	b90b      	cbnz	r3, 800b058 <_vfiprintf_r+0x18>
 800b054:	f000 fc9a 	bl	800b98c <__sinit>
 800b058:	4b89      	ldr	r3, [pc, #548]	; (800b280 <_vfiprintf_r+0x240>)
 800b05a:	429d      	cmp	r5, r3
 800b05c:	d11b      	bne.n	800b096 <_vfiprintf_r+0x56>
 800b05e:	6875      	ldr	r5, [r6, #4]
 800b060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b062:	07d9      	lsls	r1, r3, #31
 800b064:	d405      	bmi.n	800b072 <_vfiprintf_r+0x32>
 800b066:	89ab      	ldrh	r3, [r5, #12]
 800b068:	059a      	lsls	r2, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_vfiprintf_r+0x32>
 800b06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06e:	f000 fd2b 	bl	800bac8 <__retarget_lock_acquire_recursive>
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	071b      	lsls	r3, r3, #28
 800b076:	d501      	bpl.n	800b07c <_vfiprintf_r+0x3c>
 800b078:	692b      	ldr	r3, [r5, #16]
 800b07a:	b9eb      	cbnz	r3, 800b0b8 <_vfiprintf_r+0x78>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 faf4 	bl	800b66c <__swsetup_r>
 800b084:	b1c0      	cbz	r0, 800b0b8 <_vfiprintf_r+0x78>
 800b086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b088:	07dc      	lsls	r4, r3, #31
 800b08a:	d50e      	bpl.n	800b0aa <_vfiprintf_r+0x6a>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	b01d      	add	sp, #116	; 0x74
 800b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b096:	4b7b      	ldr	r3, [pc, #492]	; (800b284 <_vfiprintf_r+0x244>)
 800b098:	429d      	cmp	r5, r3
 800b09a:	d101      	bne.n	800b0a0 <_vfiprintf_r+0x60>
 800b09c:	68b5      	ldr	r5, [r6, #8]
 800b09e:	e7df      	b.n	800b060 <_vfiprintf_r+0x20>
 800b0a0:	4b79      	ldr	r3, [pc, #484]	; (800b288 <_vfiprintf_r+0x248>)
 800b0a2:	429d      	cmp	r5, r3
 800b0a4:	bf08      	it	eq
 800b0a6:	68f5      	ldreq	r5, [r6, #12]
 800b0a8:	e7da      	b.n	800b060 <_vfiprintf_r+0x20>
 800b0aa:	89ab      	ldrh	r3, [r5, #12]
 800b0ac:	0598      	lsls	r0, r3, #22
 800b0ae:	d4ed      	bmi.n	800b08c <_vfiprintf_r+0x4c>
 800b0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0b2:	f000 fd0a 	bl	800baca <__retarget_lock_release_recursive>
 800b0b6:	e7e9      	b.n	800b08c <_vfiprintf_r+0x4c>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	2320      	movs	r3, #32
 800b0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c6:	2330      	movs	r3, #48	; 0x30
 800b0c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b28c <_vfiprintf_r+0x24c>
 800b0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0d0:	f04f 0901 	mov.w	r9, #1
 800b0d4:	4623      	mov	r3, r4
 800b0d6:	469a      	mov	sl, r3
 800b0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0dc:	b10a      	cbz	r2, 800b0e2 <_vfiprintf_r+0xa2>
 800b0de:	2a25      	cmp	r2, #37	; 0x25
 800b0e0:	d1f9      	bne.n	800b0d6 <_vfiprintf_r+0x96>
 800b0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e6:	d00b      	beq.n	800b100 <_vfiprintf_r+0xc0>
 800b0e8:	465b      	mov	r3, fp
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff ff93 	bl	800b01a <__sfputs_r>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f000 80aa 	beq.w	800b24e <_vfiprintf_r+0x20e>
 800b0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fc:	445a      	add	r2, fp
 800b0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b100:	f89a 3000 	ldrb.w	r3, [sl]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 80a2 	beq.w	800b24e <_vfiprintf_r+0x20e>
 800b10a:	2300      	movs	r3, #0
 800b10c:	f04f 32ff 	mov.w	r2, #4294967295
 800b110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b114:	f10a 0a01 	add.w	sl, sl, #1
 800b118:	9304      	str	r3, [sp, #16]
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b120:	931a      	str	r3, [sp, #104]	; 0x68
 800b122:	4654      	mov	r4, sl
 800b124:	2205      	movs	r2, #5
 800b126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12a:	4858      	ldr	r0, [pc, #352]	; (800b28c <_vfiprintf_r+0x24c>)
 800b12c:	f7f5 f850 	bl	80001d0 <memchr>
 800b130:	9a04      	ldr	r2, [sp, #16]
 800b132:	b9d8      	cbnz	r0, 800b16c <_vfiprintf_r+0x12c>
 800b134:	06d1      	lsls	r1, r2, #27
 800b136:	bf44      	itt	mi
 800b138:	2320      	movmi	r3, #32
 800b13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b13e:	0713      	lsls	r3, r2, #28
 800b140:	bf44      	itt	mi
 800b142:	232b      	movmi	r3, #43	; 0x2b
 800b144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b148:	f89a 3000 	ldrb.w	r3, [sl]
 800b14c:	2b2a      	cmp	r3, #42	; 0x2a
 800b14e:	d015      	beq.n	800b17c <_vfiprintf_r+0x13c>
 800b150:	9a07      	ldr	r2, [sp, #28]
 800b152:	4654      	mov	r4, sl
 800b154:	2000      	movs	r0, #0
 800b156:	f04f 0c0a 	mov.w	ip, #10
 800b15a:	4621      	mov	r1, r4
 800b15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b160:	3b30      	subs	r3, #48	; 0x30
 800b162:	2b09      	cmp	r3, #9
 800b164:	d94e      	bls.n	800b204 <_vfiprintf_r+0x1c4>
 800b166:	b1b0      	cbz	r0, 800b196 <_vfiprintf_r+0x156>
 800b168:	9207      	str	r2, [sp, #28]
 800b16a:	e014      	b.n	800b196 <_vfiprintf_r+0x156>
 800b16c:	eba0 0308 	sub.w	r3, r0, r8
 800b170:	fa09 f303 	lsl.w	r3, r9, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	9304      	str	r3, [sp, #16]
 800b178:	46a2      	mov	sl, r4
 800b17a:	e7d2      	b.n	800b122 <_vfiprintf_r+0xe2>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	1d19      	adds	r1, r3, #4
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	9103      	str	r1, [sp, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	bfbb      	ittet	lt
 800b188:	425b      	neglt	r3, r3
 800b18a:	f042 0202 	orrlt.w	r2, r2, #2
 800b18e:	9307      	strge	r3, [sp, #28]
 800b190:	9307      	strlt	r3, [sp, #28]
 800b192:	bfb8      	it	lt
 800b194:	9204      	strlt	r2, [sp, #16]
 800b196:	7823      	ldrb	r3, [r4, #0]
 800b198:	2b2e      	cmp	r3, #46	; 0x2e
 800b19a:	d10c      	bne.n	800b1b6 <_vfiprintf_r+0x176>
 800b19c:	7863      	ldrb	r3, [r4, #1]
 800b19e:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a0:	d135      	bne.n	800b20e <_vfiprintf_r+0x1ce>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	1d1a      	adds	r2, r3, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	9203      	str	r2, [sp, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfb8      	it	lt
 800b1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1b2:	3402      	adds	r4, #2
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b29c <_vfiprintf_r+0x25c>
 800b1ba:	7821      	ldrb	r1, [r4, #0]
 800b1bc:	2203      	movs	r2, #3
 800b1be:	4650      	mov	r0, sl
 800b1c0:	f7f5 f806 	bl	80001d0 <memchr>
 800b1c4:	b140      	cbz	r0, 800b1d8 <_vfiprintf_r+0x198>
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	eba0 000a 	sub.w	r0, r0, sl
 800b1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	4303      	orrs	r3, r0
 800b1d4:	3401      	adds	r4, #1
 800b1d6:	9304      	str	r3, [sp, #16]
 800b1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1dc:	482c      	ldr	r0, [pc, #176]	; (800b290 <_vfiprintf_r+0x250>)
 800b1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1e2:	2206      	movs	r2, #6
 800b1e4:	f7f4 fff4 	bl	80001d0 <memchr>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d03f      	beq.n	800b26c <_vfiprintf_r+0x22c>
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <_vfiprintf_r+0x254>)
 800b1ee:	bb1b      	cbnz	r3, 800b238 <_vfiprintf_r+0x1f8>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	3307      	adds	r3, #7
 800b1f4:	f023 0307 	bic.w	r3, r3, #7
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fe:	443b      	add	r3, r7
 800b200:	9309      	str	r3, [sp, #36]	; 0x24
 800b202:	e767      	b.n	800b0d4 <_vfiprintf_r+0x94>
 800b204:	fb0c 3202 	mla	r2, ip, r2, r3
 800b208:	460c      	mov	r4, r1
 800b20a:	2001      	movs	r0, #1
 800b20c:	e7a5      	b.n	800b15a <_vfiprintf_r+0x11a>
 800b20e:	2300      	movs	r3, #0
 800b210:	3401      	adds	r4, #1
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	4619      	mov	r1, r3
 800b216:	f04f 0c0a 	mov.w	ip, #10
 800b21a:	4620      	mov	r0, r4
 800b21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b220:	3a30      	subs	r2, #48	; 0x30
 800b222:	2a09      	cmp	r2, #9
 800b224:	d903      	bls.n	800b22e <_vfiprintf_r+0x1ee>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0c5      	beq.n	800b1b6 <_vfiprintf_r+0x176>
 800b22a:	9105      	str	r1, [sp, #20]
 800b22c:	e7c3      	b.n	800b1b6 <_vfiprintf_r+0x176>
 800b22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b232:	4604      	mov	r4, r0
 800b234:	2301      	movs	r3, #1
 800b236:	e7f0      	b.n	800b21a <_vfiprintf_r+0x1da>
 800b238:	ab03      	add	r3, sp, #12
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	462a      	mov	r2, r5
 800b23e:	4b16      	ldr	r3, [pc, #88]	; (800b298 <_vfiprintf_r+0x258>)
 800b240:	a904      	add	r1, sp, #16
 800b242:	4630      	mov	r0, r6
 800b244:	f3af 8000 	nop.w
 800b248:	4607      	mov	r7, r0
 800b24a:	1c78      	adds	r0, r7, #1
 800b24c:	d1d6      	bne.n	800b1fc <_vfiprintf_r+0x1bc>
 800b24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b250:	07d9      	lsls	r1, r3, #31
 800b252:	d405      	bmi.n	800b260 <_vfiprintf_r+0x220>
 800b254:	89ab      	ldrh	r3, [r5, #12]
 800b256:	059a      	lsls	r2, r3, #22
 800b258:	d402      	bmi.n	800b260 <_vfiprintf_r+0x220>
 800b25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b25c:	f000 fc35 	bl	800baca <__retarget_lock_release_recursive>
 800b260:	89ab      	ldrh	r3, [r5, #12]
 800b262:	065b      	lsls	r3, r3, #25
 800b264:	f53f af12 	bmi.w	800b08c <_vfiprintf_r+0x4c>
 800b268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b26a:	e711      	b.n	800b090 <_vfiprintf_r+0x50>
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	462a      	mov	r2, r5
 800b272:	4b09      	ldr	r3, [pc, #36]	; (800b298 <_vfiprintf_r+0x258>)
 800b274:	a904      	add	r1, sp, #16
 800b276:	4630      	mov	r0, r6
 800b278:	f000 f880 	bl	800b37c <_printf_i>
 800b27c:	e7e4      	b.n	800b248 <_vfiprintf_r+0x208>
 800b27e:	bf00      	nop
 800b280:	0800de78 	.word	0x0800de78
 800b284:	0800de98 	.word	0x0800de98
 800b288:	0800de58 	.word	0x0800de58
 800b28c:	0800de25 	.word	0x0800de25
 800b290:	0800de2f 	.word	0x0800de2f
 800b294:	00000000 	.word	0x00000000
 800b298:	0800b01b 	.word	0x0800b01b
 800b29c:	0800de2b 	.word	0x0800de2b

0800b2a0 <_printf_common>:
 800b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	4699      	mov	r9, r3
 800b2a8:	688a      	ldr	r2, [r1, #8]
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	bfb8      	it	lt
 800b2b4:	4613      	movlt	r3, r2
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2bc:	4607      	mov	r7, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	b10a      	cbz	r2, 800b2c6 <_printf_common+0x26>
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	6033      	str	r3, [r6, #0]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	0699      	lsls	r1, r3, #26
 800b2ca:	bf42      	ittt	mi
 800b2cc:	6833      	ldrmi	r3, [r6, #0]
 800b2ce:	3302      	addmi	r3, #2
 800b2d0:	6033      	strmi	r3, [r6, #0]
 800b2d2:	6825      	ldr	r5, [r4, #0]
 800b2d4:	f015 0506 	ands.w	r5, r5, #6
 800b2d8:	d106      	bne.n	800b2e8 <_printf_common+0x48>
 800b2da:	f104 0a19 	add.w	sl, r4, #25
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	6832      	ldr	r2, [r6, #0]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	42ab      	cmp	r3, r5
 800b2e6:	dc26      	bgt.n	800b336 <_printf_common+0x96>
 800b2e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2ec:	1e13      	subs	r3, r2, #0
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	2301      	movne	r3, #1
 800b2f4:	0692      	lsls	r2, r2, #26
 800b2f6:	d42b      	bmi.n	800b350 <_printf_common+0xb0>
 800b2f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4638      	mov	r0, r7
 800b300:	47c0      	blx	r8
 800b302:	3001      	adds	r0, #1
 800b304:	d01e      	beq.n	800b344 <_printf_common+0xa4>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	68e5      	ldr	r5, [r4, #12]
 800b30a:	6832      	ldr	r2, [r6, #0]
 800b30c:	f003 0306 	and.w	r3, r3, #6
 800b310:	2b04      	cmp	r3, #4
 800b312:	bf08      	it	eq
 800b314:	1aad      	subeq	r5, r5, r2
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	bf0c      	ite	eq
 800b31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b320:	2500      	movne	r5, #0
 800b322:	4293      	cmp	r3, r2
 800b324:	bfc4      	itt	gt
 800b326:	1a9b      	subgt	r3, r3, r2
 800b328:	18ed      	addgt	r5, r5, r3
 800b32a:	2600      	movs	r6, #0
 800b32c:	341a      	adds	r4, #26
 800b32e:	42b5      	cmp	r5, r6
 800b330:	d11a      	bne.n	800b368 <_printf_common+0xc8>
 800b332:	2000      	movs	r0, #0
 800b334:	e008      	b.n	800b348 <_printf_common+0xa8>
 800b336:	2301      	movs	r3, #1
 800b338:	4652      	mov	r2, sl
 800b33a:	4649      	mov	r1, r9
 800b33c:	4638      	mov	r0, r7
 800b33e:	47c0      	blx	r8
 800b340:	3001      	adds	r0, #1
 800b342:	d103      	bne.n	800b34c <_printf_common+0xac>
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34c:	3501      	adds	r5, #1
 800b34e:	e7c6      	b.n	800b2de <_printf_common+0x3e>
 800b350:	18e1      	adds	r1, r4, r3
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	2030      	movs	r0, #48	; 0x30
 800b356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b35a:	4422      	add	r2, r4
 800b35c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b364:	3302      	adds	r3, #2
 800b366:	e7c7      	b.n	800b2f8 <_printf_common+0x58>
 800b368:	2301      	movs	r3, #1
 800b36a:	4622      	mov	r2, r4
 800b36c:	4649      	mov	r1, r9
 800b36e:	4638      	mov	r0, r7
 800b370:	47c0      	blx	r8
 800b372:	3001      	adds	r0, #1
 800b374:	d0e6      	beq.n	800b344 <_printf_common+0xa4>
 800b376:	3601      	adds	r6, #1
 800b378:	e7d9      	b.n	800b32e <_printf_common+0x8e>
	...

0800b37c <_printf_i>:
 800b37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	4691      	mov	r9, r2
 800b384:	7e27      	ldrb	r7, [r4, #24]
 800b386:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b388:	2f78      	cmp	r7, #120	; 0x78
 800b38a:	4680      	mov	r8, r0
 800b38c:	469a      	mov	sl, r3
 800b38e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b392:	d807      	bhi.n	800b3a4 <_printf_i+0x28>
 800b394:	2f62      	cmp	r7, #98	; 0x62
 800b396:	d80a      	bhi.n	800b3ae <_printf_i+0x32>
 800b398:	2f00      	cmp	r7, #0
 800b39a:	f000 80d8 	beq.w	800b54e <_printf_i+0x1d2>
 800b39e:	2f58      	cmp	r7, #88	; 0x58
 800b3a0:	f000 80a3 	beq.w	800b4ea <_printf_i+0x16e>
 800b3a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3ac:	e03a      	b.n	800b424 <_printf_i+0xa8>
 800b3ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3b2:	2b15      	cmp	r3, #21
 800b3b4:	d8f6      	bhi.n	800b3a4 <_printf_i+0x28>
 800b3b6:	a001      	add	r0, pc, #4	; (adr r0, 800b3bc <_printf_i+0x40>)
 800b3b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3bc:	0800b415 	.word	0x0800b415
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b3a5 	.word	0x0800b3a5
 800b3c8:	0800b3a5 	.word	0x0800b3a5
 800b3cc:	0800b3a5 	.word	0x0800b3a5
 800b3d0:	0800b3a5 	.word	0x0800b3a5
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b3a5 	.word	0x0800b3a5
 800b3dc:	0800b3a5 	.word	0x0800b3a5
 800b3e0:	0800b3a5 	.word	0x0800b3a5
 800b3e4:	0800b3a5 	.word	0x0800b3a5
 800b3e8:	0800b535 	.word	0x0800b535
 800b3ec:	0800b459 	.word	0x0800b459
 800b3f0:	0800b517 	.word	0x0800b517
 800b3f4:	0800b3a5 	.word	0x0800b3a5
 800b3f8:	0800b3a5 	.word	0x0800b3a5
 800b3fc:	0800b557 	.word	0x0800b557
 800b400:	0800b3a5 	.word	0x0800b3a5
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b3a5 	.word	0x0800b3a5
 800b40c:	0800b3a5 	.word	0x0800b3a5
 800b410:	0800b51f 	.word	0x0800b51f
 800b414:	680b      	ldr	r3, [r1, #0]
 800b416:	1d1a      	adds	r2, r3, #4
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	600a      	str	r2, [r1, #0]
 800b41c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b424:	2301      	movs	r3, #1
 800b426:	e0a3      	b.n	800b570 <_printf_i+0x1f4>
 800b428:	6825      	ldr	r5, [r4, #0]
 800b42a:	6808      	ldr	r0, [r1, #0]
 800b42c:	062e      	lsls	r6, r5, #24
 800b42e:	f100 0304 	add.w	r3, r0, #4
 800b432:	d50a      	bpl.n	800b44a <_printf_i+0xce>
 800b434:	6805      	ldr	r5, [r0, #0]
 800b436:	600b      	str	r3, [r1, #0]
 800b438:	2d00      	cmp	r5, #0
 800b43a:	da03      	bge.n	800b444 <_printf_i+0xc8>
 800b43c:	232d      	movs	r3, #45	; 0x2d
 800b43e:	426d      	negs	r5, r5
 800b440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b444:	485e      	ldr	r0, [pc, #376]	; (800b5c0 <_printf_i+0x244>)
 800b446:	230a      	movs	r3, #10
 800b448:	e019      	b.n	800b47e <_printf_i+0x102>
 800b44a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b44e:	6805      	ldr	r5, [r0, #0]
 800b450:	600b      	str	r3, [r1, #0]
 800b452:	bf18      	it	ne
 800b454:	b22d      	sxthne	r5, r5
 800b456:	e7ef      	b.n	800b438 <_printf_i+0xbc>
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	6825      	ldr	r5, [r4, #0]
 800b45c:	1d18      	adds	r0, r3, #4
 800b45e:	6008      	str	r0, [r1, #0]
 800b460:	0628      	lsls	r0, r5, #24
 800b462:	d501      	bpl.n	800b468 <_printf_i+0xec>
 800b464:	681d      	ldr	r5, [r3, #0]
 800b466:	e002      	b.n	800b46e <_printf_i+0xf2>
 800b468:	0669      	lsls	r1, r5, #25
 800b46a:	d5fb      	bpl.n	800b464 <_printf_i+0xe8>
 800b46c:	881d      	ldrh	r5, [r3, #0]
 800b46e:	4854      	ldr	r0, [pc, #336]	; (800b5c0 <_printf_i+0x244>)
 800b470:	2f6f      	cmp	r7, #111	; 0x6f
 800b472:	bf0c      	ite	eq
 800b474:	2308      	moveq	r3, #8
 800b476:	230a      	movne	r3, #10
 800b478:	2100      	movs	r1, #0
 800b47a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b47e:	6866      	ldr	r6, [r4, #4]
 800b480:	60a6      	str	r6, [r4, #8]
 800b482:	2e00      	cmp	r6, #0
 800b484:	bfa2      	ittt	ge
 800b486:	6821      	ldrge	r1, [r4, #0]
 800b488:	f021 0104 	bicge.w	r1, r1, #4
 800b48c:	6021      	strge	r1, [r4, #0]
 800b48e:	b90d      	cbnz	r5, 800b494 <_printf_i+0x118>
 800b490:	2e00      	cmp	r6, #0
 800b492:	d04d      	beq.n	800b530 <_printf_i+0x1b4>
 800b494:	4616      	mov	r6, r2
 800b496:	fbb5 f1f3 	udiv	r1, r5, r3
 800b49a:	fb03 5711 	mls	r7, r3, r1, r5
 800b49e:	5dc7      	ldrb	r7, [r0, r7]
 800b4a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4a4:	462f      	mov	r7, r5
 800b4a6:	42bb      	cmp	r3, r7
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	d9f4      	bls.n	800b496 <_printf_i+0x11a>
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d10b      	bne.n	800b4c8 <_printf_i+0x14c>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	07df      	lsls	r7, r3, #31
 800b4b4:	d508      	bpl.n	800b4c8 <_printf_i+0x14c>
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	6861      	ldr	r1, [r4, #4]
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	bfde      	ittt	le
 800b4be:	2330      	movle	r3, #48	; 0x30
 800b4c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4c8:	1b92      	subs	r2, r2, r6
 800b4ca:	6122      	str	r2, [r4, #16]
 800b4cc:	f8cd a000 	str.w	sl, [sp]
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	aa03      	add	r2, sp, #12
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7ff fee2 	bl	800b2a0 <_printf_common>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d14c      	bne.n	800b57a <_printf_i+0x1fe>
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	b004      	add	sp, #16
 800b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ea:	4835      	ldr	r0, [pc, #212]	; (800b5c0 <_printf_i+0x244>)
 800b4ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	680e      	ldr	r6, [r1, #0]
 800b4f4:	061f      	lsls	r7, r3, #24
 800b4f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4fa:	600e      	str	r6, [r1, #0]
 800b4fc:	d514      	bpl.n	800b528 <_printf_i+0x1ac>
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	bf44      	itt	mi
 800b502:	f043 0320 	orrmi.w	r3, r3, #32
 800b506:	6023      	strmi	r3, [r4, #0]
 800b508:	b91d      	cbnz	r5, 800b512 <_printf_i+0x196>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	f023 0320 	bic.w	r3, r3, #32
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2310      	movs	r3, #16
 800b514:	e7b0      	b.n	800b478 <_printf_i+0xfc>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f043 0320 	orr.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	2378      	movs	r3, #120	; 0x78
 800b520:	4828      	ldr	r0, [pc, #160]	; (800b5c4 <_printf_i+0x248>)
 800b522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b526:	e7e3      	b.n	800b4f0 <_printf_i+0x174>
 800b528:	065e      	lsls	r6, r3, #25
 800b52a:	bf48      	it	mi
 800b52c:	b2ad      	uxthmi	r5, r5
 800b52e:	e7e6      	b.n	800b4fe <_printf_i+0x182>
 800b530:	4616      	mov	r6, r2
 800b532:	e7bb      	b.n	800b4ac <_printf_i+0x130>
 800b534:	680b      	ldr	r3, [r1, #0]
 800b536:	6826      	ldr	r6, [r4, #0]
 800b538:	6960      	ldr	r0, [r4, #20]
 800b53a:	1d1d      	adds	r5, r3, #4
 800b53c:	600d      	str	r5, [r1, #0]
 800b53e:	0635      	lsls	r5, r6, #24
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	d501      	bpl.n	800b548 <_printf_i+0x1cc>
 800b544:	6018      	str	r0, [r3, #0]
 800b546:	e002      	b.n	800b54e <_printf_i+0x1d2>
 800b548:	0671      	lsls	r1, r6, #25
 800b54a:	d5fb      	bpl.n	800b544 <_printf_i+0x1c8>
 800b54c:	8018      	strh	r0, [r3, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	4616      	mov	r6, r2
 800b554:	e7ba      	b.n	800b4cc <_printf_i+0x150>
 800b556:	680b      	ldr	r3, [r1, #0]
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	600a      	str	r2, [r1, #0]
 800b55c:	681e      	ldr	r6, [r3, #0]
 800b55e:	6862      	ldr	r2, [r4, #4]
 800b560:	2100      	movs	r1, #0
 800b562:	4630      	mov	r0, r6
 800b564:	f7f4 fe34 	bl	80001d0 <memchr>
 800b568:	b108      	cbz	r0, 800b56e <_printf_i+0x1f2>
 800b56a:	1b80      	subs	r0, r0, r6
 800b56c:	6060      	str	r0, [r4, #4]
 800b56e:	6863      	ldr	r3, [r4, #4]
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	2300      	movs	r3, #0
 800b574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b578:	e7a8      	b.n	800b4cc <_printf_i+0x150>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	4632      	mov	r2, r6
 800b57e:	4649      	mov	r1, r9
 800b580:	4640      	mov	r0, r8
 800b582:	47d0      	blx	sl
 800b584:	3001      	adds	r0, #1
 800b586:	d0ab      	beq.n	800b4e0 <_printf_i+0x164>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	079b      	lsls	r3, r3, #30
 800b58c:	d413      	bmi.n	800b5b6 <_printf_i+0x23a>
 800b58e:	68e0      	ldr	r0, [r4, #12]
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	4298      	cmp	r0, r3
 800b594:	bfb8      	it	lt
 800b596:	4618      	movlt	r0, r3
 800b598:	e7a4      	b.n	800b4e4 <_printf_i+0x168>
 800b59a:	2301      	movs	r3, #1
 800b59c:	4632      	mov	r2, r6
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	47d0      	blx	sl
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d09b      	beq.n	800b4e0 <_printf_i+0x164>
 800b5a8:	3501      	adds	r5, #1
 800b5aa:	68e3      	ldr	r3, [r4, #12]
 800b5ac:	9903      	ldr	r1, [sp, #12]
 800b5ae:	1a5b      	subs	r3, r3, r1
 800b5b0:	42ab      	cmp	r3, r5
 800b5b2:	dcf2      	bgt.n	800b59a <_printf_i+0x21e>
 800b5b4:	e7eb      	b.n	800b58e <_printf_i+0x212>
 800b5b6:	2500      	movs	r5, #0
 800b5b8:	f104 0619 	add.w	r6, r4, #25
 800b5bc:	e7f5      	b.n	800b5aa <_printf_i+0x22e>
 800b5be:	bf00      	nop
 800b5c0:	0800de36 	.word	0x0800de36
 800b5c4:	0800de47 	.word	0x0800de47

0800b5c8 <__swbuf_r>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	460e      	mov	r6, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	b118      	cbz	r0, 800b5da <__swbuf_r+0x12>
 800b5d2:	6983      	ldr	r3, [r0, #24]
 800b5d4:	b90b      	cbnz	r3, 800b5da <__swbuf_r+0x12>
 800b5d6:	f000 f9d9 	bl	800b98c <__sinit>
 800b5da:	4b21      	ldr	r3, [pc, #132]	; (800b660 <__swbuf_r+0x98>)
 800b5dc:	429c      	cmp	r4, r3
 800b5de:	d12b      	bne.n	800b638 <__swbuf_r+0x70>
 800b5e0:	686c      	ldr	r4, [r5, #4]
 800b5e2:	69a3      	ldr	r3, [r4, #24]
 800b5e4:	60a3      	str	r3, [r4, #8]
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	071a      	lsls	r2, r3, #28
 800b5ea:	d52f      	bpl.n	800b64c <__swbuf_r+0x84>
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	b36b      	cbz	r3, 800b64c <__swbuf_r+0x84>
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	6820      	ldr	r0, [r4, #0]
 800b5f4:	1ac0      	subs	r0, r0, r3
 800b5f6:	6963      	ldr	r3, [r4, #20]
 800b5f8:	b2f6      	uxtb	r6, r6
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	dc04      	bgt.n	800b60a <__swbuf_r+0x42>
 800b600:	4621      	mov	r1, r4
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f92e 	bl	800b864 <_fflush_r>
 800b608:	bb30      	cbnz	r0, 800b658 <__swbuf_r+0x90>
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	60a3      	str	r3, [r4, #8]
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	701e      	strb	r6, [r3, #0]
 800b618:	6963      	ldr	r3, [r4, #20]
 800b61a:	3001      	adds	r0, #1
 800b61c:	4283      	cmp	r3, r0
 800b61e:	d004      	beq.n	800b62a <__swbuf_r+0x62>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	07db      	lsls	r3, r3, #31
 800b624:	d506      	bpl.n	800b634 <__swbuf_r+0x6c>
 800b626:	2e0a      	cmp	r6, #10
 800b628:	d104      	bne.n	800b634 <__swbuf_r+0x6c>
 800b62a:	4621      	mov	r1, r4
 800b62c:	4628      	mov	r0, r5
 800b62e:	f000 f919 	bl	800b864 <_fflush_r>
 800b632:	b988      	cbnz	r0, 800b658 <__swbuf_r+0x90>
 800b634:	4638      	mov	r0, r7
 800b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <__swbuf_r+0x9c>)
 800b63a:	429c      	cmp	r4, r3
 800b63c:	d101      	bne.n	800b642 <__swbuf_r+0x7a>
 800b63e:	68ac      	ldr	r4, [r5, #8]
 800b640:	e7cf      	b.n	800b5e2 <__swbuf_r+0x1a>
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <__swbuf_r+0xa0>)
 800b644:	429c      	cmp	r4, r3
 800b646:	bf08      	it	eq
 800b648:	68ec      	ldreq	r4, [r5, #12]
 800b64a:	e7ca      	b.n	800b5e2 <__swbuf_r+0x1a>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4628      	mov	r0, r5
 800b650:	f000 f80c 	bl	800b66c <__swsetup_r>
 800b654:	2800      	cmp	r0, #0
 800b656:	d0cb      	beq.n	800b5f0 <__swbuf_r+0x28>
 800b658:	f04f 37ff 	mov.w	r7, #4294967295
 800b65c:	e7ea      	b.n	800b634 <__swbuf_r+0x6c>
 800b65e:	bf00      	nop
 800b660:	0800de78 	.word	0x0800de78
 800b664:	0800de98 	.word	0x0800de98
 800b668:	0800de58 	.word	0x0800de58

0800b66c <__swsetup_r>:
 800b66c:	4b32      	ldr	r3, [pc, #200]	; (800b738 <__swsetup_r+0xcc>)
 800b66e:	b570      	push	{r4, r5, r6, lr}
 800b670:	681d      	ldr	r5, [r3, #0]
 800b672:	4606      	mov	r6, r0
 800b674:	460c      	mov	r4, r1
 800b676:	b125      	cbz	r5, 800b682 <__swsetup_r+0x16>
 800b678:	69ab      	ldr	r3, [r5, #24]
 800b67a:	b913      	cbnz	r3, 800b682 <__swsetup_r+0x16>
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 f985 	bl	800b98c <__sinit>
 800b682:	4b2e      	ldr	r3, [pc, #184]	; (800b73c <__swsetup_r+0xd0>)
 800b684:	429c      	cmp	r4, r3
 800b686:	d10f      	bne.n	800b6a8 <__swsetup_r+0x3c>
 800b688:	686c      	ldr	r4, [r5, #4]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b690:	0719      	lsls	r1, r3, #28
 800b692:	d42c      	bmi.n	800b6ee <__swsetup_r+0x82>
 800b694:	06dd      	lsls	r5, r3, #27
 800b696:	d411      	bmi.n	800b6bc <__swsetup_r+0x50>
 800b698:	2309      	movs	r3, #9
 800b69a:	6033      	str	r3, [r6, #0]
 800b69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a6:	e03e      	b.n	800b726 <__swsetup_r+0xba>
 800b6a8:	4b25      	ldr	r3, [pc, #148]	; (800b740 <__swsetup_r+0xd4>)
 800b6aa:	429c      	cmp	r4, r3
 800b6ac:	d101      	bne.n	800b6b2 <__swsetup_r+0x46>
 800b6ae:	68ac      	ldr	r4, [r5, #8]
 800b6b0:	e7eb      	b.n	800b68a <__swsetup_r+0x1e>
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <__swsetup_r+0xd8>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	bf08      	it	eq
 800b6b8:	68ec      	ldreq	r4, [r5, #12]
 800b6ba:	e7e6      	b.n	800b68a <__swsetup_r+0x1e>
 800b6bc:	0758      	lsls	r0, r3, #29
 800b6be:	d512      	bpl.n	800b6e6 <__swsetup_r+0x7a>
 800b6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c2:	b141      	cbz	r1, 800b6d6 <__swsetup_r+0x6a>
 800b6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	d002      	beq.n	800b6d2 <__swsetup_r+0x66>
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff faad 	bl	800ac2c <_free_r>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f043 0308 	orr.w	r3, r3, #8
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	b94b      	cbnz	r3, 800b706 <__swsetup_r+0x9a>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6fc:	d003      	beq.n	800b706 <__swsetup_r+0x9a>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4630      	mov	r0, r6
 800b702:	f000 fa07 	bl	800bb14 <__smakebuf_r>
 800b706:	89a0      	ldrh	r0, [r4, #12]
 800b708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b70c:	f010 0301 	ands.w	r3, r0, #1
 800b710:	d00a      	beq.n	800b728 <__swsetup_r+0xbc>
 800b712:	2300      	movs	r3, #0
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6963      	ldr	r3, [r4, #20]
 800b718:	425b      	negs	r3, r3
 800b71a:	61a3      	str	r3, [r4, #24]
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	b943      	cbnz	r3, 800b732 <__swsetup_r+0xc6>
 800b720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b724:	d1ba      	bne.n	800b69c <__swsetup_r+0x30>
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	0781      	lsls	r1, r0, #30
 800b72a:	bf58      	it	pl
 800b72c:	6963      	ldrpl	r3, [r4, #20]
 800b72e:	60a3      	str	r3, [r4, #8]
 800b730:	e7f4      	b.n	800b71c <__swsetup_r+0xb0>
 800b732:	2000      	movs	r0, #0
 800b734:	e7f7      	b.n	800b726 <__swsetup_r+0xba>
 800b736:	bf00      	nop
 800b738:	20000064 	.word	0x20000064
 800b73c:	0800de78 	.word	0x0800de78
 800b740:	0800de98 	.word	0x0800de98
 800b744:	0800de58 	.word	0x0800de58

0800b748 <abort>:
 800b748:	b508      	push	{r3, lr}
 800b74a:	2006      	movs	r0, #6
 800b74c:	f000 fa4a 	bl	800bbe4 <raise>
 800b750:	2001      	movs	r0, #1
 800b752:	f7f6 fcb7 	bl	80020c4 <_exit>
	...

0800b758 <__sflush_r>:
 800b758:	898a      	ldrh	r2, [r1, #12]
 800b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	4605      	mov	r5, r0
 800b760:	0710      	lsls	r0, r2, #28
 800b762:	460c      	mov	r4, r1
 800b764:	d458      	bmi.n	800b818 <__sflush_r+0xc0>
 800b766:	684b      	ldr	r3, [r1, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc05      	bgt.n	800b778 <__sflush_r+0x20>
 800b76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dc02      	bgt.n	800b778 <__sflush_r+0x20>
 800b772:	2000      	movs	r0, #0
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	d0f9      	beq.n	800b772 <__sflush_r+0x1a>
 800b77e:	2300      	movs	r3, #0
 800b780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b784:	682f      	ldr	r7, [r5, #0]
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	d032      	beq.n	800b7f0 <__sflush_r+0x98>
 800b78a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	075a      	lsls	r2, r3, #29
 800b790:	d505      	bpl.n	800b79e <__sflush_r+0x46>
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	1ac0      	subs	r0, r0, r3
 800b796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b798:	b10b      	cbz	r3, 800b79e <__sflush_r+0x46>
 800b79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b79c:	1ac0      	subs	r0, r0, r3
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7a4:	6a21      	ldr	r1, [r4, #32]
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b0      	blx	r6
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	d106      	bne.n	800b7be <__sflush_r+0x66>
 800b7b0:	6829      	ldr	r1, [r5, #0]
 800b7b2:	291d      	cmp	r1, #29
 800b7b4:	d82c      	bhi.n	800b810 <__sflush_r+0xb8>
 800b7b6:	4a2a      	ldr	r2, [pc, #168]	; (800b860 <__sflush_r+0x108>)
 800b7b8:	40ca      	lsrs	r2, r1
 800b7ba:	07d6      	lsls	r6, r2, #31
 800b7bc:	d528      	bpl.n	800b810 <__sflush_r+0xb8>
 800b7be:	2200      	movs	r2, #0
 800b7c0:	6062      	str	r2, [r4, #4]
 800b7c2:	04d9      	lsls	r1, r3, #19
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	6022      	str	r2, [r4, #0]
 800b7c8:	d504      	bpl.n	800b7d4 <__sflush_r+0x7c>
 800b7ca:	1c42      	adds	r2, r0, #1
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0x7a>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	b903      	cbnz	r3, 800b7d4 <__sflush_r+0x7c>
 800b7d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d6:	602f      	str	r7, [r5, #0]
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	d0ca      	beq.n	800b772 <__sflush_r+0x1a>
 800b7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	d002      	beq.n	800b7ea <__sflush_r+0x92>
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f7ff fa21 	bl	800ac2c <_free_r>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ee:	e7c1      	b.n	800b774 <__sflush_r+0x1c>
 800b7f0:	6a21      	ldr	r1, [r4, #32]
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	47b0      	blx	r6
 800b7f8:	1c41      	adds	r1, r0, #1
 800b7fa:	d1c7      	bne.n	800b78c <__sflush_r+0x34>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0c4      	beq.n	800b78c <__sflush_r+0x34>
 800b802:	2b1d      	cmp	r3, #29
 800b804:	d001      	beq.n	800b80a <__sflush_r+0xb2>
 800b806:	2b16      	cmp	r3, #22
 800b808:	d101      	bne.n	800b80e <__sflush_r+0xb6>
 800b80a:	602f      	str	r7, [r5, #0]
 800b80c:	e7b1      	b.n	800b772 <__sflush_r+0x1a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	e7ad      	b.n	800b774 <__sflush_r+0x1c>
 800b818:	690f      	ldr	r7, [r1, #16]
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	d0a9      	beq.n	800b772 <__sflush_r+0x1a>
 800b81e:	0793      	lsls	r3, r2, #30
 800b820:	680e      	ldr	r6, [r1, #0]
 800b822:	bf08      	it	eq
 800b824:	694b      	ldreq	r3, [r1, #20]
 800b826:	600f      	str	r7, [r1, #0]
 800b828:	bf18      	it	ne
 800b82a:	2300      	movne	r3, #0
 800b82c:	eba6 0807 	sub.w	r8, r6, r7
 800b830:	608b      	str	r3, [r1, #8]
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	dd9c      	ble.n	800b772 <__sflush_r+0x1a>
 800b838:	6a21      	ldr	r1, [r4, #32]
 800b83a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b83c:	4643      	mov	r3, r8
 800b83e:	463a      	mov	r2, r7
 800b840:	4628      	mov	r0, r5
 800b842:	47b0      	blx	r6
 800b844:	2800      	cmp	r0, #0
 800b846:	dc06      	bgt.n	800b856 <__sflush_r+0xfe>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e78e      	b.n	800b774 <__sflush_r+0x1c>
 800b856:	4407      	add	r7, r0
 800b858:	eba8 0800 	sub.w	r8, r8, r0
 800b85c:	e7e9      	b.n	800b832 <__sflush_r+0xda>
 800b85e:	bf00      	nop
 800b860:	20400001 	.word	0x20400001

0800b864 <_fflush_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	690b      	ldr	r3, [r1, #16]
 800b868:	4605      	mov	r5, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	b913      	cbnz	r3, 800b874 <_fflush_r+0x10>
 800b86e:	2500      	movs	r5, #0
 800b870:	4628      	mov	r0, r5
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	b118      	cbz	r0, 800b87e <_fflush_r+0x1a>
 800b876:	6983      	ldr	r3, [r0, #24]
 800b878:	b90b      	cbnz	r3, 800b87e <_fflush_r+0x1a>
 800b87a:	f000 f887 	bl	800b98c <__sinit>
 800b87e:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <_fflush_r+0x6c>)
 800b880:	429c      	cmp	r4, r3
 800b882:	d11b      	bne.n	800b8bc <_fflush_r+0x58>
 800b884:	686c      	ldr	r4, [r5, #4]
 800b886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0ef      	beq.n	800b86e <_fflush_r+0xa>
 800b88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b890:	07d0      	lsls	r0, r2, #31
 800b892:	d404      	bmi.n	800b89e <_fflush_r+0x3a>
 800b894:	0599      	lsls	r1, r3, #22
 800b896:	d402      	bmi.n	800b89e <_fflush_r+0x3a>
 800b898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b89a:	f000 f915 	bl	800bac8 <__retarget_lock_acquire_recursive>
 800b89e:	4628      	mov	r0, r5
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f7ff ff59 	bl	800b758 <__sflush_r>
 800b8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8a8:	07da      	lsls	r2, r3, #31
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	d4e0      	bmi.n	800b870 <_fflush_r+0xc>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	059b      	lsls	r3, r3, #22
 800b8b2:	d4dd      	bmi.n	800b870 <_fflush_r+0xc>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8b6:	f000 f908 	bl	800baca <__retarget_lock_release_recursive>
 800b8ba:	e7d9      	b.n	800b870 <_fflush_r+0xc>
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <_fflush_r+0x70>)
 800b8be:	429c      	cmp	r4, r3
 800b8c0:	d101      	bne.n	800b8c6 <_fflush_r+0x62>
 800b8c2:	68ac      	ldr	r4, [r5, #8]
 800b8c4:	e7df      	b.n	800b886 <_fflush_r+0x22>
 800b8c6:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <_fflush_r+0x74>)
 800b8c8:	429c      	cmp	r4, r3
 800b8ca:	bf08      	it	eq
 800b8cc:	68ec      	ldreq	r4, [r5, #12]
 800b8ce:	e7da      	b.n	800b886 <_fflush_r+0x22>
 800b8d0:	0800de78 	.word	0x0800de78
 800b8d4:	0800de98 	.word	0x0800de98
 800b8d8:	0800de58 	.word	0x0800de58

0800b8dc <std>:
 800b8dc:	2300      	movs	r3, #0
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ea:	6083      	str	r3, [r0, #8]
 800b8ec:	8181      	strh	r1, [r0, #12]
 800b8ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b8f0:	81c2      	strh	r2, [r0, #14]
 800b8f2:	6183      	str	r3, [r0, #24]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	2208      	movs	r2, #8
 800b8f8:	305c      	adds	r0, #92	; 0x5c
 800b8fa:	f7ff f98f 	bl	800ac1c <memset>
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <std+0x38>)
 800b900:	6263      	str	r3, [r4, #36]	; 0x24
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <std+0x3c>)
 800b904:	62a3      	str	r3, [r4, #40]	; 0x28
 800b906:	4b05      	ldr	r3, [pc, #20]	; (800b91c <std+0x40>)
 800b908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <std+0x44>)
 800b90c:	6224      	str	r4, [r4, #32]
 800b90e:	6323      	str	r3, [r4, #48]	; 0x30
 800b910:	bd10      	pop	{r4, pc}
 800b912:	bf00      	nop
 800b914:	0800bc1d 	.word	0x0800bc1d
 800b918:	0800bc3f 	.word	0x0800bc3f
 800b91c:	0800bc77 	.word	0x0800bc77
 800b920:	0800bc9b 	.word	0x0800bc9b

0800b924 <_cleanup_r>:
 800b924:	4901      	ldr	r1, [pc, #4]	; (800b92c <_cleanup_r+0x8>)
 800b926:	f000 b8af 	b.w	800ba88 <_fwalk_reent>
 800b92a:	bf00      	nop
 800b92c:	0800b865 	.word	0x0800b865

0800b930 <__sfmoreglue>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	1e4a      	subs	r2, r1, #1
 800b934:	2568      	movs	r5, #104	; 0x68
 800b936:	4355      	muls	r5, r2
 800b938:	460e      	mov	r6, r1
 800b93a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b93e:	f7ff f9c5 	bl	800accc <_malloc_r>
 800b942:	4604      	mov	r4, r0
 800b944:	b140      	cbz	r0, 800b958 <__sfmoreglue+0x28>
 800b946:	2100      	movs	r1, #0
 800b948:	e9c0 1600 	strd	r1, r6, [r0]
 800b94c:	300c      	adds	r0, #12
 800b94e:	60a0      	str	r0, [r4, #8]
 800b950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b954:	f7ff f962 	bl	800ac1c <memset>
 800b958:	4620      	mov	r0, r4
 800b95a:	bd70      	pop	{r4, r5, r6, pc}

0800b95c <__sfp_lock_acquire>:
 800b95c:	4801      	ldr	r0, [pc, #4]	; (800b964 <__sfp_lock_acquire+0x8>)
 800b95e:	f000 b8b3 	b.w	800bac8 <__retarget_lock_acquire_recursive>
 800b962:	bf00      	nop
 800b964:	20004814 	.word	0x20004814

0800b968 <__sfp_lock_release>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__sfp_lock_release+0x8>)
 800b96a:	f000 b8ae 	b.w	800baca <__retarget_lock_release_recursive>
 800b96e:	bf00      	nop
 800b970:	20004814 	.word	0x20004814

0800b974 <__sinit_lock_acquire>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__sinit_lock_acquire+0x8>)
 800b976:	f000 b8a7 	b.w	800bac8 <__retarget_lock_acquire_recursive>
 800b97a:	bf00      	nop
 800b97c:	2000480f 	.word	0x2000480f

0800b980 <__sinit_lock_release>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__sinit_lock_release+0x8>)
 800b982:	f000 b8a2 	b.w	800baca <__retarget_lock_release_recursive>
 800b986:	bf00      	nop
 800b988:	2000480f 	.word	0x2000480f

0800b98c <__sinit>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4604      	mov	r4, r0
 800b990:	f7ff fff0 	bl	800b974 <__sinit_lock_acquire>
 800b994:	69a3      	ldr	r3, [r4, #24]
 800b996:	b11b      	cbz	r3, 800b9a0 <__sinit+0x14>
 800b998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b99c:	f7ff bff0 	b.w	800b980 <__sinit_lock_release>
 800b9a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b9a6:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <__sinit+0x68>)
 800b9a8:	4a13      	ldr	r2, [pc, #76]	; (800b9f8 <__sinit+0x6c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9ae:	42a3      	cmp	r3, r4
 800b9b0:	bf04      	itt	eq
 800b9b2:	2301      	moveq	r3, #1
 800b9b4:	61a3      	streq	r3, [r4, #24]
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 f820 	bl	800b9fc <__sfp>
 800b9bc:	6060      	str	r0, [r4, #4]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 f81c 	bl	800b9fc <__sfp>
 800b9c4:	60a0      	str	r0, [r4, #8]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 f818 	bl	800b9fc <__sfp>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	60e0      	str	r0, [r4, #12]
 800b9d0:	2104      	movs	r1, #4
 800b9d2:	6860      	ldr	r0, [r4, #4]
 800b9d4:	f7ff ff82 	bl	800b8dc <std>
 800b9d8:	68a0      	ldr	r0, [r4, #8]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	2109      	movs	r1, #9
 800b9de:	f7ff ff7d 	bl	800b8dc <std>
 800b9e2:	68e0      	ldr	r0, [r4, #12]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	2112      	movs	r1, #18
 800b9e8:	f7ff ff78 	bl	800b8dc <std>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	61a3      	str	r3, [r4, #24]
 800b9f0:	e7d2      	b.n	800b998 <__sinit+0xc>
 800b9f2:	bf00      	nop
 800b9f4:	0800dc6c 	.word	0x0800dc6c
 800b9f8:	0800b925 	.word	0x0800b925

0800b9fc <__sfp>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	4607      	mov	r7, r0
 800ba00:	f7ff ffac 	bl	800b95c <__sfp_lock_acquire>
 800ba04:	4b1e      	ldr	r3, [pc, #120]	; (800ba80 <__sfp+0x84>)
 800ba06:	681e      	ldr	r6, [r3, #0]
 800ba08:	69b3      	ldr	r3, [r6, #24]
 800ba0a:	b913      	cbnz	r3, 800ba12 <__sfp+0x16>
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff ffbd 	bl	800b98c <__sinit>
 800ba12:	3648      	adds	r6, #72	; 0x48
 800ba14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	d503      	bpl.n	800ba24 <__sfp+0x28>
 800ba1c:	6833      	ldr	r3, [r6, #0]
 800ba1e:	b30b      	cbz	r3, 800ba64 <__sfp+0x68>
 800ba20:	6836      	ldr	r6, [r6, #0]
 800ba22:	e7f7      	b.n	800ba14 <__sfp+0x18>
 800ba24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba28:	b9d5      	cbnz	r5, 800ba60 <__sfp+0x64>
 800ba2a:	4b16      	ldr	r3, [pc, #88]	; (800ba84 <__sfp+0x88>)
 800ba2c:	60e3      	str	r3, [r4, #12]
 800ba2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba32:	6665      	str	r5, [r4, #100]	; 0x64
 800ba34:	f000 f847 	bl	800bac6 <__retarget_lock_init_recursive>
 800ba38:	f7ff ff96 	bl	800b968 <__sfp_lock_release>
 800ba3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba44:	6025      	str	r5, [r4, #0]
 800ba46:	61a5      	str	r5, [r4, #24]
 800ba48:	2208      	movs	r2, #8
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba50:	f7ff f8e4 	bl	800ac1c <memset>
 800ba54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba60:	3468      	adds	r4, #104	; 0x68
 800ba62:	e7d9      	b.n	800ba18 <__sfp+0x1c>
 800ba64:	2104      	movs	r1, #4
 800ba66:	4638      	mov	r0, r7
 800ba68:	f7ff ff62 	bl	800b930 <__sfmoreglue>
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	6030      	str	r0, [r6, #0]
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d1d5      	bne.n	800ba20 <__sfp+0x24>
 800ba74:	f7ff ff78 	bl	800b968 <__sfp_lock_release>
 800ba78:	230c      	movs	r3, #12
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	e7ee      	b.n	800ba5c <__sfp+0x60>
 800ba7e:	bf00      	nop
 800ba80:	0800dc6c 	.word	0x0800dc6c
 800ba84:	ffff0001 	.word	0xffff0001

0800ba88 <_fwalk_reent>:
 800ba88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	4688      	mov	r8, r1
 800ba90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba94:	2700      	movs	r7, #0
 800ba96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba9e:	d505      	bpl.n	800baac <_fwalk_reent+0x24>
 800baa0:	6824      	ldr	r4, [r4, #0]
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	d1f7      	bne.n	800ba96 <_fwalk_reent+0xe>
 800baa6:	4638      	mov	r0, r7
 800baa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baac:	89ab      	ldrh	r3, [r5, #12]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d907      	bls.n	800bac2 <_fwalk_reent+0x3a>
 800bab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bab6:	3301      	adds	r3, #1
 800bab8:	d003      	beq.n	800bac2 <_fwalk_reent+0x3a>
 800baba:	4629      	mov	r1, r5
 800babc:	4630      	mov	r0, r6
 800babe:	47c0      	blx	r8
 800bac0:	4307      	orrs	r7, r0
 800bac2:	3568      	adds	r5, #104	; 0x68
 800bac4:	e7e9      	b.n	800ba9a <_fwalk_reent+0x12>

0800bac6 <__retarget_lock_init_recursive>:
 800bac6:	4770      	bx	lr

0800bac8 <__retarget_lock_acquire_recursive>:
 800bac8:	4770      	bx	lr

0800baca <__retarget_lock_release_recursive>:
 800baca:	4770      	bx	lr

0800bacc <__swhatbuf_r>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	460e      	mov	r6, r1
 800bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad4:	2900      	cmp	r1, #0
 800bad6:	b096      	sub	sp, #88	; 0x58
 800bad8:	4614      	mov	r4, r2
 800bada:	461d      	mov	r5, r3
 800badc:	da07      	bge.n	800baee <__swhatbuf_r+0x22>
 800bade:	2300      	movs	r3, #0
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	89b3      	ldrh	r3, [r6, #12]
 800bae4:	061a      	lsls	r2, r3, #24
 800bae6:	d410      	bmi.n	800bb0a <__swhatbuf_r+0x3e>
 800bae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baec:	e00e      	b.n	800bb0c <__swhatbuf_r+0x40>
 800baee:	466a      	mov	r2, sp
 800baf0:	f000 f8fa 	bl	800bce8 <_fstat_r>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	dbf2      	blt.n	800bade <__swhatbuf_r+0x12>
 800baf8:	9a01      	ldr	r2, [sp, #4]
 800bafa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bafe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb02:	425a      	negs	r2, r3
 800bb04:	415a      	adcs	r2, r3
 800bb06:	602a      	str	r2, [r5, #0]
 800bb08:	e7ee      	b.n	800bae8 <__swhatbuf_r+0x1c>
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	b016      	add	sp, #88	; 0x58
 800bb12:	bd70      	pop	{r4, r5, r6, pc}

0800bb14 <__smakebuf_r>:
 800bb14:	898b      	ldrh	r3, [r1, #12]
 800bb16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb18:	079d      	lsls	r5, r3, #30
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	d507      	bpl.n	800bb30 <__smakebuf_r+0x1c>
 800bb20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	6123      	str	r3, [r4, #16]
 800bb28:	2301      	movs	r3, #1
 800bb2a:	6163      	str	r3, [r4, #20]
 800bb2c:	b002      	add	sp, #8
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	ab01      	add	r3, sp, #4
 800bb32:	466a      	mov	r2, sp
 800bb34:	f7ff ffca 	bl	800bacc <__swhatbuf_r>
 800bb38:	9900      	ldr	r1, [sp, #0]
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f7ff f8c5 	bl	800accc <_malloc_r>
 800bb42:	b948      	cbnz	r0, 800bb58 <__smakebuf_r+0x44>
 800bb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb48:	059a      	lsls	r2, r3, #22
 800bb4a:	d4ef      	bmi.n	800bb2c <__smakebuf_r+0x18>
 800bb4c:	f023 0303 	bic.w	r3, r3, #3
 800bb50:	f043 0302 	orr.w	r3, r3, #2
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	e7e3      	b.n	800bb20 <__smakebuf_r+0xc>
 800bb58:	4b0d      	ldr	r3, [pc, #52]	; (800bb90 <__smakebuf_r+0x7c>)
 800bb5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	6020      	str	r0, [r4, #0]
 800bb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb64:	81a3      	strh	r3, [r4, #12]
 800bb66:	9b00      	ldr	r3, [sp, #0]
 800bb68:	6163      	str	r3, [r4, #20]
 800bb6a:	9b01      	ldr	r3, [sp, #4]
 800bb6c:	6120      	str	r0, [r4, #16]
 800bb6e:	b15b      	cbz	r3, 800bb88 <__smakebuf_r+0x74>
 800bb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb74:	4630      	mov	r0, r6
 800bb76:	f000 f8c9 	bl	800bd0c <_isatty_r>
 800bb7a:	b128      	cbz	r0, 800bb88 <__smakebuf_r+0x74>
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	89a0      	ldrh	r0, [r4, #12]
 800bb8a:	4305      	orrs	r5, r0
 800bb8c:	81a5      	strh	r5, [r4, #12]
 800bb8e:	e7cd      	b.n	800bb2c <__smakebuf_r+0x18>
 800bb90:	0800b925 	.word	0x0800b925

0800bb94 <_raise_r>:
 800bb94:	291f      	cmp	r1, #31
 800bb96:	b538      	push	{r3, r4, r5, lr}
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	d904      	bls.n	800bba8 <_raise_r+0x14>
 800bb9e:	2316      	movs	r3, #22
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbaa:	b112      	cbz	r2, 800bbb2 <_raise_r+0x1e>
 800bbac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbb0:	b94b      	cbnz	r3, 800bbc6 <_raise_r+0x32>
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 f830 	bl	800bc18 <_getpid_r>
 800bbb8:	462a      	mov	r2, r5
 800bbba:	4601      	mov	r1, r0
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc2:	f000 b817 	b.w	800bbf4 <_kill_r>
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d00a      	beq.n	800bbe0 <_raise_r+0x4c>
 800bbca:	1c59      	adds	r1, r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <_raise_r+0x42>
 800bbce:	2316      	movs	r3, #22
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e7e7      	b.n	800bba6 <_raise_r+0x12>
 800bbd6:	2400      	movs	r4, #0
 800bbd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbdc:	4628      	mov	r0, r5
 800bbde:	4798      	blx	r3
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e7e0      	b.n	800bba6 <_raise_r+0x12>

0800bbe4 <raise>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <raise+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f7ff bfd3 	b.w	800bb94 <_raise_r>
 800bbee:	bf00      	nop
 800bbf0:	20000064 	.word	0x20000064

0800bbf4 <_kill_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d07      	ldr	r5, [pc, #28]	; (800bc14 <_kill_r+0x20>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	4611      	mov	r1, r2
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	f7f6 fa4f 	bl	80020a4 <_kill>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d102      	bne.n	800bc10 <_kill_r+0x1c>
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	b103      	cbz	r3, 800bc10 <_kill_r+0x1c>
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	bd38      	pop	{r3, r4, r5, pc}
 800bc12:	bf00      	nop
 800bc14:	20004808 	.word	0x20004808

0800bc18 <_getpid_r>:
 800bc18:	f7f6 ba3c 	b.w	8002094 <_getpid>

0800bc1c <__sread>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	460c      	mov	r4, r1
 800bc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc24:	f000 f894 	bl	800bd50 <_read_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	bfab      	itete	ge
 800bc2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc30:	181b      	addge	r3, r3, r0
 800bc32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc36:	bfac      	ite	ge
 800bc38:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3a:	81a3      	strhlt	r3, [r4, #12]
 800bc3c:	bd10      	pop	{r4, pc}

0800bc3e <__swrite>:
 800bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	461f      	mov	r7, r3
 800bc44:	898b      	ldrh	r3, [r1, #12]
 800bc46:	05db      	lsls	r3, r3, #23
 800bc48:	4605      	mov	r5, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	4616      	mov	r6, r2
 800bc4e:	d505      	bpl.n	800bc5c <__swrite+0x1e>
 800bc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc54:	2302      	movs	r3, #2
 800bc56:	2200      	movs	r2, #0
 800bc58:	f000 f868 	bl	800bd2c <_lseek_r>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc72:	f000 b817 	b.w	800bca4 <_write_r>

0800bc76 <__sseek>:
 800bc76:	b510      	push	{r4, lr}
 800bc78:	460c      	mov	r4, r1
 800bc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc7e:	f000 f855 	bl	800bd2c <_lseek_r>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	bf15      	itete	ne
 800bc88:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc92:	81a3      	strheq	r3, [r4, #12]
 800bc94:	bf18      	it	ne
 800bc96:	81a3      	strhne	r3, [r4, #12]
 800bc98:	bd10      	pop	{r4, pc}

0800bc9a <__sclose>:
 800bc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9e:	f000 b813 	b.w	800bcc8 <_close_r>
	...

0800bca4 <_write_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d07      	ldr	r5, [pc, #28]	; (800bcc4 <_write_r+0x20>)
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4608      	mov	r0, r1
 800bcac:	4611      	mov	r1, r2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	602a      	str	r2, [r5, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f7f6 fa2d 	bl	8002112 <_write>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_write_r+0x1e>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_write_r+0x1e>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20004808 	.word	0x20004808

0800bcc8 <_close_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d06      	ldr	r5, [pc, #24]	; (800bce4 <_close_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f6 fa39 	bl	800214a <_close>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_close_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_close_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20004808 	.word	0x20004808

0800bce8 <_fstat_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <_fstat_r+0x20>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	f7f6 fa34 	bl	8002162 <_fstat>
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	d102      	bne.n	800bd04 <_fstat_r+0x1c>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	b103      	cbz	r3, 800bd04 <_fstat_r+0x1c>
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	bd38      	pop	{r3, r4, r5, pc}
 800bd06:	bf00      	nop
 800bd08:	20004808 	.word	0x20004808

0800bd0c <_isatty_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d06      	ldr	r5, [pc, #24]	; (800bd28 <_isatty_r+0x1c>)
 800bd10:	2300      	movs	r3, #0
 800bd12:	4604      	mov	r4, r0
 800bd14:	4608      	mov	r0, r1
 800bd16:	602b      	str	r3, [r5, #0]
 800bd18:	f7f6 fa33 	bl	8002182 <_isatty>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_isatty_r+0x1a>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_isatty_r+0x1a>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20004808 	.word	0x20004808

0800bd2c <_lseek_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_lseek_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 fa2c 	bl	8002198 <_lseek>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_lseek_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_lseek_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20004808 	.word	0x20004808

0800bd50 <_read_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d07      	ldr	r5, [pc, #28]	; (800bd70 <_read_r+0x20>)
 800bd54:	4604      	mov	r4, r0
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f6 f9ba 	bl	80020d8 <_read>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_read_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_read_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20004808 	.word	0x20004808
 800bd74:	00000000 	.word	0x00000000

0800bd78 <cos>:
 800bd78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd7a:	ec53 2b10 	vmov	r2, r3, d0
 800bd7e:	4824      	ldr	r0, [pc, #144]	; (800be10 <cos+0x98>)
 800bd80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd84:	4281      	cmp	r1, r0
 800bd86:	dc06      	bgt.n	800bd96 <cos+0x1e>
 800bd88:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800be08 <cos+0x90>
 800bd8c:	f001 f958 	bl	800d040 <__kernel_cos>
 800bd90:	ec51 0b10 	vmov	r0, r1, d0
 800bd94:	e007      	b.n	800bda6 <cos+0x2e>
 800bd96:	481f      	ldr	r0, [pc, #124]	; (800be14 <cos+0x9c>)
 800bd98:	4281      	cmp	r1, r0
 800bd9a:	dd09      	ble.n	800bdb0 <cos+0x38>
 800bd9c:	ee10 0a10 	vmov	r0, s0
 800bda0:	4619      	mov	r1, r3
 800bda2:	f7f4 fa69 	bl	8000278 <__aeabi_dsub>
 800bda6:	ec41 0b10 	vmov	d0, r0, r1
 800bdaa:	b005      	add	sp, #20
 800bdac:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdb0:	4668      	mov	r0, sp
 800bdb2:	f000 fe85 	bl	800cac0 <__ieee754_rem_pio2>
 800bdb6:	f000 0003 	and.w	r0, r0, #3
 800bdba:	2801      	cmp	r0, #1
 800bdbc:	d007      	beq.n	800bdce <cos+0x56>
 800bdbe:	2802      	cmp	r0, #2
 800bdc0:	d012      	beq.n	800bde8 <cos+0x70>
 800bdc2:	b9c0      	cbnz	r0, 800bdf6 <cos+0x7e>
 800bdc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdc8:	ed9d 0b00 	vldr	d0, [sp]
 800bdcc:	e7de      	b.n	800bd8c <cos+0x14>
 800bdce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdd2:	ed9d 0b00 	vldr	d0, [sp]
 800bdd6:	f001 fd3b 	bl	800d850 <__kernel_sin>
 800bdda:	ec53 2b10 	vmov	r2, r3, d0
 800bdde:	ee10 0a10 	vmov	r0, s0
 800bde2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bde6:	e7de      	b.n	800bda6 <cos+0x2e>
 800bde8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdec:	ed9d 0b00 	vldr	d0, [sp]
 800bdf0:	f001 f926 	bl	800d040 <__kernel_cos>
 800bdf4:	e7f1      	b.n	800bdda <cos+0x62>
 800bdf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdfa:	ed9d 0b00 	vldr	d0, [sp]
 800bdfe:	2001      	movs	r0, #1
 800be00:	f001 fd26 	bl	800d850 <__kernel_sin>
 800be04:	e7c4      	b.n	800bd90 <cos+0x18>
 800be06:	bf00      	nop
	...
 800be10:	3fe921fb 	.word	0x3fe921fb
 800be14:	7fefffff 	.word	0x7fefffff

0800be18 <floor>:
 800be18:	ec51 0b10 	vmov	r0, r1, d0
 800be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800be24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800be28:	2e13      	cmp	r6, #19
 800be2a:	ee10 5a10 	vmov	r5, s0
 800be2e:	ee10 8a10 	vmov	r8, s0
 800be32:	460c      	mov	r4, r1
 800be34:	dc32      	bgt.n	800be9c <floor+0x84>
 800be36:	2e00      	cmp	r6, #0
 800be38:	da14      	bge.n	800be64 <floor+0x4c>
 800be3a:	a333      	add	r3, pc, #204	; (adr r3, 800bf08 <floor+0xf0>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f7f4 fa1c 	bl	800027c <__adddf3>
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	f7f4 fe5e 	bl	8000b08 <__aeabi_dcmpgt>
 800be4c:	b138      	cbz	r0, 800be5e <floor+0x46>
 800be4e:	2c00      	cmp	r4, #0
 800be50:	da57      	bge.n	800bf02 <floor+0xea>
 800be52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800be56:	431d      	orrs	r5, r3
 800be58:	d001      	beq.n	800be5e <floor+0x46>
 800be5a:	4c2d      	ldr	r4, [pc, #180]	; (800bf10 <floor+0xf8>)
 800be5c:	2500      	movs	r5, #0
 800be5e:	4621      	mov	r1, r4
 800be60:	4628      	mov	r0, r5
 800be62:	e025      	b.n	800beb0 <floor+0x98>
 800be64:	4f2b      	ldr	r7, [pc, #172]	; (800bf14 <floor+0xfc>)
 800be66:	4137      	asrs	r7, r6
 800be68:	ea01 0307 	and.w	r3, r1, r7
 800be6c:	4303      	orrs	r3, r0
 800be6e:	d01f      	beq.n	800beb0 <floor+0x98>
 800be70:	a325      	add	r3, pc, #148	; (adr r3, 800bf08 <floor+0xf0>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fa01 	bl	800027c <__adddf3>
 800be7a:	2200      	movs	r2, #0
 800be7c:	2300      	movs	r3, #0
 800be7e:	f7f4 fe43 	bl	8000b08 <__aeabi_dcmpgt>
 800be82:	2800      	cmp	r0, #0
 800be84:	d0eb      	beq.n	800be5e <floor+0x46>
 800be86:	2c00      	cmp	r4, #0
 800be88:	bfbe      	ittt	lt
 800be8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800be8e:	fa43 f606 	asrlt.w	r6, r3, r6
 800be92:	19a4      	addlt	r4, r4, r6
 800be94:	ea24 0407 	bic.w	r4, r4, r7
 800be98:	2500      	movs	r5, #0
 800be9a:	e7e0      	b.n	800be5e <floor+0x46>
 800be9c:	2e33      	cmp	r6, #51	; 0x33
 800be9e:	dd0b      	ble.n	800beb8 <floor+0xa0>
 800bea0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bea4:	d104      	bne.n	800beb0 <floor+0x98>
 800bea6:	ee10 2a10 	vmov	r2, s0
 800beaa:	460b      	mov	r3, r1
 800beac:	f7f4 f9e6 	bl	800027c <__adddf3>
 800beb0:	ec41 0b10 	vmov	d0, r0, r1
 800beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bebc:	f04f 33ff 	mov.w	r3, #4294967295
 800bec0:	fa23 f707 	lsr.w	r7, r3, r7
 800bec4:	4207      	tst	r7, r0
 800bec6:	d0f3      	beq.n	800beb0 <floor+0x98>
 800bec8:	a30f      	add	r3, pc, #60	; (adr r3, 800bf08 <floor+0xf0>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	f7f4 f9d5 	bl	800027c <__adddf3>
 800bed2:	2200      	movs	r2, #0
 800bed4:	2300      	movs	r3, #0
 800bed6:	f7f4 fe17 	bl	8000b08 <__aeabi_dcmpgt>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d0bf      	beq.n	800be5e <floor+0x46>
 800bede:	2c00      	cmp	r4, #0
 800bee0:	da02      	bge.n	800bee8 <floor+0xd0>
 800bee2:	2e14      	cmp	r6, #20
 800bee4:	d103      	bne.n	800beee <floor+0xd6>
 800bee6:	3401      	adds	r4, #1
 800bee8:	ea25 0507 	bic.w	r5, r5, r7
 800beec:	e7b7      	b.n	800be5e <floor+0x46>
 800beee:	2301      	movs	r3, #1
 800bef0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bef4:	fa03 f606 	lsl.w	r6, r3, r6
 800bef8:	4435      	add	r5, r6
 800befa:	4545      	cmp	r5, r8
 800befc:	bf38      	it	cc
 800befe:	18e4      	addcc	r4, r4, r3
 800bf00:	e7f2      	b.n	800bee8 <floor+0xd0>
 800bf02:	2500      	movs	r5, #0
 800bf04:	462c      	mov	r4, r5
 800bf06:	e7aa      	b.n	800be5e <floor+0x46>
 800bf08:	8800759c 	.word	0x8800759c
 800bf0c:	7e37e43c 	.word	0x7e37e43c
 800bf10:	bff00000 	.word	0xbff00000
 800bf14:	000fffff 	.word	0x000fffff

0800bf18 <pow>:
 800bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf1c:	ec59 8b10 	vmov	r8, r9, d0
 800bf20:	ec57 6b11 	vmov	r6, r7, d1
 800bf24:	f000 f8a8 	bl	800c078 <__ieee754_pow>
 800bf28:	4b4e      	ldr	r3, [pc, #312]	; (800c064 <pow+0x14c>)
 800bf2a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	ec55 4b10 	vmov	r4, r5, d0
 800bf34:	d015      	beq.n	800bf62 <pow+0x4a>
 800bf36:	4632      	mov	r2, r6
 800bf38:	463b      	mov	r3, r7
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 fded 	bl	8000b1c <__aeabi_dcmpun>
 800bf42:	b970      	cbnz	r0, 800bf62 <pow+0x4a>
 800bf44:	4642      	mov	r2, r8
 800bf46:	464b      	mov	r3, r9
 800bf48:	4640      	mov	r0, r8
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 fde6 	bl	8000b1c <__aeabi_dcmpun>
 800bf50:	2200      	movs	r2, #0
 800bf52:	2300      	movs	r3, #0
 800bf54:	b148      	cbz	r0, 800bf6a <pow+0x52>
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	f7f4 fdad 	bl	8000ab8 <__aeabi_dcmpeq>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d17d      	bne.n	800c05e <pow+0x146>
 800bf62:	ec45 4b10 	vmov	d0, r4, r5
 800bf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	f7f4 fda3 	bl	8000ab8 <__aeabi_dcmpeq>
 800bf72:	b1e0      	cbz	r0, 800bfae <pow+0x96>
 800bf74:	2200      	movs	r2, #0
 800bf76:	2300      	movs	r3, #0
 800bf78:	4630      	mov	r0, r6
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 fd9c 	bl	8000ab8 <__aeabi_dcmpeq>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d16c      	bne.n	800c05e <pow+0x146>
 800bf84:	ec47 6b10 	vmov	d0, r6, r7
 800bf88:	f001 fd29 	bl	800d9de <finite>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d0e8      	beq.n	800bf62 <pow+0x4a>
 800bf90:	2200      	movs	r2, #0
 800bf92:	2300      	movs	r3, #0
 800bf94:	4630      	mov	r0, r6
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 fd98 	bl	8000acc <__aeabi_dcmplt>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d0e0      	beq.n	800bf62 <pow+0x4a>
 800bfa0:	f7fe fe02 	bl	800aba8 <__errno>
 800bfa4:	2321      	movs	r3, #33	; 0x21
 800bfa6:	6003      	str	r3, [r0, #0]
 800bfa8:	2400      	movs	r4, #0
 800bfaa:	4d2f      	ldr	r5, [pc, #188]	; (800c068 <pow+0x150>)
 800bfac:	e7d9      	b.n	800bf62 <pow+0x4a>
 800bfae:	ec45 4b10 	vmov	d0, r4, r5
 800bfb2:	f001 fd14 	bl	800d9de <finite>
 800bfb6:	bbb8      	cbnz	r0, 800c028 <pow+0x110>
 800bfb8:	ec49 8b10 	vmov	d0, r8, r9
 800bfbc:	f001 fd0f 	bl	800d9de <finite>
 800bfc0:	b390      	cbz	r0, 800c028 <pow+0x110>
 800bfc2:	ec47 6b10 	vmov	d0, r6, r7
 800bfc6:	f001 fd0a 	bl	800d9de <finite>
 800bfca:	b368      	cbz	r0, 800c028 <pow+0x110>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 fda2 	bl	8000b1c <__aeabi_dcmpun>
 800bfd8:	b160      	cbz	r0, 800bff4 <pow+0xdc>
 800bfda:	f7fe fde5 	bl	800aba8 <__errno>
 800bfde:	2321      	movs	r3, #33	; 0x21
 800bfe0:	6003      	str	r3, [r0, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	4619      	mov	r1, r3
 800bfea:	f7f4 fc27 	bl	800083c <__aeabi_ddiv>
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	e7b6      	b.n	800bf62 <pow+0x4a>
 800bff4:	f7fe fdd8 	bl	800aba8 <__errno>
 800bff8:	2322      	movs	r3, #34	; 0x22
 800bffa:	6003      	str	r3, [r0, #0]
 800bffc:	2200      	movs	r2, #0
 800bffe:	2300      	movs	r3, #0
 800c000:	4640      	mov	r0, r8
 800c002:	4649      	mov	r1, r9
 800c004:	f7f4 fd62 	bl	8000acc <__aeabi_dcmplt>
 800c008:	2400      	movs	r4, #0
 800c00a:	b158      	cbz	r0, 800c024 <pow+0x10c>
 800c00c:	ec47 6b10 	vmov	d0, r6, r7
 800c010:	f001 fcfa 	bl	800da08 <rint>
 800c014:	4632      	mov	r2, r6
 800c016:	ec51 0b10 	vmov	r0, r1, d0
 800c01a:	463b      	mov	r3, r7
 800c01c:	f7f4 fd4c 	bl	8000ab8 <__aeabi_dcmpeq>
 800c020:	2800      	cmp	r0, #0
 800c022:	d0c2      	beq.n	800bfaa <pow+0x92>
 800c024:	4d11      	ldr	r5, [pc, #68]	; (800c06c <pow+0x154>)
 800c026:	e79c      	b.n	800bf62 <pow+0x4a>
 800c028:	2200      	movs	r2, #0
 800c02a:	2300      	movs	r3, #0
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 fd42 	bl	8000ab8 <__aeabi_dcmpeq>
 800c034:	2800      	cmp	r0, #0
 800c036:	d094      	beq.n	800bf62 <pow+0x4a>
 800c038:	ec49 8b10 	vmov	d0, r8, r9
 800c03c:	f001 fccf 	bl	800d9de <finite>
 800c040:	2800      	cmp	r0, #0
 800c042:	d08e      	beq.n	800bf62 <pow+0x4a>
 800c044:	ec47 6b10 	vmov	d0, r6, r7
 800c048:	f001 fcc9 	bl	800d9de <finite>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d088      	beq.n	800bf62 <pow+0x4a>
 800c050:	f7fe fdaa 	bl	800aba8 <__errno>
 800c054:	2322      	movs	r3, #34	; 0x22
 800c056:	6003      	str	r3, [r0, #0]
 800c058:	2400      	movs	r4, #0
 800c05a:	2500      	movs	r5, #0
 800c05c:	e781      	b.n	800bf62 <pow+0x4a>
 800c05e:	4d04      	ldr	r5, [pc, #16]	; (800c070 <pow+0x158>)
 800c060:	2400      	movs	r4, #0
 800c062:	e77e      	b.n	800bf62 <pow+0x4a>
 800c064:	200000c8 	.word	0x200000c8
 800c068:	fff00000 	.word	0xfff00000
 800c06c:	7ff00000 	.word	0x7ff00000
 800c070:	3ff00000 	.word	0x3ff00000
 800c074:	00000000 	.word	0x00000000

0800c078 <__ieee754_pow>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	ed2d 8b06 	vpush	{d8-d10}
 800c080:	b08d      	sub	sp, #52	; 0x34
 800c082:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c086:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c08a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c08e:	ea56 0100 	orrs.w	r1, r6, r0
 800c092:	ec53 2b10 	vmov	r2, r3, d0
 800c096:	f000 84d1 	beq.w	800ca3c <__ieee754_pow+0x9c4>
 800c09a:	497f      	ldr	r1, [pc, #508]	; (800c298 <__ieee754_pow+0x220>)
 800c09c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c0a0:	428c      	cmp	r4, r1
 800c0a2:	ee10 8a10 	vmov	r8, s0
 800c0a6:	4699      	mov	r9, r3
 800c0a8:	dc09      	bgt.n	800c0be <__ieee754_pow+0x46>
 800c0aa:	d103      	bne.n	800c0b4 <__ieee754_pow+0x3c>
 800c0ac:	b97a      	cbnz	r2, 800c0ce <__ieee754_pow+0x56>
 800c0ae:	42a6      	cmp	r6, r4
 800c0b0:	dd02      	ble.n	800c0b8 <__ieee754_pow+0x40>
 800c0b2:	e00c      	b.n	800c0ce <__ieee754_pow+0x56>
 800c0b4:	428e      	cmp	r6, r1
 800c0b6:	dc02      	bgt.n	800c0be <__ieee754_pow+0x46>
 800c0b8:	428e      	cmp	r6, r1
 800c0ba:	d110      	bne.n	800c0de <__ieee754_pow+0x66>
 800c0bc:	b178      	cbz	r0, 800c0de <__ieee754_pow+0x66>
 800c0be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c0c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c0c6:	ea54 0308 	orrs.w	r3, r4, r8
 800c0ca:	f000 84b7 	beq.w	800ca3c <__ieee754_pow+0x9c4>
 800c0ce:	4873      	ldr	r0, [pc, #460]	; (800c29c <__ieee754_pow+0x224>)
 800c0d0:	b00d      	add	sp, #52	; 0x34
 800c0d2:	ecbd 8b06 	vpop	{d8-d10}
 800c0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	f001 bc8d 	b.w	800d9f8 <nan>
 800c0de:	f1b9 0f00 	cmp.w	r9, #0
 800c0e2:	da36      	bge.n	800c152 <__ieee754_pow+0xda>
 800c0e4:	496e      	ldr	r1, [pc, #440]	; (800c2a0 <__ieee754_pow+0x228>)
 800c0e6:	428e      	cmp	r6, r1
 800c0e8:	dc51      	bgt.n	800c18e <__ieee754_pow+0x116>
 800c0ea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c0ee:	428e      	cmp	r6, r1
 800c0f0:	f340 84af 	ble.w	800ca52 <__ieee754_pow+0x9da>
 800c0f4:	1531      	asrs	r1, r6, #20
 800c0f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c0fa:	2914      	cmp	r1, #20
 800c0fc:	dd0f      	ble.n	800c11e <__ieee754_pow+0xa6>
 800c0fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c102:	fa20 fc01 	lsr.w	ip, r0, r1
 800c106:	fa0c f101 	lsl.w	r1, ip, r1
 800c10a:	4281      	cmp	r1, r0
 800c10c:	f040 84a1 	bne.w	800ca52 <__ieee754_pow+0x9da>
 800c110:	f00c 0c01 	and.w	ip, ip, #1
 800c114:	f1cc 0102 	rsb	r1, ip, #2
 800c118:	9100      	str	r1, [sp, #0]
 800c11a:	b180      	cbz	r0, 800c13e <__ieee754_pow+0xc6>
 800c11c:	e059      	b.n	800c1d2 <__ieee754_pow+0x15a>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d155      	bne.n	800c1ce <__ieee754_pow+0x156>
 800c122:	f1c1 0114 	rsb	r1, r1, #20
 800c126:	fa46 fc01 	asr.w	ip, r6, r1
 800c12a:	fa0c f101 	lsl.w	r1, ip, r1
 800c12e:	42b1      	cmp	r1, r6
 800c130:	f040 848c 	bne.w	800ca4c <__ieee754_pow+0x9d4>
 800c134:	f00c 0c01 	and.w	ip, ip, #1
 800c138:	f1cc 0102 	rsb	r1, ip, #2
 800c13c:	9100      	str	r1, [sp, #0]
 800c13e:	4959      	ldr	r1, [pc, #356]	; (800c2a4 <__ieee754_pow+0x22c>)
 800c140:	428e      	cmp	r6, r1
 800c142:	d12d      	bne.n	800c1a0 <__ieee754_pow+0x128>
 800c144:	2f00      	cmp	r7, #0
 800c146:	da79      	bge.n	800c23c <__ieee754_pow+0x1c4>
 800c148:	4956      	ldr	r1, [pc, #344]	; (800c2a4 <__ieee754_pow+0x22c>)
 800c14a:	2000      	movs	r0, #0
 800c14c:	f7f4 fb76 	bl	800083c <__aeabi_ddiv>
 800c150:	e016      	b.n	800c180 <__ieee754_pow+0x108>
 800c152:	2100      	movs	r1, #0
 800c154:	9100      	str	r1, [sp, #0]
 800c156:	2800      	cmp	r0, #0
 800c158:	d13b      	bne.n	800c1d2 <__ieee754_pow+0x15a>
 800c15a:	494f      	ldr	r1, [pc, #316]	; (800c298 <__ieee754_pow+0x220>)
 800c15c:	428e      	cmp	r6, r1
 800c15e:	d1ee      	bne.n	800c13e <__ieee754_pow+0xc6>
 800c160:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c164:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c168:	ea53 0308 	orrs.w	r3, r3, r8
 800c16c:	f000 8466 	beq.w	800ca3c <__ieee754_pow+0x9c4>
 800c170:	4b4d      	ldr	r3, [pc, #308]	; (800c2a8 <__ieee754_pow+0x230>)
 800c172:	429c      	cmp	r4, r3
 800c174:	dd0d      	ble.n	800c192 <__ieee754_pow+0x11a>
 800c176:	2f00      	cmp	r7, #0
 800c178:	f280 8464 	bge.w	800ca44 <__ieee754_pow+0x9cc>
 800c17c:	2000      	movs	r0, #0
 800c17e:	2100      	movs	r1, #0
 800c180:	ec41 0b10 	vmov	d0, r0, r1
 800c184:	b00d      	add	sp, #52	; 0x34
 800c186:	ecbd 8b06 	vpop	{d8-d10}
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	2102      	movs	r1, #2
 800c190:	e7e0      	b.n	800c154 <__ieee754_pow+0xdc>
 800c192:	2f00      	cmp	r7, #0
 800c194:	daf2      	bge.n	800c17c <__ieee754_pow+0x104>
 800c196:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c19a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c19e:	e7ef      	b.n	800c180 <__ieee754_pow+0x108>
 800c1a0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c1a4:	d104      	bne.n	800c1b0 <__ieee754_pow+0x138>
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7f4 fa1d 	bl	80005e8 <__aeabi_dmul>
 800c1ae:	e7e7      	b.n	800c180 <__ieee754_pow+0x108>
 800c1b0:	493e      	ldr	r1, [pc, #248]	; (800c2ac <__ieee754_pow+0x234>)
 800c1b2:	428f      	cmp	r7, r1
 800c1b4:	d10d      	bne.n	800c1d2 <__ieee754_pow+0x15a>
 800c1b6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ba:	db0a      	blt.n	800c1d2 <__ieee754_pow+0x15a>
 800c1bc:	ec43 2b10 	vmov	d0, r2, r3
 800c1c0:	b00d      	add	sp, #52	; 0x34
 800c1c2:	ecbd 8b06 	vpop	{d8-d10}
 800c1c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ca:	f000 be83 	b.w	800ced4 <__ieee754_sqrt>
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	9100      	str	r1, [sp, #0]
 800c1d2:	ec43 2b10 	vmov	d0, r2, r3
 800c1d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1da:	f001 fbf7 	bl	800d9cc <fabs>
 800c1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e2:	ec51 0b10 	vmov	r0, r1, d0
 800c1e6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ea:	d12a      	bne.n	800c242 <__ieee754_pow+0x1ca>
 800c1ec:	b12c      	cbz	r4, 800c1fa <__ieee754_pow+0x182>
 800c1ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c2a4 <__ieee754_pow+0x22c>
 800c1f2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c1f6:	45e6      	cmp	lr, ip
 800c1f8:	d123      	bne.n	800c242 <__ieee754_pow+0x1ca>
 800c1fa:	2f00      	cmp	r7, #0
 800c1fc:	da05      	bge.n	800c20a <__ieee754_pow+0x192>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	2000      	movs	r0, #0
 800c204:	4927      	ldr	r1, [pc, #156]	; (800c2a4 <__ieee754_pow+0x22c>)
 800c206:	f7f4 fb19 	bl	800083c <__aeabi_ddiv>
 800c20a:	f1b9 0f00 	cmp.w	r9, #0
 800c20e:	dab7      	bge.n	800c180 <__ieee754_pow+0x108>
 800c210:	9b00      	ldr	r3, [sp, #0]
 800c212:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c216:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c21a:	4323      	orrs	r3, r4
 800c21c:	d108      	bne.n	800c230 <__ieee754_pow+0x1b8>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4610      	mov	r0, r2
 800c224:	4619      	mov	r1, r3
 800c226:	f7f4 f827 	bl	8000278 <__aeabi_dsub>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	e78d      	b.n	800c14c <__ieee754_pow+0xd4>
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d1a4      	bne.n	800c180 <__ieee754_pow+0x108>
 800c236:	4602      	mov	r2, r0
 800c238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c23c:	4610      	mov	r0, r2
 800c23e:	4619      	mov	r1, r3
 800c240:	e79e      	b.n	800c180 <__ieee754_pow+0x108>
 800c242:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c246:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c24a:	950a      	str	r5, [sp, #40]	; 0x28
 800c24c:	9d00      	ldr	r5, [sp, #0]
 800c24e:	46ac      	mov	ip, r5
 800c250:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c252:	ea5c 0505 	orrs.w	r5, ip, r5
 800c256:	d0e4      	beq.n	800c222 <__ieee754_pow+0x1aa>
 800c258:	4b15      	ldr	r3, [pc, #84]	; (800c2b0 <__ieee754_pow+0x238>)
 800c25a:	429e      	cmp	r6, r3
 800c25c:	f340 80fc 	ble.w	800c458 <__ieee754_pow+0x3e0>
 800c260:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c264:	429e      	cmp	r6, r3
 800c266:	4b10      	ldr	r3, [pc, #64]	; (800c2a8 <__ieee754_pow+0x230>)
 800c268:	dd07      	ble.n	800c27a <__ieee754_pow+0x202>
 800c26a:	429c      	cmp	r4, r3
 800c26c:	dc0a      	bgt.n	800c284 <__ieee754_pow+0x20c>
 800c26e:	2f00      	cmp	r7, #0
 800c270:	da84      	bge.n	800c17c <__ieee754_pow+0x104>
 800c272:	a307      	add	r3, pc, #28	; (adr r3, 800c290 <__ieee754_pow+0x218>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	e795      	b.n	800c1a6 <__ieee754_pow+0x12e>
 800c27a:	429c      	cmp	r4, r3
 800c27c:	dbf7      	blt.n	800c26e <__ieee754_pow+0x1f6>
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <__ieee754_pow+0x22c>)
 800c280:	429c      	cmp	r4, r3
 800c282:	dd17      	ble.n	800c2b4 <__ieee754_pow+0x23c>
 800c284:	2f00      	cmp	r7, #0
 800c286:	dcf4      	bgt.n	800c272 <__ieee754_pow+0x1fa>
 800c288:	e778      	b.n	800c17c <__ieee754_pow+0x104>
 800c28a:	bf00      	nop
 800c28c:	f3af 8000 	nop.w
 800c290:	8800759c 	.word	0x8800759c
 800c294:	7e37e43c 	.word	0x7e37e43c
 800c298:	7ff00000 	.word	0x7ff00000
 800c29c:	0800dd23 	.word	0x0800dd23
 800c2a0:	433fffff 	.word	0x433fffff
 800c2a4:	3ff00000 	.word	0x3ff00000
 800c2a8:	3fefffff 	.word	0x3fefffff
 800c2ac:	3fe00000 	.word	0x3fe00000
 800c2b0:	41e00000 	.word	0x41e00000
 800c2b4:	4b64      	ldr	r3, [pc, #400]	; (800c448 <__ieee754_pow+0x3d0>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f7f3 ffde 	bl	8000278 <__aeabi_dsub>
 800c2bc:	a356      	add	r3, pc, #344	; (adr r3, 800c418 <__ieee754_pow+0x3a0>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	f7f4 f98f 	bl	80005e8 <__aeabi_dmul>
 800c2ca:	a355      	add	r3, pc, #340	; (adr r3, 800c420 <__ieee754_pow+0x3a8>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	460f      	mov	r7, r1
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f4 f986 	bl	80005e8 <__aeabi_dmul>
 800c2dc:	4b5b      	ldr	r3, [pc, #364]	; (800c44c <__ieee754_pow+0x3d4>)
 800c2de:	4682      	mov	sl, r0
 800c2e0:	468b      	mov	fp, r1
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 f97e 	bl	80005e8 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	a14d      	add	r1, pc, #308	; (adr r1, 800c428 <__ieee754_pow+0x3b0>)
 800c2f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f6:	f7f3 ffbf 	bl	8000278 <__aeabi_dsub>
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	f7f4 f973 	bl	80005e8 <__aeabi_dmul>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	2000      	movs	r0, #0
 800c308:	4951      	ldr	r1, [pc, #324]	; (800c450 <__ieee754_pow+0x3d8>)
 800c30a:	f7f3 ffb5 	bl	8000278 <__aeabi_dsub>
 800c30e:	4622      	mov	r2, r4
 800c310:	4680      	mov	r8, r0
 800c312:	4689      	mov	r9, r1
 800c314:	462b      	mov	r3, r5
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f4 f965 	bl	80005e8 <__aeabi_dmul>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4640      	mov	r0, r8
 800c324:	4649      	mov	r1, r9
 800c326:	f7f4 f95f 	bl	80005e8 <__aeabi_dmul>
 800c32a:	a341      	add	r3, pc, #260	; (adr r3, 800c430 <__ieee754_pow+0x3b8>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	f7f4 f95a 	bl	80005e8 <__aeabi_dmul>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	4650      	mov	r0, sl
 800c33a:	4659      	mov	r1, fp
 800c33c:	f7f3 ff9c 	bl	8000278 <__aeabi_dsub>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4680      	mov	r8, r0
 800c346:	4689      	mov	r9, r1
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f3 ff96 	bl	800027c <__adddf3>
 800c350:	2400      	movs	r4, #0
 800c352:	4632      	mov	r2, r6
 800c354:	463b      	mov	r3, r7
 800c356:	4620      	mov	r0, r4
 800c358:	460d      	mov	r5, r1
 800c35a:	f7f3 ff8d 	bl	8000278 <__aeabi_dsub>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f3 ff87 	bl	8000278 <__aeabi_dsub>
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c36e:	3b01      	subs	r3, #1
 800c370:	4313      	orrs	r3, r2
 800c372:	4682      	mov	sl, r0
 800c374:	468b      	mov	fp, r1
 800c376:	f040 81f1 	bne.w	800c75c <__ieee754_pow+0x6e4>
 800c37a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c438 <__ieee754_pow+0x3c0>
 800c37e:	eeb0 8a47 	vmov.f32	s16, s14
 800c382:	eef0 8a67 	vmov.f32	s17, s15
 800c386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c38a:	2600      	movs	r6, #0
 800c38c:	4632      	mov	r2, r6
 800c38e:	463b      	mov	r3, r7
 800c390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c394:	f7f3 ff70 	bl	8000278 <__aeabi_dsub>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	f7f4 f924 	bl	80005e8 <__aeabi_dmul>
 800c3a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3a4:	4680      	mov	r8, r0
 800c3a6:	4689      	mov	r9, r1
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	4659      	mov	r1, fp
 800c3ac:	f7f4 f91c 	bl	80005e8 <__aeabi_dmul>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	4649      	mov	r1, r9
 800c3b8:	f7f3 ff60 	bl	800027c <__adddf3>
 800c3bc:	4632      	mov	r2, r6
 800c3be:	463b      	mov	r3, r7
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4689      	mov	r9, r1
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f4 f90e 	bl	80005e8 <__aeabi_dmul>
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	f7f3 ff50 	bl	800027c <__adddf3>
 800c3dc:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <__ieee754_pow+0x3dc>)
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	ec45 4b19 	vmov	d9, r4, r5
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	468b      	mov	fp, r1
 800c3ea:	f340 82fe 	ble.w	800c9ea <__ieee754_pow+0x972>
 800c3ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c3f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c3f6:	4303      	orrs	r3, r0
 800c3f8:	f000 81f0 	beq.w	800c7dc <__ieee754_pow+0x764>
 800c3fc:	a310      	add	r3, pc, #64	; (adr r3, 800c440 <__ieee754_pow+0x3c8>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	ec51 0b18 	vmov	r0, r1, d8
 800c406:	f7f4 f8ef 	bl	80005e8 <__aeabi_dmul>
 800c40a:	a30d      	add	r3, pc, #52	; (adr r3, 800c440 <__ieee754_pow+0x3c8>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	e6cb      	b.n	800c1aa <__ieee754_pow+0x132>
 800c412:	bf00      	nop
 800c414:	f3af 8000 	nop.w
 800c418:	60000000 	.word	0x60000000
 800c41c:	3ff71547 	.word	0x3ff71547
 800c420:	f85ddf44 	.word	0xf85ddf44
 800c424:	3e54ae0b 	.word	0x3e54ae0b
 800c428:	55555555 	.word	0x55555555
 800c42c:	3fd55555 	.word	0x3fd55555
 800c430:	652b82fe 	.word	0x652b82fe
 800c434:	3ff71547 	.word	0x3ff71547
 800c438:	00000000 	.word	0x00000000
 800c43c:	bff00000 	.word	0xbff00000
 800c440:	8800759c 	.word	0x8800759c
 800c444:	7e37e43c 	.word	0x7e37e43c
 800c448:	3ff00000 	.word	0x3ff00000
 800c44c:	3fd00000 	.word	0x3fd00000
 800c450:	3fe00000 	.word	0x3fe00000
 800c454:	408fffff 	.word	0x408fffff
 800c458:	4bd7      	ldr	r3, [pc, #860]	; (800c7b8 <__ieee754_pow+0x740>)
 800c45a:	ea03 0309 	and.w	r3, r3, r9
 800c45e:	2200      	movs	r2, #0
 800c460:	b92b      	cbnz	r3, 800c46e <__ieee754_pow+0x3f6>
 800c462:	4bd6      	ldr	r3, [pc, #856]	; (800c7bc <__ieee754_pow+0x744>)
 800c464:	f7f4 f8c0 	bl	80005e8 <__aeabi_dmul>
 800c468:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c46c:	460c      	mov	r4, r1
 800c46e:	1523      	asrs	r3, r4, #20
 800c470:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c474:	4413      	add	r3, r2
 800c476:	9309      	str	r3, [sp, #36]	; 0x24
 800c478:	4bd1      	ldr	r3, [pc, #836]	; (800c7c0 <__ieee754_pow+0x748>)
 800c47a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c47e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c482:	429c      	cmp	r4, r3
 800c484:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c488:	dd08      	ble.n	800c49c <__ieee754_pow+0x424>
 800c48a:	4bce      	ldr	r3, [pc, #824]	; (800c7c4 <__ieee754_pow+0x74c>)
 800c48c:	429c      	cmp	r4, r3
 800c48e:	f340 8163 	ble.w	800c758 <__ieee754_pow+0x6e0>
 800c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c494:	3301      	adds	r3, #1
 800c496:	9309      	str	r3, [sp, #36]	; 0x24
 800c498:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c49c:	2400      	movs	r4, #0
 800c49e:	00e3      	lsls	r3, r4, #3
 800c4a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4a2:	4bc9      	ldr	r3, [pc, #804]	; (800c7c8 <__ieee754_pow+0x750>)
 800c4a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4a8:	ed93 7b00 	vldr	d7, [r3]
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	ec53 2b17 	vmov	r2, r3, d7
 800c4b2:	eeb0 8a47 	vmov.f32	s16, s14
 800c4b6:	eef0 8a67 	vmov.f32	s17, s15
 800c4ba:	4682      	mov	sl, r0
 800c4bc:	f7f3 fedc 	bl	8000278 <__aeabi_dsub>
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	ec51 0b18 	vmov	r0, r1, d8
 800c4cc:	f7f3 fed6 	bl	800027c <__adddf3>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	49bd      	ldr	r1, [pc, #756]	; (800c7cc <__ieee754_pow+0x754>)
 800c4d8:	f7f4 f9b0 	bl	800083c <__aeabi_ddiv>
 800c4dc:	ec41 0b19 	vmov	d9, r0, r1
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	f7f4 f87e 	bl	80005e8 <__aeabi_dmul>
 800c4ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c500:	46ab      	mov	fp, r5
 800c502:	106d      	asrs	r5, r5, #1
 800c504:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c508:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c50c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c510:	2200      	movs	r2, #0
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	4614      	mov	r4, r2
 800c518:	461d      	mov	r5, r3
 800c51a:	f7f4 f865 	bl	80005e8 <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f3 fea7 	bl	8000278 <__aeabi_dsub>
 800c52a:	ec53 2b18 	vmov	r2, r3, d8
 800c52e:	4606      	mov	r6, r0
 800c530:	460f      	mov	r7, r1
 800c532:	4620      	mov	r0, r4
 800c534:	4629      	mov	r1, r5
 800c536:	f7f3 fe9f 	bl	8000278 <__aeabi_dsub>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4650      	mov	r0, sl
 800c540:	4659      	mov	r1, fp
 800c542:	f7f3 fe99 	bl	8000278 <__aeabi_dsub>
 800c546:	4642      	mov	r2, r8
 800c548:	464b      	mov	r3, r9
 800c54a:	f7f4 f84d 	bl	80005e8 <__aeabi_dmul>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4630      	mov	r0, r6
 800c554:	4639      	mov	r1, r7
 800c556:	f7f3 fe8f 	bl	8000278 <__aeabi_dsub>
 800c55a:	ec53 2b19 	vmov	r2, r3, d9
 800c55e:	f7f4 f843 	bl	80005e8 <__aeabi_dmul>
 800c562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c566:	ec41 0b18 	vmov	d8, r0, r1
 800c56a:	4610      	mov	r0, r2
 800c56c:	4619      	mov	r1, r3
 800c56e:	f7f4 f83b 	bl	80005e8 <__aeabi_dmul>
 800c572:	a37d      	add	r3, pc, #500	; (adr r3, 800c768 <__ieee754_pow+0x6f0>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	f7f4 f834 	bl	80005e8 <__aeabi_dmul>
 800c580:	a37b      	add	r3, pc, #492	; (adr r3, 800c770 <__ieee754_pow+0x6f8>)
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	f7f3 fe79 	bl	800027c <__adddf3>
 800c58a:	4622      	mov	r2, r4
 800c58c:	462b      	mov	r3, r5
 800c58e:	f7f4 f82b 	bl	80005e8 <__aeabi_dmul>
 800c592:	a379      	add	r3, pc, #484	; (adr r3, 800c778 <__ieee754_pow+0x700>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f3 fe70 	bl	800027c <__adddf3>
 800c59c:	4622      	mov	r2, r4
 800c59e:	462b      	mov	r3, r5
 800c5a0:	f7f4 f822 	bl	80005e8 <__aeabi_dmul>
 800c5a4:	a376      	add	r3, pc, #472	; (adr r3, 800c780 <__ieee754_pow+0x708>)
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	f7f3 fe67 	bl	800027c <__adddf3>
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	462b      	mov	r3, r5
 800c5b2:	f7f4 f819 	bl	80005e8 <__aeabi_dmul>
 800c5b6:	a374      	add	r3, pc, #464	; (adr r3, 800c788 <__ieee754_pow+0x710>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f7f3 fe5e 	bl	800027c <__adddf3>
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	f7f4 f810 	bl	80005e8 <__aeabi_dmul>
 800c5c8:	a371      	add	r3, pc, #452	; (adr r3, 800c790 <__ieee754_pow+0x718>)
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f7f3 fe55 	bl	800027c <__adddf3>
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	460f      	mov	r7, r1
 800c5d8:	462b      	mov	r3, r5
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f4 f803 	bl	80005e8 <__aeabi_dmul>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f3 fffd 	bl	80005e8 <__aeabi_dmul>
 800c5ee:	4642      	mov	r2, r8
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5fa:	f7f3 fe3f 	bl	800027c <__adddf3>
 800c5fe:	ec53 2b18 	vmov	r2, r3, d8
 800c602:	f7f3 fff1 	bl	80005e8 <__aeabi_dmul>
 800c606:	4622      	mov	r2, r4
 800c608:	462b      	mov	r3, r5
 800c60a:	f7f3 fe37 	bl	800027c <__adddf3>
 800c60e:	4642      	mov	r2, r8
 800c610:	4682      	mov	sl, r0
 800c612:	468b      	mov	fp, r1
 800c614:	464b      	mov	r3, r9
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	f7f3 ffe5 	bl	80005e8 <__aeabi_dmul>
 800c61e:	4b6c      	ldr	r3, [pc, #432]	; (800c7d0 <__ieee754_pow+0x758>)
 800c620:	2200      	movs	r2, #0
 800c622:	4606      	mov	r6, r0
 800c624:	460f      	mov	r7, r1
 800c626:	f7f3 fe29 	bl	800027c <__adddf3>
 800c62a:	4652      	mov	r2, sl
 800c62c:	465b      	mov	r3, fp
 800c62e:	f7f3 fe25 	bl	800027c <__adddf3>
 800c632:	9c04      	ldr	r4, [sp, #16]
 800c634:	460d      	mov	r5, r1
 800c636:	4622      	mov	r2, r4
 800c638:	460b      	mov	r3, r1
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	f7f3 ffd3 	bl	80005e8 <__aeabi_dmul>
 800c642:	4b63      	ldr	r3, [pc, #396]	; (800c7d0 <__ieee754_pow+0x758>)
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	2200      	movs	r2, #0
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f3 fe13 	bl	8000278 <__aeabi_dsub>
 800c652:	4632      	mov	r2, r6
 800c654:	463b      	mov	r3, r7
 800c656:	f7f3 fe0f 	bl	8000278 <__aeabi_dsub>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	4650      	mov	r0, sl
 800c660:	4659      	mov	r1, fp
 800c662:	f7f3 fe09 	bl	8000278 <__aeabi_dsub>
 800c666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c66a:	f7f3 ffbd 	bl	80005e8 <__aeabi_dmul>
 800c66e:	4622      	mov	r2, r4
 800c670:	4606      	mov	r6, r0
 800c672:	460f      	mov	r7, r1
 800c674:	462b      	mov	r3, r5
 800c676:	ec51 0b18 	vmov	r0, r1, d8
 800c67a:	f7f3 ffb5 	bl	80005e8 <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4630      	mov	r0, r6
 800c684:	4639      	mov	r1, r7
 800c686:	f7f3 fdf9 	bl	800027c <__adddf3>
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f3 fdf1 	bl	800027c <__adddf3>
 800c69a:	9c04      	ldr	r4, [sp, #16]
 800c69c:	a33e      	add	r3, pc, #248	; (adr r3, 800c798 <__ieee754_pow+0x720>)
 800c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	460d      	mov	r5, r1
 800c6a6:	f7f3 ff9f 	bl	80005e8 <__aeabi_dmul>
 800c6aa:	4642      	mov	r2, r8
 800c6ac:	ec41 0b18 	vmov	d8, r0, r1
 800c6b0:	464b      	mov	r3, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7f3 fddf 	bl	8000278 <__aeabi_dsub>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4630      	mov	r0, r6
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	f7f3 fdd9 	bl	8000278 <__aeabi_dsub>
 800c6c6:	a336      	add	r3, pc, #216	; (adr r3, 800c7a0 <__ieee754_pow+0x728>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f7f3 ff8c 	bl	80005e8 <__aeabi_dmul>
 800c6d0:	a335      	add	r3, pc, #212	; (adr r3, 800c7a8 <__ieee754_pow+0x730>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460f      	mov	r7, r1
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	f7f3 ff83 	bl	80005e8 <__aeabi_dmul>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f3 fdc7 	bl	800027c <__adddf3>
 800c6ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6f0:	4b38      	ldr	r3, [pc, #224]	; (800c7d4 <__ieee754_pow+0x75c>)
 800c6f2:	4413      	add	r3, r2
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7f3 fdc0 	bl	800027c <__adddf3>
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c700:	468b      	mov	fp, r1
 800c702:	f7f3 ff07 	bl	8000514 <__aeabi_i2d>
 800c706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c708:	4b33      	ldr	r3, [pc, #204]	; (800c7d8 <__ieee754_pow+0x760>)
 800c70a:	4413      	add	r3, r2
 800c70c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	4652      	mov	r2, sl
 800c716:	465b      	mov	r3, fp
 800c718:	ec51 0b18 	vmov	r0, r1, d8
 800c71c:	f7f3 fdae 	bl	800027c <__adddf3>
 800c720:	4642      	mov	r2, r8
 800c722:	464b      	mov	r3, r9
 800c724:	f7f3 fdaa 	bl	800027c <__adddf3>
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	f7f3 fda6 	bl	800027c <__adddf3>
 800c730:	9c04      	ldr	r4, [sp, #16]
 800c732:	4632      	mov	r2, r6
 800c734:	463b      	mov	r3, r7
 800c736:	4620      	mov	r0, r4
 800c738:	460d      	mov	r5, r1
 800c73a:	f7f3 fd9d 	bl	8000278 <__aeabi_dsub>
 800c73e:	4642      	mov	r2, r8
 800c740:	464b      	mov	r3, r9
 800c742:	f7f3 fd99 	bl	8000278 <__aeabi_dsub>
 800c746:	ec53 2b18 	vmov	r2, r3, d8
 800c74a:	f7f3 fd95 	bl	8000278 <__aeabi_dsub>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4650      	mov	r0, sl
 800c754:	4659      	mov	r1, fp
 800c756:	e606      	b.n	800c366 <__ieee754_pow+0x2ee>
 800c758:	2401      	movs	r4, #1
 800c75a:	e6a0      	b.n	800c49e <__ieee754_pow+0x426>
 800c75c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c7b0 <__ieee754_pow+0x738>
 800c760:	e60d      	b.n	800c37e <__ieee754_pow+0x306>
 800c762:	bf00      	nop
 800c764:	f3af 8000 	nop.w
 800c768:	4a454eef 	.word	0x4a454eef
 800c76c:	3fca7e28 	.word	0x3fca7e28
 800c770:	93c9db65 	.word	0x93c9db65
 800c774:	3fcd864a 	.word	0x3fcd864a
 800c778:	a91d4101 	.word	0xa91d4101
 800c77c:	3fd17460 	.word	0x3fd17460
 800c780:	518f264d 	.word	0x518f264d
 800c784:	3fd55555 	.word	0x3fd55555
 800c788:	db6fabff 	.word	0xdb6fabff
 800c78c:	3fdb6db6 	.word	0x3fdb6db6
 800c790:	33333303 	.word	0x33333303
 800c794:	3fe33333 	.word	0x3fe33333
 800c798:	e0000000 	.word	0xe0000000
 800c79c:	3feec709 	.word	0x3feec709
 800c7a0:	dc3a03fd 	.word	0xdc3a03fd
 800c7a4:	3feec709 	.word	0x3feec709
 800c7a8:	145b01f5 	.word	0x145b01f5
 800c7ac:	be3e2fe0 	.word	0xbe3e2fe0
 800c7b0:	00000000 	.word	0x00000000
 800c7b4:	3ff00000 	.word	0x3ff00000
 800c7b8:	7ff00000 	.word	0x7ff00000
 800c7bc:	43400000 	.word	0x43400000
 800c7c0:	0003988e 	.word	0x0003988e
 800c7c4:	000bb679 	.word	0x000bb679
 800c7c8:	0800deb8 	.word	0x0800deb8
 800c7cc:	3ff00000 	.word	0x3ff00000
 800c7d0:	40080000 	.word	0x40080000
 800c7d4:	0800ded8 	.word	0x0800ded8
 800c7d8:	0800dec8 	.word	0x0800dec8
 800c7dc:	a3b5      	add	r3, pc, #724	; (adr r3, 800cab4 <__ieee754_pow+0xa3c>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f3 fd49 	bl	800027c <__adddf3>
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	ec41 0b1a 	vmov	d10, r0, r1
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f3 fd3f 	bl	8000278 <__aeabi_dsub>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	ec51 0b1a 	vmov	r0, r1, d10
 800c802:	f7f4 f981 	bl	8000b08 <__aeabi_dcmpgt>
 800c806:	2800      	cmp	r0, #0
 800c808:	f47f adf8 	bne.w	800c3fc <__ieee754_pow+0x384>
 800c80c:	4aa4      	ldr	r2, [pc, #656]	; (800caa0 <__ieee754_pow+0xa28>)
 800c80e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c812:	4293      	cmp	r3, r2
 800c814:	f340 810b 	ble.w	800ca2e <__ieee754_pow+0x9b6>
 800c818:	151b      	asrs	r3, r3, #20
 800c81a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c81e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c822:	fa4a f303 	asr.w	r3, sl, r3
 800c826:	445b      	add	r3, fp
 800c828:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c82c:	4e9d      	ldr	r6, [pc, #628]	; (800caa4 <__ieee754_pow+0xa2c>)
 800c82e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c832:	4116      	asrs	r6, r2
 800c834:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c838:	2000      	movs	r0, #0
 800c83a:	ea23 0106 	bic.w	r1, r3, r6
 800c83e:	f1c2 0214 	rsb	r2, r2, #20
 800c842:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c846:	fa4a fa02 	asr.w	sl, sl, r2
 800c84a:	f1bb 0f00 	cmp.w	fp, #0
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4620      	mov	r0, r4
 800c854:	4629      	mov	r1, r5
 800c856:	bfb8      	it	lt
 800c858:	f1ca 0a00 	rsblt	sl, sl, #0
 800c85c:	f7f3 fd0c 	bl	8000278 <__aeabi_dsub>
 800c860:	ec41 0b19 	vmov	d9, r0, r1
 800c864:	4642      	mov	r2, r8
 800c866:	464b      	mov	r3, r9
 800c868:	ec51 0b19 	vmov	r0, r1, d9
 800c86c:	f7f3 fd06 	bl	800027c <__adddf3>
 800c870:	2400      	movs	r4, #0
 800c872:	a379      	add	r3, pc, #484	; (adr r3, 800ca58 <__ieee754_pow+0x9e0>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	4620      	mov	r0, r4
 800c87a:	460d      	mov	r5, r1
 800c87c:	f7f3 feb4 	bl	80005e8 <__aeabi_dmul>
 800c880:	ec53 2b19 	vmov	r2, r3, d9
 800c884:	4606      	mov	r6, r0
 800c886:	460f      	mov	r7, r1
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fcf4 	bl	8000278 <__aeabi_dsub>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4640      	mov	r0, r8
 800c896:	4649      	mov	r1, r9
 800c898:	f7f3 fcee 	bl	8000278 <__aeabi_dsub>
 800c89c:	a370      	add	r3, pc, #448	; (adr r3, 800ca60 <__ieee754_pow+0x9e8>)
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	f7f3 fea1 	bl	80005e8 <__aeabi_dmul>
 800c8a6:	a370      	add	r3, pc, #448	; (adr r3, 800ca68 <__ieee754_pow+0x9f0>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	4689      	mov	r9, r1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fe98 	bl	80005e8 <__aeabi_dmul>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4640      	mov	r0, r8
 800c8be:	4649      	mov	r1, r9
 800c8c0:	f7f3 fcdc 	bl	800027c <__adddf3>
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	f7f3 fcd4 	bl	800027c <__adddf3>
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	4680      	mov	r8, r0
 800c8da:	4689      	mov	r9, r1
 800c8dc:	f7f3 fccc 	bl	8000278 <__aeabi_dsub>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fcc6 	bl	8000278 <__aeabi_dsub>
 800c8ec:	4642      	mov	r2, r8
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	460f      	mov	r7, r1
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f3 fe76 	bl	80005e8 <__aeabi_dmul>
 800c8fc:	a35c      	add	r3, pc, #368	; (adr r3, 800ca70 <__ieee754_pow+0x9f8>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4604      	mov	r4, r0
 800c904:	460d      	mov	r5, r1
 800c906:	f7f3 fe6f 	bl	80005e8 <__aeabi_dmul>
 800c90a:	a35b      	add	r3, pc, #364	; (adr r3, 800ca78 <__ieee754_pow+0xa00>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f7f3 fcb2 	bl	8000278 <__aeabi_dsub>
 800c914:	4622      	mov	r2, r4
 800c916:	462b      	mov	r3, r5
 800c918:	f7f3 fe66 	bl	80005e8 <__aeabi_dmul>
 800c91c:	a358      	add	r3, pc, #352	; (adr r3, 800ca80 <__ieee754_pow+0xa08>)
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	f7f3 fcab 	bl	800027c <__adddf3>
 800c926:	4622      	mov	r2, r4
 800c928:	462b      	mov	r3, r5
 800c92a:	f7f3 fe5d 	bl	80005e8 <__aeabi_dmul>
 800c92e:	a356      	add	r3, pc, #344	; (adr r3, 800ca88 <__ieee754_pow+0xa10>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	f7f3 fca0 	bl	8000278 <__aeabi_dsub>
 800c938:	4622      	mov	r2, r4
 800c93a:	462b      	mov	r3, r5
 800c93c:	f7f3 fe54 	bl	80005e8 <__aeabi_dmul>
 800c940:	a353      	add	r3, pc, #332	; (adr r3, 800ca90 <__ieee754_pow+0xa18>)
 800c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c946:	f7f3 fc99 	bl	800027c <__adddf3>
 800c94a:	4622      	mov	r2, r4
 800c94c:	462b      	mov	r3, r5
 800c94e:	f7f3 fe4b 	bl	80005e8 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4640      	mov	r0, r8
 800c958:	4649      	mov	r1, r9
 800c95a:	f7f3 fc8d 	bl	8000278 <__aeabi_dsub>
 800c95e:	4604      	mov	r4, r0
 800c960:	460d      	mov	r5, r1
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4640      	mov	r0, r8
 800c968:	4649      	mov	r1, r9
 800c96a:	f7f3 fe3d 	bl	80005e8 <__aeabi_dmul>
 800c96e:	2200      	movs	r2, #0
 800c970:	ec41 0b19 	vmov	d9, r0, r1
 800c974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c978:	4620      	mov	r0, r4
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f3 fc7c 	bl	8000278 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	ec51 0b19 	vmov	r0, r1, d9
 800c988:	f7f3 ff58 	bl	800083c <__aeabi_ddiv>
 800c98c:	4632      	mov	r2, r6
 800c98e:	4604      	mov	r4, r0
 800c990:	460d      	mov	r5, r1
 800c992:	463b      	mov	r3, r7
 800c994:	4640      	mov	r0, r8
 800c996:	4649      	mov	r1, r9
 800c998:	f7f3 fe26 	bl	80005e8 <__aeabi_dmul>
 800c99c:	4632      	mov	r2, r6
 800c99e:	463b      	mov	r3, r7
 800c9a0:	f7f3 fc6c 	bl	800027c <__adddf3>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	f7f3 fc64 	bl	8000278 <__aeabi_dsub>
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	f7f3 fc60 	bl	8000278 <__aeabi_dsub>
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	493a      	ldr	r1, [pc, #232]	; (800caa8 <__ieee754_pow+0xa30>)
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f7f3 fc5a 	bl	8000278 <__aeabi_dsub>
 800c9c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c9ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9d2:	da2f      	bge.n	800ca34 <__ieee754_pow+0x9bc>
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	ed9d 0b00 	vldr	d0, [sp]
 800c9da:	f001 f8a1 	bl	800db20 <scalbn>
 800c9de:	ec51 0b10 	vmov	r0, r1, d0
 800c9e2:	ec53 2b18 	vmov	r2, r3, d8
 800c9e6:	f7ff bbe0 	b.w	800c1aa <__ieee754_pow+0x132>
 800c9ea:	4b30      	ldr	r3, [pc, #192]	; (800caac <__ieee754_pow+0xa34>)
 800c9ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c9f0:	429e      	cmp	r6, r3
 800c9f2:	f77f af0b 	ble.w	800c80c <__ieee754_pow+0x794>
 800c9f6:	4b2e      	ldr	r3, [pc, #184]	; (800cab0 <__ieee754_pow+0xa38>)
 800c9f8:	440b      	add	r3, r1
 800c9fa:	4303      	orrs	r3, r0
 800c9fc:	d00b      	beq.n	800ca16 <__ieee754_pow+0x99e>
 800c9fe:	a326      	add	r3, pc, #152	; (adr r3, 800ca98 <__ieee754_pow+0xa20>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	ec51 0b18 	vmov	r0, r1, d8
 800ca08:	f7f3 fdee 	bl	80005e8 <__aeabi_dmul>
 800ca0c:	a322      	add	r3, pc, #136	; (adr r3, 800ca98 <__ieee754_pow+0xa20>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7ff bbca 	b.w	800c1aa <__ieee754_pow+0x132>
 800ca16:	4622      	mov	r2, r4
 800ca18:	462b      	mov	r3, r5
 800ca1a:	f7f3 fc2d 	bl	8000278 <__aeabi_dsub>
 800ca1e:	4642      	mov	r2, r8
 800ca20:	464b      	mov	r3, r9
 800ca22:	f7f4 f867 	bl	8000af4 <__aeabi_dcmpge>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f43f aef0 	beq.w	800c80c <__ieee754_pow+0x794>
 800ca2c:	e7e7      	b.n	800c9fe <__ieee754_pow+0x986>
 800ca2e:	f04f 0a00 	mov.w	sl, #0
 800ca32:	e717      	b.n	800c864 <__ieee754_pow+0x7ec>
 800ca34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	e7d2      	b.n	800c9e2 <__ieee754_pow+0x96a>
 800ca3c:	491a      	ldr	r1, [pc, #104]	; (800caa8 <__ieee754_pow+0xa30>)
 800ca3e:	2000      	movs	r0, #0
 800ca40:	f7ff bb9e 	b.w	800c180 <__ieee754_pow+0x108>
 800ca44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca48:	f7ff bb9a 	b.w	800c180 <__ieee754_pow+0x108>
 800ca4c:	9000      	str	r0, [sp, #0]
 800ca4e:	f7ff bb76 	b.w	800c13e <__ieee754_pow+0xc6>
 800ca52:	2100      	movs	r1, #0
 800ca54:	f7ff bb60 	b.w	800c118 <__ieee754_pow+0xa0>
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	3fe62e43 	.word	0x3fe62e43
 800ca60:	fefa39ef 	.word	0xfefa39ef
 800ca64:	3fe62e42 	.word	0x3fe62e42
 800ca68:	0ca86c39 	.word	0x0ca86c39
 800ca6c:	be205c61 	.word	0xbe205c61
 800ca70:	72bea4d0 	.word	0x72bea4d0
 800ca74:	3e663769 	.word	0x3e663769
 800ca78:	c5d26bf1 	.word	0xc5d26bf1
 800ca7c:	3ebbbd41 	.word	0x3ebbbd41
 800ca80:	af25de2c 	.word	0xaf25de2c
 800ca84:	3f11566a 	.word	0x3f11566a
 800ca88:	16bebd93 	.word	0x16bebd93
 800ca8c:	3f66c16c 	.word	0x3f66c16c
 800ca90:	5555553e 	.word	0x5555553e
 800ca94:	3fc55555 	.word	0x3fc55555
 800ca98:	c2f8f359 	.word	0xc2f8f359
 800ca9c:	01a56e1f 	.word	0x01a56e1f
 800caa0:	3fe00000 	.word	0x3fe00000
 800caa4:	000fffff 	.word	0x000fffff
 800caa8:	3ff00000 	.word	0x3ff00000
 800caac:	4090cbff 	.word	0x4090cbff
 800cab0:	3f6f3400 	.word	0x3f6f3400
 800cab4:	652b82fe 	.word	0x652b82fe
 800cab8:	3c971547 	.word	0x3c971547
 800cabc:	00000000 	.word	0x00000000

0800cac0 <__ieee754_rem_pio2>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	ed2d 8b02 	vpush	{d8}
 800cac8:	ec55 4b10 	vmov	r4, r5, d0
 800cacc:	4bca      	ldr	r3, [pc, #808]	; (800cdf8 <__ieee754_rem_pio2+0x338>)
 800cace:	b08b      	sub	sp, #44	; 0x2c
 800cad0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cad4:	4598      	cmp	r8, r3
 800cad6:	4682      	mov	sl, r0
 800cad8:	9502      	str	r5, [sp, #8]
 800cada:	dc08      	bgt.n	800caee <__ieee754_rem_pio2+0x2e>
 800cadc:	2200      	movs	r2, #0
 800cade:	2300      	movs	r3, #0
 800cae0:	ed80 0b00 	vstr	d0, [r0]
 800cae4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cae8:	f04f 0b00 	mov.w	fp, #0
 800caec:	e028      	b.n	800cb40 <__ieee754_rem_pio2+0x80>
 800caee:	4bc3      	ldr	r3, [pc, #780]	; (800cdfc <__ieee754_rem_pio2+0x33c>)
 800caf0:	4598      	cmp	r8, r3
 800caf2:	dc78      	bgt.n	800cbe6 <__ieee754_rem_pio2+0x126>
 800caf4:	9b02      	ldr	r3, [sp, #8]
 800caf6:	4ec2      	ldr	r6, [pc, #776]	; (800ce00 <__ieee754_rem_pio2+0x340>)
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	ee10 0a10 	vmov	r0, s0
 800cafe:	a3b0      	add	r3, pc, #704	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x300>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	4629      	mov	r1, r5
 800cb06:	dd39      	ble.n	800cb7c <__ieee754_rem_pio2+0xbc>
 800cb08:	f7f3 fbb6 	bl	8000278 <__aeabi_dsub>
 800cb0c:	45b0      	cmp	r8, r6
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	d01b      	beq.n	800cb4c <__ieee754_rem_pio2+0x8c>
 800cb14:	a3ac      	add	r3, pc, #688	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x308>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fbad 	bl	8000278 <__aeabi_dsub>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	e9ca 2300 	strd	r2, r3, [sl]
 800cb26:	4620      	mov	r0, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7f3 fba5 	bl	8000278 <__aeabi_dsub>
 800cb2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x308>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f7f3 fba0 	bl	8000278 <__aeabi_dsub>
 800cb38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb3c:	f04f 0b01 	mov.w	fp, #1
 800cb40:	4658      	mov	r0, fp
 800cb42:	b00b      	add	sp, #44	; 0x2c
 800cb44:	ecbd 8b02 	vpop	{d8}
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	a3a0      	add	r3, pc, #640	; (adr r3, 800cdd0 <__ieee754_rem_pio2+0x310>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb91 	bl	8000278 <__aeabi_dsub>
 800cb56:	a3a0      	add	r3, pc, #640	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x318>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	460d      	mov	r5, r1
 800cb60:	f7f3 fb8a 	bl	8000278 <__aeabi_dsub>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	e9ca 2300 	strd	r2, r3, [sl]
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fb82 	bl	8000278 <__aeabi_dsub>
 800cb74:	a398      	add	r3, pc, #608	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x318>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	e7db      	b.n	800cb34 <__ieee754_rem_pio2+0x74>
 800cb7c:	f7f3 fb7e 	bl	800027c <__adddf3>
 800cb80:	45b0      	cmp	r8, r6
 800cb82:	4604      	mov	r4, r0
 800cb84:	460d      	mov	r5, r1
 800cb86:	d016      	beq.n	800cbb6 <__ieee754_rem_pio2+0xf6>
 800cb88:	a38f      	add	r3, pc, #572	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x308>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fb75 	bl	800027c <__adddf3>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	e9ca 2300 	strd	r2, r3, [sl]
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f7f3 fb6b 	bl	8000278 <__aeabi_dsub>
 800cba2:	a389      	add	r3, pc, #548	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x308>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fb68 	bl	800027c <__adddf3>
 800cbac:	f04f 3bff 	mov.w	fp, #4294967295
 800cbb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cbb4:	e7c4      	b.n	800cb40 <__ieee754_rem_pio2+0x80>
 800cbb6:	a386      	add	r3, pc, #536	; (adr r3, 800cdd0 <__ieee754_rem_pio2+0x310>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fb5e 	bl	800027c <__adddf3>
 800cbc0:	a385      	add	r3, pc, #532	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x318>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	460d      	mov	r5, r1
 800cbca:	f7f3 fb57 	bl	800027c <__adddf3>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	e9ca 2300 	strd	r2, r3, [sl]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	4629      	mov	r1, r5
 800cbda:	f7f3 fb4d 	bl	8000278 <__aeabi_dsub>
 800cbde:	a37e      	add	r3, pc, #504	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x318>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	e7e0      	b.n	800cba8 <__ieee754_rem_pio2+0xe8>
 800cbe6:	4b87      	ldr	r3, [pc, #540]	; (800ce04 <__ieee754_rem_pio2+0x344>)
 800cbe8:	4598      	cmp	r8, r3
 800cbea:	f300 80d9 	bgt.w	800cda0 <__ieee754_rem_pio2+0x2e0>
 800cbee:	f000 feed 	bl	800d9cc <fabs>
 800cbf2:	ec55 4b10 	vmov	r4, r5, d0
 800cbf6:	ee10 0a10 	vmov	r0, s0
 800cbfa:	a379      	add	r3, pc, #484	; (adr r3, 800cde0 <__ieee754_rem_pio2+0x320>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	4629      	mov	r1, r5
 800cc02:	f7f3 fcf1 	bl	80005e8 <__aeabi_dmul>
 800cc06:	4b80      	ldr	r3, [pc, #512]	; (800ce08 <__ieee754_rem_pio2+0x348>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f7f3 fb37 	bl	800027c <__adddf3>
 800cc0e:	f7f3 ff9b 	bl	8000b48 <__aeabi_d2iz>
 800cc12:	4683      	mov	fp, r0
 800cc14:	f7f3 fc7e 	bl	8000514 <__aeabi_i2d>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	ec43 2b18 	vmov	d8, r2, r3
 800cc20:	a367      	add	r3, pc, #412	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x300>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fcdf 	bl	80005e8 <__aeabi_dmul>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb21 	bl	8000278 <__aeabi_dsub>
 800cc36:	a364      	add	r3, pc, #400	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x308>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	460f      	mov	r7, r1
 800cc40:	ec51 0b18 	vmov	r0, r1, d8
 800cc44:	f7f3 fcd0 	bl	80005e8 <__aeabi_dmul>
 800cc48:	f1bb 0f1f 	cmp.w	fp, #31
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	460d      	mov	r5, r1
 800cc50:	dc0d      	bgt.n	800cc6e <__ieee754_rem_pio2+0x1ae>
 800cc52:	4b6e      	ldr	r3, [pc, #440]	; (800ce0c <__ieee754_rem_pio2+0x34c>)
 800cc54:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc5c:	4543      	cmp	r3, r8
 800cc5e:	d006      	beq.n	800cc6e <__ieee754_rem_pio2+0x1ae>
 800cc60:	4622      	mov	r2, r4
 800cc62:	462b      	mov	r3, r5
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	f7f3 fb06 	bl	8000278 <__aeabi_dsub>
 800cc6c:	e00f      	b.n	800cc8e <__ieee754_rem_pio2+0x1ce>
 800cc6e:	462b      	mov	r3, r5
 800cc70:	4622      	mov	r2, r4
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 faff 	bl	8000278 <__aeabi_dsub>
 800cc7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc84:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cc88:	f1b8 0f10 	cmp.w	r8, #16
 800cc8c:	dc02      	bgt.n	800cc94 <__ieee754_rem_pio2+0x1d4>
 800cc8e:	e9ca 0100 	strd	r0, r1, [sl]
 800cc92:	e039      	b.n	800cd08 <__ieee754_rem_pio2+0x248>
 800cc94:	a34e      	add	r3, pc, #312	; (adr r3, 800cdd0 <__ieee754_rem_pio2+0x310>)
 800cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9a:	ec51 0b18 	vmov	r0, r1, d8
 800cc9e:	f7f3 fca3 	bl	80005e8 <__aeabi_dmul>
 800cca2:	4604      	mov	r4, r0
 800cca4:	460d      	mov	r5, r1
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 fae3 	bl	8000278 <__aeabi_dsub>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	4689      	mov	r9, r1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 fadb 	bl	8000278 <__aeabi_dsub>
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	f7f3 fad7 	bl	8000278 <__aeabi_dsub>
 800ccca:	a343      	add	r3, pc, #268	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x318>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	460d      	mov	r5, r1
 800ccd4:	ec51 0b18 	vmov	r0, r1, d8
 800ccd8:	f7f3 fc86 	bl	80005e8 <__aeabi_dmul>
 800ccdc:	4622      	mov	r2, r4
 800ccde:	462b      	mov	r3, r5
 800cce0:	f7f3 faca 	bl	8000278 <__aeabi_dsub>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4604      	mov	r4, r0
 800ccea:	460d      	mov	r5, r1
 800ccec:	4640      	mov	r0, r8
 800ccee:	4649      	mov	r1, r9
 800ccf0:	f7f3 fac2 	bl	8000278 <__aeabi_dsub>
 800ccf4:	9a03      	ldr	r2, [sp, #12]
 800ccf6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	2b31      	cmp	r3, #49	; 0x31
 800ccfe:	dc24      	bgt.n	800cd4a <__ieee754_rem_pio2+0x28a>
 800cd00:	e9ca 0100 	strd	r0, r1, [sl]
 800cd04:	4646      	mov	r6, r8
 800cd06:	464f      	mov	r7, r9
 800cd08:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	4642      	mov	r2, r8
 800cd10:	464b      	mov	r3, r9
 800cd12:	4639      	mov	r1, r7
 800cd14:	f7f3 fab0 	bl	8000278 <__aeabi_dsub>
 800cd18:	462b      	mov	r3, r5
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	f7f3 faac 	bl	8000278 <__aeabi_dsub>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd28:	f6bf af0a 	bge.w	800cb40 <__ieee754_rem_pio2+0x80>
 800cd2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd30:	f8ca 3004 	str.w	r3, [sl, #4]
 800cd34:	f8ca 8000 	str.w	r8, [sl]
 800cd38:	f8ca 0008 	str.w	r0, [sl, #8]
 800cd3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd40:	f8ca 300c 	str.w	r3, [sl, #12]
 800cd44:	f1cb 0b00 	rsb	fp, fp, #0
 800cd48:	e6fa      	b.n	800cb40 <__ieee754_rem_pio2+0x80>
 800cd4a:	a327      	add	r3, pc, #156	; (adr r3, 800cde8 <__ieee754_rem_pio2+0x328>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	ec51 0b18 	vmov	r0, r1, d8
 800cd54:	f7f3 fc48 	bl	80005e8 <__aeabi_dmul>
 800cd58:	4604      	mov	r4, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	4640      	mov	r0, r8
 800cd62:	4649      	mov	r1, r9
 800cd64:	f7f3 fa88 	bl	8000278 <__aeabi_dsub>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	460f      	mov	r7, r1
 800cd70:	4640      	mov	r0, r8
 800cd72:	4649      	mov	r1, r9
 800cd74:	f7f3 fa80 	bl	8000278 <__aeabi_dsub>
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f7f3 fa7c 	bl	8000278 <__aeabi_dsub>
 800cd80:	a31b      	add	r3, pc, #108	; (adr r3, 800cdf0 <__ieee754_rem_pio2+0x330>)
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	4604      	mov	r4, r0
 800cd88:	460d      	mov	r5, r1
 800cd8a:	ec51 0b18 	vmov	r0, r1, d8
 800cd8e:	f7f3 fc2b 	bl	80005e8 <__aeabi_dmul>
 800cd92:	4622      	mov	r2, r4
 800cd94:	462b      	mov	r3, r5
 800cd96:	f7f3 fa6f 	bl	8000278 <__aeabi_dsub>
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	e75f      	b.n	800cc60 <__ieee754_rem_pio2+0x1a0>
 800cda0:	4b1b      	ldr	r3, [pc, #108]	; (800ce10 <__ieee754_rem_pio2+0x350>)
 800cda2:	4598      	cmp	r8, r3
 800cda4:	dd36      	ble.n	800ce14 <__ieee754_rem_pio2+0x354>
 800cda6:	ee10 2a10 	vmov	r2, s0
 800cdaa:	462b      	mov	r3, r5
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fa62 	bl	8000278 <__aeabi_dsub>
 800cdb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdb8:	e9ca 0100 	strd	r0, r1, [sl]
 800cdbc:	e694      	b.n	800cae8 <__ieee754_rem_pio2+0x28>
 800cdbe:	bf00      	nop
 800cdc0:	54400000 	.word	0x54400000
 800cdc4:	3ff921fb 	.word	0x3ff921fb
 800cdc8:	1a626331 	.word	0x1a626331
 800cdcc:	3dd0b461 	.word	0x3dd0b461
 800cdd0:	1a600000 	.word	0x1a600000
 800cdd4:	3dd0b461 	.word	0x3dd0b461
 800cdd8:	2e037073 	.word	0x2e037073
 800cddc:	3ba3198a 	.word	0x3ba3198a
 800cde0:	6dc9c883 	.word	0x6dc9c883
 800cde4:	3fe45f30 	.word	0x3fe45f30
 800cde8:	2e000000 	.word	0x2e000000
 800cdec:	3ba3198a 	.word	0x3ba3198a
 800cdf0:	252049c1 	.word	0x252049c1
 800cdf4:	397b839a 	.word	0x397b839a
 800cdf8:	3fe921fb 	.word	0x3fe921fb
 800cdfc:	4002d97b 	.word	0x4002d97b
 800ce00:	3ff921fb 	.word	0x3ff921fb
 800ce04:	413921fb 	.word	0x413921fb
 800ce08:	3fe00000 	.word	0x3fe00000
 800ce0c:	0800dee8 	.word	0x0800dee8
 800ce10:	7fefffff 	.word	0x7fefffff
 800ce14:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ce18:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ce1c:	ee10 0a10 	vmov	r0, s0
 800ce20:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ce24:	ee10 6a10 	vmov	r6, s0
 800ce28:	460f      	mov	r7, r1
 800ce2a:	f7f3 fe8d 	bl	8000b48 <__aeabi_d2iz>
 800ce2e:	f7f3 fb71 	bl	8000514 <__aeabi_i2d>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4630      	mov	r0, r6
 800ce38:	4639      	mov	r1, r7
 800ce3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce3e:	f7f3 fa1b 	bl	8000278 <__aeabi_dsub>
 800ce42:	4b22      	ldr	r3, [pc, #136]	; (800cecc <__ieee754_rem_pio2+0x40c>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7f3 fbcf 	bl	80005e8 <__aeabi_dmul>
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	f7f3 fe7b 	bl	8000b48 <__aeabi_d2iz>
 800ce52:	f7f3 fb5f 	bl	8000514 <__aeabi_i2d>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce62:	f7f3 fa09 	bl	8000278 <__aeabi_dsub>
 800ce66:	4b19      	ldr	r3, [pc, #100]	; (800cecc <__ieee754_rem_pio2+0x40c>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f7f3 fbbd 	bl	80005e8 <__aeabi_dmul>
 800ce6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce72:	ad04      	add	r5, sp, #16
 800ce74:	f04f 0803 	mov.w	r8, #3
 800ce78:	46a9      	mov	r9, r5
 800ce7a:	2600      	movs	r6, #0
 800ce7c:	2700      	movs	r7, #0
 800ce7e:	4632      	mov	r2, r6
 800ce80:	463b      	mov	r3, r7
 800ce82:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ce86:	46c3      	mov	fp, r8
 800ce88:	3d08      	subs	r5, #8
 800ce8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce8e:	f7f3 fe13 	bl	8000ab8 <__aeabi_dcmpeq>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d1f3      	bne.n	800ce7e <__ieee754_rem_pio2+0x3be>
 800ce96:	4b0e      	ldr	r3, [pc, #56]	; (800ced0 <__ieee754_rem_pio2+0x410>)
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	4622      	mov	r2, r4
 800cea0:	465b      	mov	r3, fp
 800cea2:	4651      	mov	r1, sl
 800cea4:	4648      	mov	r0, r9
 800cea6:	f000 f993 	bl	800d1d0 <__kernel_rem_pio2>
 800ceaa:	9b02      	ldr	r3, [sp, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	4683      	mov	fp, r0
 800ceb0:	f6bf ae46 	bge.w	800cb40 <__ieee754_rem_pio2+0x80>
 800ceb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ceb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cebc:	f8ca 3004 	str.w	r3, [sl, #4]
 800cec0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cec4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cec8:	e73a      	b.n	800cd40 <__ieee754_rem_pio2+0x280>
 800ceca:	bf00      	nop
 800cecc:	41700000 	.word	0x41700000
 800ced0:	0800df68 	.word	0x0800df68

0800ced4 <__ieee754_sqrt>:
 800ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	ec55 4b10 	vmov	r4, r5, d0
 800cedc:	4e56      	ldr	r6, [pc, #344]	; (800d038 <__ieee754_sqrt+0x164>)
 800cede:	43ae      	bics	r6, r5
 800cee0:	ee10 0a10 	vmov	r0, s0
 800cee4:	ee10 3a10 	vmov	r3, s0
 800cee8:	4629      	mov	r1, r5
 800ceea:	462a      	mov	r2, r5
 800ceec:	d110      	bne.n	800cf10 <__ieee754_sqrt+0x3c>
 800ceee:	ee10 2a10 	vmov	r2, s0
 800cef2:	462b      	mov	r3, r5
 800cef4:	f7f3 fb78 	bl	80005e8 <__aeabi_dmul>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 f9bc 	bl	800027c <__adddf3>
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	ec45 4b10 	vmov	d0, r4, r5
 800cf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	dc10      	bgt.n	800cf36 <__ieee754_sqrt+0x62>
 800cf14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf18:	4330      	orrs	r0, r6
 800cf1a:	d0f5      	beq.n	800cf08 <__ieee754_sqrt+0x34>
 800cf1c:	b15d      	cbz	r5, 800cf36 <__ieee754_sqrt+0x62>
 800cf1e:	ee10 2a10 	vmov	r2, s0
 800cf22:	462b      	mov	r3, r5
 800cf24:	ee10 0a10 	vmov	r0, s0
 800cf28:	f7f3 f9a6 	bl	8000278 <__aeabi_dsub>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	f7f3 fc84 	bl	800083c <__aeabi_ddiv>
 800cf34:	e7e6      	b.n	800cf04 <__ieee754_sqrt+0x30>
 800cf36:	1509      	asrs	r1, r1, #20
 800cf38:	d076      	beq.n	800d028 <__ieee754_sqrt+0x154>
 800cf3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cf3e:	07ce      	lsls	r6, r1, #31
 800cf40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cf44:	bf5e      	ittt	pl
 800cf46:	0fda      	lsrpl	r2, r3, #31
 800cf48:	005b      	lslpl	r3, r3, #1
 800cf4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cf4e:	0fda      	lsrs	r2, r3, #31
 800cf50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cf54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cf58:	2000      	movs	r0, #0
 800cf5a:	106d      	asrs	r5, r5, #1
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	f04f 0e16 	mov.w	lr, #22
 800cf62:	4684      	mov	ip, r0
 800cf64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf68:	eb0c 0401 	add.w	r4, ip, r1
 800cf6c:	4294      	cmp	r4, r2
 800cf6e:	bfde      	ittt	le
 800cf70:	1b12      	suble	r2, r2, r4
 800cf72:	eb04 0c01 	addle.w	ip, r4, r1
 800cf76:	1840      	addle	r0, r0, r1
 800cf78:	0052      	lsls	r2, r2, #1
 800cf7a:	f1be 0e01 	subs.w	lr, lr, #1
 800cf7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cf82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf8a:	d1ed      	bne.n	800cf68 <__ieee754_sqrt+0x94>
 800cf8c:	4671      	mov	r1, lr
 800cf8e:	2720      	movs	r7, #32
 800cf90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cf94:	4562      	cmp	r2, ip
 800cf96:	eb04 060e 	add.w	r6, r4, lr
 800cf9a:	dc02      	bgt.n	800cfa2 <__ieee754_sqrt+0xce>
 800cf9c:	d113      	bne.n	800cfc6 <__ieee754_sqrt+0xf2>
 800cf9e:	429e      	cmp	r6, r3
 800cfa0:	d811      	bhi.n	800cfc6 <__ieee754_sqrt+0xf2>
 800cfa2:	2e00      	cmp	r6, #0
 800cfa4:	eb06 0e04 	add.w	lr, r6, r4
 800cfa8:	da43      	bge.n	800d032 <__ieee754_sqrt+0x15e>
 800cfaa:	f1be 0f00 	cmp.w	lr, #0
 800cfae:	db40      	blt.n	800d032 <__ieee754_sqrt+0x15e>
 800cfb0:	f10c 0801 	add.w	r8, ip, #1
 800cfb4:	eba2 020c 	sub.w	r2, r2, ip
 800cfb8:	429e      	cmp	r6, r3
 800cfba:	bf88      	it	hi
 800cfbc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cfc0:	1b9b      	subs	r3, r3, r6
 800cfc2:	4421      	add	r1, r4
 800cfc4:	46c4      	mov	ip, r8
 800cfc6:	0052      	lsls	r2, r2, #1
 800cfc8:	3f01      	subs	r7, #1
 800cfca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cfce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cfd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfd6:	d1dd      	bne.n	800cf94 <__ieee754_sqrt+0xc0>
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	d006      	beq.n	800cfea <__ieee754_sqrt+0x116>
 800cfdc:	1c4c      	adds	r4, r1, #1
 800cfde:	bf13      	iteet	ne
 800cfe0:	3101      	addne	r1, #1
 800cfe2:	3001      	addeq	r0, #1
 800cfe4:	4639      	moveq	r1, r7
 800cfe6:	f021 0101 	bicne.w	r1, r1, #1
 800cfea:	1043      	asrs	r3, r0, #1
 800cfec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cff0:	0849      	lsrs	r1, r1, #1
 800cff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cff6:	07c2      	lsls	r2, r0, #31
 800cff8:	bf48      	it	mi
 800cffa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cffe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d002:	460c      	mov	r4, r1
 800d004:	463d      	mov	r5, r7
 800d006:	e77f      	b.n	800cf08 <__ieee754_sqrt+0x34>
 800d008:	0ada      	lsrs	r2, r3, #11
 800d00a:	3815      	subs	r0, #21
 800d00c:	055b      	lsls	r3, r3, #21
 800d00e:	2a00      	cmp	r2, #0
 800d010:	d0fa      	beq.n	800d008 <__ieee754_sqrt+0x134>
 800d012:	02d7      	lsls	r7, r2, #11
 800d014:	d50a      	bpl.n	800d02c <__ieee754_sqrt+0x158>
 800d016:	f1c1 0420 	rsb	r4, r1, #32
 800d01a:	fa23 f404 	lsr.w	r4, r3, r4
 800d01e:	1e4d      	subs	r5, r1, #1
 800d020:	408b      	lsls	r3, r1
 800d022:	4322      	orrs	r2, r4
 800d024:	1b41      	subs	r1, r0, r5
 800d026:	e788      	b.n	800cf3a <__ieee754_sqrt+0x66>
 800d028:	4608      	mov	r0, r1
 800d02a:	e7f0      	b.n	800d00e <__ieee754_sqrt+0x13a>
 800d02c:	0052      	lsls	r2, r2, #1
 800d02e:	3101      	adds	r1, #1
 800d030:	e7ef      	b.n	800d012 <__ieee754_sqrt+0x13e>
 800d032:	46e0      	mov	r8, ip
 800d034:	e7be      	b.n	800cfb4 <__ieee754_sqrt+0xe0>
 800d036:	bf00      	nop
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	00000000 	.word	0x00000000

0800d040 <__kernel_cos>:
 800d040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	ec57 6b10 	vmov	r6, r7, d0
 800d048:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d04c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d050:	ed8d 1b00 	vstr	d1, [sp]
 800d054:	da07      	bge.n	800d066 <__kernel_cos+0x26>
 800d056:	ee10 0a10 	vmov	r0, s0
 800d05a:	4639      	mov	r1, r7
 800d05c:	f7f3 fd74 	bl	8000b48 <__aeabi_d2iz>
 800d060:	2800      	cmp	r0, #0
 800d062:	f000 8088 	beq.w	800d176 <__kernel_cos+0x136>
 800d066:	4632      	mov	r2, r6
 800d068:	463b      	mov	r3, r7
 800d06a:	4630      	mov	r0, r6
 800d06c:	4639      	mov	r1, r7
 800d06e:	f7f3 fabb 	bl	80005e8 <__aeabi_dmul>
 800d072:	4b51      	ldr	r3, [pc, #324]	; (800d1b8 <__kernel_cos+0x178>)
 800d074:	2200      	movs	r2, #0
 800d076:	4604      	mov	r4, r0
 800d078:	460d      	mov	r5, r1
 800d07a:	f7f3 fab5 	bl	80005e8 <__aeabi_dmul>
 800d07e:	a340      	add	r3, pc, #256	; (adr r3, 800d180 <__kernel_cos+0x140>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	4682      	mov	sl, r0
 800d086:	468b      	mov	fp, r1
 800d088:	4620      	mov	r0, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	f7f3 faac 	bl	80005e8 <__aeabi_dmul>
 800d090:	a33d      	add	r3, pc, #244	; (adr r3, 800d188 <__kernel_cos+0x148>)
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	f7f3 f8f1 	bl	800027c <__adddf3>
 800d09a:	4622      	mov	r2, r4
 800d09c:	462b      	mov	r3, r5
 800d09e:	f7f3 faa3 	bl	80005e8 <__aeabi_dmul>
 800d0a2:	a33b      	add	r3, pc, #236	; (adr r3, 800d190 <__kernel_cos+0x150>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 f8e6 	bl	8000278 <__aeabi_dsub>
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 fa9a 	bl	80005e8 <__aeabi_dmul>
 800d0b4:	a338      	add	r3, pc, #224	; (adr r3, 800d198 <__kernel_cos+0x158>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	f7f3 f8df 	bl	800027c <__adddf3>
 800d0be:	4622      	mov	r2, r4
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	f7f3 fa91 	bl	80005e8 <__aeabi_dmul>
 800d0c6:	a336      	add	r3, pc, #216	; (adr r3, 800d1a0 <__kernel_cos+0x160>)
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f7f3 f8d4 	bl	8000278 <__aeabi_dsub>
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	f7f3 fa88 	bl	80005e8 <__aeabi_dmul>
 800d0d8:	a333      	add	r3, pc, #204	; (adr r3, 800d1a8 <__kernel_cos+0x168>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f8cd 	bl	800027c <__adddf3>
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	f7f3 fa7f 	bl	80005e8 <__aeabi_dmul>
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	f7f3 fa7b 	bl	80005e8 <__aeabi_dmul>
 800d0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f3 fa73 	bl	80005e8 <__aeabi_dmul>
 800d102:	460b      	mov	r3, r1
 800d104:	4602      	mov	r2, r0
 800d106:	4629      	mov	r1, r5
 800d108:	4620      	mov	r0, r4
 800d10a:	f7f3 f8b5 	bl	8000278 <__aeabi_dsub>
 800d10e:	4b2b      	ldr	r3, [pc, #172]	; (800d1bc <__kernel_cos+0x17c>)
 800d110:	4598      	cmp	r8, r3
 800d112:	4606      	mov	r6, r0
 800d114:	460f      	mov	r7, r1
 800d116:	dc10      	bgt.n	800d13a <__kernel_cos+0xfa>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4650      	mov	r0, sl
 800d11e:	4659      	mov	r1, fp
 800d120:	f7f3 f8aa 	bl	8000278 <__aeabi_dsub>
 800d124:	460b      	mov	r3, r1
 800d126:	4926      	ldr	r1, [pc, #152]	; (800d1c0 <__kernel_cos+0x180>)
 800d128:	4602      	mov	r2, r0
 800d12a:	2000      	movs	r0, #0
 800d12c:	f7f3 f8a4 	bl	8000278 <__aeabi_dsub>
 800d130:	ec41 0b10 	vmov	d0, r0, r1
 800d134:	b003      	add	sp, #12
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	4b22      	ldr	r3, [pc, #136]	; (800d1c4 <__kernel_cos+0x184>)
 800d13c:	4920      	ldr	r1, [pc, #128]	; (800d1c0 <__kernel_cos+0x180>)
 800d13e:	4598      	cmp	r8, r3
 800d140:	bfcc      	ite	gt
 800d142:	4d21      	ldrgt	r5, [pc, #132]	; (800d1c8 <__kernel_cos+0x188>)
 800d144:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d148:	2400      	movs	r4, #0
 800d14a:	4622      	mov	r2, r4
 800d14c:	462b      	mov	r3, r5
 800d14e:	2000      	movs	r0, #0
 800d150:	f7f3 f892 	bl	8000278 <__aeabi_dsub>
 800d154:	4622      	mov	r2, r4
 800d156:	4680      	mov	r8, r0
 800d158:	4689      	mov	r9, r1
 800d15a:	462b      	mov	r3, r5
 800d15c:	4650      	mov	r0, sl
 800d15e:	4659      	mov	r1, fp
 800d160:	f7f3 f88a 	bl	8000278 <__aeabi_dsub>
 800d164:	4632      	mov	r2, r6
 800d166:	463b      	mov	r3, r7
 800d168:	f7f3 f886 	bl	8000278 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4640      	mov	r0, r8
 800d172:	4649      	mov	r1, r9
 800d174:	e7da      	b.n	800d12c <__kernel_cos+0xec>
 800d176:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d1b0 <__kernel_cos+0x170>
 800d17a:	e7db      	b.n	800d134 <__kernel_cos+0xf4>
 800d17c:	f3af 8000 	nop.w
 800d180:	be8838d4 	.word	0xbe8838d4
 800d184:	bda8fae9 	.word	0xbda8fae9
 800d188:	bdb4b1c4 	.word	0xbdb4b1c4
 800d18c:	3e21ee9e 	.word	0x3e21ee9e
 800d190:	809c52ad 	.word	0x809c52ad
 800d194:	3e927e4f 	.word	0x3e927e4f
 800d198:	19cb1590 	.word	0x19cb1590
 800d19c:	3efa01a0 	.word	0x3efa01a0
 800d1a0:	16c15177 	.word	0x16c15177
 800d1a4:	3f56c16c 	.word	0x3f56c16c
 800d1a8:	5555554c 	.word	0x5555554c
 800d1ac:	3fa55555 	.word	0x3fa55555
 800d1b0:	00000000 	.word	0x00000000
 800d1b4:	3ff00000 	.word	0x3ff00000
 800d1b8:	3fe00000 	.word	0x3fe00000
 800d1bc:	3fd33332 	.word	0x3fd33332
 800d1c0:	3ff00000 	.word	0x3ff00000
 800d1c4:	3fe90000 	.word	0x3fe90000
 800d1c8:	3fd20000 	.word	0x3fd20000
 800d1cc:	00000000 	.word	0x00000000

0800d1d0 <__kernel_rem_pio2>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	ed2d 8b02 	vpush	{d8}
 800d1d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d1dc:	f112 0f14 	cmn.w	r2, #20
 800d1e0:	9308      	str	r3, [sp, #32]
 800d1e2:	9101      	str	r1, [sp, #4]
 800d1e4:	4bc6      	ldr	r3, [pc, #792]	; (800d500 <__kernel_rem_pio2+0x330>)
 800d1e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d1e8:	9009      	str	r0, [sp, #36]	; 0x24
 800d1ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1ee:	9304      	str	r3, [sp, #16]
 800d1f0:	9b08      	ldr	r3, [sp, #32]
 800d1f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1f6:	bfa8      	it	ge
 800d1f8:	1ed4      	subge	r4, r2, #3
 800d1fa:	9306      	str	r3, [sp, #24]
 800d1fc:	bfb2      	itee	lt
 800d1fe:	2400      	movlt	r4, #0
 800d200:	2318      	movge	r3, #24
 800d202:	fb94 f4f3 	sdivge	r4, r4, r3
 800d206:	f06f 0317 	mvn.w	r3, #23
 800d20a:	fb04 3303 	mla	r3, r4, r3, r3
 800d20e:	eb03 0a02 	add.w	sl, r3, r2
 800d212:	9b04      	ldr	r3, [sp, #16]
 800d214:	9a06      	ldr	r2, [sp, #24]
 800d216:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d4f0 <__kernel_rem_pio2+0x320>
 800d21a:	eb03 0802 	add.w	r8, r3, r2
 800d21e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d220:	1aa7      	subs	r7, r4, r2
 800d222:	ae20      	add	r6, sp, #128	; 0x80
 800d224:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d228:	2500      	movs	r5, #0
 800d22a:	4545      	cmp	r5, r8
 800d22c:	dd18      	ble.n	800d260 <__kernel_rem_pio2+0x90>
 800d22e:	9b08      	ldr	r3, [sp, #32]
 800d230:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d234:	aa20      	add	r2, sp, #128	; 0x80
 800d236:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d4f0 <__kernel_rem_pio2+0x320>
 800d23a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d23e:	f1c3 0301 	rsb	r3, r3, #1
 800d242:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	4443      	add	r3, r8
 800d24e:	429a      	cmp	r2, r3
 800d250:	db2f      	blt.n	800d2b2 <__kernel_rem_pio2+0xe2>
 800d252:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d256:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d25a:	462f      	mov	r7, r5
 800d25c:	2600      	movs	r6, #0
 800d25e:	e01b      	b.n	800d298 <__kernel_rem_pio2+0xc8>
 800d260:	42ef      	cmn	r7, r5
 800d262:	d407      	bmi.n	800d274 <__kernel_rem_pio2+0xa4>
 800d264:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d268:	f7f3 f954 	bl	8000514 <__aeabi_i2d>
 800d26c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d270:	3501      	adds	r5, #1
 800d272:	e7da      	b.n	800d22a <__kernel_rem_pio2+0x5a>
 800d274:	ec51 0b18 	vmov	r0, r1, d8
 800d278:	e7f8      	b.n	800d26c <__kernel_rem_pio2+0x9c>
 800d27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d27e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d282:	f7f3 f9b1 	bl	80005e8 <__aeabi_dmul>
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d28e:	f7f2 fff5 	bl	800027c <__adddf3>
 800d292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d296:	3601      	adds	r6, #1
 800d298:	9b06      	ldr	r3, [sp, #24]
 800d29a:	429e      	cmp	r6, r3
 800d29c:	f1a7 0708 	sub.w	r7, r7, #8
 800d2a0:	ddeb      	ble.n	800d27a <__kernel_rem_pio2+0xaa>
 800d2a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2a6:	3508      	adds	r5, #8
 800d2a8:	ecab 7b02 	vstmia	fp!, {d7}
 800d2ac:	f108 0801 	add.w	r8, r8, #1
 800d2b0:	e7ca      	b.n	800d248 <__kernel_rem_pio2+0x78>
 800d2b2:	9b04      	ldr	r3, [sp, #16]
 800d2b4:	aa0c      	add	r2, sp, #48	; 0x30
 800d2b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d2be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d2c2:	9c04      	ldr	r4, [sp, #16]
 800d2c4:	930a      	str	r3, [sp, #40]	; 0x28
 800d2c6:	ab98      	add	r3, sp, #608	; 0x260
 800d2c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d2d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d2d4:	f8cd b008 	str.w	fp, [sp, #8]
 800d2d8:	4625      	mov	r5, r4
 800d2da:	2d00      	cmp	r5, #0
 800d2dc:	dc78      	bgt.n	800d3d0 <__kernel_rem_pio2+0x200>
 800d2de:	ec47 6b10 	vmov	d0, r6, r7
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f000 fc1c 	bl	800db20 <scalbn>
 800d2e8:	ec57 6b10 	vmov	r6, r7, d0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d2f2:	ee10 0a10 	vmov	r0, s0
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f3 f976 	bl	80005e8 <__aeabi_dmul>
 800d2fc:	ec41 0b10 	vmov	d0, r0, r1
 800d300:	f7fe fd8a 	bl	800be18 <floor>
 800d304:	4b7f      	ldr	r3, [pc, #508]	; (800d504 <__kernel_rem_pio2+0x334>)
 800d306:	ec51 0b10 	vmov	r0, r1, d0
 800d30a:	2200      	movs	r2, #0
 800d30c:	f7f3 f96c 	bl	80005e8 <__aeabi_dmul>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f2 ffae 	bl	8000278 <__aeabi_dsub>
 800d31c:	460f      	mov	r7, r1
 800d31e:	4606      	mov	r6, r0
 800d320:	f7f3 fc12 	bl	8000b48 <__aeabi_d2iz>
 800d324:	9007      	str	r0, [sp, #28]
 800d326:	f7f3 f8f5 	bl	8000514 <__aeabi_i2d>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4630      	mov	r0, r6
 800d330:	4639      	mov	r1, r7
 800d332:	f7f2 ffa1 	bl	8000278 <__aeabi_dsub>
 800d336:	f1ba 0f00 	cmp.w	sl, #0
 800d33a:	4606      	mov	r6, r0
 800d33c:	460f      	mov	r7, r1
 800d33e:	dd70      	ble.n	800d422 <__kernel_rem_pio2+0x252>
 800d340:	1e62      	subs	r2, r4, #1
 800d342:	ab0c      	add	r3, sp, #48	; 0x30
 800d344:	9d07      	ldr	r5, [sp, #28]
 800d346:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d34a:	f1ca 0118 	rsb	r1, sl, #24
 800d34e:	fa40 f301 	asr.w	r3, r0, r1
 800d352:	441d      	add	r5, r3
 800d354:	408b      	lsls	r3, r1
 800d356:	1ac0      	subs	r0, r0, r3
 800d358:	ab0c      	add	r3, sp, #48	; 0x30
 800d35a:	9507      	str	r5, [sp, #28]
 800d35c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d360:	f1ca 0317 	rsb	r3, sl, #23
 800d364:	fa40 f303 	asr.w	r3, r0, r3
 800d368:	9302      	str	r3, [sp, #8]
 800d36a:	9b02      	ldr	r3, [sp, #8]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd66      	ble.n	800d43e <__kernel_rem_pio2+0x26e>
 800d370:	9b07      	ldr	r3, [sp, #28]
 800d372:	2200      	movs	r2, #0
 800d374:	3301      	adds	r3, #1
 800d376:	9307      	str	r3, [sp, #28]
 800d378:	4615      	mov	r5, r2
 800d37a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d37e:	4294      	cmp	r4, r2
 800d380:	f300 8099 	bgt.w	800d4b6 <__kernel_rem_pio2+0x2e6>
 800d384:	f1ba 0f00 	cmp.w	sl, #0
 800d388:	dd07      	ble.n	800d39a <__kernel_rem_pio2+0x1ca>
 800d38a:	f1ba 0f01 	cmp.w	sl, #1
 800d38e:	f000 80a5 	beq.w	800d4dc <__kernel_rem_pio2+0x30c>
 800d392:	f1ba 0f02 	cmp.w	sl, #2
 800d396:	f000 80c1 	beq.w	800d51c <__kernel_rem_pio2+0x34c>
 800d39a:	9b02      	ldr	r3, [sp, #8]
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d14e      	bne.n	800d43e <__kernel_rem_pio2+0x26e>
 800d3a0:	4632      	mov	r2, r6
 800d3a2:	463b      	mov	r3, r7
 800d3a4:	4958      	ldr	r1, [pc, #352]	; (800d508 <__kernel_rem_pio2+0x338>)
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	f7f2 ff66 	bl	8000278 <__aeabi_dsub>
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	460f      	mov	r7, r1
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d044      	beq.n	800d43e <__kernel_rem_pio2+0x26e>
 800d3b4:	4650      	mov	r0, sl
 800d3b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d4f8 <__kernel_rem_pio2+0x328>
 800d3ba:	f000 fbb1 	bl	800db20 <scalbn>
 800d3be:	4630      	mov	r0, r6
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	ec53 2b10 	vmov	r2, r3, d0
 800d3c6:	f7f2 ff57 	bl	8000278 <__aeabi_dsub>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	e036      	b.n	800d43e <__kernel_rem_pio2+0x26e>
 800d3d0:	4b4e      	ldr	r3, [pc, #312]	; (800d50c <__kernel_rem_pio2+0x33c>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	f7f3 f906 	bl	80005e8 <__aeabi_dmul>
 800d3dc:	f7f3 fbb4 	bl	8000b48 <__aeabi_d2iz>
 800d3e0:	f7f3 f898 	bl	8000514 <__aeabi_i2d>
 800d3e4:	4b4a      	ldr	r3, [pc, #296]	; (800d510 <__kernel_rem_pio2+0x340>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	4689      	mov	r9, r1
 800d3ec:	f7f3 f8fc 	bl	80005e8 <__aeabi_dmul>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	4639      	mov	r1, r7
 800d3f8:	f7f2 ff3e 	bl	8000278 <__aeabi_dsub>
 800d3fc:	f7f3 fba4 	bl	8000b48 <__aeabi_d2iz>
 800d400:	9b02      	ldr	r3, [sp, #8]
 800d402:	f843 0b04 	str.w	r0, [r3], #4
 800d406:	3d01      	subs	r5, #1
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d40c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	4640      	mov	r0, r8
 800d416:	4649      	mov	r1, r9
 800d418:	f7f2 ff30 	bl	800027c <__adddf3>
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	e75b      	b.n	800d2da <__kernel_rem_pio2+0x10a>
 800d422:	d105      	bne.n	800d430 <__kernel_rem_pio2+0x260>
 800d424:	1e63      	subs	r3, r4, #1
 800d426:	aa0c      	add	r2, sp, #48	; 0x30
 800d428:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d42c:	15c3      	asrs	r3, r0, #23
 800d42e:	e79b      	b.n	800d368 <__kernel_rem_pio2+0x198>
 800d430:	4b38      	ldr	r3, [pc, #224]	; (800d514 <__kernel_rem_pio2+0x344>)
 800d432:	2200      	movs	r2, #0
 800d434:	f7f3 fb5e 	bl	8000af4 <__aeabi_dcmpge>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d139      	bne.n	800d4b0 <__kernel_rem_pio2+0x2e0>
 800d43c:	9002      	str	r0, [sp, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	2300      	movs	r3, #0
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	f7f3 fb37 	bl	8000ab8 <__aeabi_dcmpeq>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f000 80b4 	beq.w	800d5b8 <__kernel_rem_pio2+0x3e8>
 800d450:	f104 3bff 	add.w	fp, r4, #4294967295
 800d454:	465b      	mov	r3, fp
 800d456:	2200      	movs	r2, #0
 800d458:	9904      	ldr	r1, [sp, #16]
 800d45a:	428b      	cmp	r3, r1
 800d45c:	da65      	bge.n	800d52a <__kernel_rem_pio2+0x35a>
 800d45e:	2a00      	cmp	r2, #0
 800d460:	d07b      	beq.n	800d55a <__kernel_rem_pio2+0x38a>
 800d462:	ab0c      	add	r3, sp, #48	; 0x30
 800d464:	f1aa 0a18 	sub.w	sl, sl, #24
 800d468:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 80a0 	beq.w	800d5b2 <__kernel_rem_pio2+0x3e2>
 800d472:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d4f8 <__kernel_rem_pio2+0x328>
 800d476:	4650      	mov	r0, sl
 800d478:	f000 fb52 	bl	800db20 <scalbn>
 800d47c:	4f23      	ldr	r7, [pc, #140]	; (800d50c <__kernel_rem_pio2+0x33c>)
 800d47e:	ec55 4b10 	vmov	r4, r5, d0
 800d482:	46d8      	mov	r8, fp
 800d484:	2600      	movs	r6, #0
 800d486:	f1b8 0f00 	cmp.w	r8, #0
 800d48a:	f280 80cf 	bge.w	800d62c <__kernel_rem_pio2+0x45c>
 800d48e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d4f0 <__kernel_rem_pio2+0x320>
 800d492:	465f      	mov	r7, fp
 800d494:	f04f 0800 	mov.w	r8, #0
 800d498:	2f00      	cmp	r7, #0
 800d49a:	f2c0 80fd 	blt.w	800d698 <__kernel_rem_pio2+0x4c8>
 800d49e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d4a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d518 <__kernel_rem_pio2+0x348>
 800d4a4:	ec55 4b18 	vmov	r4, r5, d8
 800d4a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d4ac:	2600      	movs	r6, #0
 800d4ae:	e0e5      	b.n	800d67c <__kernel_rem_pio2+0x4ac>
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	9302      	str	r3, [sp, #8]
 800d4b4:	e75c      	b.n	800d370 <__kernel_rem_pio2+0x1a0>
 800d4b6:	f8db 3000 	ldr.w	r3, [fp]
 800d4ba:	b955      	cbnz	r5, 800d4d2 <__kernel_rem_pio2+0x302>
 800d4bc:	b123      	cbz	r3, 800d4c8 <__kernel_rem_pio2+0x2f8>
 800d4be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d4c2:	f8cb 3000 	str.w	r3, [fp]
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	3201      	adds	r2, #1
 800d4ca:	f10b 0b04 	add.w	fp, fp, #4
 800d4ce:	461d      	mov	r5, r3
 800d4d0:	e755      	b.n	800d37e <__kernel_rem_pio2+0x1ae>
 800d4d2:	1acb      	subs	r3, r1, r3
 800d4d4:	f8cb 3000 	str.w	r3, [fp]
 800d4d8:	462b      	mov	r3, r5
 800d4da:	e7f5      	b.n	800d4c8 <__kernel_rem_pio2+0x2f8>
 800d4dc:	1e62      	subs	r2, r4, #1
 800d4de:	ab0c      	add	r3, sp, #48	; 0x30
 800d4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d4e8:	a90c      	add	r1, sp, #48	; 0x30
 800d4ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d4ee:	e754      	b.n	800d39a <__kernel_rem_pio2+0x1ca>
	...
 800d4fc:	3ff00000 	.word	0x3ff00000
 800d500:	0800e0b0 	.word	0x0800e0b0
 800d504:	40200000 	.word	0x40200000
 800d508:	3ff00000 	.word	0x3ff00000
 800d50c:	3e700000 	.word	0x3e700000
 800d510:	41700000 	.word	0x41700000
 800d514:	3fe00000 	.word	0x3fe00000
 800d518:	0800e070 	.word	0x0800e070
 800d51c:	1e62      	subs	r2, r4, #1
 800d51e:	ab0c      	add	r3, sp, #48	; 0x30
 800d520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d524:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d528:	e7de      	b.n	800d4e8 <__kernel_rem_pio2+0x318>
 800d52a:	a90c      	add	r1, sp, #48	; 0x30
 800d52c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d530:	3b01      	subs	r3, #1
 800d532:	430a      	orrs	r2, r1
 800d534:	e790      	b.n	800d458 <__kernel_rem_pio2+0x288>
 800d536:	3301      	adds	r3, #1
 800d538:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d53c:	2900      	cmp	r1, #0
 800d53e:	d0fa      	beq.n	800d536 <__kernel_rem_pio2+0x366>
 800d540:	9a08      	ldr	r2, [sp, #32]
 800d542:	18e3      	adds	r3, r4, r3
 800d544:	18a6      	adds	r6, r4, r2
 800d546:	aa20      	add	r2, sp, #128	; 0x80
 800d548:	1c65      	adds	r5, r4, #1
 800d54a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d54e:	9302      	str	r3, [sp, #8]
 800d550:	9b02      	ldr	r3, [sp, #8]
 800d552:	42ab      	cmp	r3, r5
 800d554:	da04      	bge.n	800d560 <__kernel_rem_pio2+0x390>
 800d556:	461c      	mov	r4, r3
 800d558:	e6b5      	b.n	800d2c6 <__kernel_rem_pio2+0xf6>
 800d55a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d55c:	2301      	movs	r3, #1
 800d55e:	e7eb      	b.n	800d538 <__kernel_rem_pio2+0x368>
 800d560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d562:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d566:	f7f2 ffd5 	bl	8000514 <__aeabi_i2d>
 800d56a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d570:	46b3      	mov	fp, r6
 800d572:	461c      	mov	r4, r3
 800d574:	2700      	movs	r7, #0
 800d576:	f04f 0800 	mov.w	r8, #0
 800d57a:	f04f 0900 	mov.w	r9, #0
 800d57e:	9b06      	ldr	r3, [sp, #24]
 800d580:	429f      	cmp	r7, r3
 800d582:	dd06      	ble.n	800d592 <__kernel_rem_pio2+0x3c2>
 800d584:	ab70      	add	r3, sp, #448	; 0x1c0
 800d586:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d58a:	e9c3 8900 	strd	r8, r9, [r3]
 800d58e:	3501      	adds	r5, #1
 800d590:	e7de      	b.n	800d550 <__kernel_rem_pio2+0x380>
 800d592:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d596:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d59a:	f7f3 f825 	bl	80005e8 <__aeabi_dmul>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	4649      	mov	r1, r9
 800d5a6:	f7f2 fe69 	bl	800027c <__adddf3>
 800d5aa:	3701      	adds	r7, #1
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	e7e5      	b.n	800d57e <__kernel_rem_pio2+0x3ae>
 800d5b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5b6:	e754      	b.n	800d462 <__kernel_rem_pio2+0x292>
 800d5b8:	ec47 6b10 	vmov	d0, r6, r7
 800d5bc:	f1ca 0000 	rsb	r0, sl, #0
 800d5c0:	f000 faae 	bl	800db20 <scalbn>
 800d5c4:	ec57 6b10 	vmov	r6, r7, d0
 800d5c8:	4b9f      	ldr	r3, [pc, #636]	; (800d848 <__kernel_rem_pio2+0x678>)
 800d5ca:	ee10 0a10 	vmov	r0, s0
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	f7f3 fa8f 	bl	8000af4 <__aeabi_dcmpge>
 800d5d6:	b300      	cbz	r0, 800d61a <__kernel_rem_pio2+0x44a>
 800d5d8:	4b9c      	ldr	r3, [pc, #624]	; (800d84c <__kernel_rem_pio2+0x67c>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4630      	mov	r0, r6
 800d5de:	4639      	mov	r1, r7
 800d5e0:	f7f3 f802 	bl	80005e8 <__aeabi_dmul>
 800d5e4:	f7f3 fab0 	bl	8000b48 <__aeabi_d2iz>
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	f7f2 ff93 	bl	8000514 <__aeabi_i2d>
 800d5ee:	4b96      	ldr	r3, [pc, #600]	; (800d848 <__kernel_rem_pio2+0x678>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f7f2 fff9 	bl	80005e8 <__aeabi_dmul>
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f7f2 fe3b 	bl	8000278 <__aeabi_dsub>
 800d602:	f7f3 faa1 	bl	8000b48 <__aeabi_d2iz>
 800d606:	f104 0b01 	add.w	fp, r4, #1
 800d60a:	ab0c      	add	r3, sp, #48	; 0x30
 800d60c:	f10a 0a18 	add.w	sl, sl, #24
 800d610:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d614:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d618:	e72b      	b.n	800d472 <__kernel_rem_pio2+0x2a2>
 800d61a:	4630      	mov	r0, r6
 800d61c:	4639      	mov	r1, r7
 800d61e:	f7f3 fa93 	bl	8000b48 <__aeabi_d2iz>
 800d622:	ab0c      	add	r3, sp, #48	; 0x30
 800d624:	46a3      	mov	fp, r4
 800d626:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d62a:	e722      	b.n	800d472 <__kernel_rem_pio2+0x2a2>
 800d62c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d62e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d632:	ab0c      	add	r3, sp, #48	; 0x30
 800d634:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d638:	f7f2 ff6c 	bl	8000514 <__aeabi_i2d>
 800d63c:	4622      	mov	r2, r4
 800d63e:	462b      	mov	r3, r5
 800d640:	f7f2 ffd2 	bl	80005e8 <__aeabi_dmul>
 800d644:	4632      	mov	r2, r6
 800d646:	e9c9 0100 	strd	r0, r1, [r9]
 800d64a:	463b      	mov	r3, r7
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 ffca 	bl	80005e8 <__aeabi_dmul>
 800d654:	f108 38ff 	add.w	r8, r8, #4294967295
 800d658:	4604      	mov	r4, r0
 800d65a:	460d      	mov	r5, r1
 800d65c:	e713      	b.n	800d486 <__kernel_rem_pio2+0x2b6>
 800d65e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d662:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d666:	f7f2 ffbf 	bl	80005e8 <__aeabi_dmul>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	4620      	mov	r0, r4
 800d670:	4629      	mov	r1, r5
 800d672:	f7f2 fe03 	bl	800027c <__adddf3>
 800d676:	3601      	adds	r6, #1
 800d678:	4604      	mov	r4, r0
 800d67a:	460d      	mov	r5, r1
 800d67c:	9b04      	ldr	r3, [sp, #16]
 800d67e:	429e      	cmp	r6, r3
 800d680:	dc01      	bgt.n	800d686 <__kernel_rem_pio2+0x4b6>
 800d682:	45b0      	cmp	r8, r6
 800d684:	daeb      	bge.n	800d65e <__kernel_rem_pio2+0x48e>
 800d686:	ab48      	add	r3, sp, #288	; 0x120
 800d688:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d68c:	e9c3 4500 	strd	r4, r5, [r3]
 800d690:	3f01      	subs	r7, #1
 800d692:	f108 0801 	add.w	r8, r8, #1
 800d696:	e6ff      	b.n	800d498 <__kernel_rem_pio2+0x2c8>
 800d698:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	dc0b      	bgt.n	800d6b6 <__kernel_rem_pio2+0x4e6>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dc6e      	bgt.n	800d780 <__kernel_rem_pio2+0x5b0>
 800d6a2:	d045      	beq.n	800d730 <__kernel_rem_pio2+0x560>
 800d6a4:	9b07      	ldr	r3, [sp, #28]
 800d6a6:	f003 0007 	and.w	r0, r3, #7
 800d6aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d6ae:	ecbd 8b02 	vpop	{d8}
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d6b8:	2b03      	cmp	r3, #3
 800d6ba:	d1f3      	bne.n	800d6a4 <__kernel_rem_pio2+0x4d4>
 800d6bc:	ab48      	add	r3, sp, #288	; 0x120
 800d6be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d6c2:	46d0      	mov	r8, sl
 800d6c4:	46d9      	mov	r9, fp
 800d6c6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ca:	f1a8 0808 	sub.w	r8, r8, #8
 800d6ce:	dc64      	bgt.n	800d79a <__kernel_rem_pio2+0x5ca>
 800d6d0:	465c      	mov	r4, fp
 800d6d2:	2c01      	cmp	r4, #1
 800d6d4:	f1aa 0a08 	sub.w	sl, sl, #8
 800d6d8:	dc7e      	bgt.n	800d7d8 <__kernel_rem_pio2+0x608>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	f1bb 0f01 	cmp.w	fp, #1
 800d6e2:	f300 8097 	bgt.w	800d814 <__kernel_rem_pio2+0x644>
 800d6e6:	9b02      	ldr	r3, [sp, #8]
 800d6e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d6ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f040 8099 	bne.w	800d828 <__kernel_rem_pio2+0x658>
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	e9c3 5600 	strd	r5, r6, [r3]
 800d6fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d700:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d704:	e7ce      	b.n	800d6a4 <__kernel_rem_pio2+0x4d4>
 800d706:	ab48      	add	r3, sp, #288	; 0x120
 800d708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f7f2 fdb4 	bl	800027c <__adddf3>
 800d714:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d718:	f1bb 0f00 	cmp.w	fp, #0
 800d71c:	daf3      	bge.n	800d706 <__kernel_rem_pio2+0x536>
 800d71e:	9b02      	ldr	r3, [sp, #8]
 800d720:	b113      	cbz	r3, 800d728 <__kernel_rem_pio2+0x558>
 800d722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d726:	4619      	mov	r1, r3
 800d728:	9b01      	ldr	r3, [sp, #4]
 800d72a:	e9c3 0100 	strd	r0, r1, [r3]
 800d72e:	e7b9      	b.n	800d6a4 <__kernel_rem_pio2+0x4d4>
 800d730:	2000      	movs	r0, #0
 800d732:	2100      	movs	r1, #0
 800d734:	e7f0      	b.n	800d718 <__kernel_rem_pio2+0x548>
 800d736:	ab48      	add	r3, sp, #288	; 0x120
 800d738:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	f7f2 fd9c 	bl	800027c <__adddf3>
 800d744:	3c01      	subs	r4, #1
 800d746:	2c00      	cmp	r4, #0
 800d748:	daf5      	bge.n	800d736 <__kernel_rem_pio2+0x566>
 800d74a:	9b02      	ldr	r3, [sp, #8]
 800d74c:	b1e3      	cbz	r3, 800d788 <__kernel_rem_pio2+0x5b8>
 800d74e:	4602      	mov	r2, r0
 800d750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d754:	9c01      	ldr	r4, [sp, #4]
 800d756:	e9c4 2300 	strd	r2, r3, [r4]
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d762:	f7f2 fd89 	bl	8000278 <__aeabi_dsub>
 800d766:	ad4a      	add	r5, sp, #296	; 0x128
 800d768:	2401      	movs	r4, #1
 800d76a:	45a3      	cmp	fp, r4
 800d76c:	da0f      	bge.n	800d78e <__kernel_rem_pio2+0x5be>
 800d76e:	9b02      	ldr	r3, [sp, #8]
 800d770:	b113      	cbz	r3, 800d778 <__kernel_rem_pio2+0x5a8>
 800d772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d776:	4619      	mov	r1, r3
 800d778:	9b01      	ldr	r3, [sp, #4]
 800d77a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d77e:	e791      	b.n	800d6a4 <__kernel_rem_pio2+0x4d4>
 800d780:	465c      	mov	r4, fp
 800d782:	2000      	movs	r0, #0
 800d784:	2100      	movs	r1, #0
 800d786:	e7de      	b.n	800d746 <__kernel_rem_pio2+0x576>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	e7e2      	b.n	800d754 <__kernel_rem_pio2+0x584>
 800d78e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d792:	f7f2 fd73 	bl	800027c <__adddf3>
 800d796:	3401      	adds	r4, #1
 800d798:	e7e7      	b.n	800d76a <__kernel_rem_pio2+0x59a>
 800d79a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d79e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	f7f2 fd67 	bl	800027c <__adddf3>
 800d7ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 fd5d 	bl	8000278 <__aeabi_dsub>
 800d7be:	4632      	mov	r2, r6
 800d7c0:	463b      	mov	r3, r7
 800d7c2:	f7f2 fd5b 	bl	800027c <__adddf3>
 800d7c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d7ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d7ce:	ed88 7b00 	vstr	d7, [r8]
 800d7d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800d7d6:	e776      	b.n	800d6c6 <__kernel_rem_pio2+0x4f6>
 800d7d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4632      	mov	r2, r6
 800d7e4:	463b      	mov	r3, r7
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f2 fd48 	bl	800027c <__adddf3>
 800d7ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	f7f2 fd3e 	bl	8000278 <__aeabi_dsub>
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	463b      	mov	r3, r7
 800d800:	f7f2 fd3c 	bl	800027c <__adddf3>
 800d804:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d808:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d80c:	ed8a 7b00 	vstr	d7, [sl]
 800d810:	3c01      	subs	r4, #1
 800d812:	e75e      	b.n	800d6d2 <__kernel_rem_pio2+0x502>
 800d814:	ab48      	add	r3, sp, #288	; 0x120
 800d816:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f7f2 fd2d 	bl	800027c <__adddf3>
 800d822:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d826:	e75a      	b.n	800d6de <__kernel_rem_pio2+0x50e>
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	9a01      	ldr	r2, [sp, #4]
 800d82c:	601d      	str	r5, [r3, #0]
 800d82e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d832:	605c      	str	r4, [r3, #4]
 800d834:	609f      	str	r7, [r3, #8]
 800d836:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d83a:	60d3      	str	r3, [r2, #12]
 800d83c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d840:	6110      	str	r0, [r2, #16]
 800d842:	6153      	str	r3, [r2, #20]
 800d844:	e72e      	b.n	800d6a4 <__kernel_rem_pio2+0x4d4>
 800d846:	bf00      	nop
 800d848:	41700000 	.word	0x41700000
 800d84c:	3e700000 	.word	0x3e700000

0800d850 <__kernel_sin>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	ed2d 8b04 	vpush	{d8-d9}
 800d858:	eeb0 8a41 	vmov.f32	s16, s2
 800d85c:	eef0 8a61 	vmov.f32	s17, s3
 800d860:	ec55 4b10 	vmov	r4, r5, d0
 800d864:	b083      	sub	sp, #12
 800d866:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d86a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d86e:	9001      	str	r0, [sp, #4]
 800d870:	da06      	bge.n	800d880 <__kernel_sin+0x30>
 800d872:	ee10 0a10 	vmov	r0, s0
 800d876:	4629      	mov	r1, r5
 800d878:	f7f3 f966 	bl	8000b48 <__aeabi_d2iz>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d051      	beq.n	800d924 <__kernel_sin+0xd4>
 800d880:	4622      	mov	r2, r4
 800d882:	462b      	mov	r3, r5
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f7f2 feae 	bl	80005e8 <__aeabi_dmul>
 800d88c:	4682      	mov	sl, r0
 800d88e:	468b      	mov	fp, r1
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4620      	mov	r0, r4
 800d896:	4629      	mov	r1, r5
 800d898:	f7f2 fea6 	bl	80005e8 <__aeabi_dmul>
 800d89c:	a341      	add	r3, pc, #260	; (adr r3, 800d9a4 <__kernel_sin+0x154>)
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	4680      	mov	r8, r0
 800d8a4:	4689      	mov	r9, r1
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	4659      	mov	r1, fp
 800d8aa:	f7f2 fe9d 	bl	80005e8 <__aeabi_dmul>
 800d8ae:	a33f      	add	r3, pc, #252	; (adr r3, 800d9ac <__kernel_sin+0x15c>)
 800d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b4:	f7f2 fce0 	bl	8000278 <__aeabi_dsub>
 800d8b8:	4652      	mov	r2, sl
 800d8ba:	465b      	mov	r3, fp
 800d8bc:	f7f2 fe94 	bl	80005e8 <__aeabi_dmul>
 800d8c0:	a33c      	add	r3, pc, #240	; (adr r3, 800d9b4 <__kernel_sin+0x164>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	f7f2 fcd9 	bl	800027c <__adddf3>
 800d8ca:	4652      	mov	r2, sl
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	f7f2 fe8b 	bl	80005e8 <__aeabi_dmul>
 800d8d2:	a33a      	add	r3, pc, #232	; (adr r3, 800d9bc <__kernel_sin+0x16c>)
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	f7f2 fcce 	bl	8000278 <__aeabi_dsub>
 800d8dc:	4652      	mov	r2, sl
 800d8de:	465b      	mov	r3, fp
 800d8e0:	f7f2 fe82 	bl	80005e8 <__aeabi_dmul>
 800d8e4:	a337      	add	r3, pc, #220	; (adr r3, 800d9c4 <__kernel_sin+0x174>)
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	f7f2 fcc7 	bl	800027c <__adddf3>
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	4606      	mov	r6, r0
 800d8f2:	460f      	mov	r7, r1
 800d8f4:	b9eb      	cbnz	r3, 800d932 <__kernel_sin+0xe2>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4650      	mov	r0, sl
 800d8fc:	4659      	mov	r1, fp
 800d8fe:	f7f2 fe73 	bl	80005e8 <__aeabi_dmul>
 800d902:	a325      	add	r3, pc, #148	; (adr r3, 800d998 <__kernel_sin+0x148>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7f2 fcb6 	bl	8000278 <__aeabi_dsub>
 800d90c:	4642      	mov	r2, r8
 800d90e:	464b      	mov	r3, r9
 800d910:	f7f2 fe6a 	bl	80005e8 <__aeabi_dmul>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4620      	mov	r0, r4
 800d91a:	4629      	mov	r1, r5
 800d91c:	f7f2 fcae 	bl	800027c <__adddf3>
 800d920:	4604      	mov	r4, r0
 800d922:	460d      	mov	r5, r1
 800d924:	ec45 4b10 	vmov	d0, r4, r5
 800d928:	b003      	add	sp, #12
 800d92a:	ecbd 8b04 	vpop	{d8-d9}
 800d92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d932:	4b1b      	ldr	r3, [pc, #108]	; (800d9a0 <__kernel_sin+0x150>)
 800d934:	ec51 0b18 	vmov	r0, r1, d8
 800d938:	2200      	movs	r2, #0
 800d93a:	f7f2 fe55 	bl	80005e8 <__aeabi_dmul>
 800d93e:	4632      	mov	r2, r6
 800d940:	ec41 0b19 	vmov	d9, r0, r1
 800d944:	463b      	mov	r3, r7
 800d946:	4640      	mov	r0, r8
 800d948:	4649      	mov	r1, r9
 800d94a:	f7f2 fe4d 	bl	80005e8 <__aeabi_dmul>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	ec51 0b19 	vmov	r0, r1, d9
 800d956:	f7f2 fc8f 	bl	8000278 <__aeabi_dsub>
 800d95a:	4652      	mov	r2, sl
 800d95c:	465b      	mov	r3, fp
 800d95e:	f7f2 fe43 	bl	80005e8 <__aeabi_dmul>
 800d962:	ec53 2b18 	vmov	r2, r3, d8
 800d966:	f7f2 fc87 	bl	8000278 <__aeabi_dsub>
 800d96a:	a30b      	add	r3, pc, #44	; (adr r3, 800d998 <__kernel_sin+0x148>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	4606      	mov	r6, r0
 800d972:	460f      	mov	r7, r1
 800d974:	4640      	mov	r0, r8
 800d976:	4649      	mov	r1, r9
 800d978:	f7f2 fe36 	bl	80005e8 <__aeabi_dmul>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	4630      	mov	r0, r6
 800d982:	4639      	mov	r1, r7
 800d984:	f7f2 fc7a 	bl	800027c <__adddf3>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4620      	mov	r0, r4
 800d98e:	4629      	mov	r1, r5
 800d990:	f7f2 fc72 	bl	8000278 <__aeabi_dsub>
 800d994:	e7c4      	b.n	800d920 <__kernel_sin+0xd0>
 800d996:	bf00      	nop
 800d998:	55555549 	.word	0x55555549
 800d99c:	3fc55555 	.word	0x3fc55555
 800d9a0:	3fe00000 	.word	0x3fe00000
 800d9a4:	5acfd57c 	.word	0x5acfd57c
 800d9a8:	3de5d93a 	.word	0x3de5d93a
 800d9ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800d9b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d9b4:	57b1fe7d 	.word	0x57b1fe7d
 800d9b8:	3ec71de3 	.word	0x3ec71de3
 800d9bc:	19c161d5 	.word	0x19c161d5
 800d9c0:	3f2a01a0 	.word	0x3f2a01a0
 800d9c4:	1110f8a6 	.word	0x1110f8a6
 800d9c8:	3f811111 	.word	0x3f811111

0800d9cc <fabs>:
 800d9cc:	ec51 0b10 	vmov	r0, r1, d0
 800d9d0:	ee10 2a10 	vmov	r2, s0
 800d9d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9d8:	ec43 2b10 	vmov	d0, r2, r3
 800d9dc:	4770      	bx	lr

0800d9de <finite>:
 800d9de:	b082      	sub	sp, #8
 800d9e0:	ed8d 0b00 	vstr	d0, [sp]
 800d9e4:	9801      	ldr	r0, [sp, #4]
 800d9e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d9ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d9ee:	0fc0      	lsrs	r0, r0, #31
 800d9f0:	b002      	add	sp, #8
 800d9f2:	4770      	bx	lr
 800d9f4:	0000      	movs	r0, r0
	...

0800d9f8 <nan>:
 800d9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da00 <nan+0x8>
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	00000000 	.word	0x00000000
 800da04:	7ff80000 	.word	0x7ff80000

0800da08 <rint>:
 800da08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da0a:	ec51 0b10 	vmov	r0, r1, d0
 800da0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800da12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800da16:	2e13      	cmp	r6, #19
 800da18:	ee10 4a10 	vmov	r4, s0
 800da1c:	460b      	mov	r3, r1
 800da1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800da22:	dc58      	bgt.n	800dad6 <rint+0xce>
 800da24:	2e00      	cmp	r6, #0
 800da26:	da2b      	bge.n	800da80 <rint+0x78>
 800da28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800da2c:	4302      	orrs	r2, r0
 800da2e:	d023      	beq.n	800da78 <rint+0x70>
 800da30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800da34:	4302      	orrs	r2, r0
 800da36:	4254      	negs	r4, r2
 800da38:	4314      	orrs	r4, r2
 800da3a:	0c4b      	lsrs	r3, r1, #17
 800da3c:	0b24      	lsrs	r4, r4, #12
 800da3e:	045b      	lsls	r3, r3, #17
 800da40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800da44:	ea44 0103 	orr.w	r1, r4, r3
 800da48:	4b32      	ldr	r3, [pc, #200]	; (800db14 <rint+0x10c>)
 800da4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4630      	mov	r0, r6
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f2 fc0f 	bl	800027c <__adddf3>
 800da5e:	e9cd 0100 	strd	r0, r1, [sp]
 800da62:	463b      	mov	r3, r7
 800da64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da68:	4632      	mov	r2, r6
 800da6a:	f7f2 fc05 	bl	8000278 <__aeabi_dsub>
 800da6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800da76:	4639      	mov	r1, r7
 800da78:	ec41 0b10 	vmov	d0, r0, r1
 800da7c:	b003      	add	sp, #12
 800da7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da80:	4a25      	ldr	r2, [pc, #148]	; (800db18 <rint+0x110>)
 800da82:	4132      	asrs	r2, r6
 800da84:	ea01 0702 	and.w	r7, r1, r2
 800da88:	4307      	orrs	r7, r0
 800da8a:	d0f5      	beq.n	800da78 <rint+0x70>
 800da8c:	0851      	lsrs	r1, r2, #1
 800da8e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800da92:	4314      	orrs	r4, r2
 800da94:	d00c      	beq.n	800dab0 <rint+0xa8>
 800da96:	ea23 0201 	bic.w	r2, r3, r1
 800da9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800da9e:	2e13      	cmp	r6, #19
 800daa0:	fa43 f606 	asr.w	r6, r3, r6
 800daa4:	bf0c      	ite	eq
 800daa6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800daaa:	2400      	movne	r4, #0
 800daac:	ea42 0306 	orr.w	r3, r2, r6
 800dab0:	4918      	ldr	r1, [pc, #96]	; (800db14 <rint+0x10c>)
 800dab2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800dab6:	4622      	mov	r2, r4
 800dab8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fbdc 	bl	800027c <__adddf3>
 800dac4:	e9cd 0100 	strd	r0, r1, [sp]
 800dac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dacc:	4622      	mov	r2, r4
 800dace:	462b      	mov	r3, r5
 800dad0:	f7f2 fbd2 	bl	8000278 <__aeabi_dsub>
 800dad4:	e7d0      	b.n	800da78 <rint+0x70>
 800dad6:	2e33      	cmp	r6, #51	; 0x33
 800dad8:	dd07      	ble.n	800daea <rint+0xe2>
 800dada:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dade:	d1cb      	bne.n	800da78 <rint+0x70>
 800dae0:	ee10 2a10 	vmov	r2, s0
 800dae4:	f7f2 fbca 	bl	800027c <__adddf3>
 800dae8:	e7c6      	b.n	800da78 <rint+0x70>
 800daea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800daee:	f04f 36ff 	mov.w	r6, #4294967295
 800daf2:	40d6      	lsrs	r6, r2
 800daf4:	4230      	tst	r0, r6
 800daf6:	d0bf      	beq.n	800da78 <rint+0x70>
 800daf8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dafc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800db00:	bf1f      	itttt	ne
 800db02:	ea24 0101 	bicne.w	r1, r4, r1
 800db06:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800db0a:	fa44 f202 	asrne.w	r2, r4, r2
 800db0e:	ea41 0402 	orrne.w	r4, r1, r2
 800db12:	e7cd      	b.n	800dab0 <rint+0xa8>
 800db14:	0800e0c0 	.word	0x0800e0c0
 800db18:	000fffff 	.word	0x000fffff
 800db1c:	00000000 	.word	0x00000000

0800db20 <scalbn>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	ec55 4b10 	vmov	r4, r5, d0
 800db26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800db2a:	4606      	mov	r6, r0
 800db2c:	462b      	mov	r3, r5
 800db2e:	b99a      	cbnz	r2, 800db58 <scalbn+0x38>
 800db30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db34:	4323      	orrs	r3, r4
 800db36:	d036      	beq.n	800dba6 <scalbn+0x86>
 800db38:	4b39      	ldr	r3, [pc, #228]	; (800dc20 <scalbn+0x100>)
 800db3a:	4629      	mov	r1, r5
 800db3c:	ee10 0a10 	vmov	r0, s0
 800db40:	2200      	movs	r2, #0
 800db42:	f7f2 fd51 	bl	80005e8 <__aeabi_dmul>
 800db46:	4b37      	ldr	r3, [pc, #220]	; (800dc24 <scalbn+0x104>)
 800db48:	429e      	cmp	r6, r3
 800db4a:	4604      	mov	r4, r0
 800db4c:	460d      	mov	r5, r1
 800db4e:	da10      	bge.n	800db72 <scalbn+0x52>
 800db50:	a32b      	add	r3, pc, #172	; (adr r3, 800dc00 <scalbn+0xe0>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	e03a      	b.n	800dbce <scalbn+0xae>
 800db58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db5c:	428a      	cmp	r2, r1
 800db5e:	d10c      	bne.n	800db7a <scalbn+0x5a>
 800db60:	ee10 2a10 	vmov	r2, s0
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fb88 	bl	800027c <__adddf3>
 800db6c:	4604      	mov	r4, r0
 800db6e:	460d      	mov	r5, r1
 800db70:	e019      	b.n	800dba6 <scalbn+0x86>
 800db72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db76:	460b      	mov	r3, r1
 800db78:	3a36      	subs	r2, #54	; 0x36
 800db7a:	4432      	add	r2, r6
 800db7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db80:	428a      	cmp	r2, r1
 800db82:	dd08      	ble.n	800db96 <scalbn+0x76>
 800db84:	2d00      	cmp	r5, #0
 800db86:	a120      	add	r1, pc, #128	; (adr r1, 800dc08 <scalbn+0xe8>)
 800db88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db8c:	da1c      	bge.n	800dbc8 <scalbn+0xa8>
 800db8e:	a120      	add	r1, pc, #128	; (adr r1, 800dc10 <scalbn+0xf0>)
 800db90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db94:	e018      	b.n	800dbc8 <scalbn+0xa8>
 800db96:	2a00      	cmp	r2, #0
 800db98:	dd08      	ble.n	800dbac <scalbn+0x8c>
 800db9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dba2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dba6:	ec45 4b10 	vmov	d0, r4, r5
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
 800dbac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dbb0:	da19      	bge.n	800dbe6 <scalbn+0xc6>
 800dbb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dbb6:	429e      	cmp	r6, r3
 800dbb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dbbc:	dd0a      	ble.n	800dbd4 <scalbn+0xb4>
 800dbbe:	a112      	add	r1, pc, #72	; (adr r1, 800dc08 <scalbn+0xe8>)
 800dbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e2      	bne.n	800db8e <scalbn+0x6e>
 800dbc8:	a30f      	add	r3, pc, #60	; (adr r3, 800dc08 <scalbn+0xe8>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fd0b 	bl	80005e8 <__aeabi_dmul>
 800dbd2:	e7cb      	b.n	800db6c <scalbn+0x4c>
 800dbd4:	a10a      	add	r1, pc, #40	; (adr r1, 800dc00 <scalbn+0xe0>)
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0b8      	beq.n	800db50 <scalbn+0x30>
 800dbde:	a10e      	add	r1, pc, #56	; (adr r1, 800dc18 <scalbn+0xf8>)
 800dbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe4:	e7b4      	b.n	800db50 <scalbn+0x30>
 800dbe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbea:	3236      	adds	r2, #54	; 0x36
 800dbec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dbf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <scalbn+0x108>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	e7e8      	b.n	800dbce <scalbn+0xae>
 800dbfc:	f3af 8000 	nop.w
 800dc00:	c2f8f359 	.word	0xc2f8f359
 800dc04:	01a56e1f 	.word	0x01a56e1f
 800dc08:	8800759c 	.word	0x8800759c
 800dc0c:	7e37e43c 	.word	0x7e37e43c
 800dc10:	8800759c 	.word	0x8800759c
 800dc14:	fe37e43c 	.word	0xfe37e43c
 800dc18:	c2f8f359 	.word	0xc2f8f359
 800dc1c:	81a56e1f 	.word	0x81a56e1f
 800dc20:	43500000 	.word	0x43500000
 800dc24:	ffff3cb0 	.word	0xffff3cb0
 800dc28:	3c900000 	.word	0x3c900000

0800dc2c <_init>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr

0800dc38 <_fini>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	bf00      	nop
 800dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3e:	bc08      	pop	{r3}
 800dc40:	469e      	mov	lr, r3
 800dc42:	4770      	bx	lr
