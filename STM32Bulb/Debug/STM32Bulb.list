
STM32Bulb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800def0  0800def0  0001def0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e378  0800e378  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e380  0800e380  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e380  0800e380  0001e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e384  0800e384  0001e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800e388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000474c  200000cc  0800e454  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004818  0800e454  00024818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024eda  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000482b  00000000  00000000  00044fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00049808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  0004b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268ef  00000000  00000000  0004ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002148c  00000000  00000000  00073367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ef1  00000000  00000000  000947f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c6e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec4  00000000  00000000  0016c738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ded4 	.word	0x0800ded4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800ded4 	.word	0x0800ded4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f001 fb05 	bl	8002544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f8bf 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa93 	bl	8001468 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f42:	f000 f93d 	bl	80011c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f46:	f000 f969 	bl	800121c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f4a:	f000 f997 	bl	800127c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f4e:	f009 fc75 	bl	800a83c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000f52:	f000 f9c9 	bl	80012e8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fa5d 	bl	8001414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initializes all PWM for all LEDs
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	484f      	ldr	r0, [pc, #316]	; (800109c <main+0x16c>)
 8000f5e:	f005 f91b 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f62:	2104      	movs	r1, #4
 8000f64:	484d      	ldr	r0, [pc, #308]	; (800109c <main+0x16c>)
 8000f66:	f005 f917 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	484b      	ldr	r0, [pc, #300]	; (800109c <main+0x16c>)
 8000f6e:	f005 f913 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f72:	210c      	movs	r1, #12
 8000f74:	4849      	ldr	r0, [pc, #292]	; (800109c <main+0x16c>)
 8000f76:	f005 f90f 	bl	8006198 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Calls configuration function for default initialization setup
  DeserializeConfiguration(configString, &yellow, &orange, &red, &blue);
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <main+0x170>)
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <main+0x174>)
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <main+0x178>)
 8000f82:	494a      	ldr	r1, [pc, #296]	; (80010ac <main+0x17c>)
 8000f84:	484a      	ldr	r0, [pc, #296]	; (80010b0 <main+0x180>)
 8000f86:	f000 fb91 	bl	80016ac <DeserializeConfiguration>

  // Variables responsible for phase delay in wave functions
  int yellowPhase, orangePhase, redPhase, bluePhase;
  int globalCounter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]

  // Setup interrupt reception for UART1 port
  // (Calls for handling after reception is completed)
  HAL_UART_Receive_IT(&huart2, configString, 55);
 8000f8e:	2237      	movs	r2, #55	; 0x37
 8000f90:	4947      	ldr	r1, [pc, #284]	; (80010b0 <main+0x180>)
 8000f92:	4848      	ldr	r0, [pc, #288]	; (80010b4 <main+0x184>)
 8000f94:	f005 ff2b 	bl	8006dee <HAL_UART_Receive_IT>

  while (1)
  {
	// Counter to keep general samples to be split among phases
	globalCounter++;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]

	// Phase for each wave considering the respective phase delays for each function
	yellowPhase = floor((globalCounter+yellow.phase)%yellow.samples);
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <main+0x17c>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a41      	ldr	r2, [pc, #260]	; (80010ac <main+0x17c>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fae:	fb02 f201 	mul.w	r2, r2, r1
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff faad 	bl	8000514 <__aeabi_i2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fdc1 	bl	8000b48 <__aeabi_d2iz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	613b      	str	r3, [r7, #16]
	orangePhase = floor((globalCounter+orange.phase)%orange.samples);
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <main+0x178>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a35      	ldr	r2, [pc, #212]	; (80010a8 <main+0x178>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fda:	fb02 f201 	mul.w	r2, r2, r1
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa97 	bl	8000514 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fdab 	bl	8000b48 <__aeabi_d2iz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
	redPhase = floor((globalCounter+red.phase)%red.samples);
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <main+0x174>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <main+0x174>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	fb93 f1f2 	sdiv	r1, r3, r2
 8001006:	fb02 f201 	mul.w	r2, r2, r1
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa81 	bl	8000514 <__aeabi_i2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd95 	bl	8000b48 <__aeabi_d2iz>
 800101e:	4603      	mov	r3, r0
 8001020:	60bb      	str	r3, [r7, #8]
	bluePhase = floor((globalCounter+blue.phase)%blue.samples);
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0x170>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <main+0x170>)
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001032:	fb02 f201 	mul.w	r2, r2, r1
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa6b 	bl	8000514 <__aeabi_i2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd7f 	bl	8000b48 <__aeabi_d2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	607b      	str	r3, [r7, #4]

	// Setting up each PWM level for each LED
	TIM4->CCR1 = yellow.shape[yellowPhase];
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <main+0x17c>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <main+0x188>)
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = orange.shape[orangePhase];
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <main+0x178>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <main+0x188>)
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = red.shape[redPhase];
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <main+0x174>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3302      	adds	r3, #2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <main+0x188>)
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = blue.shape[bluePhase];
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <main+0x170>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3302      	adds	r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <main+0x188>)
 800108c:	641a      	str	r2, [r3, #64]	; 0x40

	// Setup the pace for the execution
	HAL_Delay(5);
 800108e:	2005      	movs	r0, #5
 8001090:	f001 faca 	bl	8002628 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001094:	f009 fbf8 	bl	800a888 <MX_USB_HOST_Process>
	globalCounter++;
 8001098:	e77e      	b.n	8000f98 <main+0x68>
 800109a:	bf00      	nop
 800109c:	200010a4 	.word	0x200010a4
 80010a0:	200000f8 	.word	0x200000f8
 80010a4:	20003098 	.word	0x20003098
 80010a8:	200010ec 	.word	0x200010ec
 80010ac:	200020ec 	.word	0x200020ec
 80010b0:	20000000 	.word	0x20000000
 80010b4:	2000409c 	.word	0x2000409c
 80010b8:	40000800 	.word	0x40000800

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b098      	sub	sp, #96	; 0x60
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fefc 	bl	800aec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <SystemClock_Config+0xfc>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <SystemClock_Config+0xfc>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <SystemClock_Config+0xfc>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <SystemClock_Config+0x100>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <SystemClock_Config+0x100>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SystemClock_Config+0x100>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001126:	2301      	movs	r3, #1
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800113e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001148:	2307      	movs	r3, #7
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f93b 	bl	80053cc <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800115c:	f000 fee0 	bl	8001f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2105      	movs	r1, #5
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fb9c 	bl	80058bc <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800118a:	f000 fec9 	bl	8001f20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001192:	23c0      	movs	r3, #192	; 0xc0
 8001194:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fd88 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011aa:	f000 feb9 	bl	8001f20 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3760      	adds	r7, #96	; 0x60
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_I2C1_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_I2C1_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_I2C1_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2C1_Init+0x50>)
 80011fe:	f003 fb01 	bl	8004804 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 fe8a 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20002098 	.word	0x20002098
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_I2S3_Init+0x54>)
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <MX_I2S3_Init+0x58>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2S3_Init+0x54>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_I2S3_Init+0x54>)
 800123c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001240:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_I2S3_Init+0x54>)
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <MX_I2S3_Init+0x5c>)
 8001246:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_I2S3_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_I2S3_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_I2S3_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_I2S3_Init+0x54>)
 800125c:	f003 fc16 	bl	8004a8c <HAL_I2S_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001266:	f000 fe5b 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200040e0 	.word	0x200040e0
 8001274:	40003c00 	.word	0x40003c00
 8001278:	00017700 	.word	0x00017700

0800127c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_SPI1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012ce:	f004 fe31 	bl	8005f34 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 fe22 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20004044 	.word	0x20004044
 80012e4:	40013000 	.word	0x40013000

080012e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <MX_TIM4_Init+0x124>)
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <MX_TIM4_Init+0x128>)
 800131c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <MX_TIM4_Init+0x124>)
 8001320:	2208      	movs	r2, #8
 8001322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <MX_TIM4_Init+0x124>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <MX_TIM4_Init+0x124>)
 800132c:	2264      	movs	r2, #100	; 0x64
 800132e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_TIM4_Init+0x124>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <MX_TIM4_Init+0x124>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800133c:	4833      	ldr	r0, [pc, #204]	; (800140c <MX_TIM4_Init+0x124>)
 800133e:	f004 fe82 	bl	8006046 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001348:	f000 fdea 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <MX_TIM4_Init+0x124>)
 800135a:	f005 f8a7 	bl	80064ac <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001364:	f000 fddc 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <MX_TIM4_Init+0x124>)
 800136a:	f004 febb 	bl	80060e4 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 fdd4 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4619      	mov	r1, r3
 8001386:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM4_Init+0x124>)
 8001388:	f005 fc68 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001392:	f000 fdc5 	bl	8001f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013a2:	2304      	movs	r3, #4
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <MX_TIM4_Init+0x124>)
 80013ae:	f004 ffbb 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80013b8:	f000 fdb2 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4812      	ldr	r0, [pc, #72]	; (800140c <MX_TIM4_Init+0x124>)
 80013c4:	f004 ffb0 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80013ce:	f000 fda7 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2208      	movs	r2, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_TIM4_Init+0x124>)
 80013da:	f004 ffa5 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80013e4:	f000 fd9c 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	220c      	movs	r2, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM4_Init+0x124>)
 80013f0:	f004 ff9a 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80013fa:	f000 fd91 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM4_Init+0x124>)
 8001400:	f000 fed6 	bl	80021b0 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200010a4 	.word	0x200010a4
 8001410:	40000800 	.word	0x40000800

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f005 fc82 	bl	8006d54 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 fd63 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000409c 	.word	0x2000409c
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a70      	ldr	r2, [pc, #448]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a69      	ldr	r2, [pc, #420]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a62      	ldr	r2, [pc, #392]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b60      	ldr	r3, [pc, #384]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b55      	ldr	r3, [pc, #340]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a54      	ldr	r2, [pc, #336]	; (8001648 <MX_GPIO_Init+0x1e0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <MX_GPIO_Init+0x1e0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2108      	movs	r1, #8
 800152a:	4848      	ldr	r0, [pc, #288]	; (800164c <MX_GPIO_Init+0x1e4>)
 800152c:	f001 fbe0 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2101      	movs	r1, #1
 8001534:	4846      	ldr	r0, [pc, #280]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001536:	f001 fbdb 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2110      	movs	r1, #16
 800153e:	4845      	ldr	r0, [pc, #276]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001540:	f001 fbd6 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001544:	2308      	movs	r3, #8
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	483c      	ldr	r0, [pc, #240]	; (800164c <MX_GPIO_Init+0x1e4>)
 800155c:	f001 fa2c 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4836      	ldr	r0, [pc, #216]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001578:	f001 fa1e 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800157c:	2308      	movs	r3, #8
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158c:	2305      	movs	r3, #5
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001598:	f001 fa0e 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4829      	ldr	r0, [pc, #164]	; (8001658 <MX_GPIO_Init+0x1f0>)
 80015b2:	f001 fa01 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015b6:	2304      	movs	r3, #4
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4824      	ldr	r0, [pc, #144]	; (800165c <MX_GPIO_Init+0x1f4>)
 80015ca:	f001 f9f5 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e0:	2305      	movs	r3, #5
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_GPIO_Init+0x1f4>)
 80015ec:	f001 f9e4 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80015f0:	2310      	movs	r3, #16
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001608:	f001 f9d6 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800160c:	2320      	movs	r3, #32
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_GPIO_Init+0x1ec>)
 8001620:	f001 f9ca 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001628:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0x1e4>)
 800163a:	f001 f9bd 	bl	80029b8 <HAL_GPIO_Init>

}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40021000 	.word	0x40021000
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// Called by the end of UART interruption. Deserializes the received string
// and resets reception again
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
	if (configString[0]!='\0')
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_UART_RxCpltCallback+0x34>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00c      	beq.n	800168a <HAL_UART_RxCpltCallback+0x2a>
	{
		// Calls configuration function for default initialization setup for
		// the received string
		DeserializeConfiguration(configString, &yellow, &orange, &red, &blue);
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_UART_RxCpltCallback+0x38>)
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_UART_RxCpltCallback+0x3c>)
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_UART_RxCpltCallback+0x40>)
 8001678:	490a      	ldr	r1, [pc, #40]	; (80016a4 <HAL_UART_RxCpltCallback+0x44>)
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_UART_RxCpltCallback+0x34>)
 800167c:	f000 f816 	bl	80016ac <DeserializeConfiguration>
		// Setup reception
		HAL_UART_Receive_IT(&huart2, configString, 55);
 8001680:	2237      	movs	r2, #55	; 0x37
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <HAL_UART_RxCpltCallback+0x34>)
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <HAL_UART_RxCpltCallback+0x48>)
 8001686:	f005 fbb2 	bl	8006dee <HAL_UART_Receive_IT>
	}
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000
 8001698:	200000f8 	.word	0x200000f8
 800169c:	20003098 	.word	0x20003098
 80016a0:	200010ec 	.word	0x200010ec
 80016a4:	200020ec 	.word	0x200020ec
 80016a8:	2000409c 	.word	0x2000409c

080016ac <DeserializeConfiguration>:

// Handles configuration string and passes the parameters for
// the wave generator to the respective LEDs
void DeserializeConfiguration(uint8_t *configurationString, LEDBehavior *yellow, LEDBehavior *orange, LEDBehavior *red, LEDBehavior *blue){
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b091      	sub	sp, #68	; 0x44
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
	// Variables to hold the parameters while the string is being parsed
	char* ledConfiguration[4];
	char* configurationParameters[4];

	// Tokens for the string split
	char* token = strtok((char *)configurationString, "@");
 80016ba:	49b8      	ldr	r1, [pc, #736]	; (800199c <DeserializeConfiguration+0x2f0>)
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f009 fcc5 	bl	800b04c <strtok>
 80016c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	ledConfiguration[0] = token;
 80016c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c6:	623b      	str	r3, [r7, #32]

	// Splitting the string
	for(int index = 1; token != NULL; index++){
 80016c8:	2301      	movs	r3, #1
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80016cc:	e00f      	b.n	80016ee <DeserializeConfiguration+0x42>
		token = strtok(NULL, "@");
 80016ce:	49b3      	ldr	r1, [pc, #716]	; (800199c <DeserializeConfiguration+0x2f0>)
 80016d0:	2000      	movs	r0, #0
 80016d2:	f009 fcbb 	bl	800b04c <strtok>
 80016d6:	63f8      	str	r0, [r7, #60]	; 0x3c
		ledConfiguration[index] = token;
 80016d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016e0:	4413      	add	r3, r2
 80016e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016e4:	f843 2c20 	str.w	r2, [r3, #-32]
	for(int index = 1; token != NULL; index++){
 80016e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ea:	3301      	adds	r3, #1
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80016ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ec      	bne.n	80016ce <DeserializeConfiguration+0x22>
	}

	// Splitting the string and passing the parameters to the function
	// that setups the values in the LED structure.
	for(int index = 0; index < 4; index++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
 80016f8:	e232      	b.n	8001b60 <DeserializeConfiguration+0x4b4>
		token = strtok(ledConfiguration[index], "-");
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001702:	4413      	add	r3, r2
 8001704:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001708:	49a5      	ldr	r1, [pc, #660]	; (80019a0 <DeserializeConfiguration+0x2f4>)
 800170a:	4618      	mov	r0, r3
 800170c:	f009 fc9e 	bl	800b04c <strtok>
 8001710:	63f8      	str	r0, [r7, #60]	; 0x3c
		configurationParameters[0] = token;
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001714:	613b      	str	r3, [r7, #16]

		// Splitting the string
		for(int indexIn = 1; token != NULL; indexIn++){
 8001716:	2301      	movs	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	e00f      	b.n	800173c <DeserializeConfiguration+0x90>
			token = strtok(NULL, "-");
 800171c:	49a0      	ldr	r1, [pc, #640]	; (80019a0 <DeserializeConfiguration+0x2f4>)
 800171e:	2000      	movs	r0, #0
 8001720:	f009 fc94 	bl	800b04c <strtok>
 8001724:	63f8      	str	r0, [r7, #60]	; 0x3c
			configurationParameters[indexIn] = token;
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800172e:	4413      	add	r3, r2
 8001730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001732:	f843 2c30 	str.w	r2, [r3, #-48]
		for(int indexIn = 1; token != NULL; indexIn++){
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	3301      	adds	r3, #1
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
 800173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ec      	bne.n	800171c <DeserializeConfiguration+0x70>
		}
		// Yellow LED
		if (*configurationParameters[0] == 'Y'){
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b59      	cmp	r3, #89	; 0x59
 8001748:	d17d      	bne.n	8001846 <DeserializeConfiguration+0x19a>
			yellow->samples = atoi(configurationParameters[1]);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4618      	mov	r0, r3
 800174e:	f009 fb7d 	bl	800ae4c <atoi>
 8001752:	4602      	mov	r2, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]
			yellow->phase = atoi(configurationParameters[2]);
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4618      	mov	r0, r3
 800175c:	f009 fb76 	bl	800ae4c <atoi>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	605a      	str	r2, [r3, #4]
			yellow->maximum = (65535/512);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	227f      	movs	r2, #127	; 0x7f
 800176a:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b43      	cmp	r3, #67	; 0x43
 8001772:	d10d      	bne.n	8001790 <DeserializeConfiguration+0xe4>
				GenerateCossine(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f103 040c 	add.w	r4, r3, #12
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	4618      	mov	r0, r3
 800177e:	f009 fb65 	bl	800ae4c <atoi>
 8001782:	4603      	mov	r3, r0
 8001784:	227f      	movs	r2, #127	; 0x7f
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f000 f9f5 	bl	8001b78 <GenerateCossine>
 800178e:	e1e4      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'H'){
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b48      	cmp	r3, #72	; 0x48
 8001796:	d10d      	bne.n	80017b4 <DeserializeConfiguration+0x108>
				GenerateHigh(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f103 040c 	add.w	r4, r3, #12
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f009 fb53 	bl	800ae4c <atoi>
 80017a6:	4603      	mov	r3, r0
 80017a8:	227f      	movs	r2, #127	; 0x7f
 80017aa:	4619      	mov	r1, r3
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 fa4d 	bl	8001c4c <GenerateHigh>
 80017b2:	e1d2      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'L'){
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b4c      	cmp	r3, #76	; 0x4c
 80017ba:	d10d      	bne.n	80017d8 <DeserializeConfiguration+0x12c>
				GenerateLow(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f103 040c 	add.w	r4, r3, #12
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f009 fb41 	bl	800ae4c <atoi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	227f      	movs	r2, #127	; 0x7f
 80017ce:	4619      	mov	r1, r3
 80017d0:	4620      	mov	r0, r4
 80017d2:	f000 fa5f 	bl	8001c94 <GenerateLow>
 80017d6:	e1c0      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'P'){
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b50      	cmp	r3, #80	; 0x50
 80017de:	d10d      	bne.n	80017fc <DeserializeConfiguration+0x150>
				GenerateParabola(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f103 040c 	add.w	r4, r3, #12
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f009 fb2f 	bl	800ae4c <atoi>
 80017ee:	4603      	mov	r3, r0
 80017f0:	227f      	movs	r2, #127	; 0x7f
 80017f2:	4619      	mov	r1, r3
 80017f4:	4620      	mov	r0, r4
 80017f6:	f000 faf3 	bl	8001de0 <GenerateParabola>
 80017fa:	e1ae      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'R'){
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b52      	cmp	r3, #82	; 0x52
 8001802:	d10d      	bne.n	8001820 <DeserializeConfiguration+0x174>
				GenerateRamp(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f103 040c 	add.w	r4, r3, #12
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f009 fb1d 	bl	800ae4c <atoi>
 8001812:	4603      	mov	r3, r0
 8001814:	227f      	movs	r2, #127	; 0x7f
 8001816:	4619      	mov	r1, r3
 8001818:	4620      	mov	r0, r4
 800181a:	f000 fa58 	bl	8001cce <GenerateRamp>
 800181e:	e19c      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'S'){
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b53      	cmp	r3, #83	; 0x53
 8001826:	f040 8198 	bne.w	8001b5a <DeserializeConfiguration+0x4ae>
				GenerateSquare(yellow->shape, atoi(configurationParameters[1]), (65535/512));
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f103 040c 	add.w	r4, r3, #12
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4618      	mov	r0, r3
 8001834:	f009 fb0a 	bl	800ae4c <atoi>
 8001838:	4603      	mov	r3, r0
 800183a:	227f      	movs	r2, #127	; 0x7f
 800183c:	4619      	mov	r1, r3
 800183e:	4620      	mov	r0, r4
 8001840:	f000 fa85 	bl	8001d4e <GenerateSquare>
 8001844:	e189      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
		}
		// Orange LED
		else if (*configurationParameters[0] == 'O'){
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b4f      	cmp	r3, #79	; 0x4f
 800184c:	d17d      	bne.n	800194a <DeserializeConfiguration+0x29e>
			orange->samples = atoi(configurationParameters[1]);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fafb 	bl	800ae4c <atoi>
 8001856:	4602      	mov	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
			orange->phase = atoi(configurationParameters[2]);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4618      	mov	r0, r3
 8001860:	f009 faf4 	bl	800ae4c <atoi>
 8001864:	4602      	mov	r2, r0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]
			orange->maximum = (65535/512);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	227f      	movs	r2, #127	; 0x7f
 800186e:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b43      	cmp	r3, #67	; 0x43
 8001876:	d10d      	bne.n	8001894 <DeserializeConfiguration+0x1e8>
				GenerateCossine(orange->shape, atoi(configurationParameters[1]), (65535/512));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f103 040c 	add.w	r4, r3, #12
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	4618      	mov	r0, r3
 8001882:	f009 fae3 	bl	800ae4c <atoi>
 8001886:	4603      	mov	r3, r0
 8001888:	227f      	movs	r2, #127	; 0x7f
 800188a:	4619      	mov	r1, r3
 800188c:	4620      	mov	r0, r4
 800188e:	f000 f973 	bl	8001b78 <GenerateCossine>
 8001892:	e162      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'H'){
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b48      	cmp	r3, #72	; 0x48
 800189a:	d10d      	bne.n	80018b8 <DeserializeConfiguration+0x20c>
				GenerateHigh(orange->shape, atoi(configurationParameters[1]), (65535/512));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 040c 	add.w	r4, r3, #12
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f009 fad1 	bl	800ae4c <atoi>
 80018aa:	4603      	mov	r3, r0
 80018ac:	227f      	movs	r2, #127	; 0x7f
 80018ae:	4619      	mov	r1, r3
 80018b0:	4620      	mov	r0, r4
 80018b2:	f000 f9cb 	bl	8001c4c <GenerateHigh>
 80018b6:	e150      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'L'){
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b4c      	cmp	r3, #76	; 0x4c
 80018be:	d10d      	bne.n	80018dc <DeserializeConfiguration+0x230>
				GenerateLow(orange->shape, atoi(configurationParameters[1]), (65535/512));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 040c 	add.w	r4, r3, #12
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f009 fabf 	bl	800ae4c <atoi>
 80018ce:	4603      	mov	r3, r0
 80018d0:	227f      	movs	r2, #127	; 0x7f
 80018d2:	4619      	mov	r1, r3
 80018d4:	4620      	mov	r0, r4
 80018d6:	f000 f9dd 	bl	8001c94 <GenerateLow>
 80018da:	e13e      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'P'){
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b50      	cmp	r3, #80	; 0x50
 80018e2:	d10d      	bne.n	8001900 <DeserializeConfiguration+0x254>
				GenerateParabola(orange->shape, atoi(configurationParameters[1]), (65535/512));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f103 040c 	add.w	r4, r3, #12
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f009 faad 	bl	800ae4c <atoi>
 80018f2:	4603      	mov	r3, r0
 80018f4:	227f      	movs	r2, #127	; 0x7f
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f000 fa71 	bl	8001de0 <GenerateParabola>
 80018fe:	e12c      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'R'){
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b52      	cmp	r3, #82	; 0x52
 8001906:	d10d      	bne.n	8001924 <DeserializeConfiguration+0x278>
				GenerateRamp(orange->shape, atoi(configurationParameters[1]), (65535/512));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f103 040c 	add.w	r4, r3, #12
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4618      	mov	r0, r3
 8001912:	f009 fa9b 	bl	800ae4c <atoi>
 8001916:	4603      	mov	r3, r0
 8001918:	227f      	movs	r2, #127	; 0x7f
 800191a:	4619      	mov	r1, r3
 800191c:	4620      	mov	r0, r4
 800191e:	f000 f9d6 	bl	8001cce <GenerateRamp>
 8001922:	e11a      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'S'){
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b53      	cmp	r3, #83	; 0x53
 800192a:	f040 8116 	bne.w	8001b5a <DeserializeConfiguration+0x4ae>
				GenerateSquare(orange->shape, atoi(configurationParameters[1]), (65535/512));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f103 040c 	add.w	r4, r3, #12
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	4618      	mov	r0, r3
 8001938:	f009 fa88 	bl	800ae4c <atoi>
 800193c:	4603      	mov	r3, r0
 800193e:	227f      	movs	r2, #127	; 0x7f
 8001940:	4619      	mov	r1, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f000 fa03 	bl	8001d4e <GenerateSquare>
 8001948:	e107      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
		}
		// Red LED
		else if (*configurationParameters[0] == 'R'){
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b52      	cmp	r3, #82	; 0x52
 8001950:	f040 8083 	bne.w	8001a5a <DeserializeConfiguration+0x3ae>
			red->samples = atoi(configurationParameters[1]);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4618      	mov	r0, r3
 8001958:	f009 fa78 	bl	800ae4c <atoi>
 800195c:	4602      	mov	r2, r0
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	601a      	str	r2, [r3, #0]
			red->phase = atoi(configurationParameters[2]);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4618      	mov	r0, r3
 8001966:	f009 fa71 	bl	800ae4c <atoi>
 800196a:	4602      	mov	r2, r0
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	605a      	str	r2, [r3, #4]
			red->maximum = (65535/512);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	227f      	movs	r2, #127	; 0x7f
 8001974:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b43      	cmp	r3, #67	; 0x43
 800197c:	d112      	bne.n	80019a4 <DeserializeConfiguration+0x2f8>
				GenerateCossine(red->shape, atoi(configurationParameters[1]), (65535/512));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f103 040c 	add.w	r4, r3, #12
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4618      	mov	r0, r3
 8001988:	f009 fa60 	bl	800ae4c <atoi>
 800198c:	4603      	mov	r3, r0
 800198e:	227f      	movs	r2, #127	; 0x7f
 8001990:	4619      	mov	r1, r3
 8001992:	4620      	mov	r0, r4
 8001994:	f000 f8f0 	bl	8001b78 <GenerateCossine>
 8001998:	e0df      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
 800199a:	bf00      	nop
 800199c:	0800def0 	.word	0x0800def0
 80019a0:	0800def4 	.word	0x0800def4
			}
			else if (*configurationParameters[3] == 'H'){
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b48      	cmp	r3, #72	; 0x48
 80019aa:	d10d      	bne.n	80019c8 <DeserializeConfiguration+0x31c>
				GenerateHigh(red->shape, atoi(configurationParameters[1]), (65535/512));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f103 040c 	add.w	r4, r3, #12
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fa49 	bl	800ae4c <atoi>
 80019ba:	4603      	mov	r3, r0
 80019bc:	227f      	movs	r2, #127	; 0x7f
 80019be:	4619      	mov	r1, r3
 80019c0:	4620      	mov	r0, r4
 80019c2:	f000 f943 	bl	8001c4c <GenerateHigh>
 80019c6:	e0c8      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'L'){
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b4c      	cmp	r3, #76	; 0x4c
 80019ce:	d10d      	bne.n	80019ec <DeserializeConfiguration+0x340>
				GenerateLow(red->shape, atoi(configurationParameters[1]), (65535/512));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f103 040c 	add.w	r4, r3, #12
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fa37 	bl	800ae4c <atoi>
 80019de:	4603      	mov	r3, r0
 80019e0:	227f      	movs	r2, #127	; 0x7f
 80019e2:	4619      	mov	r1, r3
 80019e4:	4620      	mov	r0, r4
 80019e6:	f000 f955 	bl	8001c94 <GenerateLow>
 80019ea:	e0b6      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'P'){
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b50      	cmp	r3, #80	; 0x50
 80019f2:	d10d      	bne.n	8001a10 <DeserializeConfiguration+0x364>
				GenerateParabola(red->shape, atoi(configurationParameters[1]), (65535/512));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f103 040c 	add.w	r4, r3, #12
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 fa25 	bl	800ae4c <atoi>
 8001a02:	4603      	mov	r3, r0
 8001a04:	227f      	movs	r2, #127	; 0x7f
 8001a06:	4619      	mov	r1, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 f9e9 	bl	8001de0 <GenerateParabola>
 8001a0e:	e0a4      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'R'){
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b52      	cmp	r3, #82	; 0x52
 8001a16:	d10d      	bne.n	8001a34 <DeserializeConfiguration+0x388>
				GenerateRamp(red->shape, atoi(configurationParameters[1]), (65535/512));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f103 040c 	add.w	r4, r3, #12
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 fa13 	bl	800ae4c <atoi>
 8001a26:	4603      	mov	r3, r0
 8001a28:	227f      	movs	r2, #127	; 0x7f
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f000 f94e 	bl	8001cce <GenerateRamp>
 8001a32:	e092      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'S'){
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b53      	cmp	r3, #83	; 0x53
 8001a3a:	f040 808e 	bne.w	8001b5a <DeserializeConfiguration+0x4ae>
				GenerateSquare(red->shape, atoi(configurationParameters[1]), (65535/512));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f103 040c 	add.w	r4, r3, #12
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f009 fa00 	bl	800ae4c <atoi>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	227f      	movs	r2, #127	; 0x7f
 8001a50:	4619      	mov	r1, r3
 8001a52:	4620      	mov	r0, r4
 8001a54:	f000 f97b 	bl	8001d4e <GenerateSquare>
 8001a58:	e07f      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
		}
		// Blue LED
		else if (*configurationParameters[0] == 'B'){
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b42      	cmp	r3, #66	; 0x42
 8001a60:	d17b      	bne.n	8001b5a <DeserializeConfiguration+0x4ae>
			blue->samples = atoi(configurationParameters[1]);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 f9f1 	bl	800ae4c <atoi>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6e:	601a      	str	r2, [r3, #0]
			blue->phase = atoi(configurationParameters[2]);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f009 f9ea 	bl	800ae4c <atoi>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a7c:	605a      	str	r2, [r3, #4]
			blue->maximum = (65535/512);
 8001a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a80:	227f      	movs	r2, #127	; 0x7f
 8001a82:	609a      	str	r2, [r3, #8]
			if (*configurationParameters[3] == 'C'){
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b43      	cmp	r3, #67	; 0x43
 8001a8a:	d10d      	bne.n	8001aa8 <DeserializeConfiguration+0x3fc>
				GenerateCossine(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8e:	f103 040c 	add.w	r4, r3, #12
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f009 f9d9 	bl	800ae4c <atoi>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	227f      	movs	r2, #127	; 0x7f
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f000 f869 	bl	8001b78 <GenerateCossine>
 8001aa6:	e058      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'H'){
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b48      	cmp	r3, #72	; 0x48
 8001aae:	d10d      	bne.n	8001acc <DeserializeConfiguration+0x420>
				GenerateHigh(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab2:	f103 040c 	add.w	r4, r3, #12
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f009 f9c7 	bl	800ae4c <atoi>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	227f      	movs	r2, #127	; 0x7f
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f000 f8c1 	bl	8001c4c <GenerateHigh>
 8001aca:	e046      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'L'){
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ad2:	d10d      	bne.n	8001af0 <DeserializeConfiguration+0x444>
				GenerateLow(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad6:	f103 040c 	add.w	r4, r3, #12
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f009 f9b5 	bl	800ae4c <atoi>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	227f      	movs	r2, #127	; 0x7f
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f000 f8d3 	bl	8001c94 <GenerateLow>
 8001aee:	e034      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'P'){
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b50      	cmp	r3, #80	; 0x50
 8001af6:	d10d      	bne.n	8001b14 <DeserializeConfiguration+0x468>
				GenerateParabola(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afa:	f103 040c 	add.w	r4, r3, #12
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f009 f9a3 	bl	800ae4c <atoi>
 8001b06:	4603      	mov	r3, r0
 8001b08:	227f      	movs	r2, #127	; 0x7f
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f000 f967 	bl	8001de0 <GenerateParabola>
 8001b12:	e022      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'R'){
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b52      	cmp	r3, #82	; 0x52
 8001b1a:	d10d      	bne.n	8001b38 <DeserializeConfiguration+0x48c>
				GenerateRamp(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1e:	f103 040c 	add.w	r4, r3, #12
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f009 f991 	bl	800ae4c <atoi>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	227f      	movs	r2, #127	; 0x7f
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4620      	mov	r0, r4
 8001b32:	f000 f8cc 	bl	8001cce <GenerateRamp>
 8001b36:	e010      	b.n	8001b5a <DeserializeConfiguration+0x4ae>
			}
			else if (*configurationParameters[3] == 'S'){
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b53      	cmp	r3, #83	; 0x53
 8001b3e:	d10c      	bne.n	8001b5a <DeserializeConfiguration+0x4ae>
				GenerateSquare(blue->shape, atoi(configurationParameters[1]), (65535/512));
 8001b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b42:	f103 040c 	add.w	r4, r3, #12
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f009 f97f 	bl	800ae4c <atoi>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	227f      	movs	r2, #127	; 0x7f
 8001b52:	4619      	mov	r1, r3
 8001b54:	4620      	mov	r0, r4
 8001b56:	f000 f8fa 	bl	8001d4e <GenerateSquare>
	for(int index = 0; index < 4; index++){
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	f77f adc9 	ble.w	80016fa <DeserializeConfiguration+0x4e>
			}
		}
	}
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3744      	adds	r7, #68	; 0x44
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0000      	movs	r0, r0
	...

08001b78 <GenerateCossine>:

// Generates cosine wave according to the received parameters
void GenerateCossine(int *cosinusoid, int samples, int maximum){
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	float theta;
	float phases = 6.28/samples;
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f7fe fcc5 	bl	8000514 <__aeabi_i2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	a12d      	add	r1, pc, #180	; (adr r1, 8001c44 <GenerateCossine+0xcc>)
 8001b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b94:	f7fe fe52 	bl	800083c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe fffa 	bl	8000b98 <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < samples; i++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	e03c      	b.n	8001c28 <GenerateCossine+0xb0>
		theta = phases * i;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a05 	vstr	s15, [r7, #20]
		cosinusoid[i] = floor(maximum*(cos(theta)+1));
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fca5 	bl	8000514 <__aeabi_i2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7fe fcb2 	bl	8000538 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f00a fa20 	bl	800c020 <cos>
 8001be0:	ec51 0b10 	vmov	r0, r1, d0
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <GenerateCossine+0xc8>)
 8001bea:	f7fe fb47 	bl	800027c <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fcf7 	bl	80005e8 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	ec43 2b17 	vmov	d7, r2, r3
 8001c02:	eeb0 0a47 	vmov.f32	s0, s14
 8001c06:	eef0 0a67 	vmov.f32	s1, s15
 8001c0a:	f00a fa59 	bl	800c0c0 <floor>
 8001c0e:	ec51 0b10 	vmov	r0, r1, d0
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	18d4      	adds	r4, r2, r3
 8001c1a:	f7fe ff95 	bl	8000b48 <__aeabi_d2iz>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbbe      	blt.n	8001bae <GenerateCossine+0x36>
	}
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	3ff00000 	.word	0x3ff00000
 8001c44:	51eb851f 	.word	0x51eb851f
 8001c48:	40191eb8 	.word	0x40191eb8

08001c4c <GenerateHigh>:

// Generates constant high according to the received parameters
void GenerateHigh(int *fixed, int samples, int maximum){
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < samples; i++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e011      	b.n	8001c82 <GenerateHigh+0x36>
		fixed[i] = floor(maximum);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fc58 	bl	8000514 <__aeabi_i2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	0089      	lsls	r1, r1, #2
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	1844      	adds	r4, r0, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ff68 	bl	8000b48 <__aeabi_d2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbe9      	blt.n	8001c5e <GenerateHigh+0x12>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}

08001c94 <GenerateLow>:

// Generates constant low according to the received parameters
void GenerateLow(int *fixed, int samples, int maximum){
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < samples; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e008      	b.n	8001cb8 <GenerateLow+0x24>
		fixed[i] = 0;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < samples; i++){
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf2      	blt.n	8001ca6 <GenerateLow+0x12>
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <GenerateRamp>:

// Generates ramp wave according to the received parameters
void GenerateRamp(int *ramp, int samples, int maximum){
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b087      	sub	sp, #28
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
	float theta = maximum/(float)samples;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e01f      	b.n	8001d3c <GenerateRamp+0x6e>
		ramp[i] = floor(i*theta);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	ee17 0a90 	vmov	r0, s15
 8001d12:	f7fe fc11 	bl	8000538 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b10 	vmov	d0, r2, r3
 8001d1e:	f00a f9cf 	bl	800c0c0 <floor>
 8001d22:	ec51 0b10 	vmov	r0, r1, d0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	18d4      	adds	r4, r2, r3
 8001d2e:	f7fe ff0b 	bl	8000b48 <__aeabi_d2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbdb      	blt.n	8001cfc <GenerateRamp+0x2e>
	}
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}

08001d4e <GenerateSquare>:

// Generates square wave according to the received parameters
void GenerateSquare(int *square, int samples, int maximum){
 8001d4e:	b5b0      	push	{r4, r5, r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < floor(samples/2); i++){
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e008      	b.n	8001d72 <GenerateSquare+0x24>
		square[i] = maximum;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < floor(samples/2); i++){
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7fe fbce 	bl	8000514 <__aeabi_i2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0fda      	lsrs	r2, r3, #31
 8001d80:	4413      	add	r3, r2
 8001d82:	105b      	asrs	r3, r3, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbc5 	bl	8000514 <__aeabi_i2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fe9b 	bl	8000acc <__aeabi_dcmplt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e1      	bne.n	8001d60 <GenerateSquare+0x12>
	}
	for (int i = floor(samples/2); i < samples; i++){
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0fda      	lsrs	r2, r3, #31
 8001da0:	4413      	add	r3, r2
 8001da2:	105b      	asrs	r3, r3, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbb5 	bl	8000514 <__aeabi_i2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fec9 	bl	8000b48 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e008      	b.n	8001dce <GenerateSquare+0x80>
		square[i] = 0;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	for (int i = floor(samples/2); i < samples; i++){
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	dbf2      	blt.n	8001dbc <GenerateSquare+0x6e>
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}

08001de0 <GenerateParabola>:

// Generates parabola wave according to the received parameters
void GenerateParabola(int *parabola, int samples, int maximum){
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	float a = (4*maximum)/(pow(samples,2));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb8f 	bl	8000514 <__aeabi_i2d>
 8001df6:	4604      	mov	r4, r0
 8001df8:	460d      	mov	r5, r1
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f7fe fb8a 	bl	8000514 <__aeabi_i2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001f18 <GenerateParabola+0x138>
 8001e08:	ec43 2b10 	vmov	d0, r2, r3
 8001e0c:	f00a f9d8 	bl	800c1c0 <pow>
 8001e10:	ec53 2b10 	vmov	r2, r3, d0
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fd10 	bl	800083c <__aeabi_ddiv>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe feb8 	bl	8000b98 <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	61bb      	str	r3, [r7, #24]
	float b = -(4*maximum)/(float)samples;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	079b      	lsls	r3, r3, #30
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = maximum;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < samples; i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e050      	b.n	8001f06 <GenerateParabola+0x126>
		parabola[i] = floor(a*pow(i,2) + b*i + c);
 8001e64:	69b8      	ldr	r0, [r7, #24]
 8001e66:	f7fe fb67 	bl	8000538 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	69f8      	ldr	r0, [r7, #28]
 8001e70:	f7fe fb50 	bl	8000514 <__aeabi_i2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8001f18 <GenerateParabola+0x138>
 8001e7c:	ec43 2b10 	vmov	d0, r2, r3
 8001e80:	f00a f99e 	bl	800c1c0 <pow>
 8001e84:	ec53 2b10 	vmov	r2, r3, d0
 8001e88:	4620      	mov	r0, r4
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	f7fe fbac 	bl	80005e8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	ee17 0a90 	vmov	r0, s15
 8001eae:	f7fe fb43 	bl	8000538 <__aeabi_f2d>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe f9df 	bl	800027c <__adddf3>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f7fe fb36 	bl	8000538 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe f9d2 	bl	800027c <__adddf3>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	ec43 2b17 	vmov	d7, r2, r3
 8001ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee4:	eef0 0a67 	vmov.f32	s1, s15
 8001ee8:	f00a f8ea 	bl	800c0c0 <floor>
 8001eec:	ec51 0b10 	vmov	r0, r1, d0
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	18d4      	adds	r4, r2, r3
 8001ef8:	f7fe fe26 	bl	8000b48 <__aeabi_d2iz>
 8001efc:	4603      	mov	r3, r0
 8001efe:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < samples; i++){
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3301      	adds	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbaa      	blt.n	8001e64 <GenerateParabola+0x84>
	}
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40000000 	.word	0x40000000

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0x8>
	...

08001f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6a:	2007      	movs	r0, #7
 8001f6c:	f000 fc50 	bl	8002810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_I2C_MspInit+0x84>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12c      	bne.n	8001ff8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001fba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480c      	ldr	r0, [pc, #48]	; (8002008 <HAL_I2C_MspInit+0x8c>)
 8001fd8:	f000 fcee 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_I2C_MspInit+0x88>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40005400 	.word	0x40005400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400

0800200c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_I2S_MspInit+0xc0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d14a      	bne.n	80020c4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_I2S_MspInit+0xc4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002082:	2310      	movs	r3, #16
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002092:	2306      	movs	r3, #6
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <HAL_I2S_MspInit+0xc8>)
 800209e:	f000 fc8b 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80020a2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020b4:	2306      	movs	r3, #6
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <HAL_I2S_MspInit+0xcc>)
 80020c0:	f000 fc7a 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40003c00 	.word	0x40003c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020800 	.word	0x40020800

080020dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_SPI_MspInit+0x84>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12b      	bne.n	8002156 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_SPI_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002136:	23e0      	movs	r3, #224	; 0xe0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002146:	2305      	movs	r3, #5
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_SPI_MspInit+0x8c>)
 8002152:	f000 fc31 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40013000 	.word	0x40013000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_TIM_Base_MspInit+0x3c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10d      	bne.n	800219a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_TIM_Base_MspInit+0x40>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_TIM_Base_MspInit+0x40>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_TIM_Base_MspInit+0x40>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_TIM_MspPostInit+0x68>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d11e      	bne.n	8002210 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_TIM_MspPostInit+0x6c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_TIM_MspPostInit+0x6c>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_TIM_MspPostInit+0x6c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002200:	2302      	movs	r3, #2
 8002202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4619      	mov	r1, r3
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <HAL_TIM_MspPostInit+0x70>)
 800220c:	f000 fbd4 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40000800 	.word	0x40000800
 800221c:	40023800 	.word	0x40023800
 8002220:	40020c00 	.word	0x40020c00

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_UART_MspInit+0x94>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d133      	bne.n	80022ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_UART_MspInit+0x98>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_UART_MspInit+0x98>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800227e:	230c      	movs	r3, #12
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228e:	2307      	movs	r3, #7
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4809      	ldr	r0, [pc, #36]	; (80022c0 <HAL_UART_MspInit+0x9c>)
 800229a:	f000 fb8d 	bl	80029b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2026      	movs	r0, #38	; 0x26
 80022a4:	f000 fabf 	bl	8002826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022a8:	2026      	movs	r0, #38	; 0x26
 80022aa:	f000 fad8 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40004400 	.word	0x40004400
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <NMI_Handler+0x4>

080022ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <MemManage_Handler+0x4>

080022d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002310:	f000 f96a 	bl	80025e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}

08002318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <USART2_IRQHandler+0x10>)
 800231e:	f004 fd97 	bl	8006e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000409c 	.word	0x2000409c

0800232c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <OTG_FS_IRQHandler+0x10>)
 8002332:	f000 ff61 	bl	80031f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20004504 	.word	0x20004504

08002340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_kill>:

int _kill(int pid, int sig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800235a:	f008 fd7b 	bl	800ae54 <__errno>
 800235e:	4603      	mov	r3, r0
 8002360:	2216      	movs	r2, #22
 8002362:	601a      	str	r2, [r3, #0]
	return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_exit>:

void _exit (int status)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffe7 	bl	8002350 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002382:	e7fe      	b.n	8002382 <_exit+0x12>

08002384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e00a      	b.n	80023ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002396:	f3af 8000 	nop.w
 800239a:	4601      	mov	r1, r0
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	60ba      	str	r2, [r7, #8]
 80023a2:	b2ca      	uxtb	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf0      	blt.n	8002396 <_read+0x12>
	}

return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e009      	b.n	80023e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf1      	blt.n	80023d0 <_write+0x12>
	}
	return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_close>:

int _close(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241e:	605a      	str	r2, [r3, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_isatty>:

int _isatty(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return 1;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f008 fce0 	bl	800ae54 <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	220c      	movs	r2, #12
 8002498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20020000 	.word	0x20020000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	200000e8 	.word	0x200000e8
 80024c8:	20004818 	.word	0x20004818

080024cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <SystemInit+0x20>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <SystemInit+0x20>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024f6:	490e      	ldr	r1, [pc, #56]	; (8002530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800250c:	4c0b      	ldr	r4, [pc, #44]	; (800253c <LoopFillZerobss+0x26>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800251a:	f7ff ffd7 	bl	80024cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f008 fc9f 	bl	800ae60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002522:	f7fe fd05 	bl	8000f30 <main>
  bx  lr    
 8002526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002530:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002534:	0800e388 	.word	0x0800e388
  ldr r2, =_sbss
 8002538:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800253c:	20004818 	.word	0x20004818

08002540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>
	...

08002544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_Init+0x40>)
 800254e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_Init+0x40>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_Init+0x40>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256c:	2003      	movs	r0, #3
 800256e:	f000 f94f 	bl	8002810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f808 	bl	8002588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002578:	f7ff fcd8 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00

08002588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x54>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x58>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259e:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f967 	bl	800287a <HAL_SYSTICK_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00e      	b.n	80025d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d80a      	bhi.n	80025d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025bc:	2200      	movs	r2, #0
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f000 f92f 	bl	8002826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <HAL_InitTick+0x5c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000038 	.word	0x20000038
 80025e0:	20000040 	.word	0x20000040
 80025e4:	2000003c 	.word	0x2000003c

080025e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x20>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x24>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_IncTick+0x24>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000040 	.word	0x20000040
 800260c:	20004128 	.word	0x20004128

08002610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_GetTick+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20004128 	.word	0x20004128

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff ffee 	bl	8002610 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d005      	beq.n	800264e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_Delay+0x44>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264e:	bf00      	nop
 8002650:	f7ff ffde 	bl	8002610 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	d8f7      	bhi.n	8002650 <HAL_Delay+0x28>
  {
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000040 	.word	0x20000040

08002670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <__NVIC_GetPriorityGrouping+0x18>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db0b      	blt.n	80026fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4907      	ldr	r1, [pc, #28]	; (800270c <__NVIC_EnableIRQ+0x38>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2001      	movs	r0, #1
 80026f6:	fa00 f202 	lsl.w	r2, r0, r2
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	; (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027dc:	d301      	bcc.n	80027e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027de:	2301      	movs	r3, #1
 80027e0:	e00f      	b.n	8002802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <SysTick_Config+0x40>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ea:	210f      	movs	r1, #15
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f7ff ff8e 	bl	8002710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SysTick_Config+0x40>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Config+0x40>)
 80027fc:	2207      	movs	r2, #7
 80027fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff29 	bl	8002670 <__NVIC_SetPriorityGrouping>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff ff3e 	bl	80026b8 <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff8e 	bl	8002764 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5d 	bl	8002710 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff31 	bl	80026d4 <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffa2 	bl	80027cc <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff feb6 	bl	8002610 <HAL_GetTick>
 80028a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d008      	beq.n	80028c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e052      	b.n	800296a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0216 	bic.w	r2, r2, #22
 80028d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <HAL_DMA_Abort+0x62>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0208 	bic.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002914:	e013      	b.n	800293e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002916:	f7ff fe7b 	bl	8002610 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b05      	cmp	r3, #5
 8002922:	d90c      	bls.n	800293e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e015      	b.n	800296a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e4      	bne.n	8002916 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d004      	beq.n	8002990 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e00c      	b.n	80029aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2205      	movs	r2, #5
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e16b      	b.n	8002cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 815a 	bne.w	8002ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b4 	beq.w	8002ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a5f      	ldr	r2, [pc, #380]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_GPIO_Init+0x310>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_GPIO_Init+0x314>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02b      	beq.n	8002bde <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_GPIO_Init+0x318>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d025      	beq.n	8002bda <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_GPIO_Init+0x31c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4f      	ldr	r2, [pc, #316]	; (8002cd8 <HAL_GPIO_Init+0x320>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x216>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x212>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_GPIO_Init+0x32c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x20e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_GPIO_Init+0x330>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x20a>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e00e      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <HAL_GPIO_Init+0x310>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae90 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40021400 	.word	0x40021400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021c00 	.word	0x40021c00
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d0c:	e003      	b.n	8002d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d24:	b08f      	sub	sp, #60	; 0x3c
 8002d26:	af0a      	add	r7, sp, #40	; 0x28
 8002d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e054      	b.n	8002dde <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f007 fdd2 	bl	800a8f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2203      	movs	r2, #3
 8002d58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 ff28 	bl	8007bc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	687e      	ldr	r6, [r7, #4]
 8002d80:	466d      	mov	r5, sp
 8002d82:	f106 0410 	add.w	r4, r6, #16
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d96:	1d33      	adds	r3, r6, #4
 8002d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9a:	6838      	ldr	r0, [r7, #0]
 8002d9c:	f004 fea2 	bl	8007ae4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 ff1f 	bl	8007bea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	687e      	ldr	r6, [r7, #4]
 8002db4:	466d      	mov	r5, sp
 8002db6:	f106 0410 	add.w	r4, r6, #16
 8002dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dca:	1d33      	adds	r3, r6, #4
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f005 f886 	bl	8007ee0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002de6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b089      	sub	sp, #36	; 0x24
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	4608      	mov	r0, r1
 8002df0:	4611      	mov	r1, r2
 8002df2:	461a      	mov	r2, r3
 8002df4:	4603      	mov	r3, r0
 8002df6:	70fb      	strb	r3, [r7, #3]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70bb      	strb	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_HCD_HC_Init+0x28>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e076      	b.n	8002efc <HAL_HCD_HC_Init+0x116>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333d      	adds	r3, #61	; 0x3d
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3338      	adds	r3, #56	; 0x38
 8002e36:	787a      	ldrb	r2, [r7, #1]
 8002e38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3340      	adds	r3, #64	; 0x40
 8002e48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3339      	adds	r3, #57	; 0x39
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	333f      	adds	r3, #63	; 0x3f
 8002e6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	78ba      	ldrb	r2, [r7, #2]
 8002e76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e7a:	b2d0      	uxtb	r0, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	333a      	adds	r3, #58	; 0x3a
 8002e88:	4602      	mov	r2, r0
 8002e8a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da09      	bge.n	8002ea8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	333b      	adds	r3, #59	; 0x3b
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e008      	b.n	8002eba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	333b      	adds	r3, #59	; 0x3b
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	333c      	adds	r3, #60	; 0x3c
 8002ec8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ecc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	787c      	ldrb	r4, [r7, #1]
 8002ed4:	78ba      	ldrb	r2, [r7, #2]
 8002ed6:	78f9      	ldrb	r1, [r7, #3]
 8002ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4623      	mov	r3, r4
 8002eea:	f005 f973 	bl	80081d4 <USB_HC_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_HCD_HC_Halt+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e00f      	b.n	8002f42 <HAL_HCD_HC_Halt+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 fbaf 	bl	8008696 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	70fb      	strb	r3, [r7, #3]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70bb      	strb	r3, [r7, #2]
 8002f62:	4613      	mov	r3, r2
 8002f64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	333b      	adds	r3, #59	; 0x3b
 8002f74:	78ba      	ldrb	r2, [r7, #2]
 8002f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333f      	adds	r3, #63	; 0x3f
 8002f86:	787a      	ldrb	r2, [r7, #1]
 8002f88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f8a:	7c3b      	ldrb	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d112      	bne.n	8002fb6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3342      	adds	r3, #66	; 0x42
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	333d      	adds	r3, #61	; 0x3d
 8002fb0:	7f3a      	ldrb	r2, [r7, #28]
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e008      	b.n	8002fc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3342      	adds	r3, #66	; 0x42
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	f200 80c6 	bhi.w	800315c <HAL_HCD_HC_SubmitRequest+0x210>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08003149 	.word	0x08003149
 8002fe0:	0800304d 	.word	0x0800304d
 8002fe4:	080030cb 	.word	0x080030cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fe8:	7c3b      	ldrb	r3, [r7, #16]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 80b8 	bne.w	8003160 <HAL_HCD_HC_SubmitRequest+0x214>
 8002ff0:	78bb      	ldrb	r3, [r7, #2]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 80b4 	bne.w	8003160 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ff8:	8b3b      	ldrh	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3355      	adds	r3, #85	; 0x55
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3355      	adds	r3, #85	; 0x55
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003036:	e093      	b.n	8003160 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3342      	adds	r3, #66	; 0x42
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]
      break;
 800304a:	e089      	b.n	8003160 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3355      	adds	r3, #85	; 0x55
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3342      	adds	r3, #66	; 0x42
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003078:	e073      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3342      	adds	r3, #66	; 0x42
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
      break;
 800308c:	e069      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3354      	adds	r3, #84	; 0x54
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3342      	adds	r3, #66	; 0x42
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
      break;
 80030b4:	e055      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3342      	adds	r3, #66	; 0x42
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]
      break;
 80030c8:	e04b      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030ca:	78bb      	ldrb	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11d      	bne.n	800310c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3355      	adds	r3, #85	; 0x55
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3342      	adds	r3, #66	; 0x42
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f6:	e034      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3342      	adds	r3, #66	; 0x42
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      break;
 800310a:	e02a      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3354      	adds	r3, #84	; 0x54
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3342      	adds	r3, #66	; 0x42
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	e016      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3342      	adds	r3, #66	; 0x42
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
      break;
 8003146:	e00c      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3342      	adds	r3, #66	; 0x42
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
      break;
 800315a:	e002      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003160:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3344      	adds	r3, #68	; 0x44
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	8b3a      	ldrh	r2, [r7, #24]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	202c      	movs	r0, #44	; 0x2c
 800317c:	fb00 f303 	mul.w	r3, r0, r3
 8003180:	440b      	add	r3, r1
 8003182:	334c      	adds	r3, #76	; 0x4c
 8003184:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3360      	adds	r3, #96	; 0x60
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3350      	adds	r3, #80	; 0x50
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3339      	adds	r3, #57	; 0x39
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	222c      	movs	r2, #44	; 0x2c
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	3338      	adds	r3, #56	; 0x38
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	18d1      	adds	r1, r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	f005 f902 	bl	80083f0 <USB_HC_StartXfer>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fe25 	bl	8007e5e <USB_GetMode>
 8003214:	4603      	mov	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	f040 80f6 	bne.w	8003408 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fe09 	bl	8007e38 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80ec 	beq.w	8003406 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f004 fe00 	bl	8007e38 <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d104      	bne.n	800324e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800324c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f004 fdf0 	bl	8007e38 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003262:	d104      	bne.n	800326e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fde0 	bl	8007e38 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800327e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003282:	d104      	bne.n	800328e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800328c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fdd0 	bl	8007e38 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d103      	bne.n	80032aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2202      	movs	r2, #2
 80032a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fdc2 	bl	8007e38 <USB_ReadInterrupts>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032be:	d11c      	bne.n	80032fa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032da:	2110      	movs	r1, #16
 80032dc:	6938      	ldr	r0, [r7, #16]
 80032de:	f004 fcd1 	bl	8007c84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032e2:	6938      	ldr	r0, [r7, #16]
 80032e4:	f004 fcf2 	bl	8007ccc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f004 feaa 	bl	8008048 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f007 fb7d 	bl	800a9f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fd9a 	bl	8007e38 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330e:	d102      	bne.n	8003316 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 fa03 	bl	800471c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fd8c 	bl	8007e38 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d106      	bne.n	8003338 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f007 fb46 	bl	800a9bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2208      	movs	r2, #8
 8003336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f004 fd7b 	bl	8007e38 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b10      	cmp	r3, #16
 800334a:	d101      	bne.n	8003350 <HAL_HCD_IRQHandler+0x158>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_HCD_IRQHandler+0x15a>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0210 	bic.w	r2, r2, #16
 8003364:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f001 f906 	bl	8004578 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0210 	orr.w	r2, r2, #16
 800337a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f004 fd59 	bl	8007e38 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003390:	d13a      	bne.n	8003408 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 f96c 	bl	8008674 <USB_HC_ReadInterrupt>
 800339c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e025      	b.n	80033f0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d018      	beq.n	80033ea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ce:	d106      	bne.n	80033de <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8ab 	bl	8003532 <HCD_HC_IN_IRQHandler>
 80033dc:	e005      	b.n	80033ea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fcc6 	bl	8003d76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3301      	adds	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3d4      	bcc.n	80033a4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	e000      	b.n	8003408 <HAL_HCD_IRQHandler+0x210>
      return;
 8003406:	bf00      	nop
    }
  }
}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_HCD_Start+0x16>
 8003420:	2302      	movs	r3, #2
 8003422:	e013      	b.n	800344c <HAL_HCD_Start+0x3e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fe6c 	bl	8008110 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fbb2 	bl	8007ba6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_HCD_Stop+0x16>
 8003466:	2302      	movs	r3, #2
 8003468:	e00d      	b.n	8003486 <HAL_HCD_Stop+0x32>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f005 fa66 	bl	8008948 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fe0e 	bl	80080bc <USB_ResetPort>
 80034a0:	4603      	mov	r3, r0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3360      	adds	r3, #96	; 0x60
 80034c4:	781b      	ldrb	r3, [r3, #0]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3350      	adds	r3, #80	; 0x50
 80034ec:	681b      	ldr	r3, [r3, #0]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fe52 	bl	80081b0 <USB_GetCurrentFrame>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fe2d 	bl	8008182 <USB_GetHostSpeed>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d119      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	461a      	mov	r2, r3
 8003570:	2304      	movs	r3, #4
 8003572:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	440a      	add	r2, r1
 800358a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	60d3      	str	r3, [r2, #12]
 8003594:	e101      	b.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ac:	d12b      	bne.n	8003606 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3361      	adds	r3, #97	; 0x61
 80035d0:	2207      	movs	r2, #7
 80035d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f005 f849 	bl	8008696 <USB_HC_Halt>
 8003604:	e0c9      	b.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d109      	bne.n	8003630 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2320      	movs	r3, #32
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	e0b4      	b.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d133      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	440a      	add	r2, r1
 800365c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3361      	adds	r3, #97	; 0x61
 8003674:	2205      	movs	r2, #5
 8003676:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2310      	movs	r3, #16
 8003688:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	461a      	mov	r2, r3
 8003698:	2308      	movs	r3, #8
 800369a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fff5 	bl	8008696 <USB_HC_Halt>
 80036ac:	e075      	b.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d134      	bne.n	8003730 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	0151      	lsls	r1, r2, #5
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	440a      	add	r2, r1
 80036dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3361      	adds	r3, #97	; 0x61
 80036f4:	2208      	movs	r2, #8
 80036f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2310      	movs	r3, #16
 8003708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f004 ffb4 	bl	8008696 <USB_HC_Halt>
 800372e:	e034      	b.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d129      	bne.n	800379a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3361      	adds	r3, #97	; 0x61
 8003774:	2206      	movs	r2, #6
 8003776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f004 ff87 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d122      	bne.n	80037f8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 ff5a 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ee:	461a      	mov	r2, r3
 80037f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80037f6:	e2ba      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 811b 	bne.w	8003a46 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d019      	beq.n	800384c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	3348      	adds	r3, #72	; 0x48
 8003826:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	440b      	add	r3, r1
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	202c      	movs	r0, #44	; 0x2c
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	440b      	add	r3, r1
 8003848:	3350      	adds	r3, #80	; 0x50
 800384a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3361      	adds	r3, #97	; 0x61
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	335c      	adds	r3, #92	; 0x5c
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	461a      	mov	r2, r3
 800387e:	2301      	movs	r3, #1
 8003880:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	333f      	adds	r3, #63	; 0x3f
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	333f      	adds	r3, #63	; 0x3f
 80038a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d121      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 fede 	bl	8008696 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e6:	461a      	mov	r2, r3
 80038e8:	2310      	movs	r3, #16
 80038ea:	6093      	str	r3, [r2, #8]
 80038ec:	e066      	b.n	80039bc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	333f      	adds	r3, #63	; 0x3f
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d127      	bne.n	8003952 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	440a      	add	r2, r1
 8003918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003920:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	b2d9      	uxtb	r1, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	202c      	movs	r0, #44	; 0x2c
 800393e:	fb00 f303 	mul.w	r3, r0, r3
 8003942:	4413      	add	r3, r2
 8003944:	3360      	adds	r3, #96	; 0x60
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f007 f860 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003950:	e034      	b.n	80039bc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	333f      	adds	r3, #63	; 0x3f
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d12a      	bne.n	80039bc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3360      	adds	r3, #96	; 0x60
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3354      	adds	r3, #84	; 0x54
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2d8      	uxtb	r0, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3354      	adds	r3, #84	; 0x54
 800399c:	4602      	mov	r2, r0
 800399e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	b2d9      	uxtb	r1, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	202c      	movs	r0, #44	; 0x2c
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f007 f82a 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d12b      	bne.n	8003a1c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3348      	adds	r3, #72	; 0x48
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	202c      	movs	r0, #44	; 0x2c
 80039da:	fb00 f202 	mul.w	r2, r0, r2
 80039de:	440a      	add	r2, r1
 80039e0:	3240      	adds	r2, #64	; 0x40
 80039e2:	8812      	ldrh	r2, [r2, #0]
 80039e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 81be 	beq.w	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3354      	adds	r3, #84	; 0x54
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2d8      	uxtb	r0, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3354      	adds	r3, #84	; 0x54
 8003a16:	4602      	mov	r2, r0
 8003a18:	701a      	strb	r2, [r3, #0]
}
 8003a1a:	e1a8      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3354      	adds	r3, #84	; 0x54
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2d8      	uxtb	r0, r3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3354      	adds	r3, #84	; 0x54
 8003a40:	4602      	mov	r2, r0
 8003a42:	701a      	strb	r2, [r3, #0]
}
 8003a44:	e193      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f040 8106 	bne.w	8003c6a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a78:	f023 0302 	bic.w	r3, r3, #2
 8003a7c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3361      	adds	r3, #97	; 0x61
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d109      	bne.n	8003aa6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3360      	adds	r3, #96	; 0x60
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e0c9      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3361      	adds	r3, #97	; 0x61
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d109      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3360      	adds	r3, #96	; 0x60
 8003ac8:	2205      	movs	r2, #5
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e0b5      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3361      	adds	r3, #97	; 0x61
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d009      	beq.n	8003af6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3361      	adds	r3, #97	; 0x61
 8003af0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d150      	bne.n	8003b98 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	335c      	adds	r3, #92	; 0x5c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	202c      	movs	r0, #44	; 0x2c
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	440b      	add	r3, r1
 8003b14:	335c      	adds	r3, #92	; 0x5c
 8003b16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	335c      	adds	r3, #92	; 0x5c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d912      	bls.n	8003b52 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	335c      	adds	r3, #92	; 0x5c
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3360      	adds	r3, #96	; 0x60
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b50:	e073      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3360      	adds	r3, #96	; 0x60
 8003b60:	2202      	movs	r2, #2
 8003b62:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b7a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b82:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b96:	e050      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3361      	adds	r3, #97	; 0x61
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d122      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3360      	adds	r3, #96	; 0x60
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e023      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3361      	adds	r3, #97	; 0x61
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b07      	cmp	r3, #7
 8003c04:	d119      	bne.n	8003c3a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	202c      	movs	r0, #44	; 0x2c
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	440b      	add	r3, r1
 8003c24:	335c      	adds	r3, #92	; 0x5c
 8003c26:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3360      	adds	r3, #96	; 0x60
 8003c36:	2204      	movs	r2, #4
 8003c38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	461a      	mov	r2, r3
 8003c48:	2302      	movs	r3, #2
 8003c4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	b2d9      	uxtb	r1, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	202c      	movs	r0, #44	; 0x2c
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f006 fed4 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c68:	e081      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d176      	bne.n	8003d6e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	333f      	adds	r3, #63	; 0x3f
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d121      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	335c      	adds	r3, #92	; 0x5c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fce0 	bl	8008696 <USB_HC_Halt>
 8003cd6:	e041      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	333f      	adds	r3, #63	; 0x3f
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	333f      	adds	r3, #63	; 0x3f
 8003cfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d12d      	bne.n	8003d5c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	335c      	adds	r3, #92	; 0x5c
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d120      	bne.n	8003d5c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3361      	adds	r3, #97	; 0x61
 8003d28:	2203      	movs	r2, #3
 8003d2a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 fc9d 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	6093      	str	r3, [r2, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d119      	bne.n	8003dda <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	2304      	movs	r3, #4
 8003db6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003dd8:	e3ca      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d13e      	bne.n	8003e6e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2320      	movs	r3, #32
 8003e00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	333d      	adds	r3, #61	; 0x3d
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 83ac 	bne.w	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	333d      	adds	r3, #61	; 0x3d
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	3360      	adds	r3, #96	; 0x60
 8003e38:	2202      	movs	r2, #2
 8003e3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 fc15 	bl	8008696 <USB_HC_Halt>
}
 8003e6c:	e380      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d122      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fbf0 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec8:	6093      	str	r3, [r2, #8]
}
 8003eca:	e351      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d150      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	335c      	adds	r3, #92	; 0x5c
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d111      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	333d      	adds	r3, #61	; 0x3d
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 fb9c 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3361      	adds	r3, #97	; 0x61
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
}
 8003f82:	e2f5      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d13c      	bne.n	8004014 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3361      	adds	r3, #97	; 0x61
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	333d      	adds	r3, #61	; 0x3d
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	335c      	adds	r3, #92	; 0x5c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fb4b 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	6093      	str	r3, [r2, #8]
}
 8004012:	e2ad      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b08      	cmp	r3, #8
 8004028:	d12a      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	2308      	movs	r3, #8
 800403a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	0151      	lsls	r1, r2, #5
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	440a      	add	r2, r1
 8004052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004056:	f043 0302 	orr.w	r3, r3, #2
 800405a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fb15 	bl	8008696 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3361      	adds	r3, #97	; 0x61
 800407a:	2205      	movs	r2, #5
 800407c:	701a      	strb	r2, [r3, #0]
}
 800407e:	e277      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d150      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	335c      	adds	r3, #92	; 0x5c
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3361      	adds	r3, #97	; 0x61
 80040b6:	2203      	movs	r2, #3
 80040b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	333d      	adds	r3, #61	; 0x3d
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d112      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	333c      	adds	r3, #60	; 0x3c
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	333d      	adds	r3, #61	; 0x3d
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	440a      	add	r2, r1
 800410a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f004 fab9 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2310      	movs	r3, #16
 8004134:	6093      	str	r3, [r2, #8]
}
 8004136:	e21b      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d174      	bne.n	8004238 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3361      	adds	r3, #97	; 0x61
 8004164:	2206      	movs	r2, #6
 8004166:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	440a      	add	r2, r1
 800417e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004182:	f043 0302 	orr.w	r3, r3, #2
 8004186:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fa7f 	bl	8008696 <USB_HC_Halt>
 8004198:	e044      	b.n	8004224 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	335c      	adds	r3, #92	; 0x5c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	202c      	movs	r0, #44	; 0x2c
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	440b      	add	r3, r1
 80041b8:	335c      	adds	r3, #92	; 0x5c
 80041ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	335c      	adds	r3, #92	; 0x5c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d920      	bls.n	8004212 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	335c      	adds	r3, #92	; 0x5c
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3360      	adds	r3, #96	; 0x60
 80041f0:	2204      	movs	r2, #4
 80041f2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	b2d9      	uxtb	r1, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	202c      	movs	r0, #44	; 0x2c
 80041fe:	fb00 f303 	mul.w	r3, r0, r3
 8004202:	4413      	add	r3, r2
 8004204:	3360      	adds	r3, #96	; 0x60
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f006 fc00 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004210:	e008      	b.n	8004224 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3360      	adds	r3, #96	; 0x60
 8004220:	2202      	movs	r2, #2
 8004222:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	6093      	str	r3, [r2, #8]
}
 8004236:	e19b      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	d134      	bne.n	80042ba <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	440a      	add	r2, r1
 8004266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 fa0b 	bl	8008696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	2310      	movs	r3, #16
 8004290:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	212c      	movs	r1, #44	; 0x2c
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	3361      	adds	r3, #97	; 0x61
 80042b4:	2208      	movs	r2, #8
 80042b6:	701a      	strb	r2, [r3, #0]
}
 80042b8:	e15a      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f040 814f 	bne.w	8004570 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ec:	f023 0302 	bic.w	r3, r3, #2
 80042f0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	212c      	movs	r1, #44	; 0x2c
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4413      	add	r3, r2
 80042fe:	3361      	adds	r3, #97	; 0x61
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d17d      	bne.n	8004402 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3360      	adds	r3, #96	; 0x60
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	333f      	adds	r3, #63	; 0x3f
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d00a      	beq.n	8004342 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	333f      	adds	r3, #63	; 0x3f
 800433a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800433c:	2b03      	cmp	r3, #3
 800433e:	f040 8100 	bne.w	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3355      	adds	r3, #85	; 0x55
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2d8      	uxtb	r0, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3355      	adds	r3, #85	; 0x55
 800436e:	4602      	mov	r2, r0
 8004370:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 80e3 	bne.w	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	334c      	adds	r3, #76	; 0x4c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80d8 	beq.w	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	334c      	adds	r3, #76	; 0x4c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	202c      	movs	r0, #44	; 0x2c
 80043a8:	fb00 f202 	mul.w	r2, r0, r2
 80043ac:	440a      	add	r2, r1
 80043ae:	3240      	adds	r2, #64	; 0x40
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	4413      	add	r3, r2
 80043b4:	3b01      	subs	r3, #1
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	202c      	movs	r0, #44	; 0x2c
 80043bc:	fb00 f202 	mul.w	r2, r0, r2
 80043c0:	440a      	add	r2, r1
 80043c2:	3240      	adds	r2, #64	; 0x40
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80b5 	beq.w	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3355      	adds	r3, #85	; 0x55
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	f083 0301 	eor.w	r3, r3, #1
 80043ec:	b2d8      	uxtb	r0, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	3355      	adds	r3, #85	; 0x55
 80043fc:	4602      	mov	r2, r0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e09f      	b.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	3361      	adds	r3, #97	; 0x61
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d109      	bne.n	800442a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3360      	adds	r3, #96	; 0x60
 8004424:	2202      	movs	r2, #2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e08b      	b.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	3361      	adds	r3, #97	; 0x61
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d109      	bne.n	8004452 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	3360      	adds	r3, #96	; 0x60
 800444c:	2202      	movs	r2, #2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e077      	b.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	3361      	adds	r3, #97	; 0x61
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d109      	bne.n	800447a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3360      	adds	r3, #96	; 0x60
 8004474:	2205      	movs	r2, #5
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e063      	b.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3361      	adds	r3, #97	; 0x61
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d009      	beq.n	80044a2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3361      	adds	r3, #97	; 0x61
 800449c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d14f      	bne.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	335c      	adds	r3, #92	; 0x5c
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	202c      	movs	r0, #44	; 0x2c
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	440b      	add	r3, r1
 80044c0:	335c      	adds	r3, #92	; 0x5c
 80044c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	335c      	adds	r3, #92	; 0x5c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d912      	bls.n	80044fe <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	212c      	movs	r1, #44	; 0x2c
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	335c      	adds	r3, #92	; 0x5c
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	3360      	adds	r3, #96	; 0x60
 80044f8:	2204      	movs	r2, #4
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e021      	b.n	8004542 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3360      	adds	r3, #96	; 0x60
 800450c:	2202      	movs	r2, #2
 800450e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004526:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800452e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4413      	add	r3, r2
 800454a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454e:	461a      	mov	r2, r3
 8004550:	2302      	movs	r3, #2
 8004552:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	b2d9      	uxtb	r1, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	202c      	movs	r0, #44	; 0x2c
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	4413      	add	r3, r2
 8004564:	3360      	adds	r3, #96	; 0x60
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f006 fa50 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004570:	bf00      	nop
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	0c5b      	lsrs	r3, r3, #17
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d004      	beq.n	80045be <HCD_RXQLVL_IRQHandler+0x46>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	f000 80a9 	beq.w	800470e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045bc:	e0aa      	b.n	8004714 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a6 	beq.w	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3344      	adds	r3, #68	; 0x44
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 809b 	beq.w	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3350      	adds	r3, #80	; 0x50
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	441a      	add	r2, r3
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	202c      	movs	r0, #44	; 0x2c
 80045f6:	fb00 f303 	mul.w	r3, r0, r3
 80045fa:	440b      	add	r3, r1
 80045fc:	334c      	adds	r3, #76	; 0x4c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d87a      	bhi.n	80046fa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3344      	adds	r3, #68	; 0x44
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	b292      	uxth	r2, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f003 fbb3 	bl	8007d88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3344      	adds	r3, #68	; 0x44
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	441a      	add	r2, r3
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	202c      	movs	r0, #44	; 0x2c
 800463c:	fb00 f303 	mul.w	r3, r0, r3
 8004640:	440b      	add	r3, r1
 8004642:	3344      	adds	r3, #68	; 0x44
 8004644:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	3350      	adds	r3, #80	; 0x50
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	441a      	add	r2, r3
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	202c      	movs	r0, #44	; 0x2c
 8004660:	fb00 f303 	mul.w	r3, r0, r3
 8004664:	440b      	add	r3, r1
 8004666:	3350      	adds	r3, #80	; 0x50
 8004668:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	0cdb      	lsrs	r3, r3, #19
 800467a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3340      	adds	r3, #64	; 0x40
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4293      	cmp	r3, r2
 8004696:	d13c      	bne.n	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d039      	beq.n	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046b4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	461a      	mov	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	212c      	movs	r1, #44	; 0x2c
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	4413      	add	r3, r2
 80046dc:	3354      	adds	r3, #84	; 0x54
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2d8      	uxtb	r0, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3354      	adds	r3, #84	; 0x54
 80046f4:	4602      	mov	r2, r0
 80046f6:	701a      	strb	r2, [r3, #0]
      break;
 80046f8:	e00b      	b.n	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3360      	adds	r3, #96	; 0x60
 8004708:	2204      	movs	r2, #4
 800470a:	701a      	strb	r2, [r3, #0]
      break;
 800470c:	e001      	b.n	8004712 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004712:	bf00      	nop
  }
}
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004748:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d10b      	bne.n	800476c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d102      	bne.n	8004764 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f006 f93a 	bl	800a9d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b08      	cmp	r3, #8
 8004774:	d132      	bne.n	80047dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f043 0308 	orr.w	r3, r3, #8
 800477c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d126      	bne.n	80047d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d113      	bne.n	80047b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800479a:	d106      	bne.n	80047aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 fc50 	bl	8008048 <USB_InitFSLSPClkSel>
 80047a8:	e011      	b.n	80047ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f003 fc49 	bl	8008048 <USB_InitFSLSPClkSel>
 80047b6:	e00a      	b.n	80047ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c6:	461a      	mov	r2, r3
 80047c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f006 f92c 	bl	800aa2c <HAL_HCD_PortEnabled_Callback>
 80047d4:	e002      	b.n	80047dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f006 f936 	bl	800aa48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d103      	bne.n	80047ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6013      	str	r3, [r2, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e12b      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fba6 	bl	8001f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004868:	f001 f9fc 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a81      	ldr	r2, [pc, #516]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d807      	bhi.n	8004888 <HAL_I2C_Init+0x84>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_I2C_Init+0x278>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e006      	b.n	8004896 <HAL_I2C_Init+0x92>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_I2C_Init+0x27c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0e7      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a78      	ldr	r2, [pc, #480]	; (8004a84 <HAL_I2C_Init+0x280>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	0c9b      	lsrs	r3, r3, #18
 80048a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a6a      	ldr	r2, [pc, #424]	; (8004a78 <HAL_I2C_Init+0x274>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <HAL_I2C_Init+0xd4>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	e009      	b.n	80048ec <HAL_I2C_Init+0xe8>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	4a69      	ldr	r2, [pc, #420]	; (8004a88 <HAL_I2C_Init+0x284>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	3301      	adds	r3, #1
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	495c      	ldr	r1, [pc, #368]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004908:	428b      	cmp	r3, r1
 800490a:	d819      	bhi.n	8004940 <HAL_I2C_Init+0x13c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e59      	subs	r1, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fbb1 f3f3 	udiv	r3, r1, r3
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004920:	400b      	ands	r3, r1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_I2C_Init+0x138>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e59      	subs	r1, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fbb1 f3f3 	udiv	r3, r1, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493a:	e051      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800493c:	2304      	movs	r3, #4
 800493e:	e04f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HAL_I2C_Init+0x168>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e58      	subs	r0, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e012      	b.n	8004992 <HAL_I2C_Init+0x18e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Init+0x196>
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <HAL_I2C_Init+0x1bc>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e58      	subs	r0, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	e00f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e58      	subs	r0, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	0099      	lsls	r1, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6809      	ldr	r1, [r1, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6911      	ldr	r1, [r2, #16]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	000186a0 	.word	0x000186a0
 8004a7c:	001e847f 	.word	0x001e847f
 8004a80:	003d08ff 	.word	0x003d08ff
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e128      	b.n	8004cf0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a90      	ldr	r2, [pc, #576]	; (8004cf8 <HAL_I2S_Init+0x26c>)
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fd faa7 	bl	800200c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ad4:	f023 030f 	bic.w	r3, r3, #15
 8004ad8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d060      	beq.n	8004bac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004af2:	2310      	movs	r3, #16
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e001      	b.n	8004afc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004af8:	2320      	movs	r3, #32
 8004afa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d802      	bhi.n	8004b0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f001 f9b4 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1a:	d125      	bne.n	8004b68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d010      	beq.n	8004b46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	3305      	adds	r3, #5
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e01f      	b.n	8004b86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	3305      	adds	r3, #5
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e00e      	b.n	8004b86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	3305      	adds	r3, #5
 8004b84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4a5c      	ldr	r2, [pc, #368]	; (8004cfc <HAL_I2S_Init+0x270>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e003      	b.n	8004bb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bac:	2302      	movs	r3, #2
 8004bae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d902      	bls.n	8004bc0 <HAL_I2S_Init+0x134>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	d907      	bls.n	8004bd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e08f      	b.n	8004cf0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	ea42 0103 	orr.w	r1, r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bee:	f023 030f 	bic.w	r3, r3, #15
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6851      	ldr	r1, [r2, #4]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68d2      	ldr	r2, [r2, #12]
 8004c00:	4311      	orrs	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6992      	ldr	r2, [r2, #24]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d161      	bne.n	8004ce0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <HAL_I2S_Init+0x274>)
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <HAL_I2S_Init+0x278>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2S_Init+0x1a4>
 8004c2c:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_I2S_Init+0x27c>)
 8004c2e:	e001      	b.n	8004c34 <HAL_I2S_Init+0x1a8>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	4932      	ldr	r1, [pc, #200]	; (8004d04 <HAL_I2S_Init+0x278>)
 8004c3c:	428a      	cmp	r2, r1
 8004c3e:	d101      	bne.n	8004c44 <HAL_I2S_Init+0x1b8>
 8004c40:	4a31      	ldr	r2, [pc, #196]	; (8004d08 <HAL_I2S_Init+0x27c>)
 8004c42:	e001      	b.n	8004c48 <HAL_I2S_Init+0x1bc>
 8004c44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c4c:	f023 030f 	bic.w	r3, r3, #15
 8004c50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_I2S_Init+0x278>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_I2S_Init+0x1d4>
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <HAL_I2S_Init+0x27c>)
 8004c5e:	e001      	b.n	8004c64 <HAL_I2S_Init+0x1d8>
 8004c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c64:	2202      	movs	r2, #2
 8004c66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <HAL_I2S_Init+0x278>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_I2S_Init+0x1ea>
 8004c72:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_I2S_Init+0x27c>)
 8004c74:	e001      	b.n	8004c7a <HAL_I2S_Init+0x1ee>
 8004c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c86:	d003      	beq.n	8004c90 <HAL_I2S_Init+0x204>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e001      	b.n	8004c9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <HAL_I2S_Init+0x278>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2S_Init+0x24c>
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_I2S_Init+0x27c>)
 8004cd6:	e001      	b.n	8004cdc <HAL_I2S_Init+0x250>
 8004cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cdc:	897a      	ldrh	r2, [r7, #10]
 8004cde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08004e03 	.word	0x08004e03
 8004cfc:	cccccccd 	.word	0xcccccccd
 8004d00:	08004f19 	.word	0x08004f19
 8004d04:	40003800 	.word	0x40003800
 8004d08:	40003400 	.word	0x40003400

08004d0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ffb8 	bl	8004d0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	b292      	uxth	r2, r2
 8004db8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10e      	bne.n	8004dfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff93 	bl	8004d20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d13a      	bne.n	8004e94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d109      	bne.n	8004e3c <I2S_IRQHandler+0x3a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d102      	bne.n	8004e3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ffb4 	bl	8004da4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d126      	bne.n	8004e94 <I2S_IRQHandler+0x92>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d11f      	bne.n	8004e94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff50 	bl	8004d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d136      	bne.n	8004f0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d109      	bne.n	8004ebe <I2S_IRQHandler+0xbc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d102      	bne.n	8004ebe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ff45 	bl	8004d48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d122      	bne.n	8004f0e <I2S_IRQHandler+0x10c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d11b      	bne.n	8004f0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f043 0204 	orr.w	r2, r3, #4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff13 	bl	8004d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4aa2      	ldr	r2, [pc, #648]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f32:	4ba2      	ldr	r3, [pc, #648]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f34:	e001      	b.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a9b      	ldr	r2, [pc, #620]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f50:	4b9a      	ldr	r3, [pc, #616]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f52:	e001      	b.n	8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f64:	d004      	beq.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 8099 	bne.w	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d107      	bne.n	8004f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f925 	bl	80051d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d107      	bne.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9c8 	bl	8005334 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d13a      	bne.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d035      	beq.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7e      	ldr	r2, [pc, #504]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004fc2:	4b7e      	ldr	r3, [pc, #504]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fc4:	e001      	b.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4979      	ldr	r1, [pc, #484]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fd2:	428b      	cmp	r3, r1
 8004fd4:	d101      	bne.n	8004fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fd6:	4b79      	ldr	r3, [pc, #484]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fd8:	e001      	b.n	8004fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fe2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ff2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f043 0202 	orr.w	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fe88 	bl	8004d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b08      	cmp	r3, #8
 800502c:	f040 80be 	bne.w	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80b8 	beq.w	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800504a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a59      	ldr	r2, [pc, #356]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005056:	4b59      	ldr	r3, [pc, #356]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005058:	e001      	b.n	800505e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4954      	ldr	r1, [pc, #336]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005066:	428b      	cmp	r3, r1
 8005068:	d101      	bne.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800506c:	e001      	b.n	8005072 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800506e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005076:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe4a 	bl	8004d34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a0:	e084      	b.n	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d107      	bne.n	80050bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8be 	bl	8005238 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8fd 	bl	80052d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d12f      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d02a      	beq.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005106:	e001      	b.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4929      	ldr	r1, [pc, #164]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005114:	428b      	cmp	r3, r1
 8005116:	d101      	bne.n	800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800511a:	e001      	b.n	8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800511c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0202 	orr.w	r2, r3, #2
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fdfa 	bl	8004d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b08      	cmp	r3, #8
 8005148:	d131      	bne.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d02c      	beq.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005160:	e001      	b.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4912      	ldr	r1, [pc, #72]	; (80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800516e:	428b      	cmp	r3, r1
 8005170:	d101      	bne.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005174:	e001      	b.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800517e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800518e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	f043 0204 	orr.w	r2, r3, #4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fdc5 	bl	8004d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	e000      	b.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051ac:	bf00      	nop
}
 80051ae:	bf00      	nop
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40003800 	.word	0x40003800
 80051bc:	40003400 	.word	0x40003400

080051c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	1c99      	adds	r1, r3, #2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6251      	str	r1, [r2, #36]	; 0x24
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d113      	bne.n	800522e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ffc9 	bl	80051c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c99      	adds	r1, r3, #2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6251      	str	r1, [r2, #36]	; 0x24
 800524a:	8819      	ldrh	r1, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <I2SEx_TxISR_I2SExt+0x22>
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <I2SEx_TxISR_I2SExt+0x94>)
 8005258:	e001      	b.n	800525e <I2SEx_TxISR_I2SExt+0x26>
 800525a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800525e:	460a      	mov	r2, r1
 8005260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d121      	bne.n	80052be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <I2SEx_TxISR_I2SExt+0x50>
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <I2SEx_TxISR_I2SExt+0x94>)
 8005286:	e001      	b.n	800528c <I2SEx_TxISR_I2SExt+0x54>
 8005288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005294:	428b      	cmp	r3, r1
 8005296:	d101      	bne.n	800529c <I2SEx_TxISR_I2SExt+0x64>
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <I2SEx_TxISR_I2SExt+0x94>)
 800529a:	e001      	b.n	80052a0 <I2SEx_TxISR_I2SExt+0x68>
 800529c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff81 	bl	80051c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40003800 	.word	0x40003800
 80052cc:	40003400 	.word	0x40003400

080052d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68d8      	ldr	r0, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	1c99      	adds	r1, r3, #2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052e8:	b282      	uxth	r2, r0
 80052ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d113      	bne.n	800532c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005312:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ff4a 	bl	80051c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <I2SEx_RxISR_I2SExt+0x16>
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005348:	e001      	b.n	800534e <I2SEx_RxISR_I2SExt+0x1a>
 800534a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800534e:	68d8      	ldr	r0, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	1c99      	adds	r1, r3, #2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	62d1      	str	r1, [r2, #44]	; 0x2c
 800535a:	b282      	uxth	r2, r0
 800535c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d121      	bne.n	80053ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <I2SEx_RxISR_I2SExt+0x90>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <I2SEx_RxISR_I2SExt+0x50>
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005382:	e001      	b.n	8005388 <I2SEx_RxISR_I2SExt+0x54>
 8005384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	490d      	ldr	r1, [pc, #52]	; (80053c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005390:	428b      	cmp	r3, r1
 8005392:	d101      	bne.n	8005398 <I2SEx_RxISR_I2SExt+0x64>
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005396:	e001      	b.n	800539c <I2SEx_RxISR_I2SExt+0x68>
 8005398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800539c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff03 	bl	80051c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40003800 	.word	0x40003800
 80053c8:	40003400 	.word	0x40003400

080053cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e264      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d075      	beq.n	80054d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ea:	4ba3      	ldr	r3, [pc, #652]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d00c      	beq.n	8005410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f6:	4ba0      	ldr	r3, [pc, #640]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005402:	4b9d      	ldr	r3, [pc, #628]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540e:	d10b      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	4b99      	ldr	r3, [pc, #612]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05b      	beq.n	80054d4 <HAL_RCC_OscConfig+0x108>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d157      	bne.n	80054d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e23f      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005430:	d106      	bne.n	8005440 <HAL_RCC_OscConfig+0x74>
 8005432:	4b91      	ldr	r3, [pc, #580]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a90      	ldr	r2, [pc, #576]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b8b      	ldr	r3, [pc, #556]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a8a      	ldr	r2, [pc, #552]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b88      	ldr	r3, [pc, #544]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a87      	ldr	r2, [pc, #540]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005464:	4b84      	ldr	r3, [pc, #528]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a83      	ldr	r2, [pc, #524]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b81      	ldr	r3, [pc, #516]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a80      	ldr	r2, [pc, #512]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fd f8c4 	bl	8002610 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd f8c0 	bl	8002610 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e204      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b76      	ldr	r3, [pc, #472]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xc0>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fd f8b0 	bl	8002610 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd f8ac 	bl	8002610 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1f0      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0xe8>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d063      	beq.n	80055aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e2:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ee:	4b62      	ldr	r3, [pc, #392]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fa:	4b5f      	ldr	r3, [pc, #380]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	4b5c      	ldr	r3, [pc, #368]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1c4      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b56      	ldr	r3, [pc, #344]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4952      	ldr	r1, [pc, #328]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	e03a      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553c:	4b4f      	ldr	r3, [pc, #316]	; (800567c <HAL_RCC_OscConfig+0x2b0>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fd f865 	bl	8002610 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554a:	f7fd f861 	bl	8002610 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1a5      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4940      	ldr	r1, [pc, #256]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b3f      	ldr	r3, [pc, #252]	; (800567c <HAL_RCC_OscConfig+0x2b0>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd f844 	bl	8002610 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558c:	f7fd f840 	bl	8002610 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e184      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	4b36      	ldr	r3, [pc, #216]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d030      	beq.n	8005618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_RCC_OscConfig+0x2b4>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fd f824 	bl	8002610 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fd f820 	bl	8002610 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e164      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	4b26      	ldr	r3, [pc, #152]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x200>
 80055ea:	e015      	b.n	8005618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x2b4>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f2:	f7fd f80d 	bl	8002610 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fd f809 	bl	8002610 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e14d      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f0      	bne.n	80055fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a0 	beq.w	8005766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005644:	6413      	str	r3, [r2, #64]	; 0x40
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_OscConfig+0x2b8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d121      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <HAL_RCC_OscConfig+0x2b8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <HAL_RCC_OscConfig+0x2b8>)
 8005668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566e:	f7fc ffcf 	bl	8002610 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	e011      	b.n	800569a <HAL_RCC_OscConfig+0x2ce>
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	42470000 	.word	0x42470000
 8005680:	42470e80 	.word	0x42470e80
 8005684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005688:	f7fc ffc2 	bl	8002610 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e106      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569a:	4b85      	ldr	r3, [pc, #532]	; (80058b0 <HAL_RCC_OscConfig+0x4e4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d106      	bne.n	80056bc <HAL_RCC_OscConfig+0x2f0>
 80056ae:	4b81      	ldr	r3, [pc, #516]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a80      	ldr	r2, [pc, #512]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	e01c      	b.n	80056f6 <HAL_RCC_OscConfig+0x32a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0x312>
 80056c4:	4b7b      	ldr	r3, [pc, #492]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a7a      	ldr	r2, [pc, #488]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	4b78      	ldr	r3, [pc, #480]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	4a77      	ldr	r2, [pc, #476]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6713      	str	r3, [r2, #112]	; 0x70
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0x32a>
 80056de:	4b75      	ldr	r3, [pc, #468]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	4a74      	ldr	r2, [pc, #464]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ea:	4b72      	ldr	r3, [pc, #456]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	4a71      	ldr	r2, [pc, #452]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fc ff87 	bl	8002610 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc ff83 	bl	8002610 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0c5      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ee      	beq.n	8005706 <HAL_RCC_OscConfig+0x33a>
 8005728:	e014      	b.n	8005754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fc ff71 	bl	8002610 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc ff6d 	bl	8002610 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e0af      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005748:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ee      	bne.n	8005732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575a:	4b56      	ldr	r3, [pc, #344]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	4a55      	ldr	r2, [pc, #340]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 8005760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 809b 	beq.w	80058a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005770:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b08      	cmp	r3, #8
 800577a:	d05c      	beq.n	8005836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d141      	bne.n	8005808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005784:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <HAL_RCC_OscConfig+0x4ec>)
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578a:	f7fc ff41 	bl	8002610 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005792:	f7fc ff3d 	bl	8002610 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e081      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f0      	bne.n	8005792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	3b01      	subs	r3, #1
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	4937      	ldr	r1, [pc, #220]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057da:	4b37      	ldr	r3, [pc, #220]	; (80058b8 <HAL_RCC_OscConfig+0x4ec>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fc ff16 	bl	8002610 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fc ff12 	bl	8002610 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e056      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fa:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x41c>
 8005806:	e04e      	b.n	80058a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005808:	4b2b      	ldr	r3, [pc, #172]	; (80058b8 <HAL_RCC_OscConfig+0x4ec>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7fc feff 	bl	8002610 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005816:	f7fc fefb 	bl	8002610 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e03f      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <HAL_RCC_OscConfig+0x44a>
 8005834:	e037      	b.n	80058a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e032      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_RCC_OscConfig+0x4e8>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d028      	beq.n	80058a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d121      	bne.n	80058a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d11a      	bne.n	80058a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005878:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800587a:	4293      	cmp	r3, r2
 800587c:	d111      	bne.n	80058a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	3b01      	subs	r3, #1
 800588c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d107      	bne.n	80058a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d001      	beq.n	80058a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40007000 	.word	0x40007000
 80058b4:	40023800 	.word	0x40023800
 80058b8:	42470060 	.word	0x42470060

080058bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0cc      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90c      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b65      	ldr	r3, [pc, #404]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b63      	ldr	r3, [pc, #396]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0b8      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005910:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a58      	ldr	r2, [pc, #352]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800591a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005928:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a52      	ldr	r2, [pc, #328]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005934:	4b50      	ldr	r3, [pc, #320]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	494d      	ldr	r1, [pc, #308]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d044      	beq.n	80059dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595a:	4b47      	ldr	r3, [pc, #284]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d119      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e07f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d003      	beq.n	800597a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597a:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e06f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598a:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e067      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4934      	ldr	r1, [pc, #208]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fc fe30 	bl	8002610 <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fc fe2c 	bl	8002610 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e04f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d20c      	bcs.n	8005a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e032      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4916      	ldr	r1, [pc, #88]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2e:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	490e      	ldr	r1, [pc, #56]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a42:	f000 f821 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a46:	4602      	mov	r2, r0
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	490a      	ldr	r1, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	5ccb      	ldrb	r3, [r1, r3]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x1c8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fc fd90 	bl	8002588 <HAL_InitTick>

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023c00 	.word	0x40023c00
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	0800defc 	.word	0x0800defc
 8005a80:	20000038 	.word	0x20000038
 8005a84:	2000003c 	.word	0x2000003c

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa0:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d00d      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	f200 80bd 	bhi.w	8005c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x34>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aba:	e0b7      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4b61      	ldr	r3, [pc, #388]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005abe:	60bb      	str	r3, [r7, #8]
       break;
 8005ac0:	e0b7      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac2:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ac4:	60bb      	str	r3, [r7, #8]
      break;
 8005ac6:	e0b4      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac8:	4b5d      	ldr	r3, [pc, #372]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad2:	4b5b      	ldr	r3, [pc, #364]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d04d      	beq.n	8005b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ade:	4b58      	ldr	r3, [pc, #352]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	ea02 0800 	and.w	r8, r2, r0
 8005af6:	ea03 0901 	and.w	r9, r3, r1
 8005afa:	4640      	mov	r0, r8
 8005afc:	4649      	mov	r1, r9
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	014b      	lsls	r3, r1, #5
 8005b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b0c:	0142      	lsls	r2, r0, #5
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	ebb0 0008 	subs.w	r0, r0, r8
 8005b16:	eb61 0109 	sbc.w	r1, r1, r9
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	018b      	lsls	r3, r1, #6
 8005b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b28:	0182      	lsls	r2, r0, #6
 8005b2a:	1a12      	subs	r2, r2, r0
 8005b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b30:	f04f 0000 	mov.w	r0, #0
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	00d9      	lsls	r1, r3, #3
 8005b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b3e:	00d0      	lsls	r0, r2, #3
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	eb12 0208 	adds.w	r2, r2, r8
 8005b48:	eb43 0309 	adc.w	r3, r3, r9
 8005b4c:	f04f 0000 	mov.w	r0, #0
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	0259      	lsls	r1, r3, #9
 8005b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b5a:	0250      	lsls	r0, r2, #9
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f7fb f864 	bl	8000c38 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4613      	mov	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e04a      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	099b      	lsrs	r3, r3, #6
 8005b80:	461a      	mov	r2, r3
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	ea02 0400 	and.w	r4, r2, r0
 8005b92:	ea03 0501 	and.w	r5, r3, r1
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	014b      	lsls	r3, r1, #5
 8005ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ba8:	0142      	lsls	r2, r0, #5
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	1b00      	subs	r0, r0, r4
 8005bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	018b      	lsls	r3, r1, #6
 8005bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bc2:	0182      	lsls	r2, r0, #6
 8005bc4:	1a12      	subs	r2, r2, r0
 8005bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	00d9      	lsls	r1, r3, #3
 8005bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd8:	00d0      	lsls	r0, r2, #3
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	1912      	adds	r2, r2, r4
 8005be0:	eb45 0303 	adc.w	r3, r5, r3
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	0299      	lsls	r1, r3, #10
 8005bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bf2:	0290      	lsls	r0, r2, #10
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	f7fb f818 	bl	8000c38 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	60bb      	str	r3, [r7, #8]
      break;
 8005c2a:	e002      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c2e:	60bb      	str	r3, [r7, #8]
      break;
 8005c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c32:	68bb      	ldr	r3, [r7, #8]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800
 8005c44:	00f42400 	.word	0x00f42400
 8005c48:	007a1200 	.word	0x007a1200

08005c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c50:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c52:	681b      	ldr	r3, [r3, #0]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000038 	.word	0x20000038

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c68:	f7ff fff0 	bl	8005c4c <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0a9b      	lsrs	r3, r3, #10
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	0800df0c 	.word	0x0800df0c

08005c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c90:	f7ff ffdc 	bl	8005c4c <HAL_RCC_GetHCLKFreq>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	0b5b      	lsrs	r3, r3, #13
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	4903      	ldr	r1, [pc, #12]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca2:	5ccb      	ldrb	r3, [r1, r3]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	0800df0c 	.word	0x0800df0c

08005cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d035      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cdc:	4b62      	ldr	r3, [pc, #392]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce2:	f7fc fc95 	bl	8002610 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cea:	f7fc fc91 	bl	8002610 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0b0      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cfc:	4b5b      	ldr	r3, [pc, #364]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f0      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	019a      	lsls	r2, r3, #6
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	071b      	lsls	r3, r3, #28
 8005d14:	4955      	ldr	r1, [pc, #340]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d1c:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d22:	f7fc fc75 	bl	8002610 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d2a:	f7fc fc71 	bl	8002610 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e090      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8083 	beq.w	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	4b44      	ldr	r3, [pc, #272]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	4a43      	ldr	r2, [pc, #268]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d64:	6413      	str	r3, [r2, #64]	; 0x40
 8005d66:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d72:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a3e      	ldr	r2, [pc, #248]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7e:	f7fc fc47 	bl	8002610 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d84:	e008      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d86:	f7fc fc43 	bl	8002610 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e062      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d98:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005da4:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02f      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d028      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dcc:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd2:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dd8:	4a24      	ldr	r2, [pc, #144]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dde:	4b23      	ldr	r3, [pc, #140]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d114      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fc fc11 	bl	8002610 <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fc fc0d 	bl	8002610 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e02a      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ee      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e20:	d10d      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	490d      	ldr	r1, [pc, #52]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]
 8005e3c:	e005      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e48:	6093      	str	r3, [r2, #8]
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e56:	4905      	ldr	r1, [pc, #20]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	42470068 	.word	0x42470068
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40007000 	.word	0x40007000
 8005e74:	42470e40 	.word	0x42470e40

08005e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d13e      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e96:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d12f      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eae:	617b      	str	r3, [r7, #20]
          break;
 8005eb0:	e02f      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ebe:	d108      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec8:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	e007      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eda:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efc:	0f1b      	lsrs	r3, r3, #28
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]
          break;
 8005f0a:	e002      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
          break;
 8005f10:	bf00      	nop
        }
      }
      break;
 8005f12:	bf00      	nop
    }
  }
  return frequency;
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	00bb8000 	.word	0x00bb8000
 8005f2c:	007a1200 	.word	0x007a1200
 8005f30:	00f42400 	.word	0x00f42400

08005f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07b      	b.n	800603e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
 8005f5e:	e005      	b.n	8005f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc f8a8 	bl	80020dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	ea42 0103 	orr.w	r1, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0104 	and.w	r1, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f003 0210 	and.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e041      	b.n	80060dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fc f87d 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 fad9 	bl	800663c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e041      	b.n	800617a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f839 	bl	8006182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f000 fa8a 	bl	800663c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x24>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e022      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d109      	bne.n	80061d6 <HAL_TIM_PWM_Start+0x3e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	bf14      	ite	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	2300      	moveq	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e015      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x58>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e008      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07c      	b.n	8006304 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x82>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e013      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0x92>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e00b      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xa2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e003      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fce0 	bl	8006c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIM_PWM_Start+0xcc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_TIM_PWM_Start+0xd0>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_TIM_PWM_Start+0xd2>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d01d      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_TIM_PWM_Start+0x17c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_TIM_PWM_Start+0x180>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_TIM_PWM_Start+0x184>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_PWM_Start+0x188>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_PWM_Start+0x18c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d111      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d010      	beq.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e007      	b.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000
 8006324:	40001800 	.word	0x40001800

08006328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0ae      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	f200 809f 	bhi.w	8006494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006391 	.word	0x08006391
 8006360:	08006495 	.word	0x08006495
 8006364:	08006495 	.word	0x08006495
 8006368:	08006495 	.word	0x08006495
 800636c:	080063d1 	.word	0x080063d1
 8006370:	08006495 	.word	0x08006495
 8006374:	08006495 	.word	0x08006495
 8006378:	08006495 	.word	0x08006495
 800637c:	08006413 	.word	0x08006413
 8006380:	08006495 	.word	0x08006495
 8006384:	08006495 	.word	0x08006495
 8006388:	08006495 	.word	0x08006495
 800638c:	08006453 	.word	0x08006453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f9f0 	bl	800677c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e064      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa40 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e043      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fa95 	bl	8006948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e023      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fae9 	bl	8006a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e002      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_TIM_ConfigClockSource+0x1c>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e0b4      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x186>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006500:	d03e      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0xd4>
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006506:	f200 8087 	bhi.w	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650e:	f000 8086 	beq.w	800661e <HAL_TIM_ConfigClockSource+0x172>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d87f      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b70      	cmp	r3, #112	; 0x70
 800651a:	d01a      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0xa6>
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d87b      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b60      	cmp	r3, #96	; 0x60
 8006522:	d050      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d877      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b50      	cmp	r3, #80	; 0x50
 800652a:	d03c      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0xfa>
 800652c:	2b50      	cmp	r3, #80	; 0x50
 800652e:	d873      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d058      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d86f      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d064      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d86b      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d060      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d867      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05c      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b10      	cmp	r3, #16
 800654e:	d05a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	e062      	b.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f000 fb35 	bl	8006bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	609a      	str	r2, [r3, #8]
      break;
 800657e:	e04f      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6899      	ldr	r1, [r3, #8]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f000 fb1e 	bl	8006bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065a2:	609a      	str	r2, [r3, #8]
      break;
 80065a4:	e03c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fa92 	bl	8006adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2150      	movs	r1, #80	; 0x50
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 faeb 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 80065c4:	e02c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f000 fab1 	bl	8006b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2160      	movs	r1, #96	; 0x60
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fadb 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 80065e4:	e01c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f000 fa72 	bl	8006adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2140      	movs	r1, #64	; 0x40
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 facb 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 8006604:	e00c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f000 fac2 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 8006616:	e003      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
      break;
 800661c:	e000      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800661e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a40      	ldr	r2, [pc, #256]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665a:	d00f      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <TIM_Base_SetConfig+0x118>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a3c      	ldr	r2, [pc, #240]	; (8006758 <TIM_Base_SetConfig+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3b      	ldr	r2, [pc, #236]	; (800675c <TIM_Base_SetConfig+0x120>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a3a      	ldr	r2, [pc, #232]	; (8006760 <TIM_Base_SetConfig+0x124>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d108      	bne.n	800668e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d02b      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669c:	d027      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a2c      	ldr	r2, [pc, #176]	; (8006754 <TIM_Base_SetConfig+0x118>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d023      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <TIM_Base_SetConfig+0x11c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01f      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2a      	ldr	r2, [pc, #168]	; (800675c <TIM_Base_SetConfig+0x120>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01b      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a29      	ldr	r2, [pc, #164]	; (8006760 <TIM_Base_SetConfig+0x124>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d017      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a28      	ldr	r2, [pc, #160]	; (8006764 <TIM_Base_SetConfig+0x128>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a27      	ldr	r2, [pc, #156]	; (8006768 <TIM_Base_SetConfig+0x12c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00f      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <TIM_Base_SetConfig+0x130>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00b      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a25      	ldr	r2, [pc, #148]	; (8006770 <TIM_Base_SetConfig+0x134>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d007      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a24      	ldr	r2, [pc, #144]	; (8006774 <TIM_Base_SetConfig+0x138>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <TIM_Base_SetConfig+0x13c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d108      	bne.n	8006700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_Base_SetConfig+0xf8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <TIM_Base_SetConfig+0x124>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d103      	bne.n	800673c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	615a      	str	r2, [r3, #20]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40010000 	.word	0x40010000
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40010400 	.word	0x40010400
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800
 8006770:	40001800 	.word	0x40001800
 8006774:	40001c00 	.word	0x40001c00
 8006778:	40002000 	.word	0x40002000

0800677c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0201 	bic.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 0302 	bic.w	r3, r3, #2
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a20      	ldr	r2, [pc, #128]	; (8006854 <TIM_OC1_SetConfig+0xd8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC1_SetConfig+0x64>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <TIM_OC1_SetConfig+0xdc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0308 	bic.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <TIM_OC1_SetConfig+0xd8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_OC1_SetConfig+0x8e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <TIM_OC1_SetConfig+0xdc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d111      	bne.n	800682e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0320 	bic.w	r3, r3, #32
 80068a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a22      	ldr	r2, [pc, #136]	; (8006940 <TIM_OC2_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x68>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a21      	ldr	r2, [pc, #132]	; (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10d      	bne.n	80068e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a17      	ldr	r2, [pc, #92]	; (8006940 <TIM_OC2_SetConfig+0xe4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC2_SetConfig+0x94>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a16      	ldr	r2, [pc, #88]	; (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d113      	bne.n	8006918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a21      	ldr	r2, [pc, #132]	; (8006a28 <TIM_OC3_SetConfig+0xe0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC3_SetConfig+0x66>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <TIM_OC3_SetConfig+0xe4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10d      	bne.n	80069ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <TIM_OC3_SetConfig+0xe0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC3_SetConfig+0x92>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <TIM_OC3_SetConfig+0xe4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d113      	bne.n	8006a02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a12      	ldr	r2, [pc, #72]	; (8006ad4 <TIM_OC4_SetConfig+0xa4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC4_SetConfig+0x68>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a11      	ldr	r2, [pc, #68]	; (8006ad8 <TIM_OC4_SetConfig+0xa8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d109      	bne.n	8006aac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40010400 	.word	0x40010400

08006adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 030a 	bic.w	r3, r3, #10
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b087      	sub	sp, #28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0210 	bic.w	r2, r3, #16
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	031b      	lsls	r3, r3, #12
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f043 0307 	orr.w	r3, r3, #7
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	2201      	movs	r2, #1
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	401a      	ands	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1a      	ldr	r2, [r3, #32]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	fa01 f303 	lsl.w	r3, r1, r3
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e05a      	b.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1d      	ldr	r2, [pc, #116]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10c      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40001800 	.word	0x40001800

08006d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e03f      	b.n	8006de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fb fa52 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2224      	movs	r2, #36	; 0x24
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fcdb 	bl	8007754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d11d      	bne.n	8006e44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_UART_Receive_IT+0x26>
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e016      	b.n	8006e46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Receive_IT+0x38>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e00f      	b.n	8006e46 <HAL_UART_Receive_IT+0x58>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fab6 	bl	80073ac <UART_Start_Receive_IT>
 8006e40:	4603      	mov	r3, r0
 8006e42:	e000      	b.n	8006e46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b0ba      	sub	sp, #232	; 0xe8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10f      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x66>
 8006ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fb95 	bl	80075de <UART_Receive_IT>
      return;
 8006eb4:	e256      	b.n	8007364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80de 	beq.w	800707c <HAL_UART_IRQHandler+0x22c>
 8006ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d106      	bne.n	8006eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80d1 	beq.w	800707c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <HAL_UART_IRQHandler+0xae>
 8006ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0201 	orr.w	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <HAL_UART_IRQHandler+0xd2>
 8006f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f043 0202 	orr.w	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_UART_IRQHandler+0xf6>
 8006f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f043 0204 	orr.w	r2, r3, #4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d011      	beq.n	8006f76 <HAL_UART_IRQHandler+0x126>
 8006f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d105      	bne.n	8006f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0208 	orr.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 81ed 	beq.w	800735a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <HAL_UART_IRQHandler+0x14e>
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb20 	bl	80075de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <HAL_UART_IRQHandler+0x17a>
 8006fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d04f      	beq.n	800706a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa28 	bl	8007420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d141      	bne.n	8007062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800700a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800700e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1d9      	bne.n	8006fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d013      	beq.n	800705a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	4a7d      	ldr	r2, [pc, #500]	; (800722c <HAL_UART_IRQHandler+0x3dc>)
 8007038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	4618      	mov	r0, r3
 8007040:	f7fb fc97 	bl	8002972 <HAL_DMA_Abort_IT>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d016      	beq.n	8007078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007058:	e00e      	b.n	8007078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f990 	bl	8007380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	e00a      	b.n	8007078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f98c 	bl	8007380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	e006      	b.n	8007078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f988 	bl	8007380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007076:	e170      	b.n	800735a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	bf00      	nop
    return;
 800707a:	e16e      	b.n	800735a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 814a 	bne.w	800731a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8143 	beq.w	800731a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 813c 	beq.w	800731a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	f040 80b4 	bne.w	8007230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8140 	beq.w	800735e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070e6:	429a      	cmp	r2, r3
 80070e8:	f080 8139 	bcs.w	800735e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fe:	f000 8088 	beq.w	8007212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800711c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800712e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800713a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1d9      	bne.n	8007102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3314      	adds	r3, #20
 8007154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800715e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3314      	adds	r3, #20
 800716e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800717a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e1      	bne.n	800714e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3314      	adds	r3, #20
 8007190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800719a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800719c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3314      	adds	r3, #20
 80071aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e3      	bne.n	800718a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80071f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e3      	bne.n	80071d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	4618      	mov	r0, r3
 800720e:	f7fb fb40 	bl	8002892 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800721a:	b29b      	uxth	r3, r3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	b29b      	uxth	r3, r3
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8b6 	bl	8007394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007228:	e099      	b.n	800735e <HAL_UART_IRQHandler+0x50e>
 800722a:	bf00      	nop
 800722c:	080074e7 	.word	0x080074e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007238:	b29b      	uxth	r3, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 808b 	beq.w	8007362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800724c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8086 	beq.w	8007362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800726c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800727a:	647a      	str	r2, [r7, #68]	; 0x44
 800727c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	623b      	str	r3, [r7, #32]
   return(result);
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072b2:	633a      	str	r2, [r7, #48]	; 0x30
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e3      	bne.n	800728e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072f8:	61fa      	str	r2, [r7, #28]
 80072fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	617b      	str	r3, [r7, #20]
   return(result);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e3      	bne.n	80072d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800730c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f83e 	bl	8007394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007318:	e023      	b.n	8007362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <HAL_UART_IRQHandler+0x4ea>
 8007326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8eb 	bl	800750e <UART_Transmit_IT>
    return;
 8007338:	e014      	b.n	8007364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <HAL_UART_IRQHandler+0x514>
 8007346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f92b 	bl	80075ae <UART_EndTransmit_IT>
    return;
 8007358:	e004      	b.n	8007364 <HAL_UART_IRQHandler+0x514>
    return;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <HAL_UART_IRQHandler+0x514>
      return;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_UART_IRQHandler+0x514>
      return;
 8007362:	bf00      	nop
  }
}
 8007364:	37e8      	adds	r7, #232	; 0xe8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop

0800736c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2222      	movs	r2, #34	; 0x22
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0201 	orr.w	r2, r2, #1
 8007400:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0220 	orr.w	r2, r2, #32
 8007410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b095      	sub	sp, #84	; 0x54
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800743e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007448:	643a      	str	r2, [r7, #64]	; 0x40
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800744e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3314      	adds	r3, #20
 8007462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	61fb      	str	r3, [r7, #28]
   return(result);
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	64bb      	str	r3, [r7, #72]	; 0x48
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3314      	adds	r3, #20
 800747a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	2b01      	cmp	r3, #1
 8007496:	d119      	bne.n	80074cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	647b      	str	r3, [r7, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	613b      	str	r3, [r7, #16]
   return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074da:	bf00      	nop
 80074dc:	3754      	adds	r7, #84	; 0x54
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff ff3d 	bl	8007380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b21      	cmp	r3, #33	; 0x21
 8007520:	d13e      	bne.n	80075a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752a:	d114      	bne.n	8007556 <UART_Transmit_IT+0x48>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d110      	bne.n	8007556 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	1c9a      	adds	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	621a      	str	r2, [r3, #32]
 8007554:	e008      	b.n	8007568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6211      	str	r1, [r2, #32]
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4619      	mov	r1, r3
 8007576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10f      	bne.n	800759c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800758a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fecc 	bl	800736c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08c      	sub	sp, #48	; 0x30
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b22      	cmp	r3, #34	; 0x22
 80075f0:	f040 80ab 	bne.w	800774a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fc:	d117      	bne.n	800762e <UART_Receive_IT+0x50>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d113      	bne.n	800762e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761c:	b29a      	uxth	r2, r3
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
 800762c:	e026      	b.n	800767c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007640:	d007      	beq.n	8007652 <UART_Receive_IT+0x74>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <UART_Receive_IT+0x82>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e008      	b.n	8007672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	b2da      	uxtb	r2, r3
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4619      	mov	r1, r3
 800768a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800768c:	2b00      	cmp	r3, #0
 800768e:	d15a      	bne.n	8007746 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0220 	bic.w	r2, r2, #32
 800769e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d135      	bne.n	800773c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	69f9      	ldr	r1, [r7, #28]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	61bb      	str	r3, [r7, #24]
   return(result);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d10a      	bne.n	800772e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fe2d 	bl	8007394 <HAL_UARTEx_RxEventCallback>
 800773a:	e002      	b.n	8007742 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7f9 ff8f 	bl	8001660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e002      	b.n	800774c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	; 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	b09f      	sub	sp, #124	; 0x7c
 800775a:	af00      	add	r7, sp, #0
 800775c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	68d9      	ldr	r1, [r3, #12]
 800776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	ea40 0301 	orr.w	r3, r0, r1
 8007774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	431a      	orrs	r2, r3
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	431a      	orrs	r2, r3
 8007786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	4313      	orrs	r3, r2
 800778c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007798:	f021 010c 	bic.w	r1, r1, #12
 800779c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077a2:	430b      	orrs	r3, r1
 80077a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b2:	6999      	ldr	r1, [r3, #24]
 80077b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	ea40 0301 	orr.w	r3, r0, r1
 80077bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4bc5      	ldr	r3, [pc, #788]	; (8007ad8 <UART_SetConfig+0x384>)
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d004      	beq.n	80077d2 <UART_SetConfig+0x7e>
 80077c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4bc3      	ldr	r3, [pc, #780]	; (8007adc <UART_SetConfig+0x388>)
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d103      	bne.n	80077da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077d2:	f7fe fa5b 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 80077d6:	6778      	str	r0, [r7, #116]	; 0x74
 80077d8:	e002      	b.n	80077e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077da:	f7fe fa43 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 80077de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e8:	f040 80b6 	bne.w	8007958 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ee:	461c      	mov	r4, r3
 80077f0:	f04f 0500 	mov.w	r5, #0
 80077f4:	4622      	mov	r2, r4
 80077f6:	462b      	mov	r3, r5
 80077f8:	1891      	adds	r1, r2, r2
 80077fa:	6439      	str	r1, [r7, #64]	; 0x40
 80077fc:	415b      	adcs	r3, r3
 80077fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007800:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007804:	1912      	adds	r2, r2, r4
 8007806:	eb45 0303 	adc.w	r3, r5, r3
 800780a:	f04f 0000 	mov.w	r0, #0
 800780e:	f04f 0100 	mov.w	r1, #0
 8007812:	00d9      	lsls	r1, r3, #3
 8007814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007818:	00d0      	lsls	r0, r2, #3
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	1911      	adds	r1, r2, r4
 8007820:	6639      	str	r1, [r7, #96]	; 0x60
 8007822:	416b      	adcs	r3, r5
 8007824:	667b      	str	r3, [r7, #100]	; 0x64
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	461a      	mov	r2, r3
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	1891      	adds	r1, r2, r2
 8007832:	63b9      	str	r1, [r7, #56]	; 0x38
 8007834:	415b      	adcs	r3, r3
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800783c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007840:	f7f9 f9fa 	bl	8000c38 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4ba5      	ldr	r3, [pc, #660]	; (8007ae0 <UART_SetConfig+0x38c>)
 800784a:	fba3 2302 	umull	r2, r3, r3, r2
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	011e      	lsls	r6, r3, #4
 8007852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007854:	461c      	mov	r4, r3
 8007856:	f04f 0500 	mov.w	r5, #0
 800785a:	4622      	mov	r2, r4
 800785c:	462b      	mov	r3, r5
 800785e:	1891      	adds	r1, r2, r2
 8007860:	6339      	str	r1, [r7, #48]	; 0x30
 8007862:	415b      	adcs	r3, r3
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
 8007866:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800786a:	1912      	adds	r2, r2, r4
 800786c:	eb45 0303 	adc.w	r3, r5, r3
 8007870:	f04f 0000 	mov.w	r0, #0
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	00d9      	lsls	r1, r3, #3
 800787a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800787e:	00d0      	lsls	r0, r2, #3
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	1911      	adds	r1, r2, r4
 8007886:	65b9      	str	r1, [r7, #88]	; 0x58
 8007888:	416b      	adcs	r3, r5
 800788a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	461a      	mov	r2, r3
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	1891      	adds	r1, r2, r2
 8007898:	62b9      	str	r1, [r7, #40]	; 0x28
 800789a:	415b      	adcs	r3, r3
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078a6:	f7f9 f9c7 	bl	8000c38 <__aeabi_uldivmod>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4b8c      	ldr	r3, [pc, #560]	; (8007ae0 <UART_SetConfig+0x38c>)
 80078b0:	fba3 1302 	umull	r1, r3, r3, r2
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	2164      	movs	r1, #100	; 0x64
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	3332      	adds	r3, #50	; 0x32
 80078c2:	4a87      	ldr	r2, [pc, #540]	; (8007ae0 <UART_SetConfig+0x38c>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078d0:	441e      	add	r6, r3
 80078d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d4:	4618      	mov	r0, r3
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	1894      	adds	r4, r2, r2
 80078e0:	623c      	str	r4, [r7, #32]
 80078e2:	415b      	adcs	r3, r3
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078ea:	1812      	adds	r2, r2, r0
 80078ec:	eb41 0303 	adc.w	r3, r1, r3
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	f04f 0500 	mov.w	r5, #0
 80078f8:	00dd      	lsls	r5, r3, #3
 80078fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078fe:	00d4      	lsls	r4, r2, #3
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	1814      	adds	r4, r2, r0
 8007906:	653c      	str	r4, [r7, #80]	; 0x50
 8007908:	414b      	adcs	r3, r1
 800790a:	657b      	str	r3, [r7, #84]	; 0x54
 800790c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	461a      	mov	r2, r3
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	1891      	adds	r1, r2, r2
 8007918:	61b9      	str	r1, [r7, #24]
 800791a:	415b      	adcs	r3, r3
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007922:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007926:	f7f9 f987 	bl	8000c38 <__aeabi_uldivmod>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4b6c      	ldr	r3, [pc, #432]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007930:	fba3 1302 	umull	r1, r3, r3, r2
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	2164      	movs	r1, #100	; 0x64
 8007938:	fb01 f303 	mul.w	r3, r1, r3
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	3332      	adds	r3, #50	; 0x32
 8007942:	4a67      	ldr	r2, [pc, #412]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007944:	fba2 2303 	umull	r2, r3, r2, r3
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	f003 0207 	and.w	r2, r3, #7
 800794e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4432      	add	r2, r6
 8007954:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007956:	e0b9      	b.n	8007acc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795a:	461c      	mov	r4, r3
 800795c:	f04f 0500 	mov.w	r5, #0
 8007960:	4622      	mov	r2, r4
 8007962:	462b      	mov	r3, r5
 8007964:	1891      	adds	r1, r2, r2
 8007966:	6139      	str	r1, [r7, #16]
 8007968:	415b      	adcs	r3, r3
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007970:	1912      	adds	r2, r2, r4
 8007972:	eb45 0303 	adc.w	r3, r5, r3
 8007976:	f04f 0000 	mov.w	r0, #0
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	00d9      	lsls	r1, r3, #3
 8007980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007984:	00d0      	lsls	r0, r2, #3
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	eb12 0804 	adds.w	r8, r2, r4
 800798e:	eb43 0905 	adc.w	r9, r3, r5
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4618      	mov	r0, r3
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	008b      	lsls	r3, r1, #2
 80079a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079aa:	0082      	lsls	r2, r0, #2
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f9 f942 	bl	8000c38 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4b49      	ldr	r3, [pc, #292]	; (8007ae0 <UART_SetConfig+0x38c>)
 80079ba:	fba3 2302 	umull	r2, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	011e      	lsls	r6, r3, #4
 80079c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c4:	4618      	mov	r0, r3
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	1894      	adds	r4, r2, r2
 80079d0:	60bc      	str	r4, [r7, #8]
 80079d2:	415b      	adcs	r3, r3
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079da:	1812      	adds	r2, r2, r0
 80079dc:	eb41 0303 	adc.w	r3, r1, r3
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	f04f 0500 	mov.w	r5, #0
 80079e8:	00dd      	lsls	r5, r3, #3
 80079ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079ee:	00d4      	lsls	r4, r2, #3
 80079f0:	4622      	mov	r2, r4
 80079f2:	462b      	mov	r3, r5
 80079f4:	1814      	adds	r4, r2, r0
 80079f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80079f8:	414b      	adcs	r3, r1
 80079fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f04f 0100 	mov.w	r1, #0
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	008b      	lsls	r3, r1, #2
 8007a10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a14:	0082      	lsls	r2, r0, #2
 8007a16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a1a:	f7f9 f90d 	bl	8000c38 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4b2f      	ldr	r3, [pc, #188]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007a24:	fba3 1302 	umull	r1, r3, r3, r2
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	2164      	movs	r1, #100	; 0x64
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	3332      	adds	r3, #50	; 0x32
 8007a36:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a42:	441e      	add	r6, r3
 8007a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a46:	4618      	mov	r0, r3
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	1894      	adds	r4, r2, r2
 8007a52:	603c      	str	r4, [r7, #0]
 8007a54:	415b      	adcs	r3, r3
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a5c:	1812      	adds	r2, r2, r0
 8007a5e:	eb41 0303 	adc.w	r3, r1, r3
 8007a62:	f04f 0400 	mov.w	r4, #0
 8007a66:	f04f 0500 	mov.w	r5, #0
 8007a6a:	00dd      	lsls	r5, r3, #3
 8007a6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a70:	00d4      	lsls	r4, r2, #3
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	eb12 0a00 	adds.w	sl, r2, r0
 8007a7a:	eb43 0b01 	adc.w	fp, r3, r1
 8007a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	008b      	lsls	r3, r1, #2
 8007a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a96:	0082      	lsls	r2, r0, #2
 8007a98:	4650      	mov	r0, sl
 8007a9a:	4659      	mov	r1, fp
 8007a9c:	f7f9 f8cc 	bl	8000c38 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	2164      	movs	r1, #100	; 0x64
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	3332      	adds	r3, #50	; 0x32
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <UART_SetConfig+0x38c>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	f003 020f 	and.w	r2, r3, #15
 8007ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4432      	add	r2, r6
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	377c      	adds	r7, #124	; 0x7c
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40011000 	.word	0x40011000
 8007adc:	40011400 	.word	0x40011400
 8007ae0:	51eb851f 	.word	0x51eb851f

08007ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	f107 001c 	add.w	r0, r7, #28
 8007af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d122      	bne.n	8007b42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d105      	bne.n	8007b36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f9a0 	bl	8007e7c <USB_CoreReset>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	e01a      	b.n	8007b78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f994 	bl	8007e7c <USB_CoreReset>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
 8007b6a:	e005      	b.n	8007b78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d10b      	bne.n	8007b96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f043 0206 	orr.w	r2, r3, #6
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f043 0220 	orr.w	r2, r3, #32
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba2:	b004      	add	sp, #16
 8007ba4:	4770      	bx	lr

08007ba6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f043 0201 	orr.w	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f023 0201 	bic.w	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d115      	bne.n	8007c38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f7fa fd05 	bl	8002628 <HAL_Delay>
      ms++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f91a 	bl	8007e5e <USB_GetMode>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d01e      	beq.n	8007c6e <USB_SetCurrentMode+0x84>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b31      	cmp	r3, #49	; 0x31
 8007c34:	d9f0      	bls.n	8007c18 <USB_SetCurrentMode+0x2e>
 8007c36:	e01a      	b.n	8007c6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d115      	bne.n	8007c6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	f7fa fcec 	bl	8002628 <HAL_Delay>
      ms++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f901 	bl	8007e5e <USB_GetMode>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <USB_SetCurrentMode+0x84>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b31      	cmp	r3, #49	; 0x31
 8007c66:	d9f0      	bls.n	8007c4a <USB_SetCurrentMode+0x60>
 8007c68:	e001      	b.n	8007c6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e005      	b.n	8007c7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b32      	cmp	r3, #50	; 0x32
 8007c72:	d101      	bne.n	8007c78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	019b      	lsls	r3, r3, #6
 8007c96:	f043 0220 	orr.w	r2, r3, #32
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	4a08      	ldr	r2, [pc, #32]	; (8007cc8 <USB_FlushTxFifo+0x44>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e006      	b.n	8007cbc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d0f1      	beq.n	8007c9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	00030d40 	.word	0x00030d40

08007ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <USB_FlushRxFifo+0x3c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e006      	b.n	8007cfc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d0f1      	beq.n	8007cde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	00030d40 	.word	0x00030d40

08007d0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	; 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	71fb      	strb	r3, [r7, #7]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d123      	bne.n	8007d7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d32:	88bb      	ldrh	r3, [r7, #4]
 8007d34:	3303      	adds	r3, #3
 8007d36:	089b      	lsrs	r3, r3, #2
 8007d38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e018      	b.n	8007d72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	031a      	lsls	r2, r3, #12
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3e2      	bcc.n	8007d40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3724      	adds	r7, #36	; 0x24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b08b      	sub	sp, #44	; 0x2c
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	089b      	lsrs	r3, r3, #2
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	e014      	b.n	8007dde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	3301      	adds	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	3301      	adds	r3, #1
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	623b      	str	r3, [r7, #32]
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3e6      	bcc.n	8007db4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01e      	beq.n	8007e2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	461a      	mov	r2, r3
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	701a      	strb	r2, [r3, #0]
      i++;
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	3301      	adds	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e1e:	8bfb      	ldrh	r3, [r7, #30]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e24:	8bfb      	ldrh	r3, [r7, #30]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ea      	bne.n	8007e00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	372c      	adds	r7, #44	; 0x2c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e50:	68fb      	ldr	r3, [r7, #12]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4a13      	ldr	r2, [pc, #76]	; (8007edc <USB_CoreReset+0x60>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e01a      	b.n	8007ece <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	daf3      	bge.n	8007e88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f043 0201 	orr.w	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	4a09      	ldr	r2, [pc, #36]	; (8007edc <USB_CoreReset+0x60>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d901      	bls.n	8007ec0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e006      	b.n	8007ece <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d0f1      	beq.n	8007eb0 <USB_CoreReset+0x34>

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	00030d40 	.word	0x00030d40

08007ee0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	f107 001c 	add.w	r0, r7, #28
 8007eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007efc:	461a      	mov	r2, r3
 8007efe:	2300      	movs	r3, #0
 8007f00:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d018      	beq.n	8007f64 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10a      	bne.n	8007f4e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f46:	f043 0304 	orr.w	r3, r3, #4
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	e014      	b.n	8007f78 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e009      	b.n	8007f78 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f72:	f023 0304 	bic.w	r3, r3, #4
 8007f76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007f78:	2110      	movs	r1, #16
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fe82 	bl	8007c84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fea3 	bl	8007ccc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e015      	b.n	8007fb8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fac:	461a      	mov	r2, r3
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d3e5      	bcc.n	8007f8c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_HostInit+0x154>)
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a13      	ldr	r2, [pc, #76]	; (8008038 <USB_HostInit+0x158>)
 8007fec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007ff0:	e009      	b.n	8008006 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2280      	movs	r2, #128	; 0x80
 8007ff6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a10      	ldr	r2, [pc, #64]	; (800803c <USB_HostInit+0x15c>)
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a0f      	ldr	r2, [pc, #60]	; (8008040 <USB_HostInit+0x160>)
 8008002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d105      	bne.n	8008018 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f043 0210 	orr.w	r2, r3, #16
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699a      	ldr	r2, [r3, #24]
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <USB_HostInit+0x164>)
 800801e:	4313      	orrs	r3, r2
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008030:	b004      	add	sp, #16
 8008032:	4770      	bx	lr
 8008034:	01000200 	.word	0x01000200
 8008038:	00e00300 	.word	0x00e00300
 800803c:	00600080 	.word	0x00600080
 8008040:	004000e0 	.word	0x004000e0
 8008044:	a3200008 	.word	0xa3200008

08008048 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d107      	bne.n	800809a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008090:	461a      	mov	r2, r3
 8008092:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008096:	6053      	str	r3, [r2, #4]
 8008098:	e009      	b.n	80080ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d106      	bne.n	80080ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a6:	461a      	mov	r2, r3
 80080a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80080ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080ec:	2064      	movs	r0, #100	; 0x64
 80080ee:	f7fa fa9b 	bl	8002628 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008100:	200a      	movs	r0, #10
 8008102:	f7fa fa91 	bl	8002628 <HAL_Delay>

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008134:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <USB_DriveVbus+0x44>
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d106      	bne.n	8008154 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800814e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008152:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d109      	bne.n	8008174 <USB_DriveVbus+0x64>
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800816e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008172:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0c5b      	lsrs	r3, r3, #17
 80081a0:	f003 0303 	and.w	r3, r3, #3
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	b29b      	uxth	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	70fb      	strb	r3, [r7, #3]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70bb      	strb	r3, [r7, #2]
 80081ea:	4613      	mov	r3, r2
 80081ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800820a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820e:	2b03      	cmp	r3, #3
 8008210:	d87e      	bhi.n	8008310 <USB_HC_Init+0x13c>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USB_HC_Init+0x44>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008229 	.word	0x08008229
 800821c:	080082d3 	.word	0x080082d3
 8008220:	08008229 	.word	0x08008229
 8008224:	08008295 	.word	0x08008295
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008234:	461a      	mov	r2, r3
 8008236:	f240 439d 	movw	r3, #1181	; 0x49d
 800823a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800823c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da10      	bge.n	8008266 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	440a      	add	r2, r1
 800825a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008262:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008264:	e057      	b.n	8008316 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d051      	beq.n	8008316 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	4413      	add	r3, r2
 800827a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	440a      	add	r2, r1
 8008288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008290:	60d3      	str	r3, [r2, #12]
      break;
 8008292:	e040      	b.n	8008316 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	4413      	add	r3, r2
 800829c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a0:	461a      	mov	r2, r3
 80082a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80082a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da34      	bge.n	800831a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082d0:	e023      	b.n	800831a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	461a      	mov	r2, r3
 80082e0:	f240 2325 	movw	r3, #549	; 0x225
 80082e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da17      	bge.n	800831e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	0151      	lsls	r1, r2, #5
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	440a      	add	r2, r1
 8008304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008308:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800830c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800830e:	e006      	b.n	800831e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	77fb      	strb	r3, [r7, #31]
      break;
 8008314:	e004      	b.n	8008320 <USB_HC_Init+0x14c>
      break;
 8008316:	bf00      	nop
 8008318:	e002      	b.n	8008320 <USB_HC_Init+0x14c>
      break;
 800831a:	bf00      	nop
 800831c:	e000      	b.n	8008320 <USB_HC_Init+0x14c>
      break;
 800831e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	2101      	movs	r1, #1
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	6939      	ldr	r1, [r7, #16]
 8008336:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800833a:	4313      	orrs	r3, r2
 800833c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800834a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	da03      	bge.n	800835a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	e001      	b.n	800835e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ff0f 	bl	8008182 <USB_GetHostSpeed>
 8008364:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800836a:	2b02      	cmp	r3, #2
 800836c:	d106      	bne.n	800837c <USB_HC_Init+0x1a8>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d003      	beq.n	800837c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	e001      	b.n	8008380 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008380:	787b      	ldrb	r3, [r7, #1]
 8008382:	059b      	lsls	r3, r3, #22
 8008384:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008388:	78bb      	ldrb	r3, [r7, #2]
 800838a:	02db      	lsls	r3, r3, #11
 800838c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008390:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008392:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008396:	049b      	lsls	r3, r3, #18
 8008398:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800839c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800839e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	0159      	lsls	r1, r3, #5
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	440b      	add	r3, r1
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083bc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d10f      	bne.n	80083e6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02d      	beq.n	8008476 <USB_HC_StartXfer+0x86>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d129      	bne.n	8008476 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d117      	bne.n	8008458 <USB_HC_StartXfer+0x68>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	79db      	ldrb	r3, [r3, #7]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <USB_HC_StartXfer+0x48>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	79db      	ldrb	r3, [r3, #7]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d10f      	bne.n	8008458 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	6a3a      	ldr	r2, [r7, #32]
 800844c:	440a      	add	r2, r1
 800844e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008456:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <USB_HC_StartXfer+0x86>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	795b      	ldrb	r3, [r3, #5]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d107      	bne.n	8008476 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 fa2f 	bl	80088d0 <USB_DoPing>
      return HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e0f8      	b.n	8008668 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d018      	beq.n	80084b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	8912      	ldrh	r2, [r2, #8]
 8008486:	4413      	add	r3, r2
 8008488:	3b01      	subs	r3, #1
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	8912      	ldrh	r2, [r2, #8]
 800848e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008492:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008494:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008496:	8b7b      	ldrh	r3, [r7, #26]
 8008498:	429a      	cmp	r2, r3
 800849a:	d90b      	bls.n	80084b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800849c:	8b7b      	ldrh	r3, [r7, #26]
 800849e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	8912      	ldrh	r2, [r2, #8]
 80084a6:	fb02 f203 	mul.w	r2, r2, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	611a      	str	r2, [r3, #16]
 80084ae:	e001      	b.n	80084b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084b0:	2301      	movs	r3, #1
 80084b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	78db      	ldrb	r3, [r3, #3]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	8912      	ldrh	r2, [r2, #8]
 80084c2:	fb02 f203 	mul.w	r2, r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	611a      	str	r2, [r3, #16]
 80084ca:	e003      	b.n	80084d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	695a      	ldr	r2, [r3, #20]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084de:	04d9      	lsls	r1, r3, #19
 80084e0:	4b63      	ldr	r3, [pc, #396]	; (8008670 <USB_HC_StartXfer+0x280>)
 80084e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	7a9b      	ldrb	r3, [r3, #10]
 80084ea:	075b      	lsls	r3, r3, #29
 80084ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084f0:	69f9      	ldr	r1, [r7, #28]
 80084f2:	0148      	lsls	r0, r1, #5
 80084f4:	6a39      	ldr	r1, [r7, #32]
 80084f6:	4401      	add	r1, r0
 80084f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	68d9      	ldr	r1, [r3, #12]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	460a      	mov	r2, r1
 8008518:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	bf0c      	ite	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	2300      	movne	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	440a      	add	r2, r1
 8008548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008550:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	7e7b      	ldrb	r3, [r7, #25]
 8008562:	075b      	lsls	r3, r3, #29
 8008564:	69f9      	ldr	r1, [r7, #28]
 8008566:	0148      	lsls	r0, r1, #5
 8008568:	6a39      	ldr	r1, [r7, #32]
 800856a:	4401      	add	r1, r0
 800856c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008570:	4313      	orrs	r3, r2
 8008572:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800858a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	78db      	ldrb	r3, [r3, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	e003      	b.n	80085a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ba:	461a      	mov	r2, r3
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e04e      	b.n	8008668 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	78db      	ldrb	r3, [r3, #3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d149      	bne.n	8008666 <USB_HC_StartXfer+0x276>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d045      	beq.n	8008666 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	79db      	ldrb	r3, [r3, #7]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d830      	bhi.n	8008644 <USB_HC_StartXfer+0x254>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <USB_HC_StartXfer+0x1f8>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	0800861d 	.word	0x0800861d
 80085f0:	080085f9 	.word	0x080085f9
 80085f4:	0800861d 	.word	0x0800861d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	3303      	adds	r3, #3
 80085fe:	089b      	lsrs	r3, r3, #2
 8008600:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008602:	8afa      	ldrh	r2, [r7, #22]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	b29b      	uxth	r3, r3
 800860a:	429a      	cmp	r2, r3
 800860c:	d91c      	bls.n	8008648 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f043 0220 	orr.w	r2, r3, #32
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	619a      	str	r2, [r3, #24]
        }
        break;
 800861a:	e015      	b.n	8008648 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	3303      	adds	r3, #3
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008626:	8afa      	ldrh	r2, [r7, #22]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	b29b      	uxth	r3, r3
 8008632:	429a      	cmp	r2, r3
 8008634:	d90a      	bls.n	800864c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	619a      	str	r2, [r3, #24]
        }
        break;
 8008642:	e003      	b.n	800864c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008644:	bf00      	nop
 8008646:	e002      	b.n	800864e <USB_HC_StartXfer+0x25e>
        break;
 8008648:	bf00      	nop
 800864a:	e000      	b.n	800864e <USB_HC_StartXfer+0x25e>
        break;
 800864c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	68d9      	ldr	r1, [r3, #12]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	785a      	ldrb	r2, [r3, #1]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	b29b      	uxth	r3, r3
 800865c:	2000      	movs	r0, #0
 800865e:	9000      	str	r0, [sp, #0]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fb53 	bl	8007d0c <USB_WritePacket>
  }

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3728      	adds	r7, #40	; 0x28
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	1ff80000 	.word	0x1ff80000

08008674 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	b29b      	uxth	r3, r3
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008696:	b480      	push	{r7}
 8008698:	b089      	sub	sp, #36	; 0x24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	0c9b      	lsrs	r3, r3, #18
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	0fdb      	lsrs	r3, r3, #31
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d104      	bne.n	80086f0 <USB_HC_Halt+0x5a>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e0e8      	b.n	80088c2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <USB_HC_Halt+0x66>
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d173      	bne.n	80087e4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	4413      	add	r3, r2
 8008704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	440a      	add	r2, r1
 8008712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800871a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	f040 80cb 	bne.w	80088c0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d143      	bne.n	80087be <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	4413      	add	r3, r2
 800873e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	440a      	add	r2, r1
 800874c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008754:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	4413      	add	r3, r2
 800875e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	0151      	lsls	r1, r2, #5
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	440a      	add	r2, r1
 800876c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008774:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	440a      	add	r2, r1
 800878c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008794:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3301      	adds	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087a2:	d81d      	bhi.n	80087e0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ba:	d0ec      	beq.n	8008796 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087bc:	e080      	b.n	80088c0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087de:	e06f      	b.n	80088c0 <USB_HC_Halt+0x22a>
            break;
 80087e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087e2:	e06d      	b.n	80088c0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008802:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d143      	bne.n	800889c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	4413      	add	r3, r2
 800881c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	440a      	add	r2, r1
 800882a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800882e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008832:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008852:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	440a      	add	r2, r1
 800886a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800886e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008872:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008880:	d81d      	bhi.n	80088be <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008898:	d0ec      	beq.n	8008874 <USB_HC_Halt+0x1de>
 800889a:	e011      	b.n	80088c0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e000      	b.n	80088c0 <USB_HC_Halt+0x22a>
          break;
 80088be:	bf00      	nop
    }
  }

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3724      	adds	r7, #36	; 0x24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
	...

080088d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088e4:	2301      	movs	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	04da      	lsls	r2, r3, #19
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <USB_DoPing+0x74>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008900:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008918:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008920:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892e:	461a      	mov	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	1ff80000 	.word	0x1ff80000

08008948 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff f935 	bl	8007bc8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800895e:	2110      	movs	r1, #16
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff f98f 	bl	8007c84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff f9b0 	bl	8007ccc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	e01f      	b.n	80089b2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4413      	add	r3, r2
 800897a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008988:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008998:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	613b      	str	r3, [r7, #16]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b0f      	cmp	r3, #15
 80089b6:	d9dc      	bls.n	8008972 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
 80089bc:	e034      	b.n	8008a28 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f2:	461a      	mov	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	3301      	adds	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a04:	d80c      	bhi.n	8008a20 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a1c:	d0ec      	beq.n	80089f8 <USB_StopHost+0xb0>
 8008a1e:	e000      	b.n	8008a22 <USB_StopHost+0xda>
        break;
 8008a20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b0f      	cmp	r3, #15
 8008a2c:	d9c7      	bls.n	80089be <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a34:	461a      	mov	r2, r3
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff f8ae 	bl	8007ba6 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	2202      	movs	r2, #2
 8008a60:	2102      	movs	r1, #2
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fc66 	bl	8009334 <USBH_FindInterface>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	2bff      	cmp	r3, #255	; 0xff
 8008a70:	d002      	beq.n	8008a78 <USBH_CDC_InterfaceInit+0x24>
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d901      	bls.n	8008a7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e13d      	b.n	8008cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fc3b 	bl	80092fc <USBH_SelectInterface>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008a90:	2302      	movs	r3, #2
 8008a92:	e131      	b.n	8008cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a9a:	2050      	movs	r0, #80	; 0x50
 8008a9c:	f002 fa04 	bl	800aea8 <malloc>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e11f      	b.n	8008cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ab8:	2250      	movs	r2, #80	; 0x50
 8008aba:	2100      	movs	r1, #0
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f002 fa03 	bl	800aec8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	211a      	movs	r1, #26
 8008ac8:	fb01 f303 	mul.w	r3, r1, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da15      	bge.n	8008b06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	211a      	movs	r1, #26
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	211a      	movs	r1, #26
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b00:	881a      	ldrh	r2, [r3, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fe32 	bl	800a776 <USBH_AllocPipe>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	7819      	ldrb	r1, [r3, #0]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	7858      	ldrb	r0, [r3, #1]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	8952      	ldrh	r2, [r2, #10]
 8008b32:	9202      	str	r2, [sp, #8]
 8008b34:	2203      	movs	r2, #3
 8008b36:	9201      	str	r2, [sp, #4]
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 fdea 	bl	800a718 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f002 f8f9 	bl	800ad44 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b52:	2300      	movs	r3, #0
 8008b54:	2200      	movs	r2, #0
 8008b56:	210a      	movs	r1, #10
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fbeb 	bl	8009334 <USBH_FindInterface>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	2bff      	cmp	r3, #255	; 0xff
 8008b66:	d002      	beq.n	8008b6e <USBH_CDC_InterfaceInit+0x11a>
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d901      	bls.n	8008b72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e0c2      	b.n	8008cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	211a      	movs	r1, #26
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da16      	bge.n	8008bb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	211a      	movs	r1, #26
 8008b90:	fb01 f303 	mul.w	r3, r1, r3
 8008b94:	4413      	add	r3, r2
 8008b96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	211a      	movs	r1, #26
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bb0:	881a      	ldrh	r2, [r3, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	835a      	strh	r2, [r3, #26]
 8008bb6:	e015      	b.n	8008be4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	211a      	movs	r1, #26
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bc8:	781a      	ldrb	r2, [r3, #0]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	211a      	movs	r1, #26
 8008bd4:	fb01 f303 	mul.w	r3, r1, r3
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bde:	881a      	ldrh	r2, [r3, #0]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	211a      	movs	r1, #26
 8008bea:	fb01 f303 	mul.w	r3, r1, r3
 8008bee:	4413      	add	r3, r2
 8008bf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da16      	bge.n	8008c2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	211a      	movs	r1, #26
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	4413      	add	r3, r2
 8008c08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c0c:	781a      	ldrb	r2, [r3, #0]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	211a      	movs	r1, #26
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c22:	881a      	ldrh	r2, [r3, #0]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	835a      	strh	r2, [r3, #26]
 8008c28:	e015      	b.n	8008c56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	211a      	movs	r1, #26
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	211a      	movs	r1, #26
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	7b9b      	ldrb	r3, [r3, #14]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 fd8a 	bl	800a776 <USBH_AllocPipe>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	7bdb      	ldrb	r3, [r3, #15]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fd80 	bl	800a776 <USBH_AllocPipe>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	7b59      	ldrb	r1, [r3, #13]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	7b98      	ldrb	r0, [r3, #14]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	8b12      	ldrh	r2, [r2, #24]
 8008c96:	9202      	str	r2, [sp, #8]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	9201      	str	r2, [sp, #4]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fd38 	bl	800a718 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	7b19      	ldrb	r1, [r3, #12]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	7bd8      	ldrb	r0, [r3, #15]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	8b52      	ldrh	r2, [r2, #26]
 8008cc0:	9202      	str	r2, [sp, #8]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	9201      	str	r2, [sp, #4]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	4623      	mov	r3, r4
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fd23 	bl	800a718 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	7b5b      	ldrb	r3, [r3, #13]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f002 f82e 	bl	800ad44 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	7b1b      	ldrb	r3, [r3, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f002 f827 	bl	800ad44 <USBH_LL_SetToggle>

  return USBH_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd90      	pop	{r4, r7, pc}

08008d00 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00e      	beq.n	8008d38 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fd18 	bl	800a756 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fd43 	bl	800a7b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	7b1b      	ldrb	r3, [r3, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00e      	beq.n	8008d5e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	7b1b      	ldrb	r3, [r3, #12]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 fd05 	bl	800a756 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	7b1b      	ldrb	r3, [r3, #12]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 fd30 	bl	800a7b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	7b5b      	ldrb	r3, [r3, #13]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00e      	beq.n	8008d84 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7b5b      	ldrb	r3, [r3, #13]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fcf2 	bl	800a756 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	7b5b      	ldrb	r3, [r3, #13]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fd1d 	bl	800a7b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f002 f88d 	bl	800aeb8 <free>
    phost->pActiveClass->pData = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da4:	2200      	movs	r2, #0
 8008da6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3340      	adds	r3, #64	; 0x40
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8b1 	bl	8008f32 <GetLineCoding>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d105      	bne.n	8008de6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008de0:	2102      	movs	r1, #2
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008de6:	7afb      	ldrb	r3, [r7, #11]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d877      	bhi.n	8008f04 <USBH_CDC_Process+0x114>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBH_CDC_Process+0x2c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e37 	.word	0x08008e37
 8008e24:	08008e67 	.word	0x08008e67
 8008e28:	08008edb 	.word	0x08008edb
 8008e2c:	08008ee9 	.word	0x08008ee9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
      break;
 8008e34:	e06d      	b.n	8008f12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f897 	bl	8008f70 <SetLineCoding>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e54:	e058      	b.n	8008f08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d055      	beq.n	8008f08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e64:	e050      	b.n	8008f08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	3340      	adds	r3, #64	; 0x40
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f860 	bl	8008f32 <GetLineCoding>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d126      	bne.n	8008eca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8e:	791b      	ldrb	r3, [r3, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d13b      	bne.n	8008f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d133      	bne.n	8008f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d12b      	bne.n	8008f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d124      	bne.n	8008f0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f958 	bl	8009178 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ec8:	e020      	b.n	8008f0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d01d      	beq.n	8008f0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ed8:	e018      	b.n	8008f0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f867 	bl	8008fae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f8da 	bl	800909a <CDC_ProcessReception>
      break;
 8008ee6:	e014      	b.n	8008f12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ffe3 	bl	8009eb6 <USBH_ClrFeature>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008f02:	e005      	b.n	8008f10 <USBH_CDC_Process+0x120>

    default:
      break;
 8008f04:	bf00      	nop
 8008f06:	e004      	b.n	8008f12 <USBH_CDC_Process+0x122>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e002      	b.n	8008f12 <USBH_CDC_Process+0x122>
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e000      	b.n	8008f12 <USBH_CDC_Process+0x122>
      break;
 8008f10:	bf00      	nop

  }

  return status;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	22a1      	movs	r2, #161	; 0xa1
 8008f40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2221      	movs	r2, #33	; 0x21
 8008f46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2207      	movs	r2, #7
 8008f58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2207      	movs	r2, #7
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 f988 	bl	800a276 <USBH_CtlReq>
 8008f66:	4603      	mov	r3, r0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2207      	movs	r2, #7
 8008f96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f969 	bl	800a276 <USBH_CtlReq>
 8008fa4:	4603      	mov	r3, r0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af02      	add	r7, sp, #8
 8008fb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d002      	beq.n	8008fd4 <CDC_ProcessTransmission+0x26>
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d023      	beq.n	800901a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008fd2:	e05e      	b.n	8009092 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	8b12      	ldrh	r2, [r2, #24]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d90b      	bls.n	8008ff8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	69d9      	ldr	r1, [r3, #28]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8b1a      	ldrh	r2, [r3, #24]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	7b5b      	ldrb	r3, [r3, #13]
 8008fec:	2001      	movs	r0, #1
 8008fee:	9000      	str	r0, [sp, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 fb4e 	bl	800a692 <USBH_BulkSendData>
 8008ff6:	e00b      	b.n	8009010 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	7b5b      	ldrb	r3, [r3, #13]
 8009006:	2001      	movs	r0, #1
 8009008:	9000      	str	r0, [sp, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fb41 	bl	800a692 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009018:	e03b      	b.n	8009092 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	7b5b      	ldrb	r3, [r3, #13]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fe65 	bl	800acf0 <USBH_LL_GetURBState>
 8009026:	4603      	mov	r3, r0
 8009028:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d128      	bne.n	8009082 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	8b12      	ldrh	r2, [r2, #24]
 8009038:	4293      	cmp	r3, r2
 800903a:	d90e      	bls.n	800905a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	8b12      	ldrh	r2, [r2, #24]
 8009044:	1a9a      	subs	r2, r3, r2
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	8b12      	ldrh	r2, [r2, #24]
 8009052:	441a      	add	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	61da      	str	r2, [r3, #28]
 8009058:	e002      	b.n	8009060 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009070:	e00e      	b.n	8009090 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f868 	bl	8009150 <USBH_CDC_TransmitCallback>
      break;
 8009080:	e006      	b.n	8009090 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d103      	bne.n	8009090 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009090:	bf00      	nop
  }
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d002      	beq.n	80090c0 <CDC_ProcessReception+0x26>
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d00e      	beq.n	80090dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80090be:	e043      	b.n	8009148 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	6a19      	ldr	r1, [r3, #32]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	8b5a      	ldrh	r2, [r3, #26]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	7b1b      	ldrb	r3, [r3, #12]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fb05 	bl	800a6dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2204      	movs	r2, #4
 80090d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090da:	e035      	b.n	8009148 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	7b1b      	ldrb	r3, [r3, #12]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fe04 	bl	800acf0 <USBH_LL_GetURBState>
 80090e8:	4603      	mov	r3, r0
 80090ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d129      	bne.n	8009146 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	7b1b      	ldrb	r3, [r3, #12]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 fd67 	bl	800abcc <USBH_LL_GetLastXferSize>
 80090fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	429a      	cmp	r2, r3
 8009108:	d016      	beq.n	8009138 <CDC_ProcessReception+0x9e>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	8b5b      	ldrh	r3, [r3, #26]
 800910e:	461a      	mov	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4293      	cmp	r3, r2
 8009114:	d910      	bls.n	8009138 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1ad2      	subs	r2, r2, r3
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	6a1a      	ldr	r2, [r3, #32]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	441a      	add	r2, r3
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2203      	movs	r2, #3
 8009132:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009136:	e006      	b.n	8009146 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f80f 	bl	8009164 <USBH_CDC_ReceiveCallback>
      break;
 8009146:	bf00      	nop
  }
}
 8009148:	bf00      	nop
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	e029      	b.n	80091f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	79fa      	ldrb	r2, [r7, #7]
 80091a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 f81f 	bl	8009200 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f001 fc37 	bl	800aa64 <USBH_LL_Init>

  return USBH_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e009      	b.n	8009226 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	33e0      	adds	r3, #224	; 0xe0
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3301      	adds	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b0e      	cmp	r3, #14
 800922a:	d9f2      	bls.n	8009212 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	e009      	b.n	8009246 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800923c:	2200      	movs	r2, #0
 800923e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800924c:	d3f1      	bcc.n	8009232 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2240      	movs	r2, #64	; 0x40
 8009272:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d016      	beq.n	80092ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10e      	bne.n	80092e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092cc:	1c59      	adds	r1, r3, #1
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	33de      	adds	r3, #222	; 0xde
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	e004      	b.n	80092ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092e4:	2302      	movs	r3, #2
 80092e6:	73fb      	strb	r3, [r7, #15]
 80092e8:	e001      	b.n	80092ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092ea:	2302      	movs	r3, #2
 80092ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	429a      	cmp	r2, r3
 8009316:	d204      	bcs.n	8009322 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	78fa      	ldrb	r2, [r7, #3]
 800931c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009320:	e001      	b.n	8009326 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009322:	2302      	movs	r3, #2
 8009324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	4608      	mov	r0, r1
 800933e:	4611      	mov	r1, r2
 8009340:	461a      	mov	r2, r3
 8009342:	4603      	mov	r3, r0
 8009344:	70fb      	strb	r3, [r7, #3]
 8009346:	460b      	mov	r3, r1
 8009348:	70bb      	strb	r3, [r7, #2]
 800934a:	4613      	mov	r3, r2
 800934c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800935c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800935e:	e025      	b.n	80093ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	221a      	movs	r2, #26
 8009364:	fb02 f303 	mul.w	r3, r2, r3
 8009368:	3308      	adds	r3, #8
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	3302      	adds	r3, #2
 8009370:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	795b      	ldrb	r3, [r3, #5]
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	429a      	cmp	r2, r3
 800937a:	d002      	beq.n	8009382 <USBH_FindInterface+0x4e>
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	2bff      	cmp	r3, #255	; 0xff
 8009380:	d111      	bne.n	80093a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009386:	78ba      	ldrb	r2, [r7, #2]
 8009388:	429a      	cmp	r2, r3
 800938a:	d002      	beq.n	8009392 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800938c:	78bb      	ldrb	r3, [r7, #2]
 800938e:	2bff      	cmp	r3, #255	; 0xff
 8009390:	d109      	bne.n	80093a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009396:	787a      	ldrb	r2, [r7, #1]
 8009398:	429a      	cmp	r2, r3
 800939a:	d002      	beq.n	80093a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800939c:	787b      	ldrb	r3, [r7, #1]
 800939e:	2bff      	cmp	r3, #255	; 0xff
 80093a0:	d101      	bne.n	80093a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	e006      	b.n	80093b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	3301      	adds	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d9d6      	bls.n	8009360 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093b2:	23ff      	movs	r3, #255	; 0xff
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	371c      	adds	r7, #28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 fb87 	bl	800aadc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80093ce:	2101      	movs	r1, #1
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fca0 	bl	800ad16 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093e8:	2302      	movs	r3, #2
 80093ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d102      	bne.n	8009402 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2203      	movs	r2, #3
 8009400:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b0b      	cmp	r3, #11
 800940a:	f200 81b3 	bhi.w	8009774 <USBH_Process+0x394>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <USBH_Process+0x34>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009445 	.word	0x08009445
 8009418:	08009477 	.word	0x08009477
 800941c:	080094df 	.word	0x080094df
 8009420:	0800970f 	.word	0x0800970f
 8009424:	08009775 	.word	0x08009775
 8009428:	08009583 	.word	0x08009583
 800942c:	080096b5 	.word	0x080096b5
 8009430:	080095b9 	.word	0x080095b9
 8009434:	080095d9 	.word	0x080095d9
 8009438:	080095f9 	.word	0x080095f9
 800943c:	08009627 	.word	0x08009627
 8009440:	080096f7 	.word	0x080096f7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 8193 	beq.w	8009778 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009458:	20c8      	movs	r0, #200	; 0xc8
 800945a:	f001 fca3 	bl	800ada4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 fb99 	bl	800ab96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009474:	e180      	b.n	8009778 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800947c:	2b01      	cmp	r3, #1
 800947e:	d107      	bne.n	8009490 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800948e:	e182      	b.n	8009796 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800949a:	d914      	bls.n	80094c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094a2:	3301      	adds	r3, #1
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d903      	bls.n	80094be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	220d      	movs	r2, #13
 80094ba:	701a      	strb	r2, [r3, #0]
      break;
 80094bc:	e16b      	b.n	8009796 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
      break;
 80094c4:	e167      	b.n	8009796 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094cc:	f103 020a 	add.w	r2, r3, #10
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094d6:	200a      	movs	r0, #10
 80094d8:	f001 fc64 	bl	800ada4 <USBH_Delay>
      break;
 80094dc:	e15b      	b.n	8009796 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094ee:	2104      	movs	r1, #4
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094f4:	2064      	movs	r0, #100	; 0x64
 80094f6:	f001 fc55 	bl	800ada4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fb24 	bl	800ab48 <USBH_LL_GetSpeed>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2205      	movs	r2, #5
 800950e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 f92f 	bl	800a776 <USBH_AllocPipe>
 8009518:	4603      	mov	r3, r0
 800951a:	461a      	mov	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009520:	2180      	movs	r1, #128	; 0x80
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 f927 	bl	800a776 <USBH_AllocPipe>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7919      	ldrb	r1, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009544:	b292      	uxth	r2, r2
 8009546:	9202      	str	r2, [sp, #8]
 8009548:	2200      	movs	r2, #0
 800954a:	9201      	str	r2, [sp, #4]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4603      	mov	r3, r0
 8009550:	2280      	movs	r2, #128	; 0x80
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f8e0 	bl	800a718 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7959      	ldrb	r1, [r3, #5]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800956c:	b292      	uxth	r2, r2
 800956e:	9202      	str	r2, [sp, #8]
 8009570:	2200      	movs	r2, #0
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	4603      	mov	r3, r0
 8009578:	2200      	movs	r2, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 f8cc 	bl	800a718 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009580:	e109      	b.n	8009796 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f90c 	bl	80097a0 <USBH_HandleEnum>
 8009588:	4603      	mov	r3, r0
 800958a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 80f3 	bne.w	800977c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d103      	bne.n	80095b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2208      	movs	r2, #8
 80095ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095ae:	e0e5      	b.n	800977c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2207      	movs	r2, #7
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	e0e1      	b.n	800977c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 80de 	beq.w	8009780 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ca:	2101      	movs	r1, #1
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2208      	movs	r2, #8
 80095d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80095d6:	e0d3      	b.n	8009780 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095de:	b29b      	uxth	r3, r3
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fc20 	bl	8009e28 <USBH_SetCfg>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f040 80ca 	bne.w	8009784 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2209      	movs	r2, #9
 80095f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095f6:	e0c5      	b.n	8009784 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009606:	2101      	movs	r1, #1
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc30 	bl	8009e6e <USBH_SetFeature>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	f040 80b9 	bne.w	8009788 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220a      	movs	r2, #10
 800961a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800961c:	e0b4      	b.n	8009788 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	220a      	movs	r2, #10
 8009622:	701a      	strb	r2, [r3, #0]
      break;
 8009624:	e0b0      	b.n	8009788 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80ad 	beq.w	800978c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
 800963e:	e016      	b.n	800966e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009640:	7bfa      	ldrb	r2, [r7, #15]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	32de      	adds	r2, #222	; 0xde
 8009646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964a:	791a      	ldrb	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009652:	429a      	cmp	r2, r3
 8009654:	d108      	bne.n	8009668 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009656:	7bfa      	ldrb	r2, [r7, #15]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	32de      	adds	r2, #222	; 0xde
 800965c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009666:	e005      	b.n	8009674 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	3301      	adds	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0e5      	beq.n	8009640 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d016      	beq.n	80096ac <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2206      	movs	r2, #6
 8009694:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800969c:	2103      	movs	r1, #3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096a2:	e073      	b.n	800978c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	220d      	movs	r2, #13
 80096a8:	701a      	strb	r2, [r3, #0]
      break;
 80096aa:	e06f      	b.n	800978c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	220d      	movs	r2, #13
 80096b0:	701a      	strb	r2, [r3, #0]
      break;
 80096b2:	e06b      	b.n	800978c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d017      	beq.n	80096ee <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	220b      	movs	r2, #11
 80096da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096dc:	e058      	b.n	8009790 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d154      	bne.n	8009790 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	220d      	movs	r2, #13
 80096ea:	701a      	strb	r2, [r3, #0]
      break;
 80096ec:	e050      	b.n	8009790 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	220d      	movs	r2, #13
 80096f2:	701a      	strb	r2, [r3, #0]
      break;
 80096f4:	e04c      	b.n	8009790 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d049      	beq.n	8009794 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	4798      	blx	r3
      }
      break;
 800970c:	e042      	b.n	8009794 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fd72 	bl	8009200 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800974a:	2105      	movs	r1, #5
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d107      	bne.n	800976c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fe2b 	bl	80093c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800976a:	e014      	b.n	8009796 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 f9b5 	bl	800aadc <USBH_LL_Start>
      break;
 8009772:	e010      	b.n	8009796 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009774:	bf00      	nop
 8009776:	e00e      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 8009778:	bf00      	nop
 800977a:	e00c      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 800977c:	bf00      	nop
 800977e:	e00a      	b.n	8009796 <USBH_Process+0x3b6>
    break;
 8009780:	bf00      	nop
 8009782:	e008      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 8009784:	bf00      	nop
 8009786:	e006      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 8009788:	bf00      	nop
 800978a:	e004      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 800978c:	bf00      	nop
 800978e:	e002      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 8009790:	bf00      	nop
 8009792:	e000      	b.n	8009796 <USBH_Process+0x3b6>
      break;
 8009794:	bf00      	nop
  }
  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	785b      	ldrb	r3, [r3, #1]
 80097b4:	2b07      	cmp	r3, #7
 80097b6:	f200 81c1 	bhi.w	8009b3c <USBH_HandleEnum+0x39c>
 80097ba:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <USBH_HandleEnum+0x20>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097e1 	.word	0x080097e1
 80097c4:	0800989f 	.word	0x0800989f
 80097c8:	08009909 	.word	0x08009909
 80097cc:	08009997 	.word	0x08009997
 80097d0:	08009a01 	.word	0x08009a01
 80097d4:	08009a71 	.word	0x08009a71
 80097d8:	08009ab7 	.word	0x08009ab7
 80097dc:	08009afd 	.word	0x08009afd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097e0:	2108      	movs	r1, #8
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa50 	bl	8009c88 <USBH_Get_DevDesc>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d130      	bne.n	8009854 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7919      	ldrb	r1, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009816:	b292      	uxth	r2, r2
 8009818:	9202      	str	r2, [sp, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	9201      	str	r2, [sp, #4]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	4603      	mov	r3, r0
 8009822:	2280      	movs	r2, #128	; 0x80
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 ff77 	bl	800a718 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7959      	ldrb	r1, [r3, #5]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800983e:	b292      	uxth	r2, r2
 8009840:	9202      	str	r2, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	9201      	str	r2, [sp, #4]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	4603      	mov	r3, r0
 800984a:	2200      	movs	r2, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 ff63 	bl	800a718 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009852:	e175      	b.n	8009b40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b03      	cmp	r3, #3
 8009858:	f040 8172 	bne.w	8009b40 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009862:	3301      	adds	r3, #1
 8009864:	b2da      	uxtb	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009872:	2b03      	cmp	r3, #3
 8009874:	d903      	bls.n	800987e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	220d      	movs	r2, #13
 800987a:	701a      	strb	r2, [r3, #0]
      break;
 800987c:	e160      	b.n	8009b40 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	795b      	ldrb	r3, [r3, #5]
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 ff97 	bl	800a7b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 ff91 	bl	800a7b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
      break;
 800989c:	e150      	b.n	8009b40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800989e:	2112      	movs	r1, #18
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9f1 	bl	8009c88 <USBH_Get_DevDesc>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d103      	bne.n	80098b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098b6:	e145      	b.n	8009b44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	f040 8142 	bne.w	8009b44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098c6:	3301      	adds	r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d903      	bls.n	80098e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	220d      	movs	r2, #13
 80098de:	701a      	strb	r2, [r3, #0]
      break;
 80098e0:	e130      	b.n	8009b44 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	795b      	ldrb	r3, [r3, #5]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 ff65 	bl	800a7b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	791b      	ldrb	r3, [r3, #4]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 ff5f 	bl	800a7b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
      break;
 8009906:	e11d      	b.n	8009b44 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009908:	2101      	movs	r1, #1
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa68 	bl	8009de0 <USBH_SetAddress>
 8009910:	4603      	mov	r3, r0
 8009912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d132      	bne.n	8009980 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800991a:	2002      	movs	r0, #2
 800991c:	f001 fa42 	bl	800ada4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2203      	movs	r2, #3
 800992c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7919      	ldrb	r1, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009942:	b292      	uxth	r2, r2
 8009944:	9202      	str	r2, [sp, #8]
 8009946:	2200      	movs	r2, #0
 8009948:	9201      	str	r2, [sp, #4]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	4603      	mov	r3, r0
 800994e:	2280      	movs	r2, #128	; 0x80
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fee1 	bl	800a718 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7959      	ldrb	r1, [r3, #5]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800996a:	b292      	uxth	r2, r2
 800996c:	9202      	str	r2, [sp, #8]
 800996e:	2200      	movs	r2, #0
 8009970:	9201      	str	r2, [sp, #4]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	4603      	mov	r3, r0
 8009976:	2200      	movs	r2, #0
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fecd 	bl	800a718 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800997e:	e0e3      	b.n	8009b48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b03      	cmp	r3, #3
 8009984:	f040 80e0 	bne.w	8009b48 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	220d      	movs	r2, #13
 800998c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	705a      	strb	r2, [r3, #1]
      break;
 8009994:	e0d8      	b.n	8009b48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009996:	2109      	movs	r1, #9
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f99d 	bl	8009cd8 <USBH_Get_CfgDesc>
 800999e:	4603      	mov	r3, r0
 80099a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2204      	movs	r2, #4
 80099ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ae:	e0cd      	b.n	8009b4c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	f040 80ca 	bne.w	8009b4c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099be:	3301      	adds	r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d903      	bls.n	80099da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	220d      	movs	r2, #13
 80099d6:	701a      	strb	r2, [r3, #0]
      break;
 80099d8:	e0b8      	b.n	8009b4c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	795b      	ldrb	r3, [r3, #5]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fee9 	bl	800a7b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	791b      	ldrb	r3, [r3, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fee3 	bl	800a7b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
      break;
 80099fe:	e0a5      	b.n	8009b4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f965 	bl	8009cd8 <USBH_Get_CfgDesc>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d103      	bne.n	8009a20 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2205      	movs	r2, #5
 8009a1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a1e:	e097      	b.n	8009b50 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	f040 8094 	bne.w	8009b50 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a2e:	3301      	adds	r3, #1
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d903      	bls.n	8009a4a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	220d      	movs	r2, #13
 8009a46:	701a      	strb	r2, [r3, #0]
      break;
 8009a48:	e082      	b.n	8009b50 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	795b      	ldrb	r3, [r3, #5]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 feb1 	bl	800a7b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 feab 	bl	800a7b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]
      break;
 8009a6e:	e06f      	b.n	8009b50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d019      	beq.n	8009aae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a86:	23ff      	movs	r3, #255	; 0xff
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f949 	bl	8009d20 <USBH_Get_StringDesc>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2206      	movs	r2, #6
 8009a9c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a9e:	e059      	b.n	8009b54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d156      	bne.n	8009b54 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2206      	movs	r2, #6
 8009aaa:	705a      	strb	r2, [r3, #1]
      break;
 8009aac:	e052      	b.n	8009b54 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2206      	movs	r2, #6
 8009ab2:	705a      	strb	r2, [r3, #1]
      break;
 8009ab4:	e04e      	b.n	8009b54 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d019      	beq.n	8009af4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009acc:	23ff      	movs	r3, #255	; 0xff
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f926 	bl	8009d20 <USBH_Get_StringDesc>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d103      	bne.n	8009ae6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009ae4:	e038      	b.n	8009b58 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d135      	bne.n	8009b58 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2207      	movs	r2, #7
 8009af0:	705a      	strb	r2, [r3, #1]
      break;
 8009af2:	e031      	b.n	8009b58 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2207      	movs	r2, #7
 8009af8:	705a      	strb	r2, [r3, #1]
      break;
 8009afa:	e02d      	b.n	8009b58 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d017      	beq.n	8009b36 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b12:	23ff      	movs	r3, #255	; 0xff
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f903 	bl	8009d20 <USBH_Get_StringDesc>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b28:	e018      	b.n	8009b5c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d115      	bne.n	8009b5c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
      break;
 8009b34:	e012      	b.n	8009b5c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3a:	e00f      	b.n	8009b5c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e00e      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b40:	bf00      	nop
 8009b42:	e00c      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b44:	bf00      	nop
 8009b46:	e00a      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b48:	bf00      	nop
 8009b4a:	e008      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e006      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <USBH_HandleEnum+0x3be>
      break;
 8009b5c:	bf00      	nop
  }
  return Status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f804 	bl	8009baa <USBH_HandleSof>
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b0b      	cmp	r3, #11
 8009bba:	d10a      	bne.n	8009bd2 <USBH_HandleSof+0x28>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
  }
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b083      	sub	sp, #12
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009bea:	bf00      	nop
}
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c06:	bf00      	nop
}
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 ff56 	bl	800ab12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	791b      	ldrb	r3, [r3, #4]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fda3 	bl	800a7b8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	795b      	ldrb	r3, [r3, #5]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fd9d 	bl	800a7b8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f864 	bl	8009d76 <USBH_GetDescriptor>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f000 f918 	bl	8009efe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	331c      	adds	r3, #28
 8009ce8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cea:	887b      	ldrh	r3, [r7, #2]
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f83d 	bl	8009d76 <USBH_GetDescriptor>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	72fb      	strb	r3, [r7, #11]
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d107      	bne.n	8009d16 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d0c:	887a      	ldrh	r2, [r7, #2]
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f964 	bl	8009fde <USBH_ParseCfgDesc>
  }

  return status;
 8009d16:	7afb      	ldrb	r3, [r7, #11]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	72fb      	strb	r3, [r7, #11]
 8009d30:	4613      	mov	r3, r2
 8009d32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d3c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f812 	bl	8009d76 <USBH_GetDescriptor>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d62:	893a      	ldrh	r2, [r7, #8]
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fa37 	bl	800a1da <USBH_ParseStringDesc>
  }

  return status;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	607b      	str	r3, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	72fb      	strb	r3, [r7, #11]
 8009d84:	4613      	mov	r3, r2
 8009d86:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	789b      	ldrb	r3, [r3, #2]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d11c      	bne.n	8009dca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d90:	7afb      	ldrb	r3, [r7, #11]
 8009d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2206      	movs	r2, #6
 8009da0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	893a      	ldrh	r2, [r7, #8]
 8009da6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009da8:	893b      	ldrh	r3, [r7, #8]
 8009daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009db2:	d104      	bne.n	8009dbe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f240 4209 	movw	r2, #1033	; 0x409
 8009dba:	829a      	strh	r2, [r3, #20]
 8009dbc:	e002      	b.n	8009dc4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8b3a      	ldrh	r2, [r7, #24]
 8009dc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009dca:	8b3b      	ldrh	r3, [r7, #24]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fa50 	bl	800a276 <USBH_CtlReq>
 8009dd6:	4603      	mov	r3, r0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	789b      	ldrb	r3, [r3, #2]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d10f      	bne.n	8009e14 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e14:	2200      	movs	r2, #0
 8009e16:	2100      	movs	r1, #0
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fa2c 	bl	800a276 <USBH_CtlReq>
 8009e1e:	4603      	mov	r3, r0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	789b      	ldrb	r3, [r3, #2]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d10e      	bne.n	8009e5a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2209      	movs	r2, #9
 8009e46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	887a      	ldrh	r2, [r7, #2]
 8009e4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa09 	bl	800a276 <USBH_CtlReq>
 8009e64:	4603      	mov	r3, r0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	789b      	ldrb	r3, [r3, #2]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d10f      	bne.n	8009ea2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f9e5 	bl	800a276 <USBH_CtlReq>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	789b      	ldrb	r3, [r3, #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d10f      	bne.n	8009eea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009eea:	2200      	movs	r2, #0
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f9c1 	bl	800a276 <USBH_CtlReq>
 8009ef4:	4603      	mov	r3, r0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	785a      	ldrb	r2, [r3, #1]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	3302      	adds	r3, #2
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	3303      	adds	r3, #3
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	791a      	ldrb	r2, [r3, #4]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	795a      	ldrb	r2, [r3, #5]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	799a      	ldrb	r2, [r3, #6]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	79da      	ldrb	r2, [r3, #7]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009f58:	88fb      	ldrh	r3, [r7, #6]
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	d939      	bls.n	8009fd2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	3308      	adds	r3, #8
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3309      	adds	r3, #9
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	330a      	adds	r3, #10
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	330b      	adds	r3, #11
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	021b      	lsls	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	330c      	adds	r3, #12
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	330d      	adds	r3, #13
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	7b9a      	ldrb	r2, [r3, #14]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	7bda      	ldrb	r2, [r3, #15]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	7c1a      	ldrb	r2, [r3, #16]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	7c5a      	ldrb	r2, [r3, #17]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	745a      	strb	r2, [r3, #17]
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b08a      	sub	sp, #40	; 0x28
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	785a      	ldrb	r2, [r3, #1]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	3302      	adds	r3, #2
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	b29a      	uxth	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3303      	adds	r3, #3
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	021b      	lsls	r3, r3, #8
 800a022:	b29b      	uxth	r3, r3
 800a024:	4313      	orrs	r3, r2
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	791a      	ldrb	r2, [r3, #4]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	795a      	ldrb	r2, [r3, #5]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	799a      	ldrb	r2, [r3, #6]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	79da      	ldrb	r2, [r3, #7]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	7a1a      	ldrb	r2, [r3, #8]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	2b09      	cmp	r3, #9
 800a058:	d95f      	bls.n	800a11a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a05a:	2309      	movs	r3, #9
 800a05c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a062:	e051      	b.n	800a108 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a064:	f107 0316 	add.w	r3, r7, #22
 800a068:	4619      	mov	r1, r3
 800a06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a06c:	f000 f8e8 	bl	800a240 <USBH_GetNextDesc>
 800a070:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	785b      	ldrb	r3, [r3, #1]
 800a076:	2b04      	cmp	r3, #4
 800a078:	d146      	bne.n	800a108 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a07a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a07e:	221a      	movs	r2, #26
 800a080:	fb02 f303 	mul.w	r3, r2, r3
 800a084:	3308      	adds	r3, #8
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4413      	add	r3, r2
 800a08a:	3302      	adds	r3, #2
 800a08c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a08e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a090:	69f8      	ldr	r0, [r7, #28]
 800a092:	f000 f846 	bl	800a122 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0a0:	e022      	b.n	800a0e8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0a2:	f107 0316 	add.w	r3, r7, #22
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0aa:	f000 f8c9 	bl	800a240 <USBH_GetNextDesc>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d117      	bne.n	800a0e8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a0c0:	3201      	adds	r2, #1
 800a0c2:	00d2      	lsls	r2, r2, #3
 800a0c4:	211a      	movs	r1, #26
 800a0c6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a0d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0d8:	69b8      	ldr	r0, [r7, #24]
 800a0da:	f000 f851 	bl	800a180 <USBH_ParseEPDesc>
            ep_ix++;
 800a0de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	791b      	ldrb	r3, [r3, #4]
 800a0ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d204      	bcs.n	800a0fe <USBH_ParseCfgDesc+0x120>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	885a      	ldrh	r2, [r3, #2]
 800a0f8:	8afb      	ldrh	r3, [r7, #22]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d8d1      	bhi.n	800a0a2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a0fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a102:	3301      	adds	r3, #1
 800a104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d804      	bhi.n	800a11a <USBH_ParseCfgDesc+0x13c>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	885a      	ldrh	r2, [r3, #2]
 800a114:	8afb      	ldrh	r3, [r7, #22]
 800a116:	429a      	cmp	r2, r3
 800a118:	d8a4      	bhi.n	800a064 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a11a:	bf00      	nop
 800a11c:	3728      	adds	r7, #40	; 0x28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781a      	ldrb	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	785a      	ldrb	r2, [r3, #1]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	789a      	ldrb	r2, [r3, #2]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	78da      	ldrb	r2, [r3, #3]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	791a      	ldrb	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	795a      	ldrb	r2, [r3, #5]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	799a      	ldrb	r2, [r3, #6]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	79da      	ldrb	r2, [r3, #7]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	7a1a      	ldrb	r2, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	721a      	strb	r2, [r3, #8]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785a      	ldrb	r2, [r3, #1]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	789a      	ldrb	r2, [r3, #2]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	78da      	ldrb	r2, [r3, #3]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	3305      	adds	r3, #5
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	799a      	ldrb	r2, [r3, #6]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	719a      	strb	r2, [r3, #6]
}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b087      	sub	sp, #28
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d120      	bne.n	800a234 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	1e9a      	subs	r2, r3, #2
 800a1f8:	88fb      	ldrh	r3, [r7, #6]
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bf28      	it	cs
 800a1fe:	4613      	movcs	r3, r2
 800a200:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3302      	adds	r3, #2
 800a206:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a208:	2300      	movs	r3, #0
 800a20a:	82fb      	strh	r3, [r7, #22]
 800a20c:	e00b      	b.n	800a226 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a20e:	8afb      	ldrh	r3, [r7, #22]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a220:	8afb      	ldrh	r3, [r7, #22]
 800a222:	3302      	adds	r3, #2
 800a224:	82fb      	strh	r3, [r7, #22]
 800a226:	8afa      	ldrh	r2, [r7, #22]
 800a228:	8abb      	ldrh	r3, [r7, #20]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d3ef      	bcc.n	800a20e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
  }
}
 800a234:	bf00      	nop
 800a236:	371c      	adds	r7, #28
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	881a      	ldrh	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	b29b      	uxth	r3, r3
 800a254:	4413      	add	r3, r2
 800a256:	b29a      	uxth	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4413      	add	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a268:	68fb      	ldr	r3, [r7, #12]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b086      	sub	sp, #24
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	4613      	mov	r3, r2
 800a282:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a284:	2301      	movs	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	789b      	ldrb	r3, [r3, #2]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d002      	beq.n	800a296 <USBH_CtlReq+0x20>
 800a290:	2b02      	cmp	r3, #2
 800a292:	d00f      	beq.n	800a2b4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a294:	e027      	b.n	800a2e6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b2:	e018      	b.n	800a2e6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f81b 	bl	800a2f0 <USBH_HandleControl>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <USBH_CtlReq+0x54>
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d106      	bne.n	800a2d8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	761a      	strb	r2, [r3, #24]
      break;
 800a2d6:	e005      	b.n	800a2e4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d102      	bne.n	800a2e4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	709a      	strb	r2, [r3, #2]
      break;
 800a2e4:	bf00      	nop
  }
  return status;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7e1b      	ldrb	r3, [r3, #24]
 800a304:	3b01      	subs	r3, #1
 800a306:	2b0a      	cmp	r3, #10
 800a308:	f200 8156 	bhi.w	800a5b8 <USBH_HandleControl+0x2c8>
 800a30c:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <USBH_HandleControl+0x24>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a341 	.word	0x0800a341
 800a318:	0800a35b 	.word	0x0800a35b
 800a31c:	0800a3c5 	.word	0x0800a3c5
 800a320:	0800a3eb 	.word	0x0800a3eb
 800a324:	0800a423 	.word	0x0800a423
 800a328:	0800a44d 	.word	0x0800a44d
 800a32c:	0800a49f 	.word	0x0800a49f
 800a330:	0800a4c1 	.word	0x0800a4c1
 800a334:	0800a4fd 	.word	0x0800a4fd
 800a338:	0800a523 	.word	0x0800a523
 800a33c:	0800a561 	.word	0x0800a561
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f103 0110 	add.w	r1, r3, #16
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	795b      	ldrb	r3, [r3, #5]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f943 	bl	800a5d8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2202      	movs	r2, #2
 800a356:	761a      	strb	r2, [r3, #24]
      break;
 800a358:	e139      	b.n	800a5ce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	795b      	ldrb	r3, [r3, #5]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fcc5 	bl	800acf0 <USBH_LL_GetURBState>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d11e      	bne.n	800a3ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	7c1b      	ldrb	r3, [r3, #16]
 800a374:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a378:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8adb      	ldrh	r3, [r3, #22]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a382:	7b7b      	ldrb	r3, [r7, #13]
 800a384:	2b80      	cmp	r3, #128	; 0x80
 800a386:	d103      	bne.n	800a390 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2203      	movs	r2, #3
 800a38c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a38e:	e115      	b.n	800a5bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2205      	movs	r2, #5
 800a394:	761a      	strb	r2, [r3, #24]
      break;
 800a396:	e111      	b.n	800a5bc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a398:	7b7b      	ldrb	r3, [r7, #13]
 800a39a:	2b80      	cmp	r3, #128	; 0x80
 800a39c:	d103      	bne.n	800a3a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2209      	movs	r2, #9
 800a3a2:	761a      	strb	r2, [r3, #24]
      break;
 800a3a4:	e10a      	b.n	800a5bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2207      	movs	r2, #7
 800a3aa:	761a      	strb	r2, [r3, #24]
      break;
 800a3ac:	e106      	b.n	800a5bc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d003      	beq.n	800a3bc <USBH_HandleControl+0xcc>
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	f040 8100 	bne.w	800a5bc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	220b      	movs	r2, #11
 800a3c0:	761a      	strb	r2, [r3, #24]
      break;
 800a3c2:	e0fb      	b.n	800a5bc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6899      	ldr	r1, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	899a      	ldrh	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	791b      	ldrb	r3, [r3, #4]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f93a 	bl	800a656 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	761a      	strb	r2, [r3, #24]
      break;
 800a3e8:	e0f1      	b.n	800a5ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fc7d 	bl	800acf0 <USBH_LL_GetURBState>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d102      	bne.n	800a406 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2209      	movs	r2, #9
 800a404:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b05      	cmp	r3, #5
 800a40a:	d102      	bne.n	800a412 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a40c:	2303      	movs	r3, #3
 800a40e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a410:	e0d6      	b.n	800a5c0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b04      	cmp	r3, #4
 800a416:	f040 80d3 	bne.w	800a5c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	220b      	movs	r2, #11
 800a41e:	761a      	strb	r2, [r3, #24]
      break;
 800a420:	e0ce      	b.n	800a5c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6899      	ldr	r1, [r3, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	899a      	ldrh	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	795b      	ldrb	r3, [r3, #5]
 800a42e:	2001      	movs	r0, #1
 800a430:	9000      	str	r0, [sp, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f8ea 	bl	800a60c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2206      	movs	r2, #6
 800a448:	761a      	strb	r2, [r3, #24]
      break;
 800a44a:	e0c0      	b.n	800a5ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	795b      	ldrb	r3, [r3, #5]
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fc4c 	bl	800acf0 <USBH_LL_GetURBState>
 800a458:	4603      	mov	r3, r0
 800a45a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d103      	bne.n	800a46a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2207      	movs	r2, #7
 800a466:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a468:	e0ac      	b.n	800a5c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b05      	cmp	r3, #5
 800a46e:	d105      	bne.n	800a47c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220c      	movs	r2, #12
 800a474:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a476:	2303      	movs	r3, #3
 800a478:	73fb      	strb	r3, [r7, #15]
      break;
 800a47a:	e0a3      	b.n	800a5c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d103      	bne.n	800a48a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2205      	movs	r2, #5
 800a486:	761a      	strb	r2, [r3, #24]
      break;
 800a488:	e09c      	b.n	800a5c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	f040 8099 	bne.w	800a5c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	220b      	movs	r2, #11
 800a496:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a498:	2302      	movs	r3, #2
 800a49a:	73fb      	strb	r3, [r7, #15]
      break;
 800a49c:	e092      	b.n	800a5c4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f8d5 	bl	800a656 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	761a      	strb	r2, [r3, #24]

      break;
 800a4be:	e086      	b.n	800a5ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	791b      	ldrb	r3, [r3, #4]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fc12 	bl	800acf0 <USBH_LL_GetURBState>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d105      	bne.n	800a4e2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	220d      	movs	r2, #13
 800a4da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4e0:	e072      	b.n	800a5c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d103      	bne.n	800a4f0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220b      	movs	r2, #11
 800a4ec:	761a      	strb	r2, [r3, #24]
      break;
 800a4ee:	e06b      	b.n	800a5c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d168      	bne.n	800a5c8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fa:	e065      	b.n	800a5c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	795b      	ldrb	r3, [r3, #5]
 800a500:	2201      	movs	r2, #1
 800a502:	9200      	str	r2, [sp, #0]
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f87f 	bl	800a60c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a514:	b29a      	uxth	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	220a      	movs	r2, #10
 800a51e:	761a      	strb	r2, [r3, #24]
      break;
 800a520:	e055      	b.n	800a5ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	795b      	ldrb	r3, [r3, #5]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fbe1 	bl	800acf0 <USBH_LL_GetURBState>
 800a52e:	4603      	mov	r3, r0
 800a530:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d105      	bne.n	800a544 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	220d      	movs	r2, #13
 800a540:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a542:	e043      	b.n	800a5cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d103      	bne.n	800a552 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2209      	movs	r2, #9
 800a54e:	761a      	strb	r2, [r3, #24]
      break;
 800a550:	e03c      	b.n	800a5cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	2b04      	cmp	r3, #4
 800a556:	d139      	bne.n	800a5cc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	220b      	movs	r2, #11
 800a55c:	761a      	strb	r2, [r3, #24]
      break;
 800a55e:	e035      	b.n	800a5cc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	7e5b      	ldrb	r3, [r3, #25]
 800a564:	3301      	adds	r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	765a      	strb	r2, [r3, #25]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	7e5b      	ldrb	r3, [r3, #25]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d806      	bhi.n	800a582 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a580:	e025      	b.n	800a5ce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a588:	2106      	movs	r1, #6
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	795b      	ldrb	r3, [r3, #5]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f90c 	bl	800a7b8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	791b      	ldrb	r3, [r3, #4]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f906 	bl	800a7b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b6:	e00a      	b.n	800a5ce <USBH_HandleControl+0x2de>

    default:
      break;
 800a5b8:	bf00      	nop
 800a5ba:	e008      	b.n	800a5ce <USBH_HandleControl+0x2de>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e006      	b.n	800a5ce <USBH_HandleControl+0x2de>
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e004      	b.n	800a5ce <USBH_HandleControl+0x2de>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e002      	b.n	800a5ce <USBH_HandleControl+0x2de>
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e000      	b.n	800a5ce <USBH_HandleControl+0x2de>
      break;
 800a5cc:	bf00      	nop
  }

  return status;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af04      	add	r7, sp, #16
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a5e6:	79f9      	ldrb	r1, [r7, #7]
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9303      	str	r3, [sp, #12]
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 fb46 	bl	800ac8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af04      	add	r7, sp, #16
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4611      	mov	r1, r2
 800a618:	461a      	mov	r2, r3
 800a61a:	460b      	mov	r3, r1
 800a61c:	80fb      	strh	r3, [r7, #6]
 800a61e:	4613      	mov	r3, r2
 800a620:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a630:	7979      	ldrb	r1, [r7, #5]
 800a632:	7e3b      	ldrb	r3, [r7, #24]
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	9302      	str	r3, [sp, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	2301      	movs	r3, #1
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	2300      	movs	r3, #0
 800a644:	2200      	movs	r2, #0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 fb21 	bl	800ac8e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b088      	sub	sp, #32
 800a65a:	af04      	add	r7, sp, #16
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	4611      	mov	r1, r2
 800a662:	461a      	mov	r2, r3
 800a664:	460b      	mov	r3, r1
 800a666:	80fb      	strh	r3, [r7, #6]
 800a668:	4613      	mov	r3, r2
 800a66a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a66c:	7979      	ldrb	r1, [r7, #5]
 800a66e:	2300      	movs	r3, #0
 800a670:	9303      	str	r3, [sp, #12]
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	9302      	str	r3, [sp, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	2301      	movs	r3, #1
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	2300      	movs	r3, #0
 800a680:	2201      	movs	r2, #1
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 fb03 	bl	800ac8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a688:	2300      	movs	r3, #0

}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b088      	sub	sp, #32
 800a696:	af04      	add	r7, sp, #16
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	4611      	mov	r1, r2
 800a69e:	461a      	mov	r2, r3
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	80fb      	strh	r3, [r7, #6]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6b6:	7979      	ldrb	r1, [r7, #5]
 800a6b8:	7e3b      	ldrb	r3, [r7, #24]
 800a6ba:	9303      	str	r3, [sp, #12]
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	9302      	str	r3, [sp, #8]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 fade 	bl	800ac8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af04      	add	r7, sp, #16
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	80fb      	strh	r3, [r7, #6]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6f2:	7979      	ldrb	r1, [r7, #5]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9303      	str	r3, [sp, #12]
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	9302      	str	r3, [sp, #8]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	2301      	movs	r3, #1
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2302      	movs	r3, #2
 800a706:	2201      	movs	r2, #1
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 fac0 	bl	800ac8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af04      	add	r7, sp, #16
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	4608      	mov	r0, r1
 800a722:	4611      	mov	r1, r2
 800a724:	461a      	mov	r2, r3
 800a726:	4603      	mov	r3, r0
 800a728:	70fb      	strb	r3, [r7, #3]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70bb      	strb	r3, [r7, #2]
 800a72e:	4613      	mov	r3, r2
 800a730:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a732:	7878      	ldrb	r0, [r7, #1]
 800a734:	78ba      	ldrb	r2, [r7, #2]
 800a736:	78f9      	ldrb	r1, [r7, #3]
 800a738:	8b3b      	ldrh	r3, [r7, #24]
 800a73a:	9302      	str	r3, [sp, #8]
 800a73c:	7d3b      	ldrb	r3, [r7, #20]
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	7c3b      	ldrb	r3, [r7, #16]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	4603      	mov	r3, r0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fa53 	bl	800abf2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fa72 	bl	800ac50 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f836 	bl	800a7f4 <USBH_GetFreePipe>
 800a788:	4603      	mov	r3, r0
 800a78a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a78c:	89fb      	ldrh	r3, [r7, #14]
 800a78e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a792:	4293      	cmp	r3, r2
 800a794:	d00a      	beq.n	800a7ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	89fb      	ldrh	r3, [r7, #14]
 800a79a:	f003 030f 	and.w	r3, r3, #15
 800a79e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	33e0      	adds	r3, #224	; 0xe0
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7ac:	89fb      	ldrh	r3, [r7, #14]
 800a7ae:	b2db      	uxtb	r3, r3
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	2b0a      	cmp	r3, #10
 800a7c8:	d80d      	bhi.n	800a7e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	33e0      	adds	r3, #224	; 0xe0
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	78fb      	ldrb	r3, [r7, #3]
 800a7d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	33e0      	adds	r3, #224	; 0xe0
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
 800a804:	e00f      	b.n	800a826 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	33e0      	adds	r3, #224	; 0xe0
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	e007      	b.n	800a830 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	3301      	adds	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	2b0a      	cmp	r3, #10
 800a82a:	d9ec      	bls.n	800a806 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a82c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a840:	2201      	movs	r2, #1
 800a842:	490e      	ldr	r1, [pc, #56]	; (800a87c <MX_USB_HOST_Init+0x40>)
 800a844:	480e      	ldr	r0, [pc, #56]	; (800a880 <MX_USB_HOST_Init+0x44>)
 800a846:	f7fe fca1 	bl	800918c <USBH_Init>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a850:	f7f7 fb66 	bl	8001f20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a854:	490b      	ldr	r1, [pc, #44]	; (800a884 <MX_USB_HOST_Init+0x48>)
 800a856:	480a      	ldr	r0, [pc, #40]	; (800a880 <MX_USB_HOST_Init+0x44>)
 800a858:	f7fe fd26 	bl	80092a8 <USBH_RegisterClass>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a862:	f7f7 fb5d 	bl	8001f20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a866:	4806      	ldr	r0, [pc, #24]	; (800a880 <MX_USB_HOST_Init+0x44>)
 800a868:	f7fe fdaa 	bl	80093c0 <USBH_Start>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a872:	f7f7 fb55 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a876:	bf00      	nop
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	2000412c 	.word	0x2000412c
 800a884:	20000044 	.word	0x20000044

0800a888 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a88c:	4802      	ldr	r0, [pc, #8]	; (800a898 <MX_USB_HOST_Process+0x10>)
 800a88e:	f7fe fda7 	bl	80093e0 <USBH_Process>
}
 800a892:	bf00      	nop
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	2000412c 	.word	0x2000412c

0800a89c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d819      	bhi.n	800a8e4 <USBH_UserProcess+0x48>
 800a8b0:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <USBH_UserProcess+0x1c>)
 800a8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b6:	bf00      	nop
 800a8b8:	0800a8e5 	.word	0x0800a8e5
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8e5 	.word	0x0800a8e5
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8cd 	.word	0x0800a8cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <USBH_UserProcess+0x58>)
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
  break;
 800a8d2:	e008      	b.n	800a8e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <USBH_UserProcess+0x58>)
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	701a      	strb	r2, [r3, #0]
  break;
 800a8da:	e004      	b.n	800a8e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a8dc:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <USBH_UserProcess+0x58>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	701a      	strb	r2, [r3, #0]
  break;
 800a8e2:	e000      	b.n	800a8e6 <USBH_UserProcess+0x4a>

  default:
  break;
 800a8e4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	200000ec 	.word	0x200000ec

0800a8f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08a      	sub	sp, #40	; 0x28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a900:	f107 0314 	add.w	r3, r7, #20
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	605a      	str	r2, [r3, #4]
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	60da      	str	r2, [r3, #12]
 800a90e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a918:	d147      	bne.n	800a9aa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	4b25      	ldr	r3, [pc, #148]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	4a24      	ldr	r2, [pc, #144]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a924:	f043 0301 	orr.w	r3, r3, #1
 800a928:	6313      	str	r3, [r2, #48]	; 0x30
 800a92a:	4b22      	ldr	r3, [pc, #136]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	4619      	mov	r1, r3
 800a94a:	481b      	ldr	r0, [pc, #108]	; (800a9b8 <HAL_HCD_MspInit+0xc0>)
 800a94c:	f7f8 f834 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a956:	2302      	movs	r3, #2
 800a958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a95e:	2300      	movs	r3, #0
 800a960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a962:	230a      	movs	r3, #10
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	4619      	mov	r1, r3
 800a96c:	4812      	ldr	r0, [pc, #72]	; (800a9b8 <HAL_HCD_MspInit+0xc0>)
 800a96e:	f7f8 f823 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a972:	4b10      	ldr	r3, [pc, #64]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	4a0f      	ldr	r2, [pc, #60]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97c:	6353      	str	r3, [r2, #52]	; 0x34
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a986:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a98c:	6453      	str	r3, [r2, #68]	; 0x44
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <HAL_HCD_MspInit+0xbc>)
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	2043      	movs	r0, #67	; 0x43
 800a9a0:	f7f7 ff41 	bl	8002826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9a4:	2043      	movs	r0, #67	; 0x43
 800a9a6:	f7f7 ff5a 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	3728      	adds	r7, #40	; 0x28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	40020000 	.word	0x40020000

0800a9bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff f8db 	bl	8009b86 <USBH_LL_IncTimer>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff f913 	bl	8009c12 <USBH_LL_Connect>
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f91c 	bl	8009c40 <USBH_LL_Disconnect>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff f8cd 	bl	8009bda <USBH_LL_PortEnabled>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff f8cd 	bl	8009bf6 <USBH_LL_PortDisabled>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d12a      	bne.n	800aacc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aa76:	4a18      	ldr	r2, [pc, #96]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a15      	ldr	r2, [pc, #84]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa8c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aa8e:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa90:	2208      	movs	r2, #8
 800aa92:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aa94:	4b10      	ldr	r3, [pc, #64]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa96:	2201      	movs	r2, #1
 800aa98:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <USBH_LL_Init+0x74>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aaa0:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <USBH_LL_Init+0x74>)
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <USBH_LL_Init+0x74>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aaac:	480a      	ldr	r0, [pc, #40]	; (800aad8 <USBH_LL_Init+0x74>)
 800aaae:	f7f8 f938 	bl	8002d22 <HAL_HCD_Init>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aab8:	f7f7 fa32 	bl	8001f20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aabc:	4806      	ldr	r0, [pc, #24]	; (800aad8 <USBH_LL_Init+0x74>)
 800aabe:	f7f8 fd1c 	bl	80034fa <HAL_HCD_GetCurrentFrame>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff f84e 	bl	8009b68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20004504 	.word	0x20004504

0800aadc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7f8 fc8b 	bl	800340e <HAL_HCD_Start>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 f95c 	bl	800adbc <USBH_Get_USB_Status>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7f8 fc93 	bl	8003454 <HAL_HCD_Stop>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 f941 	bl	800adbc <USBH_Get_USB_Status>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f8 fcdb 	bl	8003516 <HAL_HCD_GetCurrentSpeed>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d00c      	beq.n	800ab80 <USBH_LL_GetSpeed+0x38>
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d80d      	bhi.n	800ab86 <USBH_LL_GetSpeed+0x3e>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <USBH_LL_GetSpeed+0x2c>
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d003      	beq.n	800ab7a <USBH_LL_GetSpeed+0x32>
 800ab72:	e008      	b.n	800ab86 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
    break;
 800ab78:	e008      	b.n	800ab8c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7e:	e005      	b.n	800ab8c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ab80:	2302      	movs	r3, #2
 800ab82:	73fb      	strb	r3, [r7, #15]
    break;
 800ab84:	e002      	b.n	800ab8c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ab86:	2301      	movs	r3, #1
 800ab88:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8a:	bf00      	nop
  }
  return  speed;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abac:	4618      	mov	r0, r3
 800abae:	f7f8 fc6e 	bl	800348e <HAL_HCD_ResetPort>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 f8ff 	bl	800adbc <USBH_Get_USB_Status>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	4611      	mov	r1, r2
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f8 fc75 	bl	80034d2 <HAL_HCD_HC_GetXferCount>
 800abe8:	4603      	mov	r3, r0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800abf2:	b590      	push	{r4, r7, lr}
 800abf4:	b089      	sub	sp, #36	; 0x24
 800abf6:	af04      	add	r7, sp, #16
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	461a      	mov	r2, r3
 800ac00:	4603      	mov	r3, r0
 800ac02:	70fb      	strb	r3, [r7, #3]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70bb      	strb	r3, [r7, #2]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac1a:	787c      	ldrb	r4, [r7, #1]
 800ac1c:	78ba      	ldrb	r2, [r7, #2]
 800ac1e:	78f9      	ldrb	r1, [r7, #3]
 800ac20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac22:	9302      	str	r3, [sp, #8]
 800ac24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4623      	mov	r3, r4
 800ac32:	f7f8 f8d8 	bl	8002de6 <HAL_HCD_HC_Init>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f8bd 	bl	800adbc <USBH_Get_USB_Status>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd90      	pop	{r4, r7, pc}

0800ac50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac6a:	78fa      	ldrb	r2, [r7, #3]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f8 f948 	bl	8002f04 <HAL_HCD_HC_Halt>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f89e 	bl	800adbc <USBH_Get_USB_Status>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ac8e:	b590      	push	{r4, r7, lr}
 800ac90:	b089      	sub	sp, #36	; 0x24
 800ac92:	af04      	add	r7, sp, #16
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	70fb      	strb	r3, [r7, #3]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70bb      	strb	r3, [r7, #2]
 800aca4:	4613      	mov	r3, r2
 800aca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800acb6:	787c      	ldrb	r4, [r7, #1]
 800acb8:	78ba      	ldrb	r2, [r7, #2]
 800acba:	78f9      	ldrb	r1, [r7, #3]
 800acbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4623      	mov	r3, r4
 800acd2:	f7f8 f93b 	bl	8002f4c <HAL_HCD_HC_SubmitRequest>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f86d 	bl	800adbc <USBH_Get_USB_Status>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	bd90      	pop	{r4, r7, pc}

0800acf0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f8 fbcf 	bl	80034aa <HAL_HCD_HC_GetURBState>
 800ad0c:	4603      	mov	r3, r0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d103      	bne.n	800ad34 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 f870 	bl	800ae14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad34:	20c8      	movs	r0, #200	; 0xc8
 800ad36:	f7f7 fc77 	bl	8002628 <HAL_Delay>
  return USBH_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
 800ad50:	4613      	mov	r3, r2
 800ad52:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad5a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	212c      	movs	r1, #44	; 0x2c
 800ad62:	fb01 f303 	mul.w	r3, r1, r3
 800ad66:	4413      	add	r3, r2
 800ad68:	333b      	adds	r3, #59	; 0x3b
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d009      	beq.n	800ad84 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	212c      	movs	r1, #44	; 0x2c
 800ad76:	fb01 f303 	mul.w	r3, r1, r3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	3354      	adds	r3, #84	; 0x54
 800ad7e:	78ba      	ldrb	r2, [r7, #2]
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	e008      	b.n	800ad96 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	212c      	movs	r1, #44	; 0x2c
 800ad8a:	fb01 f303 	mul.w	r3, r1, r3
 800ad8e:	4413      	add	r3, r2
 800ad90:	3355      	adds	r3, #85	; 0x55
 800ad92:	78ba      	ldrb	r2, [r7, #2]
 800ad94:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7f7 fc3b 	bl	8002628 <HAL_Delay>
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d817      	bhi.n	800ae00 <USBH_Get_USB_Status+0x44>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USBH_Get_USB_Status+0x1c>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	0800adef 	.word	0x0800adef
 800ade0:	0800adf5 	.word	0x0800adf5
 800ade4:	0800adfb 	.word	0x0800adfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
    break;
 800adec:	e00b      	b.n	800ae06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800adee:	2302      	movs	r3, #2
 800adf0:	73fb      	strb	r3, [r7, #15]
    break;
 800adf2:	e008      	b.n	800ae06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
    break;
 800adf8:	e005      	b.n	800ae06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800adfa:	2302      	movs	r3, #2
 800adfc:	73fb      	strb	r3, [r7, #15]
    break;
 800adfe:	e002      	b.n	800ae06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae00:	2302      	movs	r3, #2
 800ae02:	73fb      	strb	r3, [r7, #15]
    break;
 800ae04:	bf00      	nop
  }
  return usb_status;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
 800ae2c:	e001      	b.n	800ae32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	461a      	mov	r2, r3
 800ae36:	2101      	movs	r1, #1
 800ae38:	4803      	ldr	r0, [pc, #12]	; (800ae48 <MX_DriverVbusFS+0x34>)
 800ae3a:	f7f7 ff59 	bl	8002cf0 <HAL_GPIO_WritePin>
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	40020800 	.word	0x40020800

0800ae4c <atoi>:
 800ae4c:	220a      	movs	r2, #10
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f000 b9dc 	b.w	800b20c <strtol>

0800ae54 <__errno>:
 800ae54:	4b01      	ldr	r3, [pc, #4]	; (800ae5c <__errno+0x8>)
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	20000064 	.word	0x20000064

0800ae60 <__libc_init_array>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	4d0d      	ldr	r5, [pc, #52]	; (800ae98 <__libc_init_array+0x38>)
 800ae64:	4c0d      	ldr	r4, [pc, #52]	; (800ae9c <__libc_init_array+0x3c>)
 800ae66:	1b64      	subs	r4, r4, r5
 800ae68:	10a4      	asrs	r4, r4, #2
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	42a6      	cmp	r6, r4
 800ae6e:	d109      	bne.n	800ae84 <__libc_init_array+0x24>
 800ae70:	4d0b      	ldr	r5, [pc, #44]	; (800aea0 <__libc_init_array+0x40>)
 800ae72:	4c0c      	ldr	r4, [pc, #48]	; (800aea4 <__libc_init_array+0x44>)
 800ae74:	f003 f82e 	bl	800ded4 <_init>
 800ae78:	1b64      	subs	r4, r4, r5
 800ae7a:	10a4      	asrs	r4, r4, #2
 800ae7c:	2600      	movs	r6, #0
 800ae7e:	42a6      	cmp	r6, r4
 800ae80:	d105      	bne.n	800ae8e <__libc_init_array+0x2e>
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae88:	4798      	blx	r3
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	e7ee      	b.n	800ae6c <__libc_init_array+0xc>
 800ae8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae92:	4798      	blx	r3
 800ae94:	3601      	adds	r6, #1
 800ae96:	e7f2      	b.n	800ae7e <__libc_init_array+0x1e>
 800ae98:	0800e380 	.word	0x0800e380
 800ae9c:	0800e380 	.word	0x0800e380
 800aea0:	0800e380 	.word	0x0800e380
 800aea4:	0800e384 	.word	0x0800e384

0800aea8 <malloc>:
 800aea8:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <malloc+0xc>)
 800aeaa:	4601      	mov	r1, r0
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f000 b863 	b.w	800af78 <_malloc_r>
 800aeb2:	bf00      	nop
 800aeb4:	20000064 	.word	0x20000064

0800aeb8 <free>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <free+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f000 b80b 	b.w	800aed8 <_free_r>
 800aec2:	bf00      	nop
 800aec4:	20000064 	.word	0x20000064

0800aec8 <memset>:
 800aec8:	4402      	add	r2, r0
 800aeca:	4603      	mov	r3, r0
 800aecc:	4293      	cmp	r3, r2
 800aece:	d100      	bne.n	800aed2 <memset+0xa>
 800aed0:	4770      	bx	lr
 800aed2:	f803 1b01 	strb.w	r1, [r3], #1
 800aed6:	e7f9      	b.n	800aecc <memset+0x4>

0800aed8 <_free_r>:
 800aed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeda:	2900      	cmp	r1, #0
 800aedc:	d048      	beq.n	800af70 <_free_r+0x98>
 800aede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee2:	9001      	str	r0, [sp, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeea:	bfb8      	it	lt
 800aeec:	18e4      	addlt	r4, r4, r3
 800aeee:	f000 f9c7 	bl	800b280 <__malloc_lock>
 800aef2:	4a20      	ldr	r2, [pc, #128]	; (800af74 <_free_r+0x9c>)
 800aef4:	9801      	ldr	r0, [sp, #4]
 800aef6:	6813      	ldr	r3, [r2, #0]
 800aef8:	4615      	mov	r5, r2
 800aefa:	b933      	cbnz	r3, 800af0a <_free_r+0x32>
 800aefc:	6063      	str	r3, [r4, #4]
 800aefe:	6014      	str	r4, [r2, #0]
 800af00:	b003      	add	sp, #12
 800af02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af06:	f000 b9c1 	b.w	800b28c <__malloc_unlock>
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	d90b      	bls.n	800af26 <_free_r+0x4e>
 800af0e:	6821      	ldr	r1, [r4, #0]
 800af10:	1862      	adds	r2, r4, r1
 800af12:	4293      	cmp	r3, r2
 800af14:	bf04      	itt	eq
 800af16:	681a      	ldreq	r2, [r3, #0]
 800af18:	685b      	ldreq	r3, [r3, #4]
 800af1a:	6063      	str	r3, [r4, #4]
 800af1c:	bf04      	itt	eq
 800af1e:	1852      	addeq	r2, r2, r1
 800af20:	6022      	streq	r2, [r4, #0]
 800af22:	602c      	str	r4, [r5, #0]
 800af24:	e7ec      	b.n	800af00 <_free_r+0x28>
 800af26:	461a      	mov	r2, r3
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	b10b      	cbz	r3, 800af30 <_free_r+0x58>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d9fa      	bls.n	800af26 <_free_r+0x4e>
 800af30:	6811      	ldr	r1, [r2, #0]
 800af32:	1855      	adds	r5, r2, r1
 800af34:	42a5      	cmp	r5, r4
 800af36:	d10b      	bne.n	800af50 <_free_r+0x78>
 800af38:	6824      	ldr	r4, [r4, #0]
 800af3a:	4421      	add	r1, r4
 800af3c:	1854      	adds	r4, r2, r1
 800af3e:	42a3      	cmp	r3, r4
 800af40:	6011      	str	r1, [r2, #0]
 800af42:	d1dd      	bne.n	800af00 <_free_r+0x28>
 800af44:	681c      	ldr	r4, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	6053      	str	r3, [r2, #4]
 800af4a:	4421      	add	r1, r4
 800af4c:	6011      	str	r1, [r2, #0]
 800af4e:	e7d7      	b.n	800af00 <_free_r+0x28>
 800af50:	d902      	bls.n	800af58 <_free_r+0x80>
 800af52:	230c      	movs	r3, #12
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	e7d3      	b.n	800af00 <_free_r+0x28>
 800af58:	6825      	ldr	r5, [r4, #0]
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	428b      	cmp	r3, r1
 800af5e:	bf04      	itt	eq
 800af60:	6819      	ldreq	r1, [r3, #0]
 800af62:	685b      	ldreq	r3, [r3, #4]
 800af64:	6063      	str	r3, [r4, #4]
 800af66:	bf04      	itt	eq
 800af68:	1949      	addeq	r1, r1, r5
 800af6a:	6021      	streq	r1, [r4, #0]
 800af6c:	6054      	str	r4, [r2, #4]
 800af6e:	e7c7      	b.n	800af00 <_free_r+0x28>
 800af70:	b003      	add	sp, #12
 800af72:	bd30      	pop	{r4, r5, pc}
 800af74:	200000f0 	.word	0x200000f0

0800af78 <_malloc_r>:
 800af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7a:	1ccd      	adds	r5, r1, #3
 800af7c:	f025 0503 	bic.w	r5, r5, #3
 800af80:	3508      	adds	r5, #8
 800af82:	2d0c      	cmp	r5, #12
 800af84:	bf38      	it	cc
 800af86:	250c      	movcc	r5, #12
 800af88:	2d00      	cmp	r5, #0
 800af8a:	4606      	mov	r6, r0
 800af8c:	db01      	blt.n	800af92 <_malloc_r+0x1a>
 800af8e:	42a9      	cmp	r1, r5
 800af90:	d903      	bls.n	800af9a <_malloc_r+0x22>
 800af92:	230c      	movs	r3, #12
 800af94:	6033      	str	r3, [r6, #0]
 800af96:	2000      	movs	r0, #0
 800af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9a:	f000 f971 	bl	800b280 <__malloc_lock>
 800af9e:	4921      	ldr	r1, [pc, #132]	; (800b024 <_malloc_r+0xac>)
 800afa0:	680a      	ldr	r2, [r1, #0]
 800afa2:	4614      	mov	r4, r2
 800afa4:	b99c      	cbnz	r4, 800afce <_malloc_r+0x56>
 800afa6:	4f20      	ldr	r7, [pc, #128]	; (800b028 <_malloc_r+0xb0>)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	b923      	cbnz	r3, 800afb6 <_malloc_r+0x3e>
 800afac:	4621      	mov	r1, r4
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 f83c 	bl	800b02c <_sbrk_r>
 800afb4:	6038      	str	r0, [r7, #0]
 800afb6:	4629      	mov	r1, r5
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 f837 	bl	800b02c <_sbrk_r>
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	d123      	bne.n	800b00a <_malloc_r+0x92>
 800afc2:	230c      	movs	r3, #12
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	4630      	mov	r0, r6
 800afc8:	f000 f960 	bl	800b28c <__malloc_unlock>
 800afcc:	e7e3      	b.n	800af96 <_malloc_r+0x1e>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	1b5b      	subs	r3, r3, r5
 800afd2:	d417      	bmi.n	800b004 <_malloc_r+0x8c>
 800afd4:	2b0b      	cmp	r3, #11
 800afd6:	d903      	bls.n	800afe0 <_malloc_r+0x68>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	441c      	add	r4, r3
 800afdc:	6025      	str	r5, [r4, #0]
 800afde:	e004      	b.n	800afea <_malloc_r+0x72>
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	42a2      	cmp	r2, r4
 800afe4:	bf0c      	ite	eq
 800afe6:	600b      	streq	r3, [r1, #0]
 800afe8:	6053      	strne	r3, [r2, #4]
 800afea:	4630      	mov	r0, r6
 800afec:	f000 f94e 	bl	800b28c <__malloc_unlock>
 800aff0:	f104 000b 	add.w	r0, r4, #11
 800aff4:	1d23      	adds	r3, r4, #4
 800aff6:	f020 0007 	bic.w	r0, r0, #7
 800affa:	1ac2      	subs	r2, r0, r3
 800affc:	d0cc      	beq.n	800af98 <_malloc_r+0x20>
 800affe:	1a1b      	subs	r3, r3, r0
 800b000:	50a3      	str	r3, [r4, r2]
 800b002:	e7c9      	b.n	800af98 <_malloc_r+0x20>
 800b004:	4622      	mov	r2, r4
 800b006:	6864      	ldr	r4, [r4, #4]
 800b008:	e7cc      	b.n	800afa4 <_malloc_r+0x2c>
 800b00a:	1cc4      	adds	r4, r0, #3
 800b00c:	f024 0403 	bic.w	r4, r4, #3
 800b010:	42a0      	cmp	r0, r4
 800b012:	d0e3      	beq.n	800afdc <_malloc_r+0x64>
 800b014:	1a21      	subs	r1, r4, r0
 800b016:	4630      	mov	r0, r6
 800b018:	f000 f808 	bl	800b02c <_sbrk_r>
 800b01c:	3001      	adds	r0, #1
 800b01e:	d1dd      	bne.n	800afdc <_malloc_r+0x64>
 800b020:	e7cf      	b.n	800afc2 <_malloc_r+0x4a>
 800b022:	bf00      	nop
 800b024:	200000f0 	.word	0x200000f0
 800b028:	200000f4 	.word	0x200000f4

0800b02c <_sbrk_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d06      	ldr	r5, [pc, #24]	; (800b048 <_sbrk_r+0x1c>)
 800b030:	2300      	movs	r3, #0
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	602b      	str	r3, [r5, #0]
 800b038:	f7f7 fa12 	bl	8002460 <_sbrk>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_sbrk_r+0x1a>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_sbrk_r+0x1a>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	20004808 	.word	0x20004808

0800b04c <strtok>:
 800b04c:	4b16      	ldr	r3, [pc, #88]	; (800b0a8 <strtok+0x5c>)
 800b04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b054:	4605      	mov	r5, r0
 800b056:	b9fc      	cbnz	r4, 800b098 <strtok+0x4c>
 800b058:	2050      	movs	r0, #80	; 0x50
 800b05a:	9101      	str	r1, [sp, #4]
 800b05c:	f7ff ff24 	bl	800aea8 <malloc>
 800b060:	9901      	ldr	r1, [sp, #4]
 800b062:	65b0      	str	r0, [r6, #88]	; 0x58
 800b064:	4602      	mov	r2, r0
 800b066:	b920      	cbnz	r0, 800b072 <strtok+0x26>
 800b068:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <strtok+0x60>)
 800b06a:	4811      	ldr	r0, [pc, #68]	; (800b0b0 <strtok+0x64>)
 800b06c:	2157      	movs	r1, #87	; 0x57
 800b06e:	f000 f8d7 	bl	800b220 <__assert_func>
 800b072:	e9c0 4400 	strd	r4, r4, [r0]
 800b076:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b07a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b07e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b082:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b086:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b08a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b08e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b092:	6184      	str	r4, [r0, #24]
 800b094:	7704      	strb	r4, [r0, #28]
 800b096:	6244      	str	r4, [r0, #36]	; 0x24
 800b098:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b09a:	2301      	movs	r3, #1
 800b09c:	4628      	mov	r0, r5
 800b09e:	b002      	add	sp, #8
 800b0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0a4:	f000 b806 	b.w	800b0b4 <__strtok_r>
 800b0a8:	20000064 	.word	0x20000064
 800b0ac:	0800df18 	.word	0x0800df18
 800b0b0:	0800df2f 	.word	0x0800df2f

0800b0b4 <__strtok_r>:
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b908      	cbnz	r0, 800b0bc <__strtok_r+0x8>
 800b0b8:	6810      	ldr	r0, [r2, #0]
 800b0ba:	b188      	cbz	r0, 800b0e0 <__strtok_r+0x2c>
 800b0bc:	4604      	mov	r4, r0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b0ca:	b91e      	cbnz	r6, 800b0d4 <__strtok_r+0x20>
 800b0cc:	b965      	cbnz	r5, 800b0e8 <__strtok_r+0x34>
 800b0ce:	6015      	str	r5, [r2, #0]
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	e005      	b.n	800b0e0 <__strtok_r+0x2c>
 800b0d4:	42b5      	cmp	r5, r6
 800b0d6:	d1f6      	bne.n	800b0c6 <__strtok_r+0x12>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f0      	bne.n	800b0be <__strtok_r+0xa>
 800b0dc:	6014      	str	r4, [r2, #0]
 800b0de:	7003      	strb	r3, [r0, #0]
 800b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e2:	461c      	mov	r4, r3
 800b0e4:	e00c      	b.n	800b100 <__strtok_r+0x4c>
 800b0e6:	b915      	cbnz	r5, 800b0ee <__strtok_r+0x3a>
 800b0e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0ec:	460e      	mov	r6, r1
 800b0ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b0f2:	42ab      	cmp	r3, r5
 800b0f4:	d1f7      	bne.n	800b0e6 <__strtok_r+0x32>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0f3      	beq.n	800b0e2 <__strtok_r+0x2e>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b100:	6014      	str	r4, [r2, #0]
 800b102:	e7ed      	b.n	800b0e0 <__strtok_r+0x2c>

0800b104 <_strtol_l.isra.0>:
 800b104:	2b01      	cmp	r3, #1
 800b106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b10a:	d001      	beq.n	800b110 <_strtol_l.isra.0+0xc>
 800b10c:	2b24      	cmp	r3, #36	; 0x24
 800b10e:	d906      	bls.n	800b11e <_strtol_l.isra.0+0x1a>
 800b110:	f7ff fea0 	bl	800ae54 <__errno>
 800b114:	2316      	movs	r3, #22
 800b116:	6003      	str	r3, [r0, #0]
 800b118:	2000      	movs	r0, #0
 800b11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11e:	4f3a      	ldr	r7, [pc, #232]	; (800b208 <_strtol_l.isra.0+0x104>)
 800b120:	468e      	mov	lr, r1
 800b122:	4676      	mov	r6, lr
 800b124:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b128:	5de5      	ldrb	r5, [r4, r7]
 800b12a:	f015 0508 	ands.w	r5, r5, #8
 800b12e:	d1f8      	bne.n	800b122 <_strtol_l.isra.0+0x1e>
 800b130:	2c2d      	cmp	r4, #45	; 0x2d
 800b132:	d134      	bne.n	800b19e <_strtol_l.isra.0+0x9a>
 800b134:	f89e 4000 	ldrb.w	r4, [lr]
 800b138:	f04f 0801 	mov.w	r8, #1
 800b13c:	f106 0e02 	add.w	lr, r6, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d05c      	beq.n	800b1fe <_strtol_l.isra.0+0xfa>
 800b144:	2b10      	cmp	r3, #16
 800b146:	d10c      	bne.n	800b162 <_strtol_l.isra.0+0x5e>
 800b148:	2c30      	cmp	r4, #48	; 0x30
 800b14a:	d10a      	bne.n	800b162 <_strtol_l.isra.0+0x5e>
 800b14c:	f89e 4000 	ldrb.w	r4, [lr]
 800b150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b154:	2c58      	cmp	r4, #88	; 0x58
 800b156:	d14d      	bne.n	800b1f4 <_strtol_l.isra.0+0xf0>
 800b158:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b15c:	2310      	movs	r3, #16
 800b15e:	f10e 0e02 	add.w	lr, lr, #2
 800b162:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b166:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b16a:	2600      	movs	r6, #0
 800b16c:	fbbc f9f3 	udiv	r9, ip, r3
 800b170:	4635      	mov	r5, r6
 800b172:	fb03 ca19 	mls	sl, r3, r9, ip
 800b176:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b17a:	2f09      	cmp	r7, #9
 800b17c:	d818      	bhi.n	800b1b0 <_strtol_l.isra.0+0xac>
 800b17e:	463c      	mov	r4, r7
 800b180:	42a3      	cmp	r3, r4
 800b182:	dd24      	ble.n	800b1ce <_strtol_l.isra.0+0xca>
 800b184:	2e00      	cmp	r6, #0
 800b186:	db1f      	blt.n	800b1c8 <_strtol_l.isra.0+0xc4>
 800b188:	45a9      	cmp	r9, r5
 800b18a:	d31d      	bcc.n	800b1c8 <_strtol_l.isra.0+0xc4>
 800b18c:	d101      	bne.n	800b192 <_strtol_l.isra.0+0x8e>
 800b18e:	45a2      	cmp	sl, r4
 800b190:	db1a      	blt.n	800b1c8 <_strtol_l.isra.0+0xc4>
 800b192:	fb05 4503 	mla	r5, r5, r3, r4
 800b196:	2601      	movs	r6, #1
 800b198:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b19c:	e7eb      	b.n	800b176 <_strtol_l.isra.0+0x72>
 800b19e:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a0:	bf08      	it	eq
 800b1a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b1a6:	46a8      	mov	r8, r5
 800b1a8:	bf08      	it	eq
 800b1aa:	f106 0e02 	addeq.w	lr, r6, #2
 800b1ae:	e7c7      	b.n	800b140 <_strtol_l.isra.0+0x3c>
 800b1b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b1b4:	2f19      	cmp	r7, #25
 800b1b6:	d801      	bhi.n	800b1bc <_strtol_l.isra.0+0xb8>
 800b1b8:	3c37      	subs	r4, #55	; 0x37
 800b1ba:	e7e1      	b.n	800b180 <_strtol_l.isra.0+0x7c>
 800b1bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b1c0:	2f19      	cmp	r7, #25
 800b1c2:	d804      	bhi.n	800b1ce <_strtol_l.isra.0+0xca>
 800b1c4:	3c57      	subs	r4, #87	; 0x57
 800b1c6:	e7db      	b.n	800b180 <_strtol_l.isra.0+0x7c>
 800b1c8:	f04f 36ff 	mov.w	r6, #4294967295
 800b1cc:	e7e4      	b.n	800b198 <_strtol_l.isra.0+0x94>
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	da05      	bge.n	800b1de <_strtol_l.isra.0+0xda>
 800b1d2:	2322      	movs	r3, #34	; 0x22
 800b1d4:	6003      	str	r3, [r0, #0]
 800b1d6:	4665      	mov	r5, ip
 800b1d8:	b942      	cbnz	r2, 800b1ec <_strtol_l.isra.0+0xe8>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	e79d      	b.n	800b11a <_strtol_l.isra.0+0x16>
 800b1de:	f1b8 0f00 	cmp.w	r8, #0
 800b1e2:	d000      	beq.n	800b1e6 <_strtol_l.isra.0+0xe2>
 800b1e4:	426d      	negs	r5, r5
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	d0f7      	beq.n	800b1da <_strtol_l.isra.0+0xd6>
 800b1ea:	b10e      	cbz	r6, 800b1f0 <_strtol_l.isra.0+0xec>
 800b1ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b1f0:	6011      	str	r1, [r2, #0]
 800b1f2:	e7f2      	b.n	800b1da <_strtol_l.isra.0+0xd6>
 800b1f4:	2430      	movs	r4, #48	; 0x30
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1b3      	bne.n	800b162 <_strtol_l.isra.0+0x5e>
 800b1fa:	2308      	movs	r3, #8
 800b1fc:	e7b1      	b.n	800b162 <_strtol_l.isra.0+0x5e>
 800b1fe:	2c30      	cmp	r4, #48	; 0x30
 800b200:	d0a4      	beq.n	800b14c <_strtol_l.isra.0+0x48>
 800b202:	230a      	movs	r3, #10
 800b204:	e7ad      	b.n	800b162 <_strtol_l.isra.0+0x5e>
 800b206:	bf00      	nop
 800b208:	0800dfcd 	.word	0x0800dfcd

0800b20c <strtol>:
 800b20c:	4613      	mov	r3, r2
 800b20e:	460a      	mov	r2, r1
 800b210:	4601      	mov	r1, r0
 800b212:	4802      	ldr	r0, [pc, #8]	; (800b21c <strtol+0x10>)
 800b214:	6800      	ldr	r0, [r0, #0]
 800b216:	f7ff bf75 	b.w	800b104 <_strtol_l.isra.0>
 800b21a:	bf00      	nop
 800b21c:	20000064 	.word	0x20000064

0800b220 <__assert_func>:
 800b220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b222:	4614      	mov	r4, r2
 800b224:	461a      	mov	r2, r3
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <__assert_func+0x2c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4605      	mov	r5, r0
 800b22c:	68d8      	ldr	r0, [r3, #12]
 800b22e:	b14c      	cbz	r4, 800b244 <__assert_func+0x24>
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <__assert_func+0x30>)
 800b232:	9100      	str	r1, [sp, #0]
 800b234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b238:	4906      	ldr	r1, [pc, #24]	; (800b254 <__assert_func+0x34>)
 800b23a:	462b      	mov	r3, r5
 800b23c:	f000 f80e 	bl	800b25c <fiprintf>
 800b240:	f000 fbd8 	bl	800b9f4 <abort>
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <__assert_func+0x38>)
 800b246:	461c      	mov	r4, r3
 800b248:	e7f3      	b.n	800b232 <__assert_func+0x12>
 800b24a:	bf00      	nop
 800b24c:	20000064 	.word	0x20000064
 800b250:	0800df90 	.word	0x0800df90
 800b254:	0800df9d 	.word	0x0800df9d
 800b258:	0800dfcb 	.word	0x0800dfcb

0800b25c <fiprintf>:
 800b25c:	b40e      	push	{r1, r2, r3}
 800b25e:	b503      	push	{r0, r1, lr}
 800b260:	4601      	mov	r1, r0
 800b262:	ab03      	add	r3, sp, #12
 800b264:	4805      	ldr	r0, [pc, #20]	; (800b27c <fiprintf+0x20>)
 800b266:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26a:	6800      	ldr	r0, [r0, #0]
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	f000 f83d 	bl	800b2ec <_vfiprintf_r>
 800b272:	b002      	add	sp, #8
 800b274:	f85d eb04 	ldr.w	lr, [sp], #4
 800b278:	b003      	add	sp, #12
 800b27a:	4770      	bx	lr
 800b27c:	20000064 	.word	0x20000064

0800b280 <__malloc_lock>:
 800b280:	4801      	ldr	r0, [pc, #4]	; (800b288 <__malloc_lock+0x8>)
 800b282:	f000 bd77 	b.w	800bd74 <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	20004810 	.word	0x20004810

0800b28c <__malloc_unlock>:
 800b28c:	4801      	ldr	r0, [pc, #4]	; (800b294 <__malloc_unlock+0x8>)
 800b28e:	f000 bd72 	b.w	800bd76 <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	20004810 	.word	0x20004810

0800b298 <__sfputc_r>:
 800b298:	6893      	ldr	r3, [r2, #8]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	b410      	push	{r4}
 800b2a0:	6093      	str	r3, [r2, #8]
 800b2a2:	da08      	bge.n	800b2b6 <__sfputc_r+0x1e>
 800b2a4:	6994      	ldr	r4, [r2, #24]
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	db01      	blt.n	800b2ae <__sfputc_r+0x16>
 800b2aa:	290a      	cmp	r1, #10
 800b2ac:	d103      	bne.n	800b2b6 <__sfputc_r+0x1e>
 800b2ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b2:	f000 badf 	b.w	800b874 <__swbuf_r>
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	1c58      	adds	r0, r3, #1
 800b2ba:	6010      	str	r0, [r2, #0]
 800b2bc:	7019      	strb	r1, [r3, #0]
 800b2be:	4608      	mov	r0, r1
 800b2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <__sfputs_r>:
 800b2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	460f      	mov	r7, r1
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	18d5      	adds	r5, r2, r3
 800b2d0:	42ac      	cmp	r4, r5
 800b2d2:	d101      	bne.n	800b2d8 <__sfputs_r+0x12>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e007      	b.n	800b2e8 <__sfputs_r+0x22>
 800b2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2dc:	463a      	mov	r2, r7
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ffda 	bl	800b298 <__sfputc_r>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d1f3      	bne.n	800b2d0 <__sfputs_r+0xa>
 800b2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2ec <_vfiprintf_r>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	b09d      	sub	sp, #116	; 0x74
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	4698      	mov	r8, r3
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	b118      	cbz	r0, 800b304 <_vfiprintf_r+0x18>
 800b2fc:	6983      	ldr	r3, [r0, #24]
 800b2fe:	b90b      	cbnz	r3, 800b304 <_vfiprintf_r+0x18>
 800b300:	f000 fc9a 	bl	800bc38 <__sinit>
 800b304:	4b89      	ldr	r3, [pc, #548]	; (800b52c <_vfiprintf_r+0x240>)
 800b306:	429d      	cmp	r5, r3
 800b308:	d11b      	bne.n	800b342 <_vfiprintf_r+0x56>
 800b30a:	6875      	ldr	r5, [r6, #4]
 800b30c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b30e:	07d9      	lsls	r1, r3, #31
 800b310:	d405      	bmi.n	800b31e <_vfiprintf_r+0x32>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	059a      	lsls	r2, r3, #22
 800b316:	d402      	bmi.n	800b31e <_vfiprintf_r+0x32>
 800b318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b31a:	f000 fd2b 	bl	800bd74 <__retarget_lock_acquire_recursive>
 800b31e:	89ab      	ldrh	r3, [r5, #12]
 800b320:	071b      	lsls	r3, r3, #28
 800b322:	d501      	bpl.n	800b328 <_vfiprintf_r+0x3c>
 800b324:	692b      	ldr	r3, [r5, #16]
 800b326:	b9eb      	cbnz	r3, 800b364 <_vfiprintf_r+0x78>
 800b328:	4629      	mov	r1, r5
 800b32a:	4630      	mov	r0, r6
 800b32c:	f000 faf4 	bl	800b918 <__swsetup_r>
 800b330:	b1c0      	cbz	r0, 800b364 <_vfiprintf_r+0x78>
 800b332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b334:	07dc      	lsls	r4, r3, #31
 800b336:	d50e      	bpl.n	800b356 <_vfiprintf_r+0x6a>
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	b01d      	add	sp, #116	; 0x74
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	4b7b      	ldr	r3, [pc, #492]	; (800b530 <_vfiprintf_r+0x244>)
 800b344:	429d      	cmp	r5, r3
 800b346:	d101      	bne.n	800b34c <_vfiprintf_r+0x60>
 800b348:	68b5      	ldr	r5, [r6, #8]
 800b34a:	e7df      	b.n	800b30c <_vfiprintf_r+0x20>
 800b34c:	4b79      	ldr	r3, [pc, #484]	; (800b534 <_vfiprintf_r+0x248>)
 800b34e:	429d      	cmp	r5, r3
 800b350:	bf08      	it	eq
 800b352:	68f5      	ldreq	r5, [r6, #12]
 800b354:	e7da      	b.n	800b30c <_vfiprintf_r+0x20>
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	0598      	lsls	r0, r3, #22
 800b35a:	d4ed      	bmi.n	800b338 <_vfiprintf_r+0x4c>
 800b35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b35e:	f000 fd0a 	bl	800bd76 <__retarget_lock_release_recursive>
 800b362:	e7e9      	b.n	800b338 <_vfiprintf_r+0x4c>
 800b364:	2300      	movs	r3, #0
 800b366:	9309      	str	r3, [sp, #36]	; 0x24
 800b368:	2320      	movs	r3, #32
 800b36a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b372:	2330      	movs	r3, #48	; 0x30
 800b374:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b538 <_vfiprintf_r+0x24c>
 800b378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b37c:	f04f 0901 	mov.w	r9, #1
 800b380:	4623      	mov	r3, r4
 800b382:	469a      	mov	sl, r3
 800b384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b388:	b10a      	cbz	r2, 800b38e <_vfiprintf_r+0xa2>
 800b38a:	2a25      	cmp	r2, #37	; 0x25
 800b38c:	d1f9      	bne.n	800b382 <_vfiprintf_r+0x96>
 800b38e:	ebba 0b04 	subs.w	fp, sl, r4
 800b392:	d00b      	beq.n	800b3ac <_vfiprintf_r+0xc0>
 800b394:	465b      	mov	r3, fp
 800b396:	4622      	mov	r2, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ff93 	bl	800b2c6 <__sfputs_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f000 80aa 	beq.w	800b4fa <_vfiprintf_r+0x20e>
 800b3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a8:	445a      	add	r2, fp
 800b3aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 80a2 	beq.w	800b4fa <_vfiprintf_r+0x20e>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c0:	f10a 0a01 	add.w	sl, sl, #1
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ce:	4654      	mov	r4, sl
 800b3d0:	2205      	movs	r2, #5
 800b3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d6:	4858      	ldr	r0, [pc, #352]	; (800b538 <_vfiprintf_r+0x24c>)
 800b3d8:	f7f4 fefa 	bl	80001d0 <memchr>
 800b3dc:	9a04      	ldr	r2, [sp, #16]
 800b3de:	b9d8      	cbnz	r0, 800b418 <_vfiprintf_r+0x12c>
 800b3e0:	06d1      	lsls	r1, r2, #27
 800b3e2:	bf44      	itt	mi
 800b3e4:	2320      	movmi	r3, #32
 800b3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ea:	0713      	lsls	r3, r2, #28
 800b3ec:	bf44      	itt	mi
 800b3ee:	232b      	movmi	r3, #43	; 0x2b
 800b3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3fa:	d015      	beq.n	800b428 <_vfiprintf_r+0x13c>
 800b3fc:	9a07      	ldr	r2, [sp, #28]
 800b3fe:	4654      	mov	r4, sl
 800b400:	2000      	movs	r0, #0
 800b402:	f04f 0c0a 	mov.w	ip, #10
 800b406:	4621      	mov	r1, r4
 800b408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b40c:	3b30      	subs	r3, #48	; 0x30
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d94e      	bls.n	800b4b0 <_vfiprintf_r+0x1c4>
 800b412:	b1b0      	cbz	r0, 800b442 <_vfiprintf_r+0x156>
 800b414:	9207      	str	r2, [sp, #28]
 800b416:	e014      	b.n	800b442 <_vfiprintf_r+0x156>
 800b418:	eba0 0308 	sub.w	r3, r0, r8
 800b41c:	fa09 f303 	lsl.w	r3, r9, r3
 800b420:	4313      	orrs	r3, r2
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	46a2      	mov	sl, r4
 800b426:	e7d2      	b.n	800b3ce <_vfiprintf_r+0xe2>
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	1d19      	adds	r1, r3, #4
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	9103      	str	r1, [sp, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	bfbb      	ittet	lt
 800b434:	425b      	neglt	r3, r3
 800b436:	f042 0202 	orrlt.w	r2, r2, #2
 800b43a:	9307      	strge	r3, [sp, #28]
 800b43c:	9307      	strlt	r3, [sp, #28]
 800b43e:	bfb8      	it	lt
 800b440:	9204      	strlt	r2, [sp, #16]
 800b442:	7823      	ldrb	r3, [r4, #0]
 800b444:	2b2e      	cmp	r3, #46	; 0x2e
 800b446:	d10c      	bne.n	800b462 <_vfiprintf_r+0x176>
 800b448:	7863      	ldrb	r3, [r4, #1]
 800b44a:	2b2a      	cmp	r3, #42	; 0x2a
 800b44c:	d135      	bne.n	800b4ba <_vfiprintf_r+0x1ce>
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	1d1a      	adds	r2, r3, #4
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	9203      	str	r2, [sp, #12]
 800b456:	2b00      	cmp	r3, #0
 800b458:	bfb8      	it	lt
 800b45a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b45e:	3402      	adds	r4, #2
 800b460:	9305      	str	r3, [sp, #20]
 800b462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b548 <_vfiprintf_r+0x25c>
 800b466:	7821      	ldrb	r1, [r4, #0]
 800b468:	2203      	movs	r2, #3
 800b46a:	4650      	mov	r0, sl
 800b46c:	f7f4 feb0 	bl	80001d0 <memchr>
 800b470:	b140      	cbz	r0, 800b484 <_vfiprintf_r+0x198>
 800b472:	2340      	movs	r3, #64	; 0x40
 800b474:	eba0 000a 	sub.w	r0, r0, sl
 800b478:	fa03 f000 	lsl.w	r0, r3, r0
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	4303      	orrs	r3, r0
 800b480:	3401      	adds	r4, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b488:	482c      	ldr	r0, [pc, #176]	; (800b53c <_vfiprintf_r+0x250>)
 800b48a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b48e:	2206      	movs	r2, #6
 800b490:	f7f4 fe9e 	bl	80001d0 <memchr>
 800b494:	2800      	cmp	r0, #0
 800b496:	d03f      	beq.n	800b518 <_vfiprintf_r+0x22c>
 800b498:	4b29      	ldr	r3, [pc, #164]	; (800b540 <_vfiprintf_r+0x254>)
 800b49a:	bb1b      	cbnz	r3, 800b4e4 <_vfiprintf_r+0x1f8>
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	3307      	adds	r3, #7
 800b4a0:	f023 0307 	bic.w	r3, r3, #7
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	443b      	add	r3, r7
 800b4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ae:	e767      	b.n	800b380 <_vfiprintf_r+0x94>
 800b4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	e7a5      	b.n	800b406 <_vfiprintf_r+0x11a>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	3401      	adds	r4, #1
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f04f 0c0a 	mov.w	ip, #10
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4cc:	3a30      	subs	r2, #48	; 0x30
 800b4ce:	2a09      	cmp	r2, #9
 800b4d0:	d903      	bls.n	800b4da <_vfiprintf_r+0x1ee>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0c5      	beq.n	800b462 <_vfiprintf_r+0x176>
 800b4d6:	9105      	str	r1, [sp, #20]
 800b4d8:	e7c3      	b.n	800b462 <_vfiprintf_r+0x176>
 800b4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4de:	4604      	mov	r4, r0
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e7f0      	b.n	800b4c6 <_vfiprintf_r+0x1da>
 800b4e4:	ab03      	add	r3, sp, #12
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4b16      	ldr	r3, [pc, #88]	; (800b544 <_vfiprintf_r+0x258>)
 800b4ec:	a904      	add	r1, sp, #16
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f3af 8000 	nop.w
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	1c78      	adds	r0, r7, #1
 800b4f8:	d1d6      	bne.n	800b4a8 <_vfiprintf_r+0x1bc>
 800b4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fc:	07d9      	lsls	r1, r3, #31
 800b4fe:	d405      	bmi.n	800b50c <_vfiprintf_r+0x220>
 800b500:	89ab      	ldrh	r3, [r5, #12]
 800b502:	059a      	lsls	r2, r3, #22
 800b504:	d402      	bmi.n	800b50c <_vfiprintf_r+0x220>
 800b506:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b508:	f000 fc35 	bl	800bd76 <__retarget_lock_release_recursive>
 800b50c:	89ab      	ldrh	r3, [r5, #12]
 800b50e:	065b      	lsls	r3, r3, #25
 800b510:	f53f af12 	bmi.w	800b338 <_vfiprintf_r+0x4c>
 800b514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b516:	e711      	b.n	800b33c <_vfiprintf_r+0x50>
 800b518:	ab03      	add	r3, sp, #12
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	462a      	mov	r2, r5
 800b51e:	4b09      	ldr	r3, [pc, #36]	; (800b544 <_vfiprintf_r+0x258>)
 800b520:	a904      	add	r1, sp, #16
 800b522:	4630      	mov	r0, r6
 800b524:	f000 f880 	bl	800b628 <_printf_i>
 800b528:	e7e4      	b.n	800b4f4 <_vfiprintf_r+0x208>
 800b52a:	bf00      	nop
 800b52c:	0800e120 	.word	0x0800e120
 800b530:	0800e140 	.word	0x0800e140
 800b534:	0800e100 	.word	0x0800e100
 800b538:	0800e0cd 	.word	0x0800e0cd
 800b53c:	0800e0d7 	.word	0x0800e0d7
 800b540:	00000000 	.word	0x00000000
 800b544:	0800b2c7 	.word	0x0800b2c7
 800b548:	0800e0d3 	.word	0x0800e0d3

0800b54c <_printf_common>:
 800b54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b550:	4616      	mov	r6, r2
 800b552:	4699      	mov	r9, r3
 800b554:	688a      	ldr	r2, [r1, #8]
 800b556:	690b      	ldr	r3, [r1, #16]
 800b558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b55c:	4293      	cmp	r3, r2
 800b55e:	bfb8      	it	lt
 800b560:	4613      	movlt	r3, r2
 800b562:	6033      	str	r3, [r6, #0]
 800b564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b568:	4607      	mov	r7, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	b10a      	cbz	r2, 800b572 <_printf_common+0x26>
 800b56e:	3301      	adds	r3, #1
 800b570:	6033      	str	r3, [r6, #0]
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	0699      	lsls	r1, r3, #26
 800b576:	bf42      	ittt	mi
 800b578:	6833      	ldrmi	r3, [r6, #0]
 800b57a:	3302      	addmi	r3, #2
 800b57c:	6033      	strmi	r3, [r6, #0]
 800b57e:	6825      	ldr	r5, [r4, #0]
 800b580:	f015 0506 	ands.w	r5, r5, #6
 800b584:	d106      	bne.n	800b594 <_printf_common+0x48>
 800b586:	f104 0a19 	add.w	sl, r4, #25
 800b58a:	68e3      	ldr	r3, [r4, #12]
 800b58c:	6832      	ldr	r2, [r6, #0]
 800b58e:	1a9b      	subs	r3, r3, r2
 800b590:	42ab      	cmp	r3, r5
 800b592:	dc26      	bgt.n	800b5e2 <_printf_common+0x96>
 800b594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b598:	1e13      	subs	r3, r2, #0
 800b59a:	6822      	ldr	r2, [r4, #0]
 800b59c:	bf18      	it	ne
 800b59e:	2301      	movne	r3, #1
 800b5a0:	0692      	lsls	r2, r2, #26
 800b5a2:	d42b      	bmi.n	800b5fc <_printf_common+0xb0>
 800b5a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	47c0      	blx	r8
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d01e      	beq.n	800b5f0 <_printf_common+0xa4>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	68e5      	ldr	r5, [r4, #12]
 800b5b6:	6832      	ldr	r2, [r6, #0]
 800b5b8:	f003 0306 	and.w	r3, r3, #6
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	bf08      	it	eq
 800b5c0:	1aad      	subeq	r5, r5, r2
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	6922      	ldr	r2, [r4, #16]
 800b5c6:	bf0c      	ite	eq
 800b5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5cc:	2500      	movne	r5, #0
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	bfc4      	itt	gt
 800b5d2:	1a9b      	subgt	r3, r3, r2
 800b5d4:	18ed      	addgt	r5, r5, r3
 800b5d6:	2600      	movs	r6, #0
 800b5d8:	341a      	adds	r4, #26
 800b5da:	42b5      	cmp	r5, r6
 800b5dc:	d11a      	bne.n	800b614 <_printf_common+0xc8>
 800b5de:	2000      	movs	r0, #0
 800b5e0:	e008      	b.n	800b5f4 <_printf_common+0xa8>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	4652      	mov	r2, sl
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	47c0      	blx	r8
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	d103      	bne.n	800b5f8 <_printf_common+0xac>
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f8:	3501      	adds	r5, #1
 800b5fa:	e7c6      	b.n	800b58a <_printf_common+0x3e>
 800b5fc:	18e1      	adds	r1, r4, r3
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	2030      	movs	r0, #48	; 0x30
 800b602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b606:	4422      	add	r2, r4
 800b608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b60c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b610:	3302      	adds	r3, #2
 800b612:	e7c7      	b.n	800b5a4 <_printf_common+0x58>
 800b614:	2301      	movs	r3, #1
 800b616:	4622      	mov	r2, r4
 800b618:	4649      	mov	r1, r9
 800b61a:	4638      	mov	r0, r7
 800b61c:	47c0      	blx	r8
 800b61e:	3001      	adds	r0, #1
 800b620:	d0e6      	beq.n	800b5f0 <_printf_common+0xa4>
 800b622:	3601      	adds	r6, #1
 800b624:	e7d9      	b.n	800b5da <_printf_common+0x8e>
	...

0800b628 <_printf_i>:
 800b628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	460c      	mov	r4, r1
 800b62e:	4691      	mov	r9, r2
 800b630:	7e27      	ldrb	r7, [r4, #24]
 800b632:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b634:	2f78      	cmp	r7, #120	; 0x78
 800b636:	4680      	mov	r8, r0
 800b638:	469a      	mov	sl, r3
 800b63a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b63e:	d807      	bhi.n	800b650 <_printf_i+0x28>
 800b640:	2f62      	cmp	r7, #98	; 0x62
 800b642:	d80a      	bhi.n	800b65a <_printf_i+0x32>
 800b644:	2f00      	cmp	r7, #0
 800b646:	f000 80d8 	beq.w	800b7fa <_printf_i+0x1d2>
 800b64a:	2f58      	cmp	r7, #88	; 0x58
 800b64c:	f000 80a3 	beq.w	800b796 <_printf_i+0x16e>
 800b650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b658:	e03a      	b.n	800b6d0 <_printf_i+0xa8>
 800b65a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b65e:	2b15      	cmp	r3, #21
 800b660:	d8f6      	bhi.n	800b650 <_printf_i+0x28>
 800b662:	a001      	add	r0, pc, #4	; (adr r0, 800b668 <_printf_i+0x40>)
 800b664:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b668:	0800b6c1 	.word	0x0800b6c1
 800b66c:	0800b6d5 	.word	0x0800b6d5
 800b670:	0800b651 	.word	0x0800b651
 800b674:	0800b651 	.word	0x0800b651
 800b678:	0800b651 	.word	0x0800b651
 800b67c:	0800b651 	.word	0x0800b651
 800b680:	0800b6d5 	.word	0x0800b6d5
 800b684:	0800b651 	.word	0x0800b651
 800b688:	0800b651 	.word	0x0800b651
 800b68c:	0800b651 	.word	0x0800b651
 800b690:	0800b651 	.word	0x0800b651
 800b694:	0800b7e1 	.word	0x0800b7e1
 800b698:	0800b705 	.word	0x0800b705
 800b69c:	0800b7c3 	.word	0x0800b7c3
 800b6a0:	0800b651 	.word	0x0800b651
 800b6a4:	0800b651 	.word	0x0800b651
 800b6a8:	0800b803 	.word	0x0800b803
 800b6ac:	0800b651 	.word	0x0800b651
 800b6b0:	0800b705 	.word	0x0800b705
 800b6b4:	0800b651 	.word	0x0800b651
 800b6b8:	0800b651 	.word	0x0800b651
 800b6bc:	0800b7cb 	.word	0x0800b7cb
 800b6c0:	680b      	ldr	r3, [r1, #0]
 800b6c2:	1d1a      	adds	r2, r3, #4
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	600a      	str	r2, [r1, #0]
 800b6c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e0a3      	b.n	800b81c <_printf_i+0x1f4>
 800b6d4:	6825      	ldr	r5, [r4, #0]
 800b6d6:	6808      	ldr	r0, [r1, #0]
 800b6d8:	062e      	lsls	r6, r5, #24
 800b6da:	f100 0304 	add.w	r3, r0, #4
 800b6de:	d50a      	bpl.n	800b6f6 <_printf_i+0xce>
 800b6e0:	6805      	ldr	r5, [r0, #0]
 800b6e2:	600b      	str	r3, [r1, #0]
 800b6e4:	2d00      	cmp	r5, #0
 800b6e6:	da03      	bge.n	800b6f0 <_printf_i+0xc8>
 800b6e8:	232d      	movs	r3, #45	; 0x2d
 800b6ea:	426d      	negs	r5, r5
 800b6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f0:	485e      	ldr	r0, [pc, #376]	; (800b86c <_printf_i+0x244>)
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	e019      	b.n	800b72a <_printf_i+0x102>
 800b6f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b6fa:	6805      	ldr	r5, [r0, #0]
 800b6fc:	600b      	str	r3, [r1, #0]
 800b6fe:	bf18      	it	ne
 800b700:	b22d      	sxthne	r5, r5
 800b702:	e7ef      	b.n	800b6e4 <_printf_i+0xbc>
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	6825      	ldr	r5, [r4, #0]
 800b708:	1d18      	adds	r0, r3, #4
 800b70a:	6008      	str	r0, [r1, #0]
 800b70c:	0628      	lsls	r0, r5, #24
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0xec>
 800b710:	681d      	ldr	r5, [r3, #0]
 800b712:	e002      	b.n	800b71a <_printf_i+0xf2>
 800b714:	0669      	lsls	r1, r5, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0xe8>
 800b718:	881d      	ldrh	r5, [r3, #0]
 800b71a:	4854      	ldr	r0, [pc, #336]	; (800b86c <_printf_i+0x244>)
 800b71c:	2f6f      	cmp	r7, #111	; 0x6f
 800b71e:	bf0c      	ite	eq
 800b720:	2308      	moveq	r3, #8
 800b722:	230a      	movne	r3, #10
 800b724:	2100      	movs	r1, #0
 800b726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b72a:	6866      	ldr	r6, [r4, #4]
 800b72c:	60a6      	str	r6, [r4, #8]
 800b72e:	2e00      	cmp	r6, #0
 800b730:	bfa2      	ittt	ge
 800b732:	6821      	ldrge	r1, [r4, #0]
 800b734:	f021 0104 	bicge.w	r1, r1, #4
 800b738:	6021      	strge	r1, [r4, #0]
 800b73a:	b90d      	cbnz	r5, 800b740 <_printf_i+0x118>
 800b73c:	2e00      	cmp	r6, #0
 800b73e:	d04d      	beq.n	800b7dc <_printf_i+0x1b4>
 800b740:	4616      	mov	r6, r2
 800b742:	fbb5 f1f3 	udiv	r1, r5, r3
 800b746:	fb03 5711 	mls	r7, r3, r1, r5
 800b74a:	5dc7      	ldrb	r7, [r0, r7]
 800b74c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b750:	462f      	mov	r7, r5
 800b752:	42bb      	cmp	r3, r7
 800b754:	460d      	mov	r5, r1
 800b756:	d9f4      	bls.n	800b742 <_printf_i+0x11a>
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d10b      	bne.n	800b774 <_printf_i+0x14c>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	07df      	lsls	r7, r3, #31
 800b760:	d508      	bpl.n	800b774 <_printf_i+0x14c>
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	6861      	ldr	r1, [r4, #4]
 800b766:	4299      	cmp	r1, r3
 800b768:	bfde      	ittt	le
 800b76a:	2330      	movle	r3, #48	; 0x30
 800b76c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b770:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b774:	1b92      	subs	r2, r2, r6
 800b776:	6122      	str	r2, [r4, #16]
 800b778:	f8cd a000 	str.w	sl, [sp]
 800b77c:	464b      	mov	r3, r9
 800b77e:	aa03      	add	r2, sp, #12
 800b780:	4621      	mov	r1, r4
 800b782:	4640      	mov	r0, r8
 800b784:	f7ff fee2 	bl	800b54c <_printf_common>
 800b788:	3001      	adds	r0, #1
 800b78a:	d14c      	bne.n	800b826 <_printf_i+0x1fe>
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	b004      	add	sp, #16
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b796:	4835      	ldr	r0, [pc, #212]	; (800b86c <_printf_i+0x244>)
 800b798:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	680e      	ldr	r6, [r1, #0]
 800b7a0:	061f      	lsls	r7, r3, #24
 800b7a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7a6:	600e      	str	r6, [r1, #0]
 800b7a8:	d514      	bpl.n	800b7d4 <_printf_i+0x1ac>
 800b7aa:	07d9      	lsls	r1, r3, #31
 800b7ac:	bf44      	itt	mi
 800b7ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b7b2:	6023      	strmi	r3, [r4, #0]
 800b7b4:	b91d      	cbnz	r5, 800b7be <_printf_i+0x196>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	f023 0320 	bic.w	r3, r3, #32
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	2310      	movs	r3, #16
 800b7c0:	e7b0      	b.n	800b724 <_printf_i+0xfc>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	f043 0320 	orr.w	r3, r3, #32
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	2378      	movs	r3, #120	; 0x78
 800b7cc:	4828      	ldr	r0, [pc, #160]	; (800b870 <_printf_i+0x248>)
 800b7ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7d2:	e7e3      	b.n	800b79c <_printf_i+0x174>
 800b7d4:	065e      	lsls	r6, r3, #25
 800b7d6:	bf48      	it	mi
 800b7d8:	b2ad      	uxthmi	r5, r5
 800b7da:	e7e6      	b.n	800b7aa <_printf_i+0x182>
 800b7dc:	4616      	mov	r6, r2
 800b7de:	e7bb      	b.n	800b758 <_printf_i+0x130>
 800b7e0:	680b      	ldr	r3, [r1, #0]
 800b7e2:	6826      	ldr	r6, [r4, #0]
 800b7e4:	6960      	ldr	r0, [r4, #20]
 800b7e6:	1d1d      	adds	r5, r3, #4
 800b7e8:	600d      	str	r5, [r1, #0]
 800b7ea:	0635      	lsls	r5, r6, #24
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	d501      	bpl.n	800b7f4 <_printf_i+0x1cc>
 800b7f0:	6018      	str	r0, [r3, #0]
 800b7f2:	e002      	b.n	800b7fa <_printf_i+0x1d2>
 800b7f4:	0671      	lsls	r1, r6, #25
 800b7f6:	d5fb      	bpl.n	800b7f0 <_printf_i+0x1c8>
 800b7f8:	8018      	strh	r0, [r3, #0]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6123      	str	r3, [r4, #16]
 800b7fe:	4616      	mov	r6, r2
 800b800:	e7ba      	b.n	800b778 <_printf_i+0x150>
 800b802:	680b      	ldr	r3, [r1, #0]
 800b804:	1d1a      	adds	r2, r3, #4
 800b806:	600a      	str	r2, [r1, #0]
 800b808:	681e      	ldr	r6, [r3, #0]
 800b80a:	6862      	ldr	r2, [r4, #4]
 800b80c:	2100      	movs	r1, #0
 800b80e:	4630      	mov	r0, r6
 800b810:	f7f4 fcde 	bl	80001d0 <memchr>
 800b814:	b108      	cbz	r0, 800b81a <_printf_i+0x1f2>
 800b816:	1b80      	subs	r0, r0, r6
 800b818:	6060      	str	r0, [r4, #4]
 800b81a:	6863      	ldr	r3, [r4, #4]
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	2300      	movs	r3, #0
 800b820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b824:	e7a8      	b.n	800b778 <_printf_i+0x150>
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	4632      	mov	r2, r6
 800b82a:	4649      	mov	r1, r9
 800b82c:	4640      	mov	r0, r8
 800b82e:	47d0      	blx	sl
 800b830:	3001      	adds	r0, #1
 800b832:	d0ab      	beq.n	800b78c <_printf_i+0x164>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	079b      	lsls	r3, r3, #30
 800b838:	d413      	bmi.n	800b862 <_printf_i+0x23a>
 800b83a:	68e0      	ldr	r0, [r4, #12]
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	4298      	cmp	r0, r3
 800b840:	bfb8      	it	lt
 800b842:	4618      	movlt	r0, r3
 800b844:	e7a4      	b.n	800b790 <_printf_i+0x168>
 800b846:	2301      	movs	r3, #1
 800b848:	4632      	mov	r2, r6
 800b84a:	4649      	mov	r1, r9
 800b84c:	4640      	mov	r0, r8
 800b84e:	47d0      	blx	sl
 800b850:	3001      	adds	r0, #1
 800b852:	d09b      	beq.n	800b78c <_printf_i+0x164>
 800b854:	3501      	adds	r5, #1
 800b856:	68e3      	ldr	r3, [r4, #12]
 800b858:	9903      	ldr	r1, [sp, #12]
 800b85a:	1a5b      	subs	r3, r3, r1
 800b85c:	42ab      	cmp	r3, r5
 800b85e:	dcf2      	bgt.n	800b846 <_printf_i+0x21e>
 800b860:	e7eb      	b.n	800b83a <_printf_i+0x212>
 800b862:	2500      	movs	r5, #0
 800b864:	f104 0619 	add.w	r6, r4, #25
 800b868:	e7f5      	b.n	800b856 <_printf_i+0x22e>
 800b86a:	bf00      	nop
 800b86c:	0800e0de 	.word	0x0800e0de
 800b870:	0800e0ef 	.word	0x0800e0ef

0800b874 <__swbuf_r>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	460e      	mov	r6, r1
 800b878:	4614      	mov	r4, r2
 800b87a:	4605      	mov	r5, r0
 800b87c:	b118      	cbz	r0, 800b886 <__swbuf_r+0x12>
 800b87e:	6983      	ldr	r3, [r0, #24]
 800b880:	b90b      	cbnz	r3, 800b886 <__swbuf_r+0x12>
 800b882:	f000 f9d9 	bl	800bc38 <__sinit>
 800b886:	4b21      	ldr	r3, [pc, #132]	; (800b90c <__swbuf_r+0x98>)
 800b888:	429c      	cmp	r4, r3
 800b88a:	d12b      	bne.n	800b8e4 <__swbuf_r+0x70>
 800b88c:	686c      	ldr	r4, [r5, #4]
 800b88e:	69a3      	ldr	r3, [r4, #24]
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	071a      	lsls	r2, r3, #28
 800b896:	d52f      	bpl.n	800b8f8 <__swbuf_r+0x84>
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	b36b      	cbz	r3, 800b8f8 <__swbuf_r+0x84>
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	1ac0      	subs	r0, r0, r3
 800b8a2:	6963      	ldr	r3, [r4, #20]
 800b8a4:	b2f6      	uxtb	r6, r6
 800b8a6:	4283      	cmp	r3, r0
 800b8a8:	4637      	mov	r7, r6
 800b8aa:	dc04      	bgt.n	800b8b6 <__swbuf_r+0x42>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 f92e 	bl	800bb10 <_fflush_r>
 800b8b4:	bb30      	cbnz	r0, 800b904 <__swbuf_r+0x90>
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	60a3      	str	r3, [r4, #8]
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	6022      	str	r2, [r4, #0]
 800b8c2:	701e      	strb	r6, [r3, #0]
 800b8c4:	6963      	ldr	r3, [r4, #20]
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	4283      	cmp	r3, r0
 800b8ca:	d004      	beq.n	800b8d6 <__swbuf_r+0x62>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	07db      	lsls	r3, r3, #31
 800b8d0:	d506      	bpl.n	800b8e0 <__swbuf_r+0x6c>
 800b8d2:	2e0a      	cmp	r6, #10
 800b8d4:	d104      	bne.n	800b8e0 <__swbuf_r+0x6c>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f000 f919 	bl	800bb10 <_fflush_r>
 800b8de:	b988      	cbnz	r0, 800b904 <__swbuf_r+0x90>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e4:	4b0a      	ldr	r3, [pc, #40]	; (800b910 <__swbuf_r+0x9c>)
 800b8e6:	429c      	cmp	r4, r3
 800b8e8:	d101      	bne.n	800b8ee <__swbuf_r+0x7a>
 800b8ea:	68ac      	ldr	r4, [r5, #8]
 800b8ec:	e7cf      	b.n	800b88e <__swbuf_r+0x1a>
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <__swbuf_r+0xa0>)
 800b8f0:	429c      	cmp	r4, r3
 800b8f2:	bf08      	it	eq
 800b8f4:	68ec      	ldreq	r4, [r5, #12]
 800b8f6:	e7ca      	b.n	800b88e <__swbuf_r+0x1a>
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f000 f80c 	bl	800b918 <__swsetup_r>
 800b900:	2800      	cmp	r0, #0
 800b902:	d0cb      	beq.n	800b89c <__swbuf_r+0x28>
 800b904:	f04f 37ff 	mov.w	r7, #4294967295
 800b908:	e7ea      	b.n	800b8e0 <__swbuf_r+0x6c>
 800b90a:	bf00      	nop
 800b90c:	0800e120 	.word	0x0800e120
 800b910:	0800e140 	.word	0x0800e140
 800b914:	0800e100 	.word	0x0800e100

0800b918 <__swsetup_r>:
 800b918:	4b32      	ldr	r3, [pc, #200]	; (800b9e4 <__swsetup_r+0xcc>)
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	681d      	ldr	r5, [r3, #0]
 800b91e:	4606      	mov	r6, r0
 800b920:	460c      	mov	r4, r1
 800b922:	b125      	cbz	r5, 800b92e <__swsetup_r+0x16>
 800b924:	69ab      	ldr	r3, [r5, #24]
 800b926:	b913      	cbnz	r3, 800b92e <__swsetup_r+0x16>
 800b928:	4628      	mov	r0, r5
 800b92a:	f000 f985 	bl	800bc38 <__sinit>
 800b92e:	4b2e      	ldr	r3, [pc, #184]	; (800b9e8 <__swsetup_r+0xd0>)
 800b930:	429c      	cmp	r4, r3
 800b932:	d10f      	bne.n	800b954 <__swsetup_r+0x3c>
 800b934:	686c      	ldr	r4, [r5, #4]
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b93c:	0719      	lsls	r1, r3, #28
 800b93e:	d42c      	bmi.n	800b99a <__swsetup_r+0x82>
 800b940:	06dd      	lsls	r5, r3, #27
 800b942:	d411      	bmi.n	800b968 <__swsetup_r+0x50>
 800b944:	2309      	movs	r3, #9
 800b946:	6033      	str	r3, [r6, #0]
 800b948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	f04f 30ff 	mov.w	r0, #4294967295
 800b952:	e03e      	b.n	800b9d2 <__swsetup_r+0xba>
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <__swsetup_r+0xd4>)
 800b956:	429c      	cmp	r4, r3
 800b958:	d101      	bne.n	800b95e <__swsetup_r+0x46>
 800b95a:	68ac      	ldr	r4, [r5, #8]
 800b95c:	e7eb      	b.n	800b936 <__swsetup_r+0x1e>
 800b95e:	4b24      	ldr	r3, [pc, #144]	; (800b9f0 <__swsetup_r+0xd8>)
 800b960:	429c      	cmp	r4, r3
 800b962:	bf08      	it	eq
 800b964:	68ec      	ldreq	r4, [r5, #12]
 800b966:	e7e6      	b.n	800b936 <__swsetup_r+0x1e>
 800b968:	0758      	lsls	r0, r3, #29
 800b96a:	d512      	bpl.n	800b992 <__swsetup_r+0x7a>
 800b96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96e:	b141      	cbz	r1, 800b982 <__swsetup_r+0x6a>
 800b970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b974:	4299      	cmp	r1, r3
 800b976:	d002      	beq.n	800b97e <__swsetup_r+0x66>
 800b978:	4630      	mov	r0, r6
 800b97a:	f7ff faad 	bl	800aed8 <_free_r>
 800b97e:	2300      	movs	r3, #0
 800b980:	6363      	str	r3, [r4, #52]	; 0x34
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b988:	81a3      	strh	r3, [r4, #12]
 800b98a:	2300      	movs	r3, #0
 800b98c:	6063      	str	r3, [r4, #4]
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	f043 0308 	orr.w	r3, r3, #8
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	b94b      	cbnz	r3, 800b9b2 <__swsetup_r+0x9a>
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9a8:	d003      	beq.n	800b9b2 <__swsetup_r+0x9a>
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f000 fa07 	bl	800bdc0 <__smakebuf_r>
 800b9b2:	89a0      	ldrh	r0, [r4, #12]
 800b9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9b8:	f010 0301 	ands.w	r3, r0, #1
 800b9bc:	d00a      	beq.n	800b9d4 <__swsetup_r+0xbc>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60a3      	str	r3, [r4, #8]
 800b9c2:	6963      	ldr	r3, [r4, #20]
 800b9c4:	425b      	negs	r3, r3
 800b9c6:	61a3      	str	r3, [r4, #24]
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b943      	cbnz	r3, 800b9de <__swsetup_r+0xc6>
 800b9cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9d0:	d1ba      	bne.n	800b948 <__swsetup_r+0x30>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}
 800b9d4:	0781      	lsls	r1, r0, #30
 800b9d6:	bf58      	it	pl
 800b9d8:	6963      	ldrpl	r3, [r4, #20]
 800b9da:	60a3      	str	r3, [r4, #8]
 800b9dc:	e7f4      	b.n	800b9c8 <__swsetup_r+0xb0>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	e7f7      	b.n	800b9d2 <__swsetup_r+0xba>
 800b9e2:	bf00      	nop
 800b9e4:	20000064 	.word	0x20000064
 800b9e8:	0800e120 	.word	0x0800e120
 800b9ec:	0800e140 	.word	0x0800e140
 800b9f0:	0800e100 	.word	0x0800e100

0800b9f4 <abort>:
 800b9f4:	b508      	push	{r3, lr}
 800b9f6:	2006      	movs	r0, #6
 800b9f8:	f000 fa4a 	bl	800be90 <raise>
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f7f6 fcb7 	bl	8002370 <_exit>
	...

0800ba04 <__sflush_r>:
 800ba04:	898a      	ldrh	r2, [r1, #12]
 800ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	0710      	lsls	r0, r2, #28
 800ba0e:	460c      	mov	r4, r1
 800ba10:	d458      	bmi.n	800bac4 <__sflush_r+0xc0>
 800ba12:	684b      	ldr	r3, [r1, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dc05      	bgt.n	800ba24 <__sflush_r+0x20>
 800ba18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dc02      	bgt.n	800ba24 <__sflush_r+0x20>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba26:	2e00      	cmp	r6, #0
 800ba28:	d0f9      	beq.n	800ba1e <__sflush_r+0x1a>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba30:	682f      	ldr	r7, [r5, #0]
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	d032      	beq.n	800ba9c <__sflush_r+0x98>
 800ba36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	075a      	lsls	r2, r3, #29
 800ba3c:	d505      	bpl.n	800ba4a <__sflush_r+0x46>
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	1ac0      	subs	r0, r0, r3
 800ba42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba44:	b10b      	cbz	r3, 800ba4a <__sflush_r+0x46>
 800ba46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba48:	1ac0      	subs	r0, r0, r3
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba50:	6a21      	ldr	r1, [r4, #32]
 800ba52:	4628      	mov	r0, r5
 800ba54:	47b0      	blx	r6
 800ba56:	1c43      	adds	r3, r0, #1
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	d106      	bne.n	800ba6a <__sflush_r+0x66>
 800ba5c:	6829      	ldr	r1, [r5, #0]
 800ba5e:	291d      	cmp	r1, #29
 800ba60:	d82c      	bhi.n	800babc <__sflush_r+0xb8>
 800ba62:	4a2a      	ldr	r2, [pc, #168]	; (800bb0c <__sflush_r+0x108>)
 800ba64:	40ca      	lsrs	r2, r1
 800ba66:	07d6      	lsls	r6, r2, #31
 800ba68:	d528      	bpl.n	800babc <__sflush_r+0xb8>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	6062      	str	r2, [r4, #4]
 800ba6e:	04d9      	lsls	r1, r3, #19
 800ba70:	6922      	ldr	r2, [r4, #16]
 800ba72:	6022      	str	r2, [r4, #0]
 800ba74:	d504      	bpl.n	800ba80 <__sflush_r+0x7c>
 800ba76:	1c42      	adds	r2, r0, #1
 800ba78:	d101      	bne.n	800ba7e <__sflush_r+0x7a>
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	b903      	cbnz	r3, 800ba80 <__sflush_r+0x7c>
 800ba7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ba80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba82:	602f      	str	r7, [r5, #0]
 800ba84:	2900      	cmp	r1, #0
 800ba86:	d0ca      	beq.n	800ba1e <__sflush_r+0x1a>
 800ba88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	d002      	beq.n	800ba96 <__sflush_r+0x92>
 800ba90:	4628      	mov	r0, r5
 800ba92:	f7ff fa21 	bl	800aed8 <_free_r>
 800ba96:	2000      	movs	r0, #0
 800ba98:	6360      	str	r0, [r4, #52]	; 0x34
 800ba9a:	e7c1      	b.n	800ba20 <__sflush_r+0x1c>
 800ba9c:	6a21      	ldr	r1, [r4, #32]
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b0      	blx	r6
 800baa4:	1c41      	adds	r1, r0, #1
 800baa6:	d1c7      	bne.n	800ba38 <__sflush_r+0x34>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0c4      	beq.n	800ba38 <__sflush_r+0x34>
 800baae:	2b1d      	cmp	r3, #29
 800bab0:	d001      	beq.n	800bab6 <__sflush_r+0xb2>
 800bab2:	2b16      	cmp	r3, #22
 800bab4:	d101      	bne.n	800baba <__sflush_r+0xb6>
 800bab6:	602f      	str	r7, [r5, #0]
 800bab8:	e7b1      	b.n	800ba1e <__sflush_r+0x1a>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac0:	81a3      	strh	r3, [r4, #12]
 800bac2:	e7ad      	b.n	800ba20 <__sflush_r+0x1c>
 800bac4:	690f      	ldr	r7, [r1, #16]
 800bac6:	2f00      	cmp	r7, #0
 800bac8:	d0a9      	beq.n	800ba1e <__sflush_r+0x1a>
 800baca:	0793      	lsls	r3, r2, #30
 800bacc:	680e      	ldr	r6, [r1, #0]
 800bace:	bf08      	it	eq
 800bad0:	694b      	ldreq	r3, [r1, #20]
 800bad2:	600f      	str	r7, [r1, #0]
 800bad4:	bf18      	it	ne
 800bad6:	2300      	movne	r3, #0
 800bad8:	eba6 0807 	sub.w	r8, r6, r7
 800badc:	608b      	str	r3, [r1, #8]
 800bade:	f1b8 0f00 	cmp.w	r8, #0
 800bae2:	dd9c      	ble.n	800ba1e <__sflush_r+0x1a>
 800bae4:	6a21      	ldr	r1, [r4, #32]
 800bae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bae8:	4643      	mov	r3, r8
 800baea:	463a      	mov	r2, r7
 800baec:	4628      	mov	r0, r5
 800baee:	47b0      	blx	r6
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dc06      	bgt.n	800bb02 <__sflush_r+0xfe>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	f04f 30ff 	mov.w	r0, #4294967295
 800bb00:	e78e      	b.n	800ba20 <__sflush_r+0x1c>
 800bb02:	4407      	add	r7, r0
 800bb04:	eba8 0800 	sub.w	r8, r8, r0
 800bb08:	e7e9      	b.n	800bade <__sflush_r+0xda>
 800bb0a:	bf00      	nop
 800bb0c:	20400001 	.word	0x20400001

0800bb10 <_fflush_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	690b      	ldr	r3, [r1, #16]
 800bb14:	4605      	mov	r5, r0
 800bb16:	460c      	mov	r4, r1
 800bb18:	b913      	cbnz	r3, 800bb20 <_fflush_r+0x10>
 800bb1a:	2500      	movs	r5, #0
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	b118      	cbz	r0, 800bb2a <_fflush_r+0x1a>
 800bb22:	6983      	ldr	r3, [r0, #24]
 800bb24:	b90b      	cbnz	r3, 800bb2a <_fflush_r+0x1a>
 800bb26:	f000 f887 	bl	800bc38 <__sinit>
 800bb2a:	4b14      	ldr	r3, [pc, #80]	; (800bb7c <_fflush_r+0x6c>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	d11b      	bne.n	800bb68 <_fflush_r+0x58>
 800bb30:	686c      	ldr	r4, [r5, #4]
 800bb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0ef      	beq.n	800bb1a <_fflush_r+0xa>
 800bb3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb3c:	07d0      	lsls	r0, r2, #31
 800bb3e:	d404      	bmi.n	800bb4a <_fflush_r+0x3a>
 800bb40:	0599      	lsls	r1, r3, #22
 800bb42:	d402      	bmi.n	800bb4a <_fflush_r+0x3a>
 800bb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb46:	f000 f915 	bl	800bd74 <__retarget_lock_acquire_recursive>
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	f7ff ff59 	bl	800ba04 <__sflush_r>
 800bb52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb54:	07da      	lsls	r2, r3, #31
 800bb56:	4605      	mov	r5, r0
 800bb58:	d4e0      	bmi.n	800bb1c <_fflush_r+0xc>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	059b      	lsls	r3, r3, #22
 800bb5e:	d4dd      	bmi.n	800bb1c <_fflush_r+0xc>
 800bb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb62:	f000 f908 	bl	800bd76 <__retarget_lock_release_recursive>
 800bb66:	e7d9      	b.n	800bb1c <_fflush_r+0xc>
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <_fflush_r+0x70>)
 800bb6a:	429c      	cmp	r4, r3
 800bb6c:	d101      	bne.n	800bb72 <_fflush_r+0x62>
 800bb6e:	68ac      	ldr	r4, [r5, #8]
 800bb70:	e7df      	b.n	800bb32 <_fflush_r+0x22>
 800bb72:	4b04      	ldr	r3, [pc, #16]	; (800bb84 <_fflush_r+0x74>)
 800bb74:	429c      	cmp	r4, r3
 800bb76:	bf08      	it	eq
 800bb78:	68ec      	ldreq	r4, [r5, #12]
 800bb7a:	e7da      	b.n	800bb32 <_fflush_r+0x22>
 800bb7c:	0800e120 	.word	0x0800e120
 800bb80:	0800e140 	.word	0x0800e140
 800bb84:	0800e100 	.word	0x0800e100

0800bb88 <std>:
 800bb88:	2300      	movs	r3, #0
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb96:	6083      	str	r3, [r0, #8]
 800bb98:	8181      	strh	r1, [r0, #12]
 800bb9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb9c:	81c2      	strh	r2, [r0, #14]
 800bb9e:	6183      	str	r3, [r0, #24]
 800bba0:	4619      	mov	r1, r3
 800bba2:	2208      	movs	r2, #8
 800bba4:	305c      	adds	r0, #92	; 0x5c
 800bba6:	f7ff f98f 	bl	800aec8 <memset>
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <std+0x38>)
 800bbac:	6263      	str	r3, [r4, #36]	; 0x24
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <std+0x3c>)
 800bbb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x40>)
 800bbb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb6:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <std+0x44>)
 800bbb8:	6224      	str	r4, [r4, #32]
 800bbba:	6323      	str	r3, [r4, #48]	; 0x30
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0800bec9 	.word	0x0800bec9
 800bbc4:	0800beeb 	.word	0x0800beeb
 800bbc8:	0800bf23 	.word	0x0800bf23
 800bbcc:	0800bf47 	.word	0x0800bf47

0800bbd0 <_cleanup_r>:
 800bbd0:	4901      	ldr	r1, [pc, #4]	; (800bbd8 <_cleanup_r+0x8>)
 800bbd2:	f000 b8af 	b.w	800bd34 <_fwalk_reent>
 800bbd6:	bf00      	nop
 800bbd8:	0800bb11 	.word	0x0800bb11

0800bbdc <__sfmoreglue>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	1e4a      	subs	r2, r1, #1
 800bbe0:	2568      	movs	r5, #104	; 0x68
 800bbe2:	4355      	muls	r5, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbea:	f7ff f9c5 	bl	800af78 <_malloc_r>
 800bbee:	4604      	mov	r4, r0
 800bbf0:	b140      	cbz	r0, 800bc04 <__sfmoreglue+0x28>
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	e9c0 1600 	strd	r1, r6, [r0]
 800bbf8:	300c      	adds	r0, #12
 800bbfa:	60a0      	str	r0, [r4, #8]
 800bbfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc00:	f7ff f962 	bl	800aec8 <memset>
 800bc04:	4620      	mov	r0, r4
 800bc06:	bd70      	pop	{r4, r5, r6, pc}

0800bc08 <__sfp_lock_acquire>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__sfp_lock_acquire+0x8>)
 800bc0a:	f000 b8b3 	b.w	800bd74 <__retarget_lock_acquire_recursive>
 800bc0e:	bf00      	nop
 800bc10:	20004814 	.word	0x20004814

0800bc14 <__sfp_lock_release>:
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <__sfp_lock_release+0x8>)
 800bc16:	f000 b8ae 	b.w	800bd76 <__retarget_lock_release_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	20004814 	.word	0x20004814

0800bc20 <__sinit_lock_acquire>:
 800bc20:	4801      	ldr	r0, [pc, #4]	; (800bc28 <__sinit_lock_acquire+0x8>)
 800bc22:	f000 b8a7 	b.w	800bd74 <__retarget_lock_acquire_recursive>
 800bc26:	bf00      	nop
 800bc28:	2000480f 	.word	0x2000480f

0800bc2c <__sinit_lock_release>:
 800bc2c:	4801      	ldr	r0, [pc, #4]	; (800bc34 <__sinit_lock_release+0x8>)
 800bc2e:	f000 b8a2 	b.w	800bd76 <__retarget_lock_release_recursive>
 800bc32:	bf00      	nop
 800bc34:	2000480f 	.word	0x2000480f

0800bc38 <__sinit>:
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	f7ff fff0 	bl	800bc20 <__sinit_lock_acquire>
 800bc40:	69a3      	ldr	r3, [r4, #24]
 800bc42:	b11b      	cbz	r3, 800bc4c <__sinit+0x14>
 800bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc48:	f7ff bff0 	b.w	800bc2c <__sinit_lock_release>
 800bc4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc50:	6523      	str	r3, [r4, #80]	; 0x50
 800bc52:	4b13      	ldr	r3, [pc, #76]	; (800bca0 <__sinit+0x68>)
 800bc54:	4a13      	ldr	r2, [pc, #76]	; (800bca4 <__sinit+0x6c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	bf04      	itt	eq
 800bc5e:	2301      	moveq	r3, #1
 800bc60:	61a3      	streq	r3, [r4, #24]
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 f820 	bl	800bca8 <__sfp>
 800bc68:	6060      	str	r0, [r4, #4]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 f81c 	bl	800bca8 <__sfp>
 800bc70:	60a0      	str	r0, [r4, #8]
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 f818 	bl	800bca8 <__sfp>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	60e0      	str	r0, [r4, #12]
 800bc7c:	2104      	movs	r1, #4
 800bc7e:	6860      	ldr	r0, [r4, #4]
 800bc80:	f7ff ff82 	bl	800bb88 <std>
 800bc84:	68a0      	ldr	r0, [r4, #8]
 800bc86:	2201      	movs	r2, #1
 800bc88:	2109      	movs	r1, #9
 800bc8a:	f7ff ff7d 	bl	800bb88 <std>
 800bc8e:	68e0      	ldr	r0, [r4, #12]
 800bc90:	2202      	movs	r2, #2
 800bc92:	2112      	movs	r1, #18
 800bc94:	f7ff ff78 	bl	800bb88 <std>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	61a3      	str	r3, [r4, #24]
 800bc9c:	e7d2      	b.n	800bc44 <__sinit+0xc>
 800bc9e:	bf00      	nop
 800bca0:	0800df14 	.word	0x0800df14
 800bca4:	0800bbd1 	.word	0x0800bbd1

0800bca8 <__sfp>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	4607      	mov	r7, r0
 800bcac:	f7ff ffac 	bl	800bc08 <__sfp_lock_acquire>
 800bcb0:	4b1e      	ldr	r3, [pc, #120]	; (800bd2c <__sfp+0x84>)
 800bcb2:	681e      	ldr	r6, [r3, #0]
 800bcb4:	69b3      	ldr	r3, [r6, #24]
 800bcb6:	b913      	cbnz	r3, 800bcbe <__sfp+0x16>
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7ff ffbd 	bl	800bc38 <__sinit>
 800bcbe:	3648      	adds	r6, #72	; 0x48
 800bcc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	d503      	bpl.n	800bcd0 <__sfp+0x28>
 800bcc8:	6833      	ldr	r3, [r6, #0]
 800bcca:	b30b      	cbz	r3, 800bd10 <__sfp+0x68>
 800bccc:	6836      	ldr	r6, [r6, #0]
 800bcce:	e7f7      	b.n	800bcc0 <__sfp+0x18>
 800bcd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcd4:	b9d5      	cbnz	r5, 800bd0c <__sfp+0x64>
 800bcd6:	4b16      	ldr	r3, [pc, #88]	; (800bd30 <__sfp+0x88>)
 800bcd8:	60e3      	str	r3, [r4, #12]
 800bcda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcde:	6665      	str	r5, [r4, #100]	; 0x64
 800bce0:	f000 f847 	bl	800bd72 <__retarget_lock_init_recursive>
 800bce4:	f7ff ff96 	bl	800bc14 <__sfp_lock_release>
 800bce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcf0:	6025      	str	r5, [r4, #0]
 800bcf2:	61a5      	str	r5, [r4, #24]
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcfc:	f7ff f8e4 	bl	800aec8 <memset>
 800bd00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd08:	4620      	mov	r0, r4
 800bd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd0c:	3468      	adds	r4, #104	; 0x68
 800bd0e:	e7d9      	b.n	800bcc4 <__sfp+0x1c>
 800bd10:	2104      	movs	r1, #4
 800bd12:	4638      	mov	r0, r7
 800bd14:	f7ff ff62 	bl	800bbdc <__sfmoreglue>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	6030      	str	r0, [r6, #0]
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d1d5      	bne.n	800bccc <__sfp+0x24>
 800bd20:	f7ff ff78 	bl	800bc14 <__sfp_lock_release>
 800bd24:	230c      	movs	r3, #12
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	e7ee      	b.n	800bd08 <__sfp+0x60>
 800bd2a:	bf00      	nop
 800bd2c:	0800df14 	.word	0x0800df14
 800bd30:	ffff0001 	.word	0xffff0001

0800bd34 <_fwalk_reent>:
 800bd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	4606      	mov	r6, r0
 800bd3a:	4688      	mov	r8, r1
 800bd3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd40:	2700      	movs	r7, #0
 800bd42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd46:	f1b9 0901 	subs.w	r9, r9, #1
 800bd4a:	d505      	bpl.n	800bd58 <_fwalk_reent+0x24>
 800bd4c:	6824      	ldr	r4, [r4, #0]
 800bd4e:	2c00      	cmp	r4, #0
 800bd50:	d1f7      	bne.n	800bd42 <_fwalk_reent+0xe>
 800bd52:	4638      	mov	r0, r7
 800bd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd58:	89ab      	ldrh	r3, [r5, #12]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d907      	bls.n	800bd6e <_fwalk_reent+0x3a>
 800bd5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd62:	3301      	adds	r3, #1
 800bd64:	d003      	beq.n	800bd6e <_fwalk_reent+0x3a>
 800bd66:	4629      	mov	r1, r5
 800bd68:	4630      	mov	r0, r6
 800bd6a:	47c0      	blx	r8
 800bd6c:	4307      	orrs	r7, r0
 800bd6e:	3568      	adds	r5, #104	; 0x68
 800bd70:	e7e9      	b.n	800bd46 <_fwalk_reent+0x12>

0800bd72 <__retarget_lock_init_recursive>:
 800bd72:	4770      	bx	lr

0800bd74 <__retarget_lock_acquire_recursive>:
 800bd74:	4770      	bx	lr

0800bd76 <__retarget_lock_release_recursive>:
 800bd76:	4770      	bx	lr

0800bd78 <__swhatbuf_r>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	460e      	mov	r6, r1
 800bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd80:	2900      	cmp	r1, #0
 800bd82:	b096      	sub	sp, #88	; 0x58
 800bd84:	4614      	mov	r4, r2
 800bd86:	461d      	mov	r5, r3
 800bd88:	da07      	bge.n	800bd9a <__swhatbuf_r+0x22>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	602b      	str	r3, [r5, #0]
 800bd8e:	89b3      	ldrh	r3, [r6, #12]
 800bd90:	061a      	lsls	r2, r3, #24
 800bd92:	d410      	bmi.n	800bdb6 <__swhatbuf_r+0x3e>
 800bd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd98:	e00e      	b.n	800bdb8 <__swhatbuf_r+0x40>
 800bd9a:	466a      	mov	r2, sp
 800bd9c:	f000 f8fa 	bl	800bf94 <_fstat_r>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	dbf2      	blt.n	800bd8a <__swhatbuf_r+0x12>
 800bda4:	9a01      	ldr	r2, [sp, #4]
 800bda6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdae:	425a      	negs	r2, r3
 800bdb0:	415a      	adcs	r2, r3
 800bdb2:	602a      	str	r2, [r5, #0]
 800bdb4:	e7ee      	b.n	800bd94 <__swhatbuf_r+0x1c>
 800bdb6:	2340      	movs	r3, #64	; 0x40
 800bdb8:	2000      	movs	r0, #0
 800bdba:	6023      	str	r3, [r4, #0]
 800bdbc:	b016      	add	sp, #88	; 0x58
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}

0800bdc0 <__smakebuf_r>:
 800bdc0:	898b      	ldrh	r3, [r1, #12]
 800bdc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdc4:	079d      	lsls	r5, r3, #30
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	d507      	bpl.n	800bddc <__smakebuf_r+0x1c>
 800bdcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	6163      	str	r3, [r4, #20]
 800bdd8:	b002      	add	sp, #8
 800bdda:	bd70      	pop	{r4, r5, r6, pc}
 800bddc:	ab01      	add	r3, sp, #4
 800bdde:	466a      	mov	r2, sp
 800bde0:	f7ff ffca 	bl	800bd78 <__swhatbuf_r>
 800bde4:	9900      	ldr	r1, [sp, #0]
 800bde6:	4605      	mov	r5, r0
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7ff f8c5 	bl	800af78 <_malloc_r>
 800bdee:	b948      	cbnz	r0, 800be04 <__smakebuf_r+0x44>
 800bdf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf4:	059a      	lsls	r2, r3, #22
 800bdf6:	d4ef      	bmi.n	800bdd8 <__smakebuf_r+0x18>
 800bdf8:	f023 0303 	bic.w	r3, r3, #3
 800bdfc:	f043 0302 	orr.w	r3, r3, #2
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	e7e3      	b.n	800bdcc <__smakebuf_r+0xc>
 800be04:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <__smakebuf_r+0x7c>)
 800be06:	62b3      	str	r3, [r6, #40]	; 0x28
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	6163      	str	r3, [r4, #20]
 800be16:	9b01      	ldr	r3, [sp, #4]
 800be18:	6120      	str	r0, [r4, #16]
 800be1a:	b15b      	cbz	r3, 800be34 <__smakebuf_r+0x74>
 800be1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f8c9 	bl	800bfb8 <_isatty_r>
 800be26:	b128      	cbz	r0, 800be34 <__smakebuf_r+0x74>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	89a0      	ldrh	r0, [r4, #12]
 800be36:	4305      	orrs	r5, r0
 800be38:	81a5      	strh	r5, [r4, #12]
 800be3a:	e7cd      	b.n	800bdd8 <__smakebuf_r+0x18>
 800be3c:	0800bbd1 	.word	0x0800bbd1

0800be40 <_raise_r>:
 800be40:	291f      	cmp	r1, #31
 800be42:	b538      	push	{r3, r4, r5, lr}
 800be44:	4604      	mov	r4, r0
 800be46:	460d      	mov	r5, r1
 800be48:	d904      	bls.n	800be54 <_raise_r+0x14>
 800be4a:	2316      	movs	r3, #22
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be56:	b112      	cbz	r2, 800be5e <_raise_r+0x1e>
 800be58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be5c:	b94b      	cbnz	r3, 800be72 <_raise_r+0x32>
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 f830 	bl	800bec4 <_getpid_r>
 800be64:	462a      	mov	r2, r5
 800be66:	4601      	mov	r1, r0
 800be68:	4620      	mov	r0, r4
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f000 b817 	b.w	800bea0 <_kill_r>
 800be72:	2b01      	cmp	r3, #1
 800be74:	d00a      	beq.n	800be8c <_raise_r+0x4c>
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	d103      	bne.n	800be82 <_raise_r+0x42>
 800be7a:	2316      	movs	r3, #22
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	2001      	movs	r0, #1
 800be80:	e7e7      	b.n	800be52 <_raise_r+0x12>
 800be82:	2400      	movs	r4, #0
 800be84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be88:	4628      	mov	r0, r5
 800be8a:	4798      	blx	r3
 800be8c:	2000      	movs	r0, #0
 800be8e:	e7e0      	b.n	800be52 <_raise_r+0x12>

0800be90 <raise>:
 800be90:	4b02      	ldr	r3, [pc, #8]	; (800be9c <raise+0xc>)
 800be92:	4601      	mov	r1, r0
 800be94:	6818      	ldr	r0, [r3, #0]
 800be96:	f7ff bfd3 	b.w	800be40 <_raise_r>
 800be9a:	bf00      	nop
 800be9c:	20000064 	.word	0x20000064

0800bea0 <_kill_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4d07      	ldr	r5, [pc, #28]	; (800bec0 <_kill_r+0x20>)
 800bea4:	2300      	movs	r3, #0
 800bea6:	4604      	mov	r4, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	4611      	mov	r1, r2
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	f7f6 fa4f 	bl	8002350 <_kill>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	d102      	bne.n	800bebc <_kill_r+0x1c>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b103      	cbz	r3, 800bebc <_kill_r+0x1c>
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	bd38      	pop	{r3, r4, r5, pc}
 800bebe:	bf00      	nop
 800bec0:	20004808 	.word	0x20004808

0800bec4 <_getpid_r>:
 800bec4:	f7f6 ba3c 	b.w	8002340 <_getpid>

0800bec8 <__sread>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	f000 f894 	bl	800bffc <_read_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	bfab      	itete	ge
 800bed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beda:	89a3      	ldrhlt	r3, [r4, #12]
 800bedc:	181b      	addge	r3, r3, r0
 800bede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bee2:	bfac      	ite	ge
 800bee4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bee6:	81a3      	strhlt	r3, [r4, #12]
 800bee8:	bd10      	pop	{r4, pc}

0800beea <__swrite>:
 800beea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beee:	461f      	mov	r7, r3
 800bef0:	898b      	ldrh	r3, [r1, #12]
 800bef2:	05db      	lsls	r3, r3, #23
 800bef4:	4605      	mov	r5, r0
 800bef6:	460c      	mov	r4, r1
 800bef8:	4616      	mov	r6, r2
 800befa:	d505      	bpl.n	800bf08 <__swrite+0x1e>
 800befc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf00:	2302      	movs	r3, #2
 800bf02:	2200      	movs	r2, #0
 800bf04:	f000 f868 	bl	800bfd8 <_lseek_r>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf12:	81a3      	strh	r3, [r4, #12]
 800bf14:	4632      	mov	r2, r6
 800bf16:	463b      	mov	r3, r7
 800bf18:	4628      	mov	r0, r5
 800bf1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1e:	f000 b817 	b.w	800bf50 <_write_r>

0800bf22 <__sseek>:
 800bf22:	b510      	push	{r4, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2a:	f000 f855 	bl	800bfd8 <_lseek_r>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	bf15      	itete	ne
 800bf34:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf3e:	81a3      	strheq	r3, [r4, #12]
 800bf40:	bf18      	it	ne
 800bf42:	81a3      	strhne	r3, [r4, #12]
 800bf44:	bd10      	pop	{r4, pc}

0800bf46 <__sclose>:
 800bf46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4a:	f000 b813 	b.w	800bf74 <_close_r>
	...

0800bf50 <_write_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d07      	ldr	r5, [pc, #28]	; (800bf70 <_write_r+0x20>)
 800bf54:	4604      	mov	r4, r0
 800bf56:	4608      	mov	r0, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	602a      	str	r2, [r5, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f7f6 fa2d 	bl	80023be <_write>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_write_r+0x1e>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_write_r+0x1e>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	20004808 	.word	0x20004808

0800bf74 <_close_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d06      	ldr	r5, [pc, #24]	; (800bf90 <_close_r+0x1c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7f6 fa39 	bl	80023f6 <_close>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_close_r+0x1a>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_close_r+0x1a>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	20004808 	.word	0x20004808

0800bf94 <_fstat_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_fstat_r+0x20>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	602b      	str	r3, [r5, #0]
 800bfa2:	f7f6 fa34 	bl	800240e <_fstat>
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	d102      	bne.n	800bfb0 <_fstat_r+0x1c>
 800bfaa:	682b      	ldr	r3, [r5, #0]
 800bfac:	b103      	cbz	r3, 800bfb0 <_fstat_r+0x1c>
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20004808 	.word	0x20004808

0800bfb8 <_isatty_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d06      	ldr	r5, [pc, #24]	; (800bfd4 <_isatty_r+0x1c>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	602b      	str	r3, [r5, #0]
 800bfc4:	f7f6 fa33 	bl	800242e <_isatty>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_isatty_r+0x1a>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_isatty_r+0x1a>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	20004808 	.word	0x20004808

0800bfd8 <_lseek_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d07      	ldr	r5, [pc, #28]	; (800bff8 <_lseek_r+0x20>)
 800bfdc:	4604      	mov	r4, r0
 800bfde:	4608      	mov	r0, r1
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	602a      	str	r2, [r5, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f7f6 fa2c 	bl	8002444 <_lseek>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_lseek_r+0x1e>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_lseek_r+0x1e>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20004808 	.word	0x20004808

0800bffc <_read_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4d07      	ldr	r5, [pc, #28]	; (800c01c <_read_r+0x20>)
 800c000:	4604      	mov	r4, r0
 800c002:	4608      	mov	r0, r1
 800c004:	4611      	mov	r1, r2
 800c006:	2200      	movs	r2, #0
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f7f6 f9ba 	bl	8002384 <_read>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_read_r+0x1e>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_read_r+0x1e>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	20004808 	.word	0x20004808

0800c020 <cos>:
 800c020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c022:	ec53 2b10 	vmov	r2, r3, d0
 800c026:	4824      	ldr	r0, [pc, #144]	; (800c0b8 <cos+0x98>)
 800c028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c02c:	4281      	cmp	r1, r0
 800c02e:	dc06      	bgt.n	800c03e <cos+0x1e>
 800c030:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c0b0 <cos+0x90>
 800c034:	f001 f958 	bl	800d2e8 <__kernel_cos>
 800c038:	ec51 0b10 	vmov	r0, r1, d0
 800c03c:	e007      	b.n	800c04e <cos+0x2e>
 800c03e:	481f      	ldr	r0, [pc, #124]	; (800c0bc <cos+0x9c>)
 800c040:	4281      	cmp	r1, r0
 800c042:	dd09      	ble.n	800c058 <cos+0x38>
 800c044:	ee10 0a10 	vmov	r0, s0
 800c048:	4619      	mov	r1, r3
 800c04a:	f7f4 f915 	bl	8000278 <__aeabi_dsub>
 800c04e:	ec41 0b10 	vmov	d0, r0, r1
 800c052:	b005      	add	sp, #20
 800c054:	f85d fb04 	ldr.w	pc, [sp], #4
 800c058:	4668      	mov	r0, sp
 800c05a:	f000 fe85 	bl	800cd68 <__ieee754_rem_pio2>
 800c05e:	f000 0003 	and.w	r0, r0, #3
 800c062:	2801      	cmp	r0, #1
 800c064:	d007      	beq.n	800c076 <cos+0x56>
 800c066:	2802      	cmp	r0, #2
 800c068:	d012      	beq.n	800c090 <cos+0x70>
 800c06a:	b9c0      	cbnz	r0, 800c09e <cos+0x7e>
 800c06c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c070:	ed9d 0b00 	vldr	d0, [sp]
 800c074:	e7de      	b.n	800c034 <cos+0x14>
 800c076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c07a:	ed9d 0b00 	vldr	d0, [sp]
 800c07e:	f001 fd3b 	bl	800daf8 <__kernel_sin>
 800c082:	ec53 2b10 	vmov	r2, r3, d0
 800c086:	ee10 0a10 	vmov	r0, s0
 800c08a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c08e:	e7de      	b.n	800c04e <cos+0x2e>
 800c090:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c094:	ed9d 0b00 	vldr	d0, [sp]
 800c098:	f001 f926 	bl	800d2e8 <__kernel_cos>
 800c09c:	e7f1      	b.n	800c082 <cos+0x62>
 800c09e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0a2:	ed9d 0b00 	vldr	d0, [sp]
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	f001 fd26 	bl	800daf8 <__kernel_sin>
 800c0ac:	e7c4      	b.n	800c038 <cos+0x18>
 800c0ae:	bf00      	nop
	...
 800c0b8:	3fe921fb 	.word	0x3fe921fb
 800c0bc:	7fefffff 	.word	0x7fefffff

0800c0c0 <floor>:
 800c0c0:	ec51 0b10 	vmov	r0, r1, d0
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c0cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c0d0:	2e13      	cmp	r6, #19
 800c0d2:	ee10 5a10 	vmov	r5, s0
 800c0d6:	ee10 8a10 	vmov	r8, s0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	dc32      	bgt.n	800c144 <floor+0x84>
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	da14      	bge.n	800c10c <floor+0x4c>
 800c0e2:	a333      	add	r3, pc, #204	; (adr r3, 800c1b0 <floor+0xf0>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f8c8 	bl	800027c <__adddf3>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f7f4 fd0a 	bl	8000b08 <__aeabi_dcmpgt>
 800c0f4:	b138      	cbz	r0, 800c106 <floor+0x46>
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	da57      	bge.n	800c1aa <floor+0xea>
 800c0fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c0fe:	431d      	orrs	r5, r3
 800c100:	d001      	beq.n	800c106 <floor+0x46>
 800c102:	4c2d      	ldr	r4, [pc, #180]	; (800c1b8 <floor+0xf8>)
 800c104:	2500      	movs	r5, #0
 800c106:	4621      	mov	r1, r4
 800c108:	4628      	mov	r0, r5
 800c10a:	e025      	b.n	800c158 <floor+0x98>
 800c10c:	4f2b      	ldr	r7, [pc, #172]	; (800c1bc <floor+0xfc>)
 800c10e:	4137      	asrs	r7, r6
 800c110:	ea01 0307 	and.w	r3, r1, r7
 800c114:	4303      	orrs	r3, r0
 800c116:	d01f      	beq.n	800c158 <floor+0x98>
 800c118:	a325      	add	r3, pc, #148	; (adr r3, 800c1b0 <floor+0xf0>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f7f4 f8ad 	bl	800027c <__adddf3>
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	f7f4 fcef 	bl	8000b08 <__aeabi_dcmpgt>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d0eb      	beq.n	800c106 <floor+0x46>
 800c12e:	2c00      	cmp	r4, #0
 800c130:	bfbe      	ittt	lt
 800c132:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c136:	fa43 f606 	asrlt.w	r6, r3, r6
 800c13a:	19a4      	addlt	r4, r4, r6
 800c13c:	ea24 0407 	bic.w	r4, r4, r7
 800c140:	2500      	movs	r5, #0
 800c142:	e7e0      	b.n	800c106 <floor+0x46>
 800c144:	2e33      	cmp	r6, #51	; 0x33
 800c146:	dd0b      	ble.n	800c160 <floor+0xa0>
 800c148:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c14c:	d104      	bne.n	800c158 <floor+0x98>
 800c14e:	ee10 2a10 	vmov	r2, s0
 800c152:	460b      	mov	r3, r1
 800c154:	f7f4 f892 	bl	800027c <__adddf3>
 800c158:	ec41 0b10 	vmov	d0, r0, r1
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c164:	f04f 33ff 	mov.w	r3, #4294967295
 800c168:	fa23 f707 	lsr.w	r7, r3, r7
 800c16c:	4207      	tst	r7, r0
 800c16e:	d0f3      	beq.n	800c158 <floor+0x98>
 800c170:	a30f      	add	r3, pc, #60	; (adr r3, 800c1b0 <floor+0xf0>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 f881 	bl	800027c <__adddf3>
 800c17a:	2200      	movs	r2, #0
 800c17c:	2300      	movs	r3, #0
 800c17e:	f7f4 fcc3 	bl	8000b08 <__aeabi_dcmpgt>
 800c182:	2800      	cmp	r0, #0
 800c184:	d0bf      	beq.n	800c106 <floor+0x46>
 800c186:	2c00      	cmp	r4, #0
 800c188:	da02      	bge.n	800c190 <floor+0xd0>
 800c18a:	2e14      	cmp	r6, #20
 800c18c:	d103      	bne.n	800c196 <floor+0xd6>
 800c18e:	3401      	adds	r4, #1
 800c190:	ea25 0507 	bic.w	r5, r5, r7
 800c194:	e7b7      	b.n	800c106 <floor+0x46>
 800c196:	2301      	movs	r3, #1
 800c198:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c19c:	fa03 f606 	lsl.w	r6, r3, r6
 800c1a0:	4435      	add	r5, r6
 800c1a2:	4545      	cmp	r5, r8
 800c1a4:	bf38      	it	cc
 800c1a6:	18e4      	addcc	r4, r4, r3
 800c1a8:	e7f2      	b.n	800c190 <floor+0xd0>
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	462c      	mov	r4, r5
 800c1ae:	e7aa      	b.n	800c106 <floor+0x46>
 800c1b0:	8800759c 	.word	0x8800759c
 800c1b4:	7e37e43c 	.word	0x7e37e43c
 800c1b8:	bff00000 	.word	0xbff00000
 800c1bc:	000fffff 	.word	0x000fffff

0800c1c0 <pow>:
 800c1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	ec59 8b10 	vmov	r8, r9, d0
 800c1c8:	ec57 6b11 	vmov	r6, r7, d1
 800c1cc:	f000 f8a8 	bl	800c320 <__ieee754_pow>
 800c1d0:	4b4e      	ldr	r3, [pc, #312]	; (800c30c <pow+0x14c>)
 800c1d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	ec55 4b10 	vmov	r4, r5, d0
 800c1dc:	d015      	beq.n	800c20a <pow+0x4a>
 800c1de:	4632      	mov	r2, r6
 800c1e0:	463b      	mov	r3, r7
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 fc99 	bl	8000b1c <__aeabi_dcmpun>
 800c1ea:	b970      	cbnz	r0, 800c20a <pow+0x4a>
 800c1ec:	4642      	mov	r2, r8
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	f7f4 fc92 	bl	8000b1c <__aeabi_dcmpun>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	b148      	cbz	r0, 800c212 <pow+0x52>
 800c1fe:	4630      	mov	r0, r6
 800c200:	4639      	mov	r1, r7
 800c202:	f7f4 fc59 	bl	8000ab8 <__aeabi_dcmpeq>
 800c206:	2800      	cmp	r0, #0
 800c208:	d17d      	bne.n	800c306 <pow+0x146>
 800c20a:	ec45 4b10 	vmov	d0, r4, r5
 800c20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c212:	4640      	mov	r0, r8
 800c214:	4649      	mov	r1, r9
 800c216:	f7f4 fc4f 	bl	8000ab8 <__aeabi_dcmpeq>
 800c21a:	b1e0      	cbz	r0, 800c256 <pow+0x96>
 800c21c:	2200      	movs	r2, #0
 800c21e:	2300      	movs	r3, #0
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 fc48 	bl	8000ab8 <__aeabi_dcmpeq>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d16c      	bne.n	800c306 <pow+0x146>
 800c22c:	ec47 6b10 	vmov	d0, r6, r7
 800c230:	f001 fd29 	bl	800dc86 <finite>
 800c234:	2800      	cmp	r0, #0
 800c236:	d0e8      	beq.n	800c20a <pow+0x4a>
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	4630      	mov	r0, r6
 800c23e:	4639      	mov	r1, r7
 800c240:	f7f4 fc44 	bl	8000acc <__aeabi_dcmplt>
 800c244:	2800      	cmp	r0, #0
 800c246:	d0e0      	beq.n	800c20a <pow+0x4a>
 800c248:	f7fe fe04 	bl	800ae54 <__errno>
 800c24c:	2321      	movs	r3, #33	; 0x21
 800c24e:	6003      	str	r3, [r0, #0]
 800c250:	2400      	movs	r4, #0
 800c252:	4d2f      	ldr	r5, [pc, #188]	; (800c310 <pow+0x150>)
 800c254:	e7d9      	b.n	800c20a <pow+0x4a>
 800c256:	ec45 4b10 	vmov	d0, r4, r5
 800c25a:	f001 fd14 	bl	800dc86 <finite>
 800c25e:	bbb8      	cbnz	r0, 800c2d0 <pow+0x110>
 800c260:	ec49 8b10 	vmov	d0, r8, r9
 800c264:	f001 fd0f 	bl	800dc86 <finite>
 800c268:	b390      	cbz	r0, 800c2d0 <pow+0x110>
 800c26a:	ec47 6b10 	vmov	d0, r6, r7
 800c26e:	f001 fd0a 	bl	800dc86 <finite>
 800c272:	b368      	cbz	r0, 800c2d0 <pow+0x110>
 800c274:	4622      	mov	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 fc4e 	bl	8000b1c <__aeabi_dcmpun>
 800c280:	b160      	cbz	r0, 800c29c <pow+0xdc>
 800c282:	f7fe fde7 	bl	800ae54 <__errno>
 800c286:	2321      	movs	r3, #33	; 0x21
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	2300      	movs	r3, #0
 800c28e:	4610      	mov	r0, r2
 800c290:	4619      	mov	r1, r3
 800c292:	f7f4 fad3 	bl	800083c <__aeabi_ddiv>
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	e7b6      	b.n	800c20a <pow+0x4a>
 800c29c:	f7fe fdda 	bl	800ae54 <__errno>
 800c2a0:	2322      	movs	r3, #34	; 0x22
 800c2a2:	6003      	str	r3, [r0, #0]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	f7f4 fc0e 	bl	8000acc <__aeabi_dcmplt>
 800c2b0:	2400      	movs	r4, #0
 800c2b2:	b158      	cbz	r0, 800c2cc <pow+0x10c>
 800c2b4:	ec47 6b10 	vmov	d0, r6, r7
 800c2b8:	f001 fcfa 	bl	800dcb0 <rint>
 800c2bc:	4632      	mov	r2, r6
 800c2be:	ec51 0b10 	vmov	r0, r1, d0
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	f7f4 fbf8 	bl	8000ab8 <__aeabi_dcmpeq>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d0c2      	beq.n	800c252 <pow+0x92>
 800c2cc:	4d11      	ldr	r5, [pc, #68]	; (800c314 <pow+0x154>)
 800c2ce:	e79c      	b.n	800c20a <pow+0x4a>
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f4 fbee 	bl	8000ab8 <__aeabi_dcmpeq>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d094      	beq.n	800c20a <pow+0x4a>
 800c2e0:	ec49 8b10 	vmov	d0, r8, r9
 800c2e4:	f001 fccf 	bl	800dc86 <finite>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d08e      	beq.n	800c20a <pow+0x4a>
 800c2ec:	ec47 6b10 	vmov	d0, r6, r7
 800c2f0:	f001 fcc9 	bl	800dc86 <finite>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d088      	beq.n	800c20a <pow+0x4a>
 800c2f8:	f7fe fdac 	bl	800ae54 <__errno>
 800c2fc:	2322      	movs	r3, #34	; 0x22
 800c2fe:	6003      	str	r3, [r0, #0]
 800c300:	2400      	movs	r4, #0
 800c302:	2500      	movs	r5, #0
 800c304:	e781      	b.n	800c20a <pow+0x4a>
 800c306:	4d04      	ldr	r5, [pc, #16]	; (800c318 <pow+0x158>)
 800c308:	2400      	movs	r4, #0
 800c30a:	e77e      	b.n	800c20a <pow+0x4a>
 800c30c:	200000c8 	.word	0x200000c8
 800c310:	fff00000 	.word	0xfff00000
 800c314:	7ff00000 	.word	0x7ff00000
 800c318:	3ff00000 	.word	0x3ff00000
 800c31c:	00000000 	.word	0x00000000

0800c320 <__ieee754_pow>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	ed2d 8b06 	vpush	{d8-d10}
 800c328:	b08d      	sub	sp, #52	; 0x34
 800c32a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c32e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c332:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c336:	ea56 0100 	orrs.w	r1, r6, r0
 800c33a:	ec53 2b10 	vmov	r2, r3, d0
 800c33e:	f000 84d1 	beq.w	800cce4 <__ieee754_pow+0x9c4>
 800c342:	497f      	ldr	r1, [pc, #508]	; (800c540 <__ieee754_pow+0x220>)
 800c344:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c348:	428c      	cmp	r4, r1
 800c34a:	ee10 8a10 	vmov	r8, s0
 800c34e:	4699      	mov	r9, r3
 800c350:	dc09      	bgt.n	800c366 <__ieee754_pow+0x46>
 800c352:	d103      	bne.n	800c35c <__ieee754_pow+0x3c>
 800c354:	b97a      	cbnz	r2, 800c376 <__ieee754_pow+0x56>
 800c356:	42a6      	cmp	r6, r4
 800c358:	dd02      	ble.n	800c360 <__ieee754_pow+0x40>
 800c35a:	e00c      	b.n	800c376 <__ieee754_pow+0x56>
 800c35c:	428e      	cmp	r6, r1
 800c35e:	dc02      	bgt.n	800c366 <__ieee754_pow+0x46>
 800c360:	428e      	cmp	r6, r1
 800c362:	d110      	bne.n	800c386 <__ieee754_pow+0x66>
 800c364:	b178      	cbz	r0, 800c386 <__ieee754_pow+0x66>
 800c366:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c36a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c36e:	ea54 0308 	orrs.w	r3, r4, r8
 800c372:	f000 84b7 	beq.w	800cce4 <__ieee754_pow+0x9c4>
 800c376:	4873      	ldr	r0, [pc, #460]	; (800c544 <__ieee754_pow+0x224>)
 800c378:	b00d      	add	sp, #52	; 0x34
 800c37a:	ecbd 8b06 	vpop	{d8-d10}
 800c37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c382:	f001 bc8d 	b.w	800dca0 <nan>
 800c386:	f1b9 0f00 	cmp.w	r9, #0
 800c38a:	da36      	bge.n	800c3fa <__ieee754_pow+0xda>
 800c38c:	496e      	ldr	r1, [pc, #440]	; (800c548 <__ieee754_pow+0x228>)
 800c38e:	428e      	cmp	r6, r1
 800c390:	dc51      	bgt.n	800c436 <__ieee754_pow+0x116>
 800c392:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c396:	428e      	cmp	r6, r1
 800c398:	f340 84af 	ble.w	800ccfa <__ieee754_pow+0x9da>
 800c39c:	1531      	asrs	r1, r6, #20
 800c39e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c3a2:	2914      	cmp	r1, #20
 800c3a4:	dd0f      	ble.n	800c3c6 <__ieee754_pow+0xa6>
 800c3a6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c3aa:	fa20 fc01 	lsr.w	ip, r0, r1
 800c3ae:	fa0c f101 	lsl.w	r1, ip, r1
 800c3b2:	4281      	cmp	r1, r0
 800c3b4:	f040 84a1 	bne.w	800ccfa <__ieee754_pow+0x9da>
 800c3b8:	f00c 0c01 	and.w	ip, ip, #1
 800c3bc:	f1cc 0102 	rsb	r1, ip, #2
 800c3c0:	9100      	str	r1, [sp, #0]
 800c3c2:	b180      	cbz	r0, 800c3e6 <__ieee754_pow+0xc6>
 800c3c4:	e059      	b.n	800c47a <__ieee754_pow+0x15a>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d155      	bne.n	800c476 <__ieee754_pow+0x156>
 800c3ca:	f1c1 0114 	rsb	r1, r1, #20
 800c3ce:	fa46 fc01 	asr.w	ip, r6, r1
 800c3d2:	fa0c f101 	lsl.w	r1, ip, r1
 800c3d6:	42b1      	cmp	r1, r6
 800c3d8:	f040 848c 	bne.w	800ccf4 <__ieee754_pow+0x9d4>
 800c3dc:	f00c 0c01 	and.w	ip, ip, #1
 800c3e0:	f1cc 0102 	rsb	r1, ip, #2
 800c3e4:	9100      	str	r1, [sp, #0]
 800c3e6:	4959      	ldr	r1, [pc, #356]	; (800c54c <__ieee754_pow+0x22c>)
 800c3e8:	428e      	cmp	r6, r1
 800c3ea:	d12d      	bne.n	800c448 <__ieee754_pow+0x128>
 800c3ec:	2f00      	cmp	r7, #0
 800c3ee:	da79      	bge.n	800c4e4 <__ieee754_pow+0x1c4>
 800c3f0:	4956      	ldr	r1, [pc, #344]	; (800c54c <__ieee754_pow+0x22c>)
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7f4 fa22 	bl	800083c <__aeabi_ddiv>
 800c3f8:	e016      	b.n	800c428 <__ieee754_pow+0x108>
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	9100      	str	r1, [sp, #0]
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d13b      	bne.n	800c47a <__ieee754_pow+0x15a>
 800c402:	494f      	ldr	r1, [pc, #316]	; (800c540 <__ieee754_pow+0x220>)
 800c404:	428e      	cmp	r6, r1
 800c406:	d1ee      	bne.n	800c3e6 <__ieee754_pow+0xc6>
 800c408:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c40c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c410:	ea53 0308 	orrs.w	r3, r3, r8
 800c414:	f000 8466 	beq.w	800cce4 <__ieee754_pow+0x9c4>
 800c418:	4b4d      	ldr	r3, [pc, #308]	; (800c550 <__ieee754_pow+0x230>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	dd0d      	ble.n	800c43a <__ieee754_pow+0x11a>
 800c41e:	2f00      	cmp	r7, #0
 800c420:	f280 8464 	bge.w	800ccec <__ieee754_pow+0x9cc>
 800c424:	2000      	movs	r0, #0
 800c426:	2100      	movs	r1, #0
 800c428:	ec41 0b10 	vmov	d0, r0, r1
 800c42c:	b00d      	add	sp, #52	; 0x34
 800c42e:	ecbd 8b06 	vpop	{d8-d10}
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	2102      	movs	r1, #2
 800c438:	e7e0      	b.n	800c3fc <__ieee754_pow+0xdc>
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	daf2      	bge.n	800c424 <__ieee754_pow+0x104>
 800c43e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c442:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c446:	e7ef      	b.n	800c428 <__ieee754_pow+0x108>
 800c448:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c44c:	d104      	bne.n	800c458 <__ieee754_pow+0x138>
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	f7f4 f8c9 	bl	80005e8 <__aeabi_dmul>
 800c456:	e7e7      	b.n	800c428 <__ieee754_pow+0x108>
 800c458:	493e      	ldr	r1, [pc, #248]	; (800c554 <__ieee754_pow+0x234>)
 800c45a:	428f      	cmp	r7, r1
 800c45c:	d10d      	bne.n	800c47a <__ieee754_pow+0x15a>
 800c45e:	f1b9 0f00 	cmp.w	r9, #0
 800c462:	db0a      	blt.n	800c47a <__ieee754_pow+0x15a>
 800c464:	ec43 2b10 	vmov	d0, r2, r3
 800c468:	b00d      	add	sp, #52	; 0x34
 800c46a:	ecbd 8b06 	vpop	{d8-d10}
 800c46e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c472:	f000 be83 	b.w	800d17c <__ieee754_sqrt>
 800c476:	2100      	movs	r1, #0
 800c478:	9100      	str	r1, [sp, #0]
 800c47a:	ec43 2b10 	vmov	d0, r2, r3
 800c47e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c482:	f001 fbf7 	bl	800dc74 <fabs>
 800c486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c48a:	ec51 0b10 	vmov	r0, r1, d0
 800c48e:	f1b8 0f00 	cmp.w	r8, #0
 800c492:	d12a      	bne.n	800c4ea <__ieee754_pow+0x1ca>
 800c494:	b12c      	cbz	r4, 800c4a2 <__ieee754_pow+0x182>
 800c496:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c54c <__ieee754_pow+0x22c>
 800c49a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c49e:	45e6      	cmp	lr, ip
 800c4a0:	d123      	bne.n	800c4ea <__ieee754_pow+0x1ca>
 800c4a2:	2f00      	cmp	r7, #0
 800c4a4:	da05      	bge.n	800c4b2 <__ieee754_pow+0x192>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	4927      	ldr	r1, [pc, #156]	; (800c54c <__ieee754_pow+0x22c>)
 800c4ae:	f7f4 f9c5 	bl	800083c <__aeabi_ddiv>
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	dab7      	bge.n	800c428 <__ieee754_pow+0x108>
 800c4b8:	9b00      	ldr	r3, [sp, #0]
 800c4ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c4be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c4c2:	4323      	orrs	r3, r4
 800c4c4:	d108      	bne.n	800c4d8 <__ieee754_pow+0x1b8>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f7f3 fed3 	bl	8000278 <__aeabi_dsub>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	e78d      	b.n	800c3f4 <__ieee754_pow+0xd4>
 800c4d8:	9b00      	ldr	r3, [sp, #0]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d1a4      	bne.n	800c428 <__ieee754_pow+0x108>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	e79e      	b.n	800c428 <__ieee754_pow+0x108>
 800c4ea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c4ee:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c4f2:	950a      	str	r5, [sp, #40]	; 0x28
 800c4f4:	9d00      	ldr	r5, [sp, #0]
 800c4f6:	46ac      	mov	ip, r5
 800c4f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c4fa:	ea5c 0505 	orrs.w	r5, ip, r5
 800c4fe:	d0e4      	beq.n	800c4ca <__ieee754_pow+0x1aa>
 800c500:	4b15      	ldr	r3, [pc, #84]	; (800c558 <__ieee754_pow+0x238>)
 800c502:	429e      	cmp	r6, r3
 800c504:	f340 80fc 	ble.w	800c700 <__ieee754_pow+0x3e0>
 800c508:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c50c:	429e      	cmp	r6, r3
 800c50e:	4b10      	ldr	r3, [pc, #64]	; (800c550 <__ieee754_pow+0x230>)
 800c510:	dd07      	ble.n	800c522 <__ieee754_pow+0x202>
 800c512:	429c      	cmp	r4, r3
 800c514:	dc0a      	bgt.n	800c52c <__ieee754_pow+0x20c>
 800c516:	2f00      	cmp	r7, #0
 800c518:	da84      	bge.n	800c424 <__ieee754_pow+0x104>
 800c51a:	a307      	add	r3, pc, #28	; (adr r3, 800c538 <__ieee754_pow+0x218>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	e795      	b.n	800c44e <__ieee754_pow+0x12e>
 800c522:	429c      	cmp	r4, r3
 800c524:	dbf7      	blt.n	800c516 <__ieee754_pow+0x1f6>
 800c526:	4b09      	ldr	r3, [pc, #36]	; (800c54c <__ieee754_pow+0x22c>)
 800c528:	429c      	cmp	r4, r3
 800c52a:	dd17      	ble.n	800c55c <__ieee754_pow+0x23c>
 800c52c:	2f00      	cmp	r7, #0
 800c52e:	dcf4      	bgt.n	800c51a <__ieee754_pow+0x1fa>
 800c530:	e778      	b.n	800c424 <__ieee754_pow+0x104>
 800c532:	bf00      	nop
 800c534:	f3af 8000 	nop.w
 800c538:	8800759c 	.word	0x8800759c
 800c53c:	7e37e43c 	.word	0x7e37e43c
 800c540:	7ff00000 	.word	0x7ff00000
 800c544:	0800dfcb 	.word	0x0800dfcb
 800c548:	433fffff 	.word	0x433fffff
 800c54c:	3ff00000 	.word	0x3ff00000
 800c550:	3fefffff 	.word	0x3fefffff
 800c554:	3fe00000 	.word	0x3fe00000
 800c558:	41e00000 	.word	0x41e00000
 800c55c:	4b64      	ldr	r3, [pc, #400]	; (800c6f0 <__ieee754_pow+0x3d0>)
 800c55e:	2200      	movs	r2, #0
 800c560:	f7f3 fe8a 	bl	8000278 <__aeabi_dsub>
 800c564:	a356      	add	r3, pc, #344	; (adr r3, 800c6c0 <__ieee754_pow+0x3a0>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	f7f4 f83b 	bl	80005e8 <__aeabi_dmul>
 800c572:	a355      	add	r3, pc, #340	; (adr r3, 800c6c8 <__ieee754_pow+0x3a8>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	4606      	mov	r6, r0
 800c57a:	460f      	mov	r7, r1
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f4 f832 	bl	80005e8 <__aeabi_dmul>
 800c584:	4b5b      	ldr	r3, [pc, #364]	; (800c6f4 <__ieee754_pow+0x3d4>)
 800c586:	4682      	mov	sl, r0
 800c588:	468b      	mov	fp, r1
 800c58a:	2200      	movs	r2, #0
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f4 f82a 	bl	80005e8 <__aeabi_dmul>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	a14d      	add	r1, pc, #308	; (adr r1, 800c6d0 <__ieee754_pow+0x3b0>)
 800c59a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59e:	f7f3 fe6b 	bl	8000278 <__aeabi_dsub>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	f7f4 f81f 	bl	80005e8 <__aeabi_dmul>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	4951      	ldr	r1, [pc, #324]	; (800c6f8 <__ieee754_pow+0x3d8>)
 800c5b2:	f7f3 fe61 	bl	8000278 <__aeabi_dsub>
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	4689      	mov	r9, r1
 800c5bc:	462b      	mov	r3, r5
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f4 f811 	bl	80005e8 <__aeabi_dmul>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	f7f4 f80b 	bl	80005e8 <__aeabi_dmul>
 800c5d2:	a341      	add	r3, pc, #260	; (adr r3, 800c6d8 <__ieee754_pow+0x3b8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f4 f806 	bl	80005e8 <__aeabi_dmul>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	4659      	mov	r1, fp
 800c5e4:	f7f3 fe48 	bl	8000278 <__aeabi_dsub>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	f7f3 fe42 	bl	800027c <__adddf3>
 800c5f8:	2400      	movs	r4, #0
 800c5fa:	4632      	mov	r2, r6
 800c5fc:	463b      	mov	r3, r7
 800c5fe:	4620      	mov	r0, r4
 800c600:	460d      	mov	r5, r1
 800c602:	f7f3 fe39 	bl	8000278 <__aeabi_dsub>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4640      	mov	r0, r8
 800c60c:	4649      	mov	r1, r9
 800c60e:	f7f3 fe33 	bl	8000278 <__aeabi_dsub>
 800c612:	9b00      	ldr	r3, [sp, #0]
 800c614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c616:	3b01      	subs	r3, #1
 800c618:	4313      	orrs	r3, r2
 800c61a:	4682      	mov	sl, r0
 800c61c:	468b      	mov	fp, r1
 800c61e:	f040 81f1 	bne.w	800ca04 <__ieee754_pow+0x6e4>
 800c622:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c6e0 <__ieee754_pow+0x3c0>
 800c626:	eeb0 8a47 	vmov.f32	s16, s14
 800c62a:	eef0 8a67 	vmov.f32	s17, s15
 800c62e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c632:	2600      	movs	r6, #0
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c63c:	f7f3 fe1c 	bl	8000278 <__aeabi_dsub>
 800c640:	4622      	mov	r2, r4
 800c642:	462b      	mov	r3, r5
 800c644:	f7f3 ffd0 	bl	80005e8 <__aeabi_dmul>
 800c648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c64c:	4680      	mov	r8, r0
 800c64e:	4689      	mov	r9, r1
 800c650:	4650      	mov	r0, sl
 800c652:	4659      	mov	r1, fp
 800c654:	f7f3 ffc8 	bl	80005e8 <__aeabi_dmul>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4640      	mov	r0, r8
 800c65e:	4649      	mov	r1, r9
 800c660:	f7f3 fe0c 	bl	800027c <__adddf3>
 800c664:	4632      	mov	r2, r6
 800c666:	463b      	mov	r3, r7
 800c668:	4680      	mov	r8, r0
 800c66a:	4689      	mov	r9, r1
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 ffba 	bl	80005e8 <__aeabi_dmul>
 800c674:	460b      	mov	r3, r1
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	4602      	mov	r2, r0
 800c67c:	4649      	mov	r1, r9
 800c67e:	4640      	mov	r0, r8
 800c680:	f7f3 fdfc 	bl	800027c <__adddf3>
 800c684:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <__ieee754_pow+0x3dc>)
 800c686:	4299      	cmp	r1, r3
 800c688:	ec45 4b19 	vmov	d9, r4, r5
 800c68c:	4606      	mov	r6, r0
 800c68e:	460f      	mov	r7, r1
 800c690:	468b      	mov	fp, r1
 800c692:	f340 82fe 	ble.w	800cc92 <__ieee754_pow+0x972>
 800c696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c69a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c69e:	4303      	orrs	r3, r0
 800c6a0:	f000 81f0 	beq.w	800ca84 <__ieee754_pow+0x764>
 800c6a4:	a310      	add	r3, pc, #64	; (adr r3, 800c6e8 <__ieee754_pow+0x3c8>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	ec51 0b18 	vmov	r0, r1, d8
 800c6ae:	f7f3 ff9b 	bl	80005e8 <__aeabi_dmul>
 800c6b2:	a30d      	add	r3, pc, #52	; (adr r3, 800c6e8 <__ieee754_pow+0x3c8>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	e6cb      	b.n	800c452 <__ieee754_pow+0x132>
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w
 800c6c0:	60000000 	.word	0x60000000
 800c6c4:	3ff71547 	.word	0x3ff71547
 800c6c8:	f85ddf44 	.word	0xf85ddf44
 800c6cc:	3e54ae0b 	.word	0x3e54ae0b
 800c6d0:	55555555 	.word	0x55555555
 800c6d4:	3fd55555 	.word	0x3fd55555
 800c6d8:	652b82fe 	.word	0x652b82fe
 800c6dc:	3ff71547 	.word	0x3ff71547
 800c6e0:	00000000 	.word	0x00000000
 800c6e4:	bff00000 	.word	0xbff00000
 800c6e8:	8800759c 	.word	0x8800759c
 800c6ec:	7e37e43c 	.word	0x7e37e43c
 800c6f0:	3ff00000 	.word	0x3ff00000
 800c6f4:	3fd00000 	.word	0x3fd00000
 800c6f8:	3fe00000 	.word	0x3fe00000
 800c6fc:	408fffff 	.word	0x408fffff
 800c700:	4bd7      	ldr	r3, [pc, #860]	; (800ca60 <__ieee754_pow+0x740>)
 800c702:	ea03 0309 	and.w	r3, r3, r9
 800c706:	2200      	movs	r2, #0
 800c708:	b92b      	cbnz	r3, 800c716 <__ieee754_pow+0x3f6>
 800c70a:	4bd6      	ldr	r3, [pc, #856]	; (800ca64 <__ieee754_pow+0x744>)
 800c70c:	f7f3 ff6c 	bl	80005e8 <__aeabi_dmul>
 800c710:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c714:	460c      	mov	r4, r1
 800c716:	1523      	asrs	r3, r4, #20
 800c718:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c71c:	4413      	add	r3, r2
 800c71e:	9309      	str	r3, [sp, #36]	; 0x24
 800c720:	4bd1      	ldr	r3, [pc, #836]	; (800ca68 <__ieee754_pow+0x748>)
 800c722:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c726:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c72a:	429c      	cmp	r4, r3
 800c72c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c730:	dd08      	ble.n	800c744 <__ieee754_pow+0x424>
 800c732:	4bce      	ldr	r3, [pc, #824]	; (800ca6c <__ieee754_pow+0x74c>)
 800c734:	429c      	cmp	r4, r3
 800c736:	f340 8163 	ble.w	800ca00 <__ieee754_pow+0x6e0>
 800c73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73c:	3301      	adds	r3, #1
 800c73e:	9309      	str	r3, [sp, #36]	; 0x24
 800c740:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c744:	2400      	movs	r4, #0
 800c746:	00e3      	lsls	r3, r4, #3
 800c748:	930b      	str	r3, [sp, #44]	; 0x2c
 800c74a:	4bc9      	ldr	r3, [pc, #804]	; (800ca70 <__ieee754_pow+0x750>)
 800c74c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c750:	ed93 7b00 	vldr	d7, [r3]
 800c754:	4629      	mov	r1, r5
 800c756:	ec53 2b17 	vmov	r2, r3, d7
 800c75a:	eeb0 8a47 	vmov.f32	s16, s14
 800c75e:	eef0 8a67 	vmov.f32	s17, s15
 800c762:	4682      	mov	sl, r0
 800c764:	f7f3 fd88 	bl	8000278 <__aeabi_dsub>
 800c768:	4652      	mov	r2, sl
 800c76a:	4606      	mov	r6, r0
 800c76c:	460f      	mov	r7, r1
 800c76e:	462b      	mov	r3, r5
 800c770:	ec51 0b18 	vmov	r0, r1, d8
 800c774:	f7f3 fd82 	bl	800027c <__adddf3>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	2000      	movs	r0, #0
 800c77e:	49bd      	ldr	r1, [pc, #756]	; (800ca74 <__ieee754_pow+0x754>)
 800c780:	f7f4 f85c 	bl	800083c <__aeabi_ddiv>
 800c784:	ec41 0b19 	vmov	d9, r0, r1
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	4630      	mov	r0, r6
 800c78e:	4639      	mov	r1, r7
 800c790:	f7f3 ff2a 	bl	80005e8 <__aeabi_dmul>
 800c794:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c798:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c79c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	9304      	str	r3, [sp, #16]
 800c7a4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c7a8:	46ab      	mov	fp, r5
 800c7aa:	106d      	asrs	r5, r5, #1
 800c7ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c7b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c7b4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	4649      	mov	r1, r9
 800c7be:	4614      	mov	r4, r2
 800c7c0:	461d      	mov	r5, r3
 800c7c2:	f7f3 ff11 	bl	80005e8 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 fd53 	bl	8000278 <__aeabi_dsub>
 800c7d2:	ec53 2b18 	vmov	r2, r3, d8
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	460f      	mov	r7, r1
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f3 fd4b 	bl	8000278 <__aeabi_dsub>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	4659      	mov	r1, fp
 800c7ea:	f7f3 fd45 	bl	8000278 <__aeabi_dsub>
 800c7ee:	4642      	mov	r2, r8
 800c7f0:	464b      	mov	r3, r9
 800c7f2:	f7f3 fef9 	bl	80005e8 <__aeabi_dmul>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	f7f3 fd3b 	bl	8000278 <__aeabi_dsub>
 800c802:	ec53 2b19 	vmov	r2, r3, d9
 800c806:	f7f3 feef 	bl	80005e8 <__aeabi_dmul>
 800c80a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c80e:	ec41 0b18 	vmov	d8, r0, r1
 800c812:	4610      	mov	r0, r2
 800c814:	4619      	mov	r1, r3
 800c816:	f7f3 fee7 	bl	80005e8 <__aeabi_dmul>
 800c81a:	a37d      	add	r3, pc, #500	; (adr r3, 800ca10 <__ieee754_pow+0x6f0>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
 800c824:	f7f3 fee0 	bl	80005e8 <__aeabi_dmul>
 800c828:	a37b      	add	r3, pc, #492	; (adr r3, 800ca18 <__ieee754_pow+0x6f8>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f3 fd25 	bl	800027c <__adddf3>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	f7f3 fed7 	bl	80005e8 <__aeabi_dmul>
 800c83a:	a379      	add	r3, pc, #484	; (adr r3, 800ca20 <__ieee754_pow+0x700>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 fd1c 	bl	800027c <__adddf3>
 800c844:	4622      	mov	r2, r4
 800c846:	462b      	mov	r3, r5
 800c848:	f7f3 fece 	bl	80005e8 <__aeabi_dmul>
 800c84c:	a376      	add	r3, pc, #472	; (adr r3, 800ca28 <__ieee754_pow+0x708>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	f7f3 fd13 	bl	800027c <__adddf3>
 800c856:	4622      	mov	r2, r4
 800c858:	462b      	mov	r3, r5
 800c85a:	f7f3 fec5 	bl	80005e8 <__aeabi_dmul>
 800c85e:	a374      	add	r3, pc, #464	; (adr r3, 800ca30 <__ieee754_pow+0x710>)
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	f7f3 fd0a 	bl	800027c <__adddf3>
 800c868:	4622      	mov	r2, r4
 800c86a:	462b      	mov	r3, r5
 800c86c:	f7f3 febc 	bl	80005e8 <__aeabi_dmul>
 800c870:	a371      	add	r3, pc, #452	; (adr r3, 800ca38 <__ieee754_pow+0x718>)
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	f7f3 fd01 	bl	800027c <__adddf3>
 800c87a:	4622      	mov	r2, r4
 800c87c:	4606      	mov	r6, r0
 800c87e:	460f      	mov	r7, r1
 800c880:	462b      	mov	r3, r5
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	f7f3 feaf 	bl	80005e8 <__aeabi_dmul>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	f7f3 fea9 	bl	80005e8 <__aeabi_dmul>
 800c896:	4642      	mov	r2, r8
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	464b      	mov	r3, r9
 800c89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8a2:	f7f3 fceb 	bl	800027c <__adddf3>
 800c8a6:	ec53 2b18 	vmov	r2, r3, d8
 800c8aa:	f7f3 fe9d 	bl	80005e8 <__aeabi_dmul>
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	462b      	mov	r3, r5
 800c8b2:	f7f3 fce3 	bl	800027c <__adddf3>
 800c8b6:	4642      	mov	r2, r8
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	468b      	mov	fp, r1
 800c8bc:	464b      	mov	r3, r9
 800c8be:	4640      	mov	r0, r8
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	f7f3 fe91 	bl	80005e8 <__aeabi_dmul>
 800c8c6:	4b6c      	ldr	r3, [pc, #432]	; (800ca78 <__ieee754_pow+0x758>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	f7f3 fcd5 	bl	800027c <__adddf3>
 800c8d2:	4652      	mov	r2, sl
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	f7f3 fcd1 	bl	800027c <__adddf3>
 800c8da:	9c04      	ldr	r4, [sp, #16]
 800c8dc:	460d      	mov	r5, r1
 800c8de:	4622      	mov	r2, r4
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	f7f3 fe7f 	bl	80005e8 <__aeabi_dmul>
 800c8ea:	4b63      	ldr	r3, [pc, #396]	; (800ca78 <__ieee754_pow+0x758>)
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f3 fcbf 	bl	8000278 <__aeabi_dsub>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	f7f3 fcbb 	bl	8000278 <__aeabi_dsub>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4650      	mov	r0, sl
 800c908:	4659      	mov	r1, fp
 800c90a:	f7f3 fcb5 	bl	8000278 <__aeabi_dsub>
 800c90e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c912:	f7f3 fe69 	bl	80005e8 <__aeabi_dmul>
 800c916:	4622      	mov	r2, r4
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	462b      	mov	r3, r5
 800c91e:	ec51 0b18 	vmov	r0, r1, d8
 800c922:	f7f3 fe61 	bl	80005e8 <__aeabi_dmul>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fca5 	bl	800027c <__adddf3>
 800c932:	4606      	mov	r6, r0
 800c934:	460f      	mov	r7, r1
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4640      	mov	r0, r8
 800c93c:	4649      	mov	r1, r9
 800c93e:	f7f3 fc9d 	bl	800027c <__adddf3>
 800c942:	9c04      	ldr	r4, [sp, #16]
 800c944:	a33e      	add	r3, pc, #248	; (adr r3, 800ca40 <__ieee754_pow+0x720>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4620      	mov	r0, r4
 800c94c:	460d      	mov	r5, r1
 800c94e:	f7f3 fe4b 	bl	80005e8 <__aeabi_dmul>
 800c952:	4642      	mov	r2, r8
 800c954:	ec41 0b18 	vmov	d8, r0, r1
 800c958:	464b      	mov	r3, r9
 800c95a:	4620      	mov	r0, r4
 800c95c:	4629      	mov	r1, r5
 800c95e:	f7f3 fc8b 	bl	8000278 <__aeabi_dsub>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f3 fc85 	bl	8000278 <__aeabi_dsub>
 800c96e:	a336      	add	r3, pc, #216	; (adr r3, 800ca48 <__ieee754_pow+0x728>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f7f3 fe38 	bl	80005e8 <__aeabi_dmul>
 800c978:	a335      	add	r3, pc, #212	; (adr r3, 800ca50 <__ieee754_pow+0x730>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	4606      	mov	r6, r0
 800c980:	460f      	mov	r7, r1
 800c982:	4620      	mov	r0, r4
 800c984:	4629      	mov	r1, r5
 800c986:	f7f3 fe2f 	bl	80005e8 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 fc73 	bl	800027c <__adddf3>
 800c996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c998:	4b38      	ldr	r3, [pc, #224]	; (800ca7c <__ieee754_pow+0x75c>)
 800c99a:	4413      	add	r3, r2
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	f7f3 fc6c 	bl	800027c <__adddf3>
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a8:	468b      	mov	fp, r1
 800c9aa:	f7f3 fdb3 	bl	8000514 <__aeabi_i2d>
 800c9ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9b0:	4b33      	ldr	r3, [pc, #204]	; (800ca80 <__ieee754_pow+0x760>)
 800c9b2:	4413      	add	r3, r2
 800c9b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9b8:	4606      	mov	r6, r0
 800c9ba:	460f      	mov	r7, r1
 800c9bc:	4652      	mov	r2, sl
 800c9be:	465b      	mov	r3, fp
 800c9c0:	ec51 0b18 	vmov	r0, r1, d8
 800c9c4:	f7f3 fc5a 	bl	800027c <__adddf3>
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	464b      	mov	r3, r9
 800c9cc:	f7f3 fc56 	bl	800027c <__adddf3>
 800c9d0:	4632      	mov	r2, r6
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	f7f3 fc52 	bl	800027c <__adddf3>
 800c9d8:	9c04      	ldr	r4, [sp, #16]
 800c9da:	4632      	mov	r2, r6
 800c9dc:	463b      	mov	r3, r7
 800c9de:	4620      	mov	r0, r4
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	f7f3 fc49 	bl	8000278 <__aeabi_dsub>
 800c9e6:	4642      	mov	r2, r8
 800c9e8:	464b      	mov	r3, r9
 800c9ea:	f7f3 fc45 	bl	8000278 <__aeabi_dsub>
 800c9ee:	ec53 2b18 	vmov	r2, r3, d8
 800c9f2:	f7f3 fc41 	bl	8000278 <__aeabi_dsub>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4650      	mov	r0, sl
 800c9fc:	4659      	mov	r1, fp
 800c9fe:	e606      	b.n	800c60e <__ieee754_pow+0x2ee>
 800ca00:	2401      	movs	r4, #1
 800ca02:	e6a0      	b.n	800c746 <__ieee754_pow+0x426>
 800ca04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ca58 <__ieee754_pow+0x738>
 800ca08:	e60d      	b.n	800c626 <__ieee754_pow+0x306>
 800ca0a:	bf00      	nop
 800ca0c:	f3af 8000 	nop.w
 800ca10:	4a454eef 	.word	0x4a454eef
 800ca14:	3fca7e28 	.word	0x3fca7e28
 800ca18:	93c9db65 	.word	0x93c9db65
 800ca1c:	3fcd864a 	.word	0x3fcd864a
 800ca20:	a91d4101 	.word	0xa91d4101
 800ca24:	3fd17460 	.word	0x3fd17460
 800ca28:	518f264d 	.word	0x518f264d
 800ca2c:	3fd55555 	.word	0x3fd55555
 800ca30:	db6fabff 	.word	0xdb6fabff
 800ca34:	3fdb6db6 	.word	0x3fdb6db6
 800ca38:	33333303 	.word	0x33333303
 800ca3c:	3fe33333 	.word	0x3fe33333
 800ca40:	e0000000 	.word	0xe0000000
 800ca44:	3feec709 	.word	0x3feec709
 800ca48:	dc3a03fd 	.word	0xdc3a03fd
 800ca4c:	3feec709 	.word	0x3feec709
 800ca50:	145b01f5 	.word	0x145b01f5
 800ca54:	be3e2fe0 	.word	0xbe3e2fe0
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	3ff00000 	.word	0x3ff00000
 800ca60:	7ff00000 	.word	0x7ff00000
 800ca64:	43400000 	.word	0x43400000
 800ca68:	0003988e 	.word	0x0003988e
 800ca6c:	000bb679 	.word	0x000bb679
 800ca70:	0800e160 	.word	0x0800e160
 800ca74:	3ff00000 	.word	0x3ff00000
 800ca78:	40080000 	.word	0x40080000
 800ca7c:	0800e180 	.word	0x0800e180
 800ca80:	0800e170 	.word	0x0800e170
 800ca84:	a3b5      	add	r3, pc, #724	; (adr r3, 800cd5c <__ieee754_pow+0xa3c>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	f7f3 fbf5 	bl	800027c <__adddf3>
 800ca92:	4622      	mov	r2, r4
 800ca94:	ec41 0b1a 	vmov	d10, r0, r1
 800ca98:	462b      	mov	r3, r5
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	f7f3 fbeb 	bl	8000278 <__aeabi_dsub>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	ec51 0b1a 	vmov	r0, r1, d10
 800caaa:	f7f4 f82d 	bl	8000b08 <__aeabi_dcmpgt>
 800caae:	2800      	cmp	r0, #0
 800cab0:	f47f adf8 	bne.w	800c6a4 <__ieee754_pow+0x384>
 800cab4:	4aa4      	ldr	r2, [pc, #656]	; (800cd48 <__ieee754_pow+0xa28>)
 800cab6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800caba:	4293      	cmp	r3, r2
 800cabc:	f340 810b 	ble.w	800ccd6 <__ieee754_pow+0x9b6>
 800cac0:	151b      	asrs	r3, r3, #20
 800cac2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cac6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800caca:	fa4a f303 	asr.w	r3, sl, r3
 800cace:	445b      	add	r3, fp
 800cad0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cad4:	4e9d      	ldr	r6, [pc, #628]	; (800cd4c <__ieee754_pow+0xa2c>)
 800cad6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cada:	4116      	asrs	r6, r2
 800cadc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cae0:	2000      	movs	r0, #0
 800cae2:	ea23 0106 	bic.w	r1, r3, r6
 800cae6:	f1c2 0214 	rsb	r2, r2, #20
 800caea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800caee:	fa4a fa02 	asr.w	sl, sl, r2
 800caf2:	f1bb 0f00 	cmp.w	fp, #0
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4620      	mov	r0, r4
 800cafc:	4629      	mov	r1, r5
 800cafe:	bfb8      	it	lt
 800cb00:	f1ca 0a00 	rsblt	sl, sl, #0
 800cb04:	f7f3 fbb8 	bl	8000278 <__aeabi_dsub>
 800cb08:	ec41 0b19 	vmov	d9, r0, r1
 800cb0c:	4642      	mov	r2, r8
 800cb0e:	464b      	mov	r3, r9
 800cb10:	ec51 0b19 	vmov	r0, r1, d9
 800cb14:	f7f3 fbb2 	bl	800027c <__adddf3>
 800cb18:	2400      	movs	r4, #0
 800cb1a:	a379      	add	r3, pc, #484	; (adr r3, 800cd00 <__ieee754_pow+0x9e0>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	4620      	mov	r0, r4
 800cb22:	460d      	mov	r5, r1
 800cb24:	f7f3 fd60 	bl	80005e8 <__aeabi_dmul>
 800cb28:	ec53 2b19 	vmov	r2, r3, d9
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	460f      	mov	r7, r1
 800cb30:	4620      	mov	r0, r4
 800cb32:	4629      	mov	r1, r5
 800cb34:	f7f3 fba0 	bl	8000278 <__aeabi_dsub>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	4649      	mov	r1, r9
 800cb40:	f7f3 fb9a 	bl	8000278 <__aeabi_dsub>
 800cb44:	a370      	add	r3, pc, #448	; (adr r3, 800cd08 <__ieee754_pow+0x9e8>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fd4d 	bl	80005e8 <__aeabi_dmul>
 800cb4e:	a370      	add	r3, pc, #448	; (adr r3, 800cd10 <__ieee754_pow+0x9f0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	4680      	mov	r8, r0
 800cb56:	4689      	mov	r9, r1
 800cb58:	4620      	mov	r0, r4
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f7f3 fd44 	bl	80005e8 <__aeabi_dmul>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 fb88 	bl	800027c <__adddf3>
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	460d      	mov	r5, r1
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4630      	mov	r0, r6
 800cb76:	4639      	mov	r1, r7
 800cb78:	f7f3 fb80 	bl	800027c <__adddf3>
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	463b      	mov	r3, r7
 800cb80:	4680      	mov	r8, r0
 800cb82:	4689      	mov	r9, r1
 800cb84:	f7f3 fb78 	bl	8000278 <__aeabi_dsub>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fb72 	bl	8000278 <__aeabi_dsub>
 800cb94:	4642      	mov	r2, r8
 800cb96:	4606      	mov	r6, r0
 800cb98:	460f      	mov	r7, r1
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	f7f3 fd22 	bl	80005e8 <__aeabi_dmul>
 800cba4:	a35c      	add	r3, pc, #368	; (adr r3, 800cd18 <__ieee754_pow+0x9f8>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	4604      	mov	r4, r0
 800cbac:	460d      	mov	r5, r1
 800cbae:	f7f3 fd1b 	bl	80005e8 <__aeabi_dmul>
 800cbb2:	a35b      	add	r3, pc, #364	; (adr r3, 800cd20 <__ieee754_pow+0xa00>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f7f3 fb5e 	bl	8000278 <__aeabi_dsub>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	462b      	mov	r3, r5
 800cbc0:	f7f3 fd12 	bl	80005e8 <__aeabi_dmul>
 800cbc4:	a358      	add	r3, pc, #352	; (adr r3, 800cd28 <__ieee754_pow+0xa08>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	f7f3 fb57 	bl	800027c <__adddf3>
 800cbce:	4622      	mov	r2, r4
 800cbd0:	462b      	mov	r3, r5
 800cbd2:	f7f3 fd09 	bl	80005e8 <__aeabi_dmul>
 800cbd6:	a356      	add	r3, pc, #344	; (adr r3, 800cd30 <__ieee754_pow+0xa10>)
 800cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbdc:	f7f3 fb4c 	bl	8000278 <__aeabi_dsub>
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	f7f3 fd00 	bl	80005e8 <__aeabi_dmul>
 800cbe8:	a353      	add	r3, pc, #332	; (adr r3, 800cd38 <__ieee754_pow+0xa18>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fb45 	bl	800027c <__adddf3>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	f7f3 fcf7 	bl	80005e8 <__aeabi_dmul>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4640      	mov	r0, r8
 800cc00:	4649      	mov	r1, r9
 800cc02:	f7f3 fb39 	bl	8000278 <__aeabi_dsub>
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	f7f3 fce9 	bl	80005e8 <__aeabi_dmul>
 800cc16:	2200      	movs	r2, #0
 800cc18:	ec41 0b19 	vmov	d9, r0, r1
 800cc1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc20:	4620      	mov	r0, r4
 800cc22:	4629      	mov	r1, r5
 800cc24:	f7f3 fb28 	bl	8000278 <__aeabi_dsub>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	ec51 0b19 	vmov	r0, r1, d9
 800cc30:	f7f3 fe04 	bl	800083c <__aeabi_ddiv>
 800cc34:	4632      	mov	r2, r6
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 fcd2 	bl	80005e8 <__aeabi_dmul>
 800cc44:	4632      	mov	r2, r6
 800cc46:	463b      	mov	r3, r7
 800cc48:	f7f3 fb18 	bl	800027c <__adddf3>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4620      	mov	r0, r4
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7f3 fb10 	bl	8000278 <__aeabi_dsub>
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	f7f3 fb0c 	bl	8000278 <__aeabi_dsub>
 800cc60:	460b      	mov	r3, r1
 800cc62:	4602      	mov	r2, r0
 800cc64:	493a      	ldr	r1, [pc, #232]	; (800cd50 <__ieee754_pow+0xa30>)
 800cc66:	2000      	movs	r0, #0
 800cc68:	f7f3 fb06 	bl	8000278 <__aeabi_dsub>
 800cc6c:	e9cd 0100 	strd	r0, r1, [sp]
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc7a:	da2f      	bge.n	800ccdc <__ieee754_pow+0x9bc>
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	ed9d 0b00 	vldr	d0, [sp]
 800cc82:	f001 f8a1 	bl	800ddc8 <scalbn>
 800cc86:	ec51 0b10 	vmov	r0, r1, d0
 800cc8a:	ec53 2b18 	vmov	r2, r3, d8
 800cc8e:	f7ff bbe0 	b.w	800c452 <__ieee754_pow+0x132>
 800cc92:	4b30      	ldr	r3, [pc, #192]	; (800cd54 <__ieee754_pow+0xa34>)
 800cc94:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cc98:	429e      	cmp	r6, r3
 800cc9a:	f77f af0b 	ble.w	800cab4 <__ieee754_pow+0x794>
 800cc9e:	4b2e      	ldr	r3, [pc, #184]	; (800cd58 <__ieee754_pow+0xa38>)
 800cca0:	440b      	add	r3, r1
 800cca2:	4303      	orrs	r3, r0
 800cca4:	d00b      	beq.n	800ccbe <__ieee754_pow+0x99e>
 800cca6:	a326      	add	r3, pc, #152	; (adr r3, 800cd40 <__ieee754_pow+0xa20>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	ec51 0b18 	vmov	r0, r1, d8
 800ccb0:	f7f3 fc9a 	bl	80005e8 <__aeabi_dmul>
 800ccb4:	a322      	add	r3, pc, #136	; (adr r3, 800cd40 <__ieee754_pow+0xa20>)
 800ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccba:	f7ff bbca 	b.w	800c452 <__ieee754_pow+0x132>
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	f7f3 fad9 	bl	8000278 <__aeabi_dsub>
 800ccc6:	4642      	mov	r2, r8
 800ccc8:	464b      	mov	r3, r9
 800ccca:	f7f3 ff13 	bl	8000af4 <__aeabi_dcmpge>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f43f aef0 	beq.w	800cab4 <__ieee754_pow+0x794>
 800ccd4:	e7e7      	b.n	800cca6 <__ieee754_pow+0x986>
 800ccd6:	f04f 0a00 	mov.w	sl, #0
 800ccda:	e717      	b.n	800cb0c <__ieee754_pow+0x7ec>
 800ccdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cce0:	4619      	mov	r1, r3
 800cce2:	e7d2      	b.n	800cc8a <__ieee754_pow+0x96a>
 800cce4:	491a      	ldr	r1, [pc, #104]	; (800cd50 <__ieee754_pow+0xa30>)
 800cce6:	2000      	movs	r0, #0
 800cce8:	f7ff bb9e 	b.w	800c428 <__ieee754_pow+0x108>
 800ccec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccf0:	f7ff bb9a 	b.w	800c428 <__ieee754_pow+0x108>
 800ccf4:	9000      	str	r0, [sp, #0]
 800ccf6:	f7ff bb76 	b.w	800c3e6 <__ieee754_pow+0xc6>
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	f7ff bb60 	b.w	800c3c0 <__ieee754_pow+0xa0>
 800cd00:	00000000 	.word	0x00000000
 800cd04:	3fe62e43 	.word	0x3fe62e43
 800cd08:	fefa39ef 	.word	0xfefa39ef
 800cd0c:	3fe62e42 	.word	0x3fe62e42
 800cd10:	0ca86c39 	.word	0x0ca86c39
 800cd14:	be205c61 	.word	0xbe205c61
 800cd18:	72bea4d0 	.word	0x72bea4d0
 800cd1c:	3e663769 	.word	0x3e663769
 800cd20:	c5d26bf1 	.word	0xc5d26bf1
 800cd24:	3ebbbd41 	.word	0x3ebbbd41
 800cd28:	af25de2c 	.word	0xaf25de2c
 800cd2c:	3f11566a 	.word	0x3f11566a
 800cd30:	16bebd93 	.word	0x16bebd93
 800cd34:	3f66c16c 	.word	0x3f66c16c
 800cd38:	5555553e 	.word	0x5555553e
 800cd3c:	3fc55555 	.word	0x3fc55555
 800cd40:	c2f8f359 	.word	0xc2f8f359
 800cd44:	01a56e1f 	.word	0x01a56e1f
 800cd48:	3fe00000 	.word	0x3fe00000
 800cd4c:	000fffff 	.word	0x000fffff
 800cd50:	3ff00000 	.word	0x3ff00000
 800cd54:	4090cbff 	.word	0x4090cbff
 800cd58:	3f6f3400 	.word	0x3f6f3400
 800cd5c:	652b82fe 	.word	0x652b82fe
 800cd60:	3c971547 	.word	0x3c971547
 800cd64:	00000000 	.word	0x00000000

0800cd68 <__ieee754_rem_pio2>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	ed2d 8b02 	vpush	{d8}
 800cd70:	ec55 4b10 	vmov	r4, r5, d0
 800cd74:	4bca      	ldr	r3, [pc, #808]	; (800d0a0 <__ieee754_rem_pio2+0x338>)
 800cd76:	b08b      	sub	sp, #44	; 0x2c
 800cd78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cd7c:	4598      	cmp	r8, r3
 800cd7e:	4682      	mov	sl, r0
 800cd80:	9502      	str	r5, [sp, #8]
 800cd82:	dc08      	bgt.n	800cd96 <__ieee754_rem_pio2+0x2e>
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	ed80 0b00 	vstr	d0, [r0]
 800cd8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cd90:	f04f 0b00 	mov.w	fp, #0
 800cd94:	e028      	b.n	800cde8 <__ieee754_rem_pio2+0x80>
 800cd96:	4bc3      	ldr	r3, [pc, #780]	; (800d0a4 <__ieee754_rem_pio2+0x33c>)
 800cd98:	4598      	cmp	r8, r3
 800cd9a:	dc78      	bgt.n	800ce8e <__ieee754_rem_pio2+0x126>
 800cd9c:	9b02      	ldr	r3, [sp, #8]
 800cd9e:	4ec2      	ldr	r6, [pc, #776]	; (800d0a8 <__ieee754_rem_pio2+0x340>)
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	ee10 0a10 	vmov	r0, s0
 800cda6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d068 <__ieee754_rem_pio2+0x300>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	4629      	mov	r1, r5
 800cdae:	dd39      	ble.n	800ce24 <__ieee754_rem_pio2+0xbc>
 800cdb0:	f7f3 fa62 	bl	8000278 <__aeabi_dsub>
 800cdb4:	45b0      	cmp	r8, r6
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	460d      	mov	r5, r1
 800cdba:	d01b      	beq.n	800cdf4 <__ieee754_rem_pio2+0x8c>
 800cdbc:	a3ac      	add	r3, pc, #688	; (adr r3, 800d070 <__ieee754_rem_pio2+0x308>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	f7f3 fa59 	bl	8000278 <__aeabi_dsub>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	e9ca 2300 	strd	r2, r3, [sl]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	f7f3 fa51 	bl	8000278 <__aeabi_dsub>
 800cdd6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d070 <__ieee754_rem_pio2+0x308>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	f7f3 fa4c 	bl	8000278 <__aeabi_dsub>
 800cde0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cde4:	f04f 0b01 	mov.w	fp, #1
 800cde8:	4658      	mov	r0, fp
 800cdea:	b00b      	add	sp, #44	; 0x2c
 800cdec:	ecbd 8b02 	vpop	{d8}
 800cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d078 <__ieee754_rem_pio2+0x310>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	f7f3 fa3d 	bl	8000278 <__aeabi_dsub>
 800cdfe:	a3a0      	add	r3, pc, #640	; (adr r3, 800d080 <__ieee754_rem_pio2+0x318>)
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	f7f3 fa36 	bl	8000278 <__aeabi_dsub>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	e9ca 2300 	strd	r2, r3, [sl]
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 fa2e 	bl	8000278 <__aeabi_dsub>
 800ce1c:	a398      	add	r3, pc, #608	; (adr r3, 800d080 <__ieee754_rem_pio2+0x318>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	e7db      	b.n	800cddc <__ieee754_rem_pio2+0x74>
 800ce24:	f7f3 fa2a 	bl	800027c <__adddf3>
 800ce28:	45b0      	cmp	r8, r6
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	460d      	mov	r5, r1
 800ce2e:	d016      	beq.n	800ce5e <__ieee754_rem_pio2+0xf6>
 800ce30:	a38f      	add	r3, pc, #572	; (adr r3, 800d070 <__ieee754_rem_pio2+0x308>)
 800ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce36:	f7f3 fa21 	bl	800027c <__adddf3>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	e9ca 2300 	strd	r2, r3, [sl]
 800ce42:	4620      	mov	r0, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7f3 fa17 	bl	8000278 <__aeabi_dsub>
 800ce4a:	a389      	add	r3, pc, #548	; (adr r3, 800d070 <__ieee754_rem_pio2+0x308>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	f7f3 fa14 	bl	800027c <__adddf3>
 800ce54:	f04f 3bff 	mov.w	fp, #4294967295
 800ce58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce5c:	e7c4      	b.n	800cde8 <__ieee754_rem_pio2+0x80>
 800ce5e:	a386      	add	r3, pc, #536	; (adr r3, 800d078 <__ieee754_rem_pio2+0x310>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f7f3 fa0a 	bl	800027c <__adddf3>
 800ce68:	a385      	add	r3, pc, #532	; (adr r3, 800d080 <__ieee754_rem_pio2+0x318>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	4604      	mov	r4, r0
 800ce70:	460d      	mov	r5, r1
 800ce72:	f7f3 fa03 	bl	800027c <__adddf3>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 f9f9 	bl	8000278 <__aeabi_dsub>
 800ce86:	a37e      	add	r3, pc, #504	; (adr r3, 800d080 <__ieee754_rem_pio2+0x318>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	e7e0      	b.n	800ce50 <__ieee754_rem_pio2+0xe8>
 800ce8e:	4b87      	ldr	r3, [pc, #540]	; (800d0ac <__ieee754_rem_pio2+0x344>)
 800ce90:	4598      	cmp	r8, r3
 800ce92:	f300 80d9 	bgt.w	800d048 <__ieee754_rem_pio2+0x2e0>
 800ce96:	f000 feed 	bl	800dc74 <fabs>
 800ce9a:	ec55 4b10 	vmov	r4, r5, d0
 800ce9e:	ee10 0a10 	vmov	r0, s0
 800cea2:	a379      	add	r3, pc, #484	; (adr r3, 800d088 <__ieee754_rem_pio2+0x320>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fb9d 	bl	80005e8 <__aeabi_dmul>
 800ceae:	4b80      	ldr	r3, [pc, #512]	; (800d0b0 <__ieee754_rem_pio2+0x348>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f7f3 f9e3 	bl	800027c <__adddf3>
 800ceb6:	f7f3 fe47 	bl	8000b48 <__aeabi_d2iz>
 800ceba:	4683      	mov	fp, r0
 800cebc:	f7f3 fb2a 	bl	8000514 <__aeabi_i2d>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	ec43 2b18 	vmov	d8, r2, r3
 800cec8:	a367      	add	r3, pc, #412	; (adr r3, 800d068 <__ieee754_rem_pio2+0x300>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f7f3 fb8b 	bl	80005e8 <__aeabi_dmul>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4620      	mov	r0, r4
 800ced8:	4629      	mov	r1, r5
 800ceda:	f7f3 f9cd 	bl	8000278 <__aeabi_dsub>
 800cede:	a364      	add	r3, pc, #400	; (adr r3, 800d070 <__ieee754_rem_pio2+0x308>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	ec51 0b18 	vmov	r0, r1, d8
 800ceec:	f7f3 fb7c 	bl	80005e8 <__aeabi_dmul>
 800cef0:	f1bb 0f1f 	cmp.w	fp, #31
 800cef4:	4604      	mov	r4, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	dc0d      	bgt.n	800cf16 <__ieee754_rem_pio2+0x1ae>
 800cefa:	4b6e      	ldr	r3, [pc, #440]	; (800d0b4 <__ieee754_rem_pio2+0x34c>)
 800cefc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cf00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf04:	4543      	cmp	r3, r8
 800cf06:	d006      	beq.n	800cf16 <__ieee754_rem_pio2+0x1ae>
 800cf08:	4622      	mov	r2, r4
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	4639      	mov	r1, r7
 800cf10:	f7f3 f9b2 	bl	8000278 <__aeabi_dsub>
 800cf14:	e00f      	b.n	800cf36 <__ieee754_rem_pio2+0x1ce>
 800cf16:	462b      	mov	r3, r5
 800cf18:	4622      	mov	r2, r4
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	f7f3 f9ab 	bl	8000278 <__aeabi_dsub>
 800cf22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cf30:	f1b8 0f10 	cmp.w	r8, #16
 800cf34:	dc02      	bgt.n	800cf3c <__ieee754_rem_pio2+0x1d4>
 800cf36:	e9ca 0100 	strd	r0, r1, [sl]
 800cf3a:	e039      	b.n	800cfb0 <__ieee754_rem_pio2+0x248>
 800cf3c:	a34e      	add	r3, pc, #312	; (adr r3, 800d078 <__ieee754_rem_pio2+0x310>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	ec51 0b18 	vmov	r0, r1, d8
 800cf46:	f7f3 fb4f 	bl	80005e8 <__aeabi_dmul>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4630      	mov	r0, r6
 800cf54:	4639      	mov	r1, r7
 800cf56:	f7f3 f98f 	bl	8000278 <__aeabi_dsub>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4680      	mov	r8, r0
 800cf60:	4689      	mov	r9, r1
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7f3 f987 	bl	8000278 <__aeabi_dsub>
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	f7f3 f983 	bl	8000278 <__aeabi_dsub>
 800cf72:	a343      	add	r3, pc, #268	; (adr r3, 800d080 <__ieee754_rem_pio2+0x318>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	4604      	mov	r4, r0
 800cf7a:	460d      	mov	r5, r1
 800cf7c:	ec51 0b18 	vmov	r0, r1, d8
 800cf80:	f7f3 fb32 	bl	80005e8 <__aeabi_dmul>
 800cf84:	4622      	mov	r2, r4
 800cf86:	462b      	mov	r3, r5
 800cf88:	f7f3 f976 	bl	8000278 <__aeabi_dsub>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	4640      	mov	r0, r8
 800cf96:	4649      	mov	r1, r9
 800cf98:	f7f3 f96e 	bl	8000278 <__aeabi_dsub>
 800cf9c:	9a03      	ldr	r2, [sp, #12]
 800cf9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	2b31      	cmp	r3, #49	; 0x31
 800cfa6:	dc24      	bgt.n	800cff2 <__ieee754_rem_pio2+0x28a>
 800cfa8:	e9ca 0100 	strd	r0, r1, [sl]
 800cfac:	4646      	mov	r6, r8
 800cfae:	464f      	mov	r7, r9
 800cfb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	4642      	mov	r2, r8
 800cfb8:	464b      	mov	r3, r9
 800cfba:	4639      	mov	r1, r7
 800cfbc:	f7f3 f95c 	bl	8000278 <__aeabi_dsub>
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	f7f3 f958 	bl	8000278 <__aeabi_dsub>
 800cfc8:	9b02      	ldr	r3, [sp, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cfd0:	f6bf af0a 	bge.w	800cde8 <__ieee754_rem_pio2+0x80>
 800cfd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cfd8:	f8ca 3004 	str.w	r3, [sl, #4]
 800cfdc:	f8ca 8000 	str.w	r8, [sl]
 800cfe0:	f8ca 0008 	str.w	r0, [sl, #8]
 800cfe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfe8:	f8ca 300c 	str.w	r3, [sl, #12]
 800cfec:	f1cb 0b00 	rsb	fp, fp, #0
 800cff0:	e6fa      	b.n	800cde8 <__ieee754_rem_pio2+0x80>
 800cff2:	a327      	add	r3, pc, #156	; (adr r3, 800d090 <__ieee754_rem_pio2+0x328>)
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	ec51 0b18 	vmov	r0, r1, d8
 800cffc:	f7f3 faf4 	bl	80005e8 <__aeabi_dmul>
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4640      	mov	r0, r8
 800d00a:	4649      	mov	r1, r9
 800d00c:	f7f3 f934 	bl	8000278 <__aeabi_dsub>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4606      	mov	r6, r0
 800d016:	460f      	mov	r7, r1
 800d018:	4640      	mov	r0, r8
 800d01a:	4649      	mov	r1, r9
 800d01c:	f7f3 f92c 	bl	8000278 <__aeabi_dsub>
 800d020:	4622      	mov	r2, r4
 800d022:	462b      	mov	r3, r5
 800d024:	f7f3 f928 	bl	8000278 <__aeabi_dsub>
 800d028:	a31b      	add	r3, pc, #108	; (adr r3, 800d098 <__ieee754_rem_pio2+0x330>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	4604      	mov	r4, r0
 800d030:	460d      	mov	r5, r1
 800d032:	ec51 0b18 	vmov	r0, r1, d8
 800d036:	f7f3 fad7 	bl	80005e8 <__aeabi_dmul>
 800d03a:	4622      	mov	r2, r4
 800d03c:	462b      	mov	r3, r5
 800d03e:	f7f3 f91b 	bl	8000278 <__aeabi_dsub>
 800d042:	4604      	mov	r4, r0
 800d044:	460d      	mov	r5, r1
 800d046:	e75f      	b.n	800cf08 <__ieee754_rem_pio2+0x1a0>
 800d048:	4b1b      	ldr	r3, [pc, #108]	; (800d0b8 <__ieee754_rem_pio2+0x350>)
 800d04a:	4598      	cmp	r8, r3
 800d04c:	dd36      	ble.n	800d0bc <__ieee754_rem_pio2+0x354>
 800d04e:	ee10 2a10 	vmov	r2, s0
 800d052:	462b      	mov	r3, r5
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 f90e 	bl	8000278 <__aeabi_dsub>
 800d05c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d060:	e9ca 0100 	strd	r0, r1, [sl]
 800d064:	e694      	b.n	800cd90 <__ieee754_rem_pio2+0x28>
 800d066:	bf00      	nop
 800d068:	54400000 	.word	0x54400000
 800d06c:	3ff921fb 	.word	0x3ff921fb
 800d070:	1a626331 	.word	0x1a626331
 800d074:	3dd0b461 	.word	0x3dd0b461
 800d078:	1a600000 	.word	0x1a600000
 800d07c:	3dd0b461 	.word	0x3dd0b461
 800d080:	2e037073 	.word	0x2e037073
 800d084:	3ba3198a 	.word	0x3ba3198a
 800d088:	6dc9c883 	.word	0x6dc9c883
 800d08c:	3fe45f30 	.word	0x3fe45f30
 800d090:	2e000000 	.word	0x2e000000
 800d094:	3ba3198a 	.word	0x3ba3198a
 800d098:	252049c1 	.word	0x252049c1
 800d09c:	397b839a 	.word	0x397b839a
 800d0a0:	3fe921fb 	.word	0x3fe921fb
 800d0a4:	4002d97b 	.word	0x4002d97b
 800d0a8:	3ff921fb 	.word	0x3ff921fb
 800d0ac:	413921fb 	.word	0x413921fb
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	0800e190 	.word	0x0800e190
 800d0b8:	7fefffff 	.word	0x7fefffff
 800d0bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d0c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d0c4:	ee10 0a10 	vmov	r0, s0
 800d0c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d0cc:	ee10 6a10 	vmov	r6, s0
 800d0d0:	460f      	mov	r7, r1
 800d0d2:	f7f3 fd39 	bl	8000b48 <__aeabi_d2iz>
 800d0d6:	f7f3 fa1d 	bl	8000514 <__aeabi_i2d>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4630      	mov	r0, r6
 800d0e0:	4639      	mov	r1, r7
 800d0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0e6:	f7f3 f8c7 	bl	8000278 <__aeabi_dsub>
 800d0ea:	4b22      	ldr	r3, [pc, #136]	; (800d174 <__ieee754_rem_pio2+0x40c>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f7f3 fa7b 	bl	80005e8 <__aeabi_dmul>
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	f7f3 fd27 	bl	8000b48 <__aeabi_d2iz>
 800d0fa:	f7f3 fa0b 	bl	8000514 <__aeabi_i2d>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4630      	mov	r0, r6
 800d104:	4639      	mov	r1, r7
 800d106:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d10a:	f7f3 f8b5 	bl	8000278 <__aeabi_dsub>
 800d10e:	4b19      	ldr	r3, [pc, #100]	; (800d174 <__ieee754_rem_pio2+0x40c>)
 800d110:	2200      	movs	r2, #0
 800d112:	f7f3 fa69 	bl	80005e8 <__aeabi_dmul>
 800d116:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d11a:	ad04      	add	r5, sp, #16
 800d11c:	f04f 0803 	mov.w	r8, #3
 800d120:	46a9      	mov	r9, r5
 800d122:	2600      	movs	r6, #0
 800d124:	2700      	movs	r7, #0
 800d126:	4632      	mov	r2, r6
 800d128:	463b      	mov	r3, r7
 800d12a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d12e:	46c3      	mov	fp, r8
 800d130:	3d08      	subs	r5, #8
 800d132:	f108 38ff 	add.w	r8, r8, #4294967295
 800d136:	f7f3 fcbf 	bl	8000ab8 <__aeabi_dcmpeq>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1f3      	bne.n	800d126 <__ieee754_rem_pio2+0x3be>
 800d13e:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <__ieee754_rem_pio2+0x410>)
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	2302      	movs	r3, #2
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	4622      	mov	r2, r4
 800d148:	465b      	mov	r3, fp
 800d14a:	4651      	mov	r1, sl
 800d14c:	4648      	mov	r0, r9
 800d14e:	f000 f993 	bl	800d478 <__kernel_rem_pio2>
 800d152:	9b02      	ldr	r3, [sp, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	4683      	mov	fp, r0
 800d158:	f6bf ae46 	bge.w	800cde8 <__ieee754_rem_pio2+0x80>
 800d15c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d160:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d164:	f8ca 3004 	str.w	r3, [sl, #4]
 800d168:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d170:	e73a      	b.n	800cfe8 <__ieee754_rem_pio2+0x280>
 800d172:	bf00      	nop
 800d174:	41700000 	.word	0x41700000
 800d178:	0800e210 	.word	0x0800e210

0800d17c <__ieee754_sqrt>:
 800d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d180:	ec55 4b10 	vmov	r4, r5, d0
 800d184:	4e56      	ldr	r6, [pc, #344]	; (800d2e0 <__ieee754_sqrt+0x164>)
 800d186:	43ae      	bics	r6, r5
 800d188:	ee10 0a10 	vmov	r0, s0
 800d18c:	ee10 3a10 	vmov	r3, s0
 800d190:	4629      	mov	r1, r5
 800d192:	462a      	mov	r2, r5
 800d194:	d110      	bne.n	800d1b8 <__ieee754_sqrt+0x3c>
 800d196:	ee10 2a10 	vmov	r2, s0
 800d19a:	462b      	mov	r3, r5
 800d19c:	f7f3 fa24 	bl	80005e8 <__aeabi_dmul>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 f868 	bl	800027c <__adddf3>
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	ec45 4b10 	vmov	d0, r4, r5
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	dc10      	bgt.n	800d1de <__ieee754_sqrt+0x62>
 800d1bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1c0:	4330      	orrs	r0, r6
 800d1c2:	d0f5      	beq.n	800d1b0 <__ieee754_sqrt+0x34>
 800d1c4:	b15d      	cbz	r5, 800d1de <__ieee754_sqrt+0x62>
 800d1c6:	ee10 2a10 	vmov	r2, s0
 800d1ca:	462b      	mov	r3, r5
 800d1cc:	ee10 0a10 	vmov	r0, s0
 800d1d0:	f7f3 f852 	bl	8000278 <__aeabi_dsub>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	f7f3 fb30 	bl	800083c <__aeabi_ddiv>
 800d1dc:	e7e6      	b.n	800d1ac <__ieee754_sqrt+0x30>
 800d1de:	1509      	asrs	r1, r1, #20
 800d1e0:	d076      	beq.n	800d2d0 <__ieee754_sqrt+0x154>
 800d1e2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d1e6:	07ce      	lsls	r6, r1, #31
 800d1e8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d1ec:	bf5e      	ittt	pl
 800d1ee:	0fda      	lsrpl	r2, r3, #31
 800d1f0:	005b      	lslpl	r3, r3, #1
 800d1f2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d1f6:	0fda      	lsrs	r2, r3, #31
 800d1f8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d1fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d200:	2000      	movs	r0, #0
 800d202:	106d      	asrs	r5, r5, #1
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	f04f 0e16 	mov.w	lr, #22
 800d20a:	4684      	mov	ip, r0
 800d20c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d210:	eb0c 0401 	add.w	r4, ip, r1
 800d214:	4294      	cmp	r4, r2
 800d216:	bfde      	ittt	le
 800d218:	1b12      	suble	r2, r2, r4
 800d21a:	eb04 0c01 	addle.w	ip, r4, r1
 800d21e:	1840      	addle	r0, r0, r1
 800d220:	0052      	lsls	r2, r2, #1
 800d222:	f1be 0e01 	subs.w	lr, lr, #1
 800d226:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d22a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d22e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d232:	d1ed      	bne.n	800d210 <__ieee754_sqrt+0x94>
 800d234:	4671      	mov	r1, lr
 800d236:	2720      	movs	r7, #32
 800d238:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d23c:	4562      	cmp	r2, ip
 800d23e:	eb04 060e 	add.w	r6, r4, lr
 800d242:	dc02      	bgt.n	800d24a <__ieee754_sqrt+0xce>
 800d244:	d113      	bne.n	800d26e <__ieee754_sqrt+0xf2>
 800d246:	429e      	cmp	r6, r3
 800d248:	d811      	bhi.n	800d26e <__ieee754_sqrt+0xf2>
 800d24a:	2e00      	cmp	r6, #0
 800d24c:	eb06 0e04 	add.w	lr, r6, r4
 800d250:	da43      	bge.n	800d2da <__ieee754_sqrt+0x15e>
 800d252:	f1be 0f00 	cmp.w	lr, #0
 800d256:	db40      	blt.n	800d2da <__ieee754_sqrt+0x15e>
 800d258:	f10c 0801 	add.w	r8, ip, #1
 800d25c:	eba2 020c 	sub.w	r2, r2, ip
 800d260:	429e      	cmp	r6, r3
 800d262:	bf88      	it	hi
 800d264:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d268:	1b9b      	subs	r3, r3, r6
 800d26a:	4421      	add	r1, r4
 800d26c:	46c4      	mov	ip, r8
 800d26e:	0052      	lsls	r2, r2, #1
 800d270:	3f01      	subs	r7, #1
 800d272:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d276:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d27a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d27e:	d1dd      	bne.n	800d23c <__ieee754_sqrt+0xc0>
 800d280:	4313      	orrs	r3, r2
 800d282:	d006      	beq.n	800d292 <__ieee754_sqrt+0x116>
 800d284:	1c4c      	adds	r4, r1, #1
 800d286:	bf13      	iteet	ne
 800d288:	3101      	addne	r1, #1
 800d28a:	3001      	addeq	r0, #1
 800d28c:	4639      	moveq	r1, r7
 800d28e:	f021 0101 	bicne.w	r1, r1, #1
 800d292:	1043      	asrs	r3, r0, #1
 800d294:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d298:	0849      	lsrs	r1, r1, #1
 800d29a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d29e:	07c2      	lsls	r2, r0, #31
 800d2a0:	bf48      	it	mi
 800d2a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d2a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	463d      	mov	r5, r7
 800d2ae:	e77f      	b.n	800d1b0 <__ieee754_sqrt+0x34>
 800d2b0:	0ada      	lsrs	r2, r3, #11
 800d2b2:	3815      	subs	r0, #21
 800d2b4:	055b      	lsls	r3, r3, #21
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	d0fa      	beq.n	800d2b0 <__ieee754_sqrt+0x134>
 800d2ba:	02d7      	lsls	r7, r2, #11
 800d2bc:	d50a      	bpl.n	800d2d4 <__ieee754_sqrt+0x158>
 800d2be:	f1c1 0420 	rsb	r4, r1, #32
 800d2c2:	fa23 f404 	lsr.w	r4, r3, r4
 800d2c6:	1e4d      	subs	r5, r1, #1
 800d2c8:	408b      	lsls	r3, r1
 800d2ca:	4322      	orrs	r2, r4
 800d2cc:	1b41      	subs	r1, r0, r5
 800d2ce:	e788      	b.n	800d1e2 <__ieee754_sqrt+0x66>
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	e7f0      	b.n	800d2b6 <__ieee754_sqrt+0x13a>
 800d2d4:	0052      	lsls	r2, r2, #1
 800d2d6:	3101      	adds	r1, #1
 800d2d8:	e7ef      	b.n	800d2ba <__ieee754_sqrt+0x13e>
 800d2da:	46e0      	mov	r8, ip
 800d2dc:	e7be      	b.n	800d25c <__ieee754_sqrt+0xe0>
 800d2de:	bf00      	nop
 800d2e0:	7ff00000 	.word	0x7ff00000
 800d2e4:	00000000 	.word	0x00000000

0800d2e8 <__kernel_cos>:
 800d2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ec:	ec57 6b10 	vmov	r6, r7, d0
 800d2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d2f8:	ed8d 1b00 	vstr	d1, [sp]
 800d2fc:	da07      	bge.n	800d30e <__kernel_cos+0x26>
 800d2fe:	ee10 0a10 	vmov	r0, s0
 800d302:	4639      	mov	r1, r7
 800d304:	f7f3 fc20 	bl	8000b48 <__aeabi_d2iz>
 800d308:	2800      	cmp	r0, #0
 800d30a:	f000 8088 	beq.w	800d41e <__kernel_cos+0x136>
 800d30e:	4632      	mov	r2, r6
 800d310:	463b      	mov	r3, r7
 800d312:	4630      	mov	r0, r6
 800d314:	4639      	mov	r1, r7
 800d316:	f7f3 f967 	bl	80005e8 <__aeabi_dmul>
 800d31a:	4b51      	ldr	r3, [pc, #324]	; (800d460 <__kernel_cos+0x178>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	f7f3 f961 	bl	80005e8 <__aeabi_dmul>
 800d326:	a340      	add	r3, pc, #256	; (adr r3, 800d428 <__kernel_cos+0x140>)
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	4682      	mov	sl, r0
 800d32e:	468b      	mov	fp, r1
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f3 f958 	bl	80005e8 <__aeabi_dmul>
 800d338:	a33d      	add	r3, pc, #244	; (adr r3, 800d430 <__kernel_cos+0x148>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f7f2 ff9d 	bl	800027c <__adddf3>
 800d342:	4622      	mov	r2, r4
 800d344:	462b      	mov	r3, r5
 800d346:	f7f3 f94f 	bl	80005e8 <__aeabi_dmul>
 800d34a:	a33b      	add	r3, pc, #236	; (adr r3, 800d438 <__kernel_cos+0x150>)
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	f7f2 ff92 	bl	8000278 <__aeabi_dsub>
 800d354:	4622      	mov	r2, r4
 800d356:	462b      	mov	r3, r5
 800d358:	f7f3 f946 	bl	80005e8 <__aeabi_dmul>
 800d35c:	a338      	add	r3, pc, #224	; (adr r3, 800d440 <__kernel_cos+0x158>)
 800d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d362:	f7f2 ff8b 	bl	800027c <__adddf3>
 800d366:	4622      	mov	r2, r4
 800d368:	462b      	mov	r3, r5
 800d36a:	f7f3 f93d 	bl	80005e8 <__aeabi_dmul>
 800d36e:	a336      	add	r3, pc, #216	; (adr r3, 800d448 <__kernel_cos+0x160>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f2 ff80 	bl	8000278 <__aeabi_dsub>
 800d378:	4622      	mov	r2, r4
 800d37a:	462b      	mov	r3, r5
 800d37c:	f7f3 f934 	bl	80005e8 <__aeabi_dmul>
 800d380:	a333      	add	r3, pc, #204	; (adr r3, 800d450 <__kernel_cos+0x168>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ff79 	bl	800027c <__adddf3>
 800d38a:	4622      	mov	r2, r4
 800d38c:	462b      	mov	r3, r5
 800d38e:	f7f3 f92b 	bl	80005e8 <__aeabi_dmul>
 800d392:	4622      	mov	r2, r4
 800d394:	462b      	mov	r3, r5
 800d396:	f7f3 f927 	bl	80005e8 <__aeabi_dmul>
 800d39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d39e:	4604      	mov	r4, r0
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	f7f3 f91f 	bl	80005e8 <__aeabi_dmul>
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f7f2 ff61 	bl	8000278 <__aeabi_dsub>
 800d3b6:	4b2b      	ldr	r3, [pc, #172]	; (800d464 <__kernel_cos+0x17c>)
 800d3b8:	4598      	cmp	r8, r3
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	dc10      	bgt.n	800d3e2 <__kernel_cos+0xfa>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4650      	mov	r0, sl
 800d3c6:	4659      	mov	r1, fp
 800d3c8:	f7f2 ff56 	bl	8000278 <__aeabi_dsub>
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	4926      	ldr	r1, [pc, #152]	; (800d468 <__kernel_cos+0x180>)
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f7f2 ff50 	bl	8000278 <__aeabi_dsub>
 800d3d8:	ec41 0b10 	vmov	d0, r0, r1
 800d3dc:	b003      	add	sp, #12
 800d3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e2:	4b22      	ldr	r3, [pc, #136]	; (800d46c <__kernel_cos+0x184>)
 800d3e4:	4920      	ldr	r1, [pc, #128]	; (800d468 <__kernel_cos+0x180>)
 800d3e6:	4598      	cmp	r8, r3
 800d3e8:	bfcc      	ite	gt
 800d3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800d470 <__kernel_cos+0x188>)
 800d3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d3f0:	2400      	movs	r4, #0
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	f7f2 ff3e 	bl	8000278 <__aeabi_dsub>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4680      	mov	r8, r0
 800d400:	4689      	mov	r9, r1
 800d402:	462b      	mov	r3, r5
 800d404:	4650      	mov	r0, sl
 800d406:	4659      	mov	r1, fp
 800d408:	f7f2 ff36 	bl	8000278 <__aeabi_dsub>
 800d40c:	4632      	mov	r2, r6
 800d40e:	463b      	mov	r3, r7
 800d410:	f7f2 ff32 	bl	8000278 <__aeabi_dsub>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4640      	mov	r0, r8
 800d41a:	4649      	mov	r1, r9
 800d41c:	e7da      	b.n	800d3d4 <__kernel_cos+0xec>
 800d41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d458 <__kernel_cos+0x170>
 800d422:	e7db      	b.n	800d3dc <__kernel_cos+0xf4>
 800d424:	f3af 8000 	nop.w
 800d428:	be8838d4 	.word	0xbe8838d4
 800d42c:	bda8fae9 	.word	0xbda8fae9
 800d430:	bdb4b1c4 	.word	0xbdb4b1c4
 800d434:	3e21ee9e 	.word	0x3e21ee9e
 800d438:	809c52ad 	.word	0x809c52ad
 800d43c:	3e927e4f 	.word	0x3e927e4f
 800d440:	19cb1590 	.word	0x19cb1590
 800d444:	3efa01a0 	.word	0x3efa01a0
 800d448:	16c15177 	.word	0x16c15177
 800d44c:	3f56c16c 	.word	0x3f56c16c
 800d450:	5555554c 	.word	0x5555554c
 800d454:	3fa55555 	.word	0x3fa55555
 800d458:	00000000 	.word	0x00000000
 800d45c:	3ff00000 	.word	0x3ff00000
 800d460:	3fe00000 	.word	0x3fe00000
 800d464:	3fd33332 	.word	0x3fd33332
 800d468:	3ff00000 	.word	0x3ff00000
 800d46c:	3fe90000 	.word	0x3fe90000
 800d470:	3fd20000 	.word	0x3fd20000
 800d474:	00000000 	.word	0x00000000

0800d478 <__kernel_rem_pio2>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	ed2d 8b02 	vpush	{d8}
 800d480:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d484:	f112 0f14 	cmn.w	r2, #20
 800d488:	9308      	str	r3, [sp, #32]
 800d48a:	9101      	str	r1, [sp, #4]
 800d48c:	4bc6      	ldr	r3, [pc, #792]	; (800d7a8 <__kernel_rem_pio2+0x330>)
 800d48e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d490:	9009      	str	r0, [sp, #36]	; 0x24
 800d492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	9b08      	ldr	r3, [sp, #32]
 800d49a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d49e:	bfa8      	it	ge
 800d4a0:	1ed4      	subge	r4, r2, #3
 800d4a2:	9306      	str	r3, [sp, #24]
 800d4a4:	bfb2      	itee	lt
 800d4a6:	2400      	movlt	r4, #0
 800d4a8:	2318      	movge	r3, #24
 800d4aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800d4ae:	f06f 0317 	mvn.w	r3, #23
 800d4b2:	fb04 3303 	mla	r3, r4, r3, r3
 800d4b6:	eb03 0a02 	add.w	sl, r3, r2
 800d4ba:	9b04      	ldr	r3, [sp, #16]
 800d4bc:	9a06      	ldr	r2, [sp, #24]
 800d4be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d798 <__kernel_rem_pio2+0x320>
 800d4c2:	eb03 0802 	add.w	r8, r3, r2
 800d4c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d4c8:	1aa7      	subs	r7, r4, r2
 800d4ca:	ae20      	add	r6, sp, #128	; 0x80
 800d4cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d4d0:	2500      	movs	r5, #0
 800d4d2:	4545      	cmp	r5, r8
 800d4d4:	dd18      	ble.n	800d508 <__kernel_rem_pio2+0x90>
 800d4d6:	9b08      	ldr	r3, [sp, #32]
 800d4d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d4dc:	aa20      	add	r2, sp, #128	; 0x80
 800d4de:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d798 <__kernel_rem_pio2+0x320>
 800d4e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d4e6:	f1c3 0301 	rsb	r3, r3, #1
 800d4ea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	9a04      	ldr	r2, [sp, #16]
 800d4f4:	4443      	add	r3, r8
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	db2f      	blt.n	800d55a <__kernel_rem_pio2+0xe2>
 800d4fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d4fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d502:	462f      	mov	r7, r5
 800d504:	2600      	movs	r6, #0
 800d506:	e01b      	b.n	800d540 <__kernel_rem_pio2+0xc8>
 800d508:	42ef      	cmn	r7, r5
 800d50a:	d407      	bmi.n	800d51c <__kernel_rem_pio2+0xa4>
 800d50c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d510:	f7f3 f800 	bl	8000514 <__aeabi_i2d>
 800d514:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d518:	3501      	adds	r5, #1
 800d51a:	e7da      	b.n	800d4d2 <__kernel_rem_pio2+0x5a>
 800d51c:	ec51 0b18 	vmov	r0, r1, d8
 800d520:	e7f8      	b.n	800d514 <__kernel_rem_pio2+0x9c>
 800d522:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d526:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d52a:	f7f3 f85d 	bl	80005e8 <__aeabi_dmul>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d536:	f7f2 fea1 	bl	800027c <__adddf3>
 800d53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d53e:	3601      	adds	r6, #1
 800d540:	9b06      	ldr	r3, [sp, #24]
 800d542:	429e      	cmp	r6, r3
 800d544:	f1a7 0708 	sub.w	r7, r7, #8
 800d548:	ddeb      	ble.n	800d522 <__kernel_rem_pio2+0xaa>
 800d54a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d54e:	3508      	adds	r5, #8
 800d550:	ecab 7b02 	vstmia	fp!, {d7}
 800d554:	f108 0801 	add.w	r8, r8, #1
 800d558:	e7ca      	b.n	800d4f0 <__kernel_rem_pio2+0x78>
 800d55a:	9b04      	ldr	r3, [sp, #16]
 800d55c:	aa0c      	add	r2, sp, #48	; 0x30
 800d55e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d562:	930b      	str	r3, [sp, #44]	; 0x2c
 800d564:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d566:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d56a:	9c04      	ldr	r4, [sp, #16]
 800d56c:	930a      	str	r3, [sp, #40]	; 0x28
 800d56e:	ab98      	add	r3, sp, #608	; 0x260
 800d570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d574:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d578:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d57c:	f8cd b008 	str.w	fp, [sp, #8]
 800d580:	4625      	mov	r5, r4
 800d582:	2d00      	cmp	r5, #0
 800d584:	dc78      	bgt.n	800d678 <__kernel_rem_pio2+0x200>
 800d586:	ec47 6b10 	vmov	d0, r6, r7
 800d58a:	4650      	mov	r0, sl
 800d58c:	f000 fc1c 	bl	800ddc8 <scalbn>
 800d590:	ec57 6b10 	vmov	r6, r7, d0
 800d594:	2200      	movs	r2, #0
 800d596:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d59a:	ee10 0a10 	vmov	r0, s0
 800d59e:	4639      	mov	r1, r7
 800d5a0:	f7f3 f822 	bl	80005e8 <__aeabi_dmul>
 800d5a4:	ec41 0b10 	vmov	d0, r0, r1
 800d5a8:	f7fe fd8a 	bl	800c0c0 <floor>
 800d5ac:	4b7f      	ldr	r3, [pc, #508]	; (800d7ac <__kernel_rem_pio2+0x334>)
 800d5ae:	ec51 0b10 	vmov	r0, r1, d0
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7f3 f818 	bl	80005e8 <__aeabi_dmul>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4630      	mov	r0, r6
 800d5be:	4639      	mov	r1, r7
 800d5c0:	f7f2 fe5a 	bl	8000278 <__aeabi_dsub>
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	f7f3 fabe 	bl	8000b48 <__aeabi_d2iz>
 800d5cc:	9007      	str	r0, [sp, #28]
 800d5ce:	f7f2 ffa1 	bl	8000514 <__aeabi_i2d>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	4639      	mov	r1, r7
 800d5da:	f7f2 fe4d 	bl	8000278 <__aeabi_dsub>
 800d5de:	f1ba 0f00 	cmp.w	sl, #0
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	dd70      	ble.n	800d6ca <__kernel_rem_pio2+0x252>
 800d5e8:	1e62      	subs	r2, r4, #1
 800d5ea:	ab0c      	add	r3, sp, #48	; 0x30
 800d5ec:	9d07      	ldr	r5, [sp, #28]
 800d5ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5f2:	f1ca 0118 	rsb	r1, sl, #24
 800d5f6:	fa40 f301 	asr.w	r3, r0, r1
 800d5fa:	441d      	add	r5, r3
 800d5fc:	408b      	lsls	r3, r1
 800d5fe:	1ac0      	subs	r0, r0, r3
 800d600:	ab0c      	add	r3, sp, #48	; 0x30
 800d602:	9507      	str	r5, [sp, #28]
 800d604:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d608:	f1ca 0317 	rsb	r3, sl, #23
 800d60c:	fa40 f303 	asr.w	r3, r0, r3
 800d610:	9302      	str	r3, [sp, #8]
 800d612:	9b02      	ldr	r3, [sp, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	dd66      	ble.n	800d6e6 <__kernel_rem_pio2+0x26e>
 800d618:	9b07      	ldr	r3, [sp, #28]
 800d61a:	2200      	movs	r2, #0
 800d61c:	3301      	adds	r3, #1
 800d61e:	9307      	str	r3, [sp, #28]
 800d620:	4615      	mov	r5, r2
 800d622:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d626:	4294      	cmp	r4, r2
 800d628:	f300 8099 	bgt.w	800d75e <__kernel_rem_pio2+0x2e6>
 800d62c:	f1ba 0f00 	cmp.w	sl, #0
 800d630:	dd07      	ble.n	800d642 <__kernel_rem_pio2+0x1ca>
 800d632:	f1ba 0f01 	cmp.w	sl, #1
 800d636:	f000 80a5 	beq.w	800d784 <__kernel_rem_pio2+0x30c>
 800d63a:	f1ba 0f02 	cmp.w	sl, #2
 800d63e:	f000 80c1 	beq.w	800d7c4 <__kernel_rem_pio2+0x34c>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d14e      	bne.n	800d6e6 <__kernel_rem_pio2+0x26e>
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	4958      	ldr	r1, [pc, #352]	; (800d7b0 <__kernel_rem_pio2+0x338>)
 800d64e:	2000      	movs	r0, #0
 800d650:	f7f2 fe12 	bl	8000278 <__aeabi_dsub>
 800d654:	4606      	mov	r6, r0
 800d656:	460f      	mov	r7, r1
 800d658:	2d00      	cmp	r5, #0
 800d65a:	d044      	beq.n	800d6e6 <__kernel_rem_pio2+0x26e>
 800d65c:	4650      	mov	r0, sl
 800d65e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d7a0 <__kernel_rem_pio2+0x328>
 800d662:	f000 fbb1 	bl	800ddc8 <scalbn>
 800d666:	4630      	mov	r0, r6
 800d668:	4639      	mov	r1, r7
 800d66a:	ec53 2b10 	vmov	r2, r3, d0
 800d66e:	f7f2 fe03 	bl	8000278 <__aeabi_dsub>
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	e036      	b.n	800d6e6 <__kernel_rem_pio2+0x26e>
 800d678:	4b4e      	ldr	r3, [pc, #312]	; (800d7b4 <__kernel_rem_pio2+0x33c>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f2 ffb2 	bl	80005e8 <__aeabi_dmul>
 800d684:	f7f3 fa60 	bl	8000b48 <__aeabi_d2iz>
 800d688:	f7f2 ff44 	bl	8000514 <__aeabi_i2d>
 800d68c:	4b4a      	ldr	r3, [pc, #296]	; (800d7b8 <__kernel_rem_pio2+0x340>)
 800d68e:	2200      	movs	r2, #0
 800d690:	4680      	mov	r8, r0
 800d692:	4689      	mov	r9, r1
 800d694:	f7f2 ffa8 	bl	80005e8 <__aeabi_dmul>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	4630      	mov	r0, r6
 800d69e:	4639      	mov	r1, r7
 800d6a0:	f7f2 fdea 	bl	8000278 <__aeabi_dsub>
 800d6a4:	f7f3 fa50 	bl	8000b48 <__aeabi_d2iz>
 800d6a8:	9b02      	ldr	r3, [sp, #8]
 800d6aa:	f843 0b04 	str.w	r0, [r3], #4
 800d6ae:	3d01      	subs	r5, #1
 800d6b0:	9302      	str	r3, [sp, #8]
 800d6b2:	ab70      	add	r3, sp, #448	; 0x1c0
 800d6b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	4640      	mov	r0, r8
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7f2 fddc 	bl	800027c <__adddf3>
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	460f      	mov	r7, r1
 800d6c8:	e75b      	b.n	800d582 <__kernel_rem_pio2+0x10a>
 800d6ca:	d105      	bne.n	800d6d8 <__kernel_rem_pio2+0x260>
 800d6cc:	1e63      	subs	r3, r4, #1
 800d6ce:	aa0c      	add	r2, sp, #48	; 0x30
 800d6d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d6d4:	15c3      	asrs	r3, r0, #23
 800d6d6:	e79b      	b.n	800d610 <__kernel_rem_pio2+0x198>
 800d6d8:	4b38      	ldr	r3, [pc, #224]	; (800d7bc <__kernel_rem_pio2+0x344>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f7f3 fa0a 	bl	8000af4 <__aeabi_dcmpge>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d139      	bne.n	800d758 <__kernel_rem_pio2+0x2e0>
 800d6e4:	9002      	str	r0, [sp, #8]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f3 f9e3 	bl	8000ab8 <__aeabi_dcmpeq>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f000 80b4 	beq.w	800d860 <__kernel_rem_pio2+0x3e8>
 800d6f8:	f104 3bff 	add.w	fp, r4, #4294967295
 800d6fc:	465b      	mov	r3, fp
 800d6fe:	2200      	movs	r2, #0
 800d700:	9904      	ldr	r1, [sp, #16]
 800d702:	428b      	cmp	r3, r1
 800d704:	da65      	bge.n	800d7d2 <__kernel_rem_pio2+0x35a>
 800d706:	2a00      	cmp	r2, #0
 800d708:	d07b      	beq.n	800d802 <__kernel_rem_pio2+0x38a>
 800d70a:	ab0c      	add	r3, sp, #48	; 0x30
 800d70c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d710:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 80a0 	beq.w	800d85a <__kernel_rem_pio2+0x3e2>
 800d71a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d7a0 <__kernel_rem_pio2+0x328>
 800d71e:	4650      	mov	r0, sl
 800d720:	f000 fb52 	bl	800ddc8 <scalbn>
 800d724:	4f23      	ldr	r7, [pc, #140]	; (800d7b4 <__kernel_rem_pio2+0x33c>)
 800d726:	ec55 4b10 	vmov	r4, r5, d0
 800d72a:	46d8      	mov	r8, fp
 800d72c:	2600      	movs	r6, #0
 800d72e:	f1b8 0f00 	cmp.w	r8, #0
 800d732:	f280 80cf 	bge.w	800d8d4 <__kernel_rem_pio2+0x45c>
 800d736:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d798 <__kernel_rem_pio2+0x320>
 800d73a:	465f      	mov	r7, fp
 800d73c:	f04f 0800 	mov.w	r8, #0
 800d740:	2f00      	cmp	r7, #0
 800d742:	f2c0 80fd 	blt.w	800d940 <__kernel_rem_pio2+0x4c8>
 800d746:	ab70      	add	r3, sp, #448	; 0x1c0
 800d748:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d7c0 <__kernel_rem_pio2+0x348>
 800d74c:	ec55 4b18 	vmov	r4, r5, d8
 800d750:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d754:	2600      	movs	r6, #0
 800d756:	e0e5      	b.n	800d924 <__kernel_rem_pio2+0x4ac>
 800d758:	2302      	movs	r3, #2
 800d75a:	9302      	str	r3, [sp, #8]
 800d75c:	e75c      	b.n	800d618 <__kernel_rem_pio2+0x1a0>
 800d75e:	f8db 3000 	ldr.w	r3, [fp]
 800d762:	b955      	cbnz	r5, 800d77a <__kernel_rem_pio2+0x302>
 800d764:	b123      	cbz	r3, 800d770 <__kernel_rem_pio2+0x2f8>
 800d766:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d76a:	f8cb 3000 	str.w	r3, [fp]
 800d76e:	2301      	movs	r3, #1
 800d770:	3201      	adds	r2, #1
 800d772:	f10b 0b04 	add.w	fp, fp, #4
 800d776:	461d      	mov	r5, r3
 800d778:	e755      	b.n	800d626 <__kernel_rem_pio2+0x1ae>
 800d77a:	1acb      	subs	r3, r1, r3
 800d77c:	f8cb 3000 	str.w	r3, [fp]
 800d780:	462b      	mov	r3, r5
 800d782:	e7f5      	b.n	800d770 <__kernel_rem_pio2+0x2f8>
 800d784:	1e62      	subs	r2, r4, #1
 800d786:	ab0c      	add	r3, sp, #48	; 0x30
 800d788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d790:	a90c      	add	r1, sp, #48	; 0x30
 800d792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d796:	e754      	b.n	800d642 <__kernel_rem_pio2+0x1ca>
	...
 800d7a4:	3ff00000 	.word	0x3ff00000
 800d7a8:	0800e358 	.word	0x0800e358
 800d7ac:	40200000 	.word	0x40200000
 800d7b0:	3ff00000 	.word	0x3ff00000
 800d7b4:	3e700000 	.word	0x3e700000
 800d7b8:	41700000 	.word	0x41700000
 800d7bc:	3fe00000 	.word	0x3fe00000
 800d7c0:	0800e318 	.word	0x0800e318
 800d7c4:	1e62      	subs	r2, r4, #1
 800d7c6:	ab0c      	add	r3, sp, #48	; 0x30
 800d7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7d0:	e7de      	b.n	800d790 <__kernel_rem_pio2+0x318>
 800d7d2:	a90c      	add	r1, sp, #48	; 0x30
 800d7d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	430a      	orrs	r2, r1
 800d7dc:	e790      	b.n	800d700 <__kernel_rem_pio2+0x288>
 800d7de:	3301      	adds	r3, #1
 800d7e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d7e4:	2900      	cmp	r1, #0
 800d7e6:	d0fa      	beq.n	800d7de <__kernel_rem_pio2+0x366>
 800d7e8:	9a08      	ldr	r2, [sp, #32]
 800d7ea:	18e3      	adds	r3, r4, r3
 800d7ec:	18a6      	adds	r6, r4, r2
 800d7ee:	aa20      	add	r2, sp, #128	; 0x80
 800d7f0:	1c65      	adds	r5, r4, #1
 800d7f2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d7f6:	9302      	str	r3, [sp, #8]
 800d7f8:	9b02      	ldr	r3, [sp, #8]
 800d7fa:	42ab      	cmp	r3, r5
 800d7fc:	da04      	bge.n	800d808 <__kernel_rem_pio2+0x390>
 800d7fe:	461c      	mov	r4, r3
 800d800:	e6b5      	b.n	800d56e <__kernel_rem_pio2+0xf6>
 800d802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d804:	2301      	movs	r3, #1
 800d806:	e7eb      	b.n	800d7e0 <__kernel_rem_pio2+0x368>
 800d808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d80a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d80e:	f7f2 fe81 	bl	8000514 <__aeabi_i2d>
 800d812:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d818:	46b3      	mov	fp, r6
 800d81a:	461c      	mov	r4, r3
 800d81c:	2700      	movs	r7, #0
 800d81e:	f04f 0800 	mov.w	r8, #0
 800d822:	f04f 0900 	mov.w	r9, #0
 800d826:	9b06      	ldr	r3, [sp, #24]
 800d828:	429f      	cmp	r7, r3
 800d82a:	dd06      	ble.n	800d83a <__kernel_rem_pio2+0x3c2>
 800d82c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d82e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d832:	e9c3 8900 	strd	r8, r9, [r3]
 800d836:	3501      	adds	r5, #1
 800d838:	e7de      	b.n	800d7f8 <__kernel_rem_pio2+0x380>
 800d83a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d83e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d842:	f7f2 fed1 	bl	80005e8 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4640      	mov	r0, r8
 800d84c:	4649      	mov	r1, r9
 800d84e:	f7f2 fd15 	bl	800027c <__adddf3>
 800d852:	3701      	adds	r7, #1
 800d854:	4680      	mov	r8, r0
 800d856:	4689      	mov	r9, r1
 800d858:	e7e5      	b.n	800d826 <__kernel_rem_pio2+0x3ae>
 800d85a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d85e:	e754      	b.n	800d70a <__kernel_rem_pio2+0x292>
 800d860:	ec47 6b10 	vmov	d0, r6, r7
 800d864:	f1ca 0000 	rsb	r0, sl, #0
 800d868:	f000 faae 	bl	800ddc8 <scalbn>
 800d86c:	ec57 6b10 	vmov	r6, r7, d0
 800d870:	4b9f      	ldr	r3, [pc, #636]	; (800daf0 <__kernel_rem_pio2+0x678>)
 800d872:	ee10 0a10 	vmov	r0, s0
 800d876:	2200      	movs	r2, #0
 800d878:	4639      	mov	r1, r7
 800d87a:	f7f3 f93b 	bl	8000af4 <__aeabi_dcmpge>
 800d87e:	b300      	cbz	r0, 800d8c2 <__kernel_rem_pio2+0x44a>
 800d880:	4b9c      	ldr	r3, [pc, #624]	; (800daf4 <__kernel_rem_pio2+0x67c>)
 800d882:	2200      	movs	r2, #0
 800d884:	4630      	mov	r0, r6
 800d886:	4639      	mov	r1, r7
 800d888:	f7f2 feae 	bl	80005e8 <__aeabi_dmul>
 800d88c:	f7f3 f95c 	bl	8000b48 <__aeabi_d2iz>
 800d890:	4605      	mov	r5, r0
 800d892:	f7f2 fe3f 	bl	8000514 <__aeabi_i2d>
 800d896:	4b96      	ldr	r3, [pc, #600]	; (800daf0 <__kernel_rem_pio2+0x678>)
 800d898:	2200      	movs	r2, #0
 800d89a:	f7f2 fea5 	bl	80005e8 <__aeabi_dmul>
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f7f2 fce7 	bl	8000278 <__aeabi_dsub>
 800d8aa:	f7f3 f94d 	bl	8000b48 <__aeabi_d2iz>
 800d8ae:	f104 0b01 	add.w	fp, r4, #1
 800d8b2:	ab0c      	add	r3, sp, #48	; 0x30
 800d8b4:	f10a 0a18 	add.w	sl, sl, #24
 800d8b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d8bc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d8c0:	e72b      	b.n	800d71a <__kernel_rem_pio2+0x2a2>
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	f7f3 f93f 	bl	8000b48 <__aeabi_d2iz>
 800d8ca:	ab0c      	add	r3, sp, #48	; 0x30
 800d8cc:	46a3      	mov	fp, r4
 800d8ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d8d2:	e722      	b.n	800d71a <__kernel_rem_pio2+0x2a2>
 800d8d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d8d6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d8da:	ab0c      	add	r3, sp, #48	; 0x30
 800d8dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d8e0:	f7f2 fe18 	bl	8000514 <__aeabi_i2d>
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	462b      	mov	r3, r5
 800d8e8:	f7f2 fe7e 	bl	80005e8 <__aeabi_dmul>
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	e9c9 0100 	strd	r0, r1, [r9]
 800d8f2:	463b      	mov	r3, r7
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fe76 	bl	80005e8 <__aeabi_dmul>
 800d8fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d900:	4604      	mov	r4, r0
 800d902:	460d      	mov	r5, r1
 800d904:	e713      	b.n	800d72e <__kernel_rem_pio2+0x2b6>
 800d906:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d90a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d90e:	f7f2 fe6b 	bl	80005e8 <__aeabi_dmul>
 800d912:	4602      	mov	r2, r0
 800d914:	460b      	mov	r3, r1
 800d916:	4620      	mov	r0, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	f7f2 fcaf 	bl	800027c <__adddf3>
 800d91e:	3601      	adds	r6, #1
 800d920:	4604      	mov	r4, r0
 800d922:	460d      	mov	r5, r1
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	429e      	cmp	r6, r3
 800d928:	dc01      	bgt.n	800d92e <__kernel_rem_pio2+0x4b6>
 800d92a:	45b0      	cmp	r8, r6
 800d92c:	daeb      	bge.n	800d906 <__kernel_rem_pio2+0x48e>
 800d92e:	ab48      	add	r3, sp, #288	; 0x120
 800d930:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d934:	e9c3 4500 	strd	r4, r5, [r3]
 800d938:	3f01      	subs	r7, #1
 800d93a:	f108 0801 	add.w	r8, r8, #1
 800d93e:	e6ff      	b.n	800d740 <__kernel_rem_pio2+0x2c8>
 800d940:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d942:	2b02      	cmp	r3, #2
 800d944:	dc0b      	bgt.n	800d95e <__kernel_rem_pio2+0x4e6>
 800d946:	2b00      	cmp	r3, #0
 800d948:	dc6e      	bgt.n	800da28 <__kernel_rem_pio2+0x5b0>
 800d94a:	d045      	beq.n	800d9d8 <__kernel_rem_pio2+0x560>
 800d94c:	9b07      	ldr	r3, [sp, #28]
 800d94e:	f003 0007 	and.w	r0, r3, #7
 800d952:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d956:	ecbd 8b02 	vpop	{d8}
 800d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d960:	2b03      	cmp	r3, #3
 800d962:	d1f3      	bne.n	800d94c <__kernel_rem_pio2+0x4d4>
 800d964:	ab48      	add	r3, sp, #288	; 0x120
 800d966:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d96a:	46d0      	mov	r8, sl
 800d96c:	46d9      	mov	r9, fp
 800d96e:	f1b9 0f00 	cmp.w	r9, #0
 800d972:	f1a8 0808 	sub.w	r8, r8, #8
 800d976:	dc64      	bgt.n	800da42 <__kernel_rem_pio2+0x5ca>
 800d978:	465c      	mov	r4, fp
 800d97a:	2c01      	cmp	r4, #1
 800d97c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d980:	dc7e      	bgt.n	800da80 <__kernel_rem_pio2+0x608>
 800d982:	2000      	movs	r0, #0
 800d984:	2100      	movs	r1, #0
 800d986:	f1bb 0f01 	cmp.w	fp, #1
 800d98a:	f300 8097 	bgt.w	800dabc <__kernel_rem_pio2+0x644>
 800d98e:	9b02      	ldr	r3, [sp, #8]
 800d990:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d994:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f040 8099 	bne.w	800dad0 <__kernel_rem_pio2+0x658>
 800d99e:	9b01      	ldr	r3, [sp, #4]
 800d9a0:	e9c3 5600 	strd	r5, r6, [r3]
 800d9a4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d9a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d9ac:	e7ce      	b.n	800d94c <__kernel_rem_pio2+0x4d4>
 800d9ae:	ab48      	add	r3, sp, #288	; 0x120
 800d9b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc60 	bl	800027c <__adddf3>
 800d9bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9c0:	f1bb 0f00 	cmp.w	fp, #0
 800d9c4:	daf3      	bge.n	800d9ae <__kernel_rem_pio2+0x536>
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	b113      	cbz	r3, 800d9d0 <__kernel_rem_pio2+0x558>
 800d9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	e9c3 0100 	strd	r0, r1, [r3]
 800d9d6:	e7b9      	b.n	800d94c <__kernel_rem_pio2+0x4d4>
 800d9d8:	2000      	movs	r0, #0
 800d9da:	2100      	movs	r1, #0
 800d9dc:	e7f0      	b.n	800d9c0 <__kernel_rem_pio2+0x548>
 800d9de:	ab48      	add	r3, sp, #288	; 0x120
 800d9e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	f7f2 fc48 	bl	800027c <__adddf3>
 800d9ec:	3c01      	subs	r4, #1
 800d9ee:	2c00      	cmp	r4, #0
 800d9f0:	daf5      	bge.n	800d9de <__kernel_rem_pio2+0x566>
 800d9f2:	9b02      	ldr	r3, [sp, #8]
 800d9f4:	b1e3      	cbz	r3, 800da30 <__kernel_rem_pio2+0x5b8>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fc:	9c01      	ldr	r4, [sp, #4]
 800d9fe:	e9c4 2300 	strd	r2, r3, [r4]
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800da0a:	f7f2 fc35 	bl	8000278 <__aeabi_dsub>
 800da0e:	ad4a      	add	r5, sp, #296	; 0x128
 800da10:	2401      	movs	r4, #1
 800da12:	45a3      	cmp	fp, r4
 800da14:	da0f      	bge.n	800da36 <__kernel_rem_pio2+0x5be>
 800da16:	9b02      	ldr	r3, [sp, #8]
 800da18:	b113      	cbz	r3, 800da20 <__kernel_rem_pio2+0x5a8>
 800da1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da1e:	4619      	mov	r1, r3
 800da20:	9b01      	ldr	r3, [sp, #4]
 800da22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800da26:	e791      	b.n	800d94c <__kernel_rem_pio2+0x4d4>
 800da28:	465c      	mov	r4, fp
 800da2a:	2000      	movs	r0, #0
 800da2c:	2100      	movs	r1, #0
 800da2e:	e7de      	b.n	800d9ee <__kernel_rem_pio2+0x576>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	e7e2      	b.n	800d9fc <__kernel_rem_pio2+0x584>
 800da36:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800da3a:	f7f2 fc1f 	bl	800027c <__adddf3>
 800da3e:	3401      	adds	r4, #1
 800da40:	e7e7      	b.n	800da12 <__kernel_rem_pio2+0x59a>
 800da42:	e9d8 4500 	ldrd	r4, r5, [r8]
 800da46:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800da4a:	4620      	mov	r0, r4
 800da4c:	4632      	mov	r2, r6
 800da4e:	463b      	mov	r3, r7
 800da50:	4629      	mov	r1, r5
 800da52:	f7f2 fc13 	bl	800027c <__adddf3>
 800da56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f2 fc09 	bl	8000278 <__aeabi_dsub>
 800da66:	4632      	mov	r2, r6
 800da68:	463b      	mov	r3, r7
 800da6a:	f7f2 fc07 	bl	800027c <__adddf3>
 800da6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800da72:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800da76:	ed88 7b00 	vstr	d7, [r8]
 800da7a:	f109 39ff 	add.w	r9, r9, #4294967295
 800da7e:	e776      	b.n	800d96e <__kernel_rem_pio2+0x4f6>
 800da80:	e9da 8900 	ldrd	r8, r9, [sl]
 800da84:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800da88:	4640      	mov	r0, r8
 800da8a:	4632      	mov	r2, r6
 800da8c:	463b      	mov	r3, r7
 800da8e:	4649      	mov	r1, r9
 800da90:	f7f2 fbf4 	bl	800027c <__adddf3>
 800da94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f2 fbea 	bl	8000278 <__aeabi_dsub>
 800daa4:	4632      	mov	r2, r6
 800daa6:	463b      	mov	r3, r7
 800daa8:	f7f2 fbe8 	bl	800027c <__adddf3>
 800daac:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dab0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dab4:	ed8a 7b00 	vstr	d7, [sl]
 800dab8:	3c01      	subs	r4, #1
 800daba:	e75e      	b.n	800d97a <__kernel_rem_pio2+0x502>
 800dabc:	ab48      	add	r3, sp, #288	; 0x120
 800dabe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac6:	f7f2 fbd9 	bl	800027c <__adddf3>
 800daca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dace:	e75a      	b.n	800d986 <__kernel_rem_pio2+0x50e>
 800dad0:	9b01      	ldr	r3, [sp, #4]
 800dad2:	9a01      	ldr	r2, [sp, #4]
 800dad4:	601d      	str	r5, [r3, #0]
 800dad6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dada:	605c      	str	r4, [r3, #4]
 800dadc:	609f      	str	r7, [r3, #8]
 800dade:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dae2:	60d3      	str	r3, [r2, #12]
 800dae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dae8:	6110      	str	r0, [r2, #16]
 800daea:	6153      	str	r3, [r2, #20]
 800daec:	e72e      	b.n	800d94c <__kernel_rem_pio2+0x4d4>
 800daee:	bf00      	nop
 800daf0:	41700000 	.word	0x41700000
 800daf4:	3e700000 	.word	0x3e700000

0800daf8 <__kernel_sin>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	ed2d 8b04 	vpush	{d8-d9}
 800db00:	eeb0 8a41 	vmov.f32	s16, s2
 800db04:	eef0 8a61 	vmov.f32	s17, s3
 800db08:	ec55 4b10 	vmov	r4, r5, d0
 800db0c:	b083      	sub	sp, #12
 800db0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800db16:	9001      	str	r0, [sp, #4]
 800db18:	da06      	bge.n	800db28 <__kernel_sin+0x30>
 800db1a:	ee10 0a10 	vmov	r0, s0
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f3 f812 	bl	8000b48 <__aeabi_d2iz>
 800db24:	2800      	cmp	r0, #0
 800db26:	d051      	beq.n	800dbcc <__kernel_sin+0xd4>
 800db28:	4622      	mov	r2, r4
 800db2a:	462b      	mov	r3, r5
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fd5a 	bl	80005e8 <__aeabi_dmul>
 800db34:	4682      	mov	sl, r0
 800db36:	468b      	mov	fp, r1
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4620      	mov	r0, r4
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f2 fd52 	bl	80005e8 <__aeabi_dmul>
 800db44:	a341      	add	r3, pc, #260	; (adr r3, 800dc4c <__kernel_sin+0x154>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	4680      	mov	r8, r0
 800db4c:	4689      	mov	r9, r1
 800db4e:	4650      	mov	r0, sl
 800db50:	4659      	mov	r1, fp
 800db52:	f7f2 fd49 	bl	80005e8 <__aeabi_dmul>
 800db56:	a33f      	add	r3, pc, #252	; (adr r3, 800dc54 <__kernel_sin+0x15c>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 fb8c 	bl	8000278 <__aeabi_dsub>
 800db60:	4652      	mov	r2, sl
 800db62:	465b      	mov	r3, fp
 800db64:	f7f2 fd40 	bl	80005e8 <__aeabi_dmul>
 800db68:	a33c      	add	r3, pc, #240	; (adr r3, 800dc5c <__kernel_sin+0x164>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	f7f2 fb85 	bl	800027c <__adddf3>
 800db72:	4652      	mov	r2, sl
 800db74:	465b      	mov	r3, fp
 800db76:	f7f2 fd37 	bl	80005e8 <__aeabi_dmul>
 800db7a:	a33a      	add	r3, pc, #232	; (adr r3, 800dc64 <__kernel_sin+0x16c>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fb7a 	bl	8000278 <__aeabi_dsub>
 800db84:	4652      	mov	r2, sl
 800db86:	465b      	mov	r3, fp
 800db88:	f7f2 fd2e 	bl	80005e8 <__aeabi_dmul>
 800db8c:	a337      	add	r3, pc, #220	; (adr r3, 800dc6c <__kernel_sin+0x174>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	f7f2 fb73 	bl	800027c <__adddf3>
 800db96:	9b01      	ldr	r3, [sp, #4]
 800db98:	4606      	mov	r6, r0
 800db9a:	460f      	mov	r7, r1
 800db9c:	b9eb      	cbnz	r3, 800dbda <__kernel_sin+0xe2>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4650      	mov	r0, sl
 800dba4:	4659      	mov	r1, fp
 800dba6:	f7f2 fd1f 	bl	80005e8 <__aeabi_dmul>
 800dbaa:	a325      	add	r3, pc, #148	; (adr r3, 800dc40 <__kernel_sin+0x148>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fb62 	bl	8000278 <__aeabi_dsub>
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	464b      	mov	r3, r9
 800dbb8:	f7f2 fd16 	bl	80005e8 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	f7f2 fb5a 	bl	800027c <__adddf3>
 800dbc8:	4604      	mov	r4, r0
 800dbca:	460d      	mov	r5, r1
 800dbcc:	ec45 4b10 	vmov	d0, r4, r5
 800dbd0:	b003      	add	sp, #12
 800dbd2:	ecbd 8b04 	vpop	{d8-d9}
 800dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbda:	4b1b      	ldr	r3, [pc, #108]	; (800dc48 <__kernel_sin+0x150>)
 800dbdc:	ec51 0b18 	vmov	r0, r1, d8
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f7f2 fd01 	bl	80005e8 <__aeabi_dmul>
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	ec41 0b19 	vmov	d9, r0, r1
 800dbec:	463b      	mov	r3, r7
 800dbee:	4640      	mov	r0, r8
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	f7f2 fcf9 	bl	80005e8 <__aeabi_dmul>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	ec51 0b19 	vmov	r0, r1, d9
 800dbfe:	f7f2 fb3b 	bl	8000278 <__aeabi_dsub>
 800dc02:	4652      	mov	r2, sl
 800dc04:	465b      	mov	r3, fp
 800dc06:	f7f2 fcef 	bl	80005e8 <__aeabi_dmul>
 800dc0a:	ec53 2b18 	vmov	r2, r3, d8
 800dc0e:	f7f2 fb33 	bl	8000278 <__aeabi_dsub>
 800dc12:	a30b      	add	r3, pc, #44	; (adr r3, 800dc40 <__kernel_sin+0x148>)
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	4606      	mov	r6, r0
 800dc1a:	460f      	mov	r7, r1
 800dc1c:	4640      	mov	r0, r8
 800dc1e:	4649      	mov	r1, r9
 800dc20:	f7f2 fce2 	bl	80005e8 <__aeabi_dmul>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 fb26 	bl	800027c <__adddf3>
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 fb1e 	bl	8000278 <__aeabi_dsub>
 800dc3c:	e7c4      	b.n	800dbc8 <__kernel_sin+0xd0>
 800dc3e:	bf00      	nop
 800dc40:	55555549 	.word	0x55555549
 800dc44:	3fc55555 	.word	0x3fc55555
 800dc48:	3fe00000 	.word	0x3fe00000
 800dc4c:	5acfd57c 	.word	0x5acfd57c
 800dc50:	3de5d93a 	.word	0x3de5d93a
 800dc54:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc58:	3e5ae5e6 	.word	0x3e5ae5e6
 800dc5c:	57b1fe7d 	.word	0x57b1fe7d
 800dc60:	3ec71de3 	.word	0x3ec71de3
 800dc64:	19c161d5 	.word	0x19c161d5
 800dc68:	3f2a01a0 	.word	0x3f2a01a0
 800dc6c:	1110f8a6 	.word	0x1110f8a6
 800dc70:	3f811111 	.word	0x3f811111

0800dc74 <fabs>:
 800dc74:	ec51 0b10 	vmov	r0, r1, d0
 800dc78:	ee10 2a10 	vmov	r2, s0
 800dc7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc80:	ec43 2b10 	vmov	d0, r2, r3
 800dc84:	4770      	bx	lr

0800dc86 <finite>:
 800dc86:	b082      	sub	sp, #8
 800dc88:	ed8d 0b00 	vstr	d0, [sp]
 800dc8c:	9801      	ldr	r0, [sp, #4]
 800dc8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dc92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dc96:	0fc0      	lsrs	r0, r0, #31
 800dc98:	b002      	add	sp, #8
 800dc9a:	4770      	bx	lr
 800dc9c:	0000      	movs	r0, r0
	...

0800dca0 <nan>:
 800dca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dca8 <nan+0x8>
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	00000000 	.word	0x00000000
 800dcac:	7ff80000 	.word	0x7ff80000

0800dcb0 <rint>:
 800dcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb2:	ec51 0b10 	vmov	r0, r1, d0
 800dcb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dcba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dcbe:	2e13      	cmp	r6, #19
 800dcc0:	ee10 4a10 	vmov	r4, s0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dcca:	dc58      	bgt.n	800dd7e <rint+0xce>
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	da2b      	bge.n	800dd28 <rint+0x78>
 800dcd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dcd4:	4302      	orrs	r2, r0
 800dcd6:	d023      	beq.n	800dd20 <rint+0x70>
 800dcd8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dcdc:	4302      	orrs	r2, r0
 800dcde:	4254      	negs	r4, r2
 800dce0:	4314      	orrs	r4, r2
 800dce2:	0c4b      	lsrs	r3, r1, #17
 800dce4:	0b24      	lsrs	r4, r4, #12
 800dce6:	045b      	lsls	r3, r3, #17
 800dce8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dcec:	ea44 0103 	orr.w	r1, r4, r3
 800dcf0:	4b32      	ldr	r3, [pc, #200]	; (800ddbc <rint+0x10c>)
 800dcf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dcf6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4630      	mov	r0, r6
 800dd00:	4639      	mov	r1, r7
 800dd02:	f7f2 fabb 	bl	800027c <__adddf3>
 800dd06:	e9cd 0100 	strd	r0, r1, [sp]
 800dd0a:	463b      	mov	r3, r7
 800dd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd10:	4632      	mov	r2, r6
 800dd12:	f7f2 fab1 	bl	8000278 <__aeabi_dsub>
 800dd16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800dd1e:	4639      	mov	r1, r7
 800dd20:	ec41 0b10 	vmov	d0, r0, r1
 800dd24:	b003      	add	sp, #12
 800dd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd28:	4a25      	ldr	r2, [pc, #148]	; (800ddc0 <rint+0x110>)
 800dd2a:	4132      	asrs	r2, r6
 800dd2c:	ea01 0702 	and.w	r7, r1, r2
 800dd30:	4307      	orrs	r7, r0
 800dd32:	d0f5      	beq.n	800dd20 <rint+0x70>
 800dd34:	0851      	lsrs	r1, r2, #1
 800dd36:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800dd3a:	4314      	orrs	r4, r2
 800dd3c:	d00c      	beq.n	800dd58 <rint+0xa8>
 800dd3e:	ea23 0201 	bic.w	r2, r3, r1
 800dd42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dd46:	2e13      	cmp	r6, #19
 800dd48:	fa43 f606 	asr.w	r6, r3, r6
 800dd4c:	bf0c      	ite	eq
 800dd4e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800dd52:	2400      	movne	r4, #0
 800dd54:	ea42 0306 	orr.w	r3, r2, r6
 800dd58:	4918      	ldr	r1, [pc, #96]	; (800ddbc <rint+0x10c>)
 800dd5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800dd5e:	4622      	mov	r2, r4
 800dd60:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fa88 	bl	800027c <__adddf3>
 800dd6c:	e9cd 0100 	strd	r0, r1, [sp]
 800dd70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd74:	4622      	mov	r2, r4
 800dd76:	462b      	mov	r3, r5
 800dd78:	f7f2 fa7e 	bl	8000278 <__aeabi_dsub>
 800dd7c:	e7d0      	b.n	800dd20 <rint+0x70>
 800dd7e:	2e33      	cmp	r6, #51	; 0x33
 800dd80:	dd07      	ble.n	800dd92 <rint+0xe2>
 800dd82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dd86:	d1cb      	bne.n	800dd20 <rint+0x70>
 800dd88:	ee10 2a10 	vmov	r2, s0
 800dd8c:	f7f2 fa76 	bl	800027c <__adddf3>
 800dd90:	e7c6      	b.n	800dd20 <rint+0x70>
 800dd92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dd96:	f04f 36ff 	mov.w	r6, #4294967295
 800dd9a:	40d6      	lsrs	r6, r2
 800dd9c:	4230      	tst	r0, r6
 800dd9e:	d0bf      	beq.n	800dd20 <rint+0x70>
 800dda0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dda4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800dda8:	bf1f      	itttt	ne
 800ddaa:	ea24 0101 	bicne.w	r1, r4, r1
 800ddae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ddb2:	fa44 f202 	asrne.w	r2, r4, r2
 800ddb6:	ea41 0402 	orrne.w	r4, r1, r2
 800ddba:	e7cd      	b.n	800dd58 <rint+0xa8>
 800ddbc:	0800e368 	.word	0x0800e368
 800ddc0:	000fffff 	.word	0x000fffff
 800ddc4:	00000000 	.word	0x00000000

0800ddc8 <scalbn>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	ec55 4b10 	vmov	r4, r5, d0
 800ddce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	b99a      	cbnz	r2, 800de00 <scalbn+0x38>
 800ddd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dddc:	4323      	orrs	r3, r4
 800ddde:	d036      	beq.n	800de4e <scalbn+0x86>
 800dde0:	4b39      	ldr	r3, [pc, #228]	; (800dec8 <scalbn+0x100>)
 800dde2:	4629      	mov	r1, r5
 800dde4:	ee10 0a10 	vmov	r0, s0
 800dde8:	2200      	movs	r2, #0
 800ddea:	f7f2 fbfd 	bl	80005e8 <__aeabi_dmul>
 800ddee:	4b37      	ldr	r3, [pc, #220]	; (800decc <scalbn+0x104>)
 800ddf0:	429e      	cmp	r6, r3
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	460d      	mov	r5, r1
 800ddf6:	da10      	bge.n	800de1a <scalbn+0x52>
 800ddf8:	a32b      	add	r3, pc, #172	; (adr r3, 800dea8 <scalbn+0xe0>)
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	e03a      	b.n	800de76 <scalbn+0xae>
 800de00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800de04:	428a      	cmp	r2, r1
 800de06:	d10c      	bne.n	800de22 <scalbn+0x5a>
 800de08:	ee10 2a10 	vmov	r2, s0
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fa34 	bl	800027c <__adddf3>
 800de14:	4604      	mov	r4, r0
 800de16:	460d      	mov	r5, r1
 800de18:	e019      	b.n	800de4e <scalbn+0x86>
 800de1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de1e:	460b      	mov	r3, r1
 800de20:	3a36      	subs	r2, #54	; 0x36
 800de22:	4432      	add	r2, r6
 800de24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800de28:	428a      	cmp	r2, r1
 800de2a:	dd08      	ble.n	800de3e <scalbn+0x76>
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	a120      	add	r1, pc, #128	; (adr r1, 800deb0 <scalbn+0xe8>)
 800de30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de34:	da1c      	bge.n	800de70 <scalbn+0xa8>
 800de36:	a120      	add	r1, pc, #128	; (adr r1, 800deb8 <scalbn+0xf0>)
 800de38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de3c:	e018      	b.n	800de70 <scalbn+0xa8>
 800de3e:	2a00      	cmp	r2, #0
 800de40:	dd08      	ble.n	800de54 <scalbn+0x8c>
 800de42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800de4e:	ec45 4b10 	vmov	d0, r4, r5
 800de52:	bd70      	pop	{r4, r5, r6, pc}
 800de54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800de58:	da19      	bge.n	800de8e <scalbn+0xc6>
 800de5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800de5e:	429e      	cmp	r6, r3
 800de60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800de64:	dd0a      	ble.n	800de7c <scalbn+0xb4>
 800de66:	a112      	add	r1, pc, #72	; (adr r1, 800deb0 <scalbn+0xe8>)
 800de68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1e2      	bne.n	800de36 <scalbn+0x6e>
 800de70:	a30f      	add	r3, pc, #60	; (adr r3, 800deb0 <scalbn+0xe8>)
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	f7f2 fbb7 	bl	80005e8 <__aeabi_dmul>
 800de7a:	e7cb      	b.n	800de14 <scalbn+0x4c>
 800de7c:	a10a      	add	r1, pc, #40	; (adr r1, 800dea8 <scalbn+0xe0>)
 800de7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0b8      	beq.n	800ddf8 <scalbn+0x30>
 800de86:	a10e      	add	r1, pc, #56	; (adr r1, 800dec0 <scalbn+0xf8>)
 800de88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de8c:	e7b4      	b.n	800ddf8 <scalbn+0x30>
 800de8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de92:	3236      	adds	r2, #54	; 0x36
 800de94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800de9c:	4620      	mov	r0, r4
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <scalbn+0x108>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	e7e8      	b.n	800de76 <scalbn+0xae>
 800dea4:	f3af 8000 	nop.w
 800dea8:	c2f8f359 	.word	0xc2f8f359
 800deac:	01a56e1f 	.word	0x01a56e1f
 800deb0:	8800759c 	.word	0x8800759c
 800deb4:	7e37e43c 	.word	0x7e37e43c
 800deb8:	8800759c 	.word	0x8800759c
 800debc:	fe37e43c 	.word	0xfe37e43c
 800dec0:	c2f8f359 	.word	0xc2f8f359
 800dec4:	81a56e1f 	.word	0x81a56e1f
 800dec8:	43500000 	.word	0x43500000
 800decc:	ffff3cb0 	.word	0xffff3cb0
 800ded0:	3c900000 	.word	0x3c900000

0800ded4 <_init>:
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded6:	bf00      	nop
 800ded8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deda:	bc08      	pop	{r3}
 800dedc:	469e      	mov	lr, r3
 800dede:	4770      	bx	lr

0800dee0 <_fini>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	bf00      	nop
 800dee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee6:	bc08      	pop	{r3}
 800dee8:	469e      	mov	lr, r3
 800deea:	4770      	bx	lr
